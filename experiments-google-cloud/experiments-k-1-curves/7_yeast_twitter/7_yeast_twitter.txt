Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2978169918060303
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.124815601766179;  // std dev = 0.442, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04684761055263828;  // std dev = 0.245, 43.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.21947341221095448;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.036679212384254097;  // std dev = 2.116, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5757740100434251;  // std dev = 0.230, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6731303773666394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05758257921149465;  // std dev = 1.630, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | | else return -0.007659702842314385;  // std dev = 1.819, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5249288843653025;  // std dev = 0.908, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11604589194554873;  // std dev = 0.164, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.11797963153163751;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13965155782842759;  // std dev = 0.087, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3183446101175114;  // std dev = 0.246, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.29777458791768907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29777458791768907;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.67422089683728;  // std dev = 0.147, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09926574680583039;  // std dev = 0.889, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   | | else return 0.011164485973506765;  // std dev = 0.288, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07986649753881728;  // std dev = 1.217, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23945090558509782;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5859583796276614;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12075262250085614;  // std dev = 0.135, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10944772940373054;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23270262689226384;  // std dev = 1.020, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.10135792238412857;  // std dev = 1.036, 46.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027906599466937097;  // std dev = 0.883, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18065227729610625;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, E) )
%   | | then return 0.164125680307304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03597277862630701;  // std dev = 0.151, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0448881467322966;  // std dev = 0.667, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0.024942559969357306;  // std dev = 1.169, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1242646229597995;  // std dev = 0.225, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23417956935054554;  // std dev = 0.279, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09201736531922512;  // std dev = 0.103, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47033138647486705;  // std dev = 0.335, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08701972441030684;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13280220572629162;  // std dev = 0.913, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.1373020237407533;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08278048813590455;  // std dev = 0.007, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07956981574384797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.05726608656423527;  // std dev = 0.224, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.028166868773030384;  // std dev = 0.512, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05599613371907337;  // std dev = 0.890, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning 8.79314374923706
Parameter learned model CLL:-0.104399 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 6, 0], 'false,false': [0.442, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [7.3e-08, 0, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 39, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 14, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [2.116, 23, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.23, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.63, 47, 4], 'false,false,false,false': [1.819, 26, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.908, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.164, 38, 0], 'false,true,false,false': [0.007, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.087, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.246, 0, 18], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.147, 0, 5], 'false,false,true,false': [0.889, 69, 1], 'false,false,false': [0.288, 11, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.217, 21, 19], 'false,true': [7.45e-09, 0, 5], 'false,false,true': [0.4, 0, 7], 'false,false,false,true': [0.135, 15, 0], 'false,false,false,false': [0.058, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.02, 1, 26], 'true,false': [1.036, 45, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.883, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.03, 0, 19], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 27, 4], 'false,false,false,true': [0.667, 22, 3], 'false,false,false,false': [1.169, 14, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.225, 1, 19], 'false,true,true,true': [0.279, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 41, 0], 'false,false,true': [0.335, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.058, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.913, 1, 21], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.007, 33, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.224, 5, 1], 'false,true': [0.512, 16, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.89, 9, 4]}]
{'': [0.22837370242214644, 0.20659722222222232], 'true': [3.089316242435218e-16, 0.02172839506172844], 'false': [0.2222222222222221, 0.1955555555555554], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'true,false': [3.027880976250427e-17, 0.07638888888888894], 'true,false,false': [-1.0092936587501423e-17, 0.0], 'false,true,true': [0.0, 0.0]}
{'': [2.6645352591003756e-16, 0.09043983927569128], 'false': [0.06023055486455797, 0.11847655542119348], 'false,false': [3.96508223080413e-18, 0.16257187785358285], 'false,false,false': [0.25, 0.15438662835023015], 'false,true': [nan, 0.06023055486455797], 'false,false,true': [nan, 3.96508223080413e-18]}
{'': [0.0032990998515276303, 0.08656370745717923], 'false': [nan, 0.0865637074571792], 'false,false': [0.0, 0.07420873721480886], 'false,false,false': [0.05208550295444179, 0.11024901357059826], 'true': [0.0031235178590860837, 0.0034670864276085678], 'true,false': [0.0, 0.0], 'true,true': [0.0031235178590860837, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.026568287435480956, 0.0006605564199832301], 'false': [0.0006268813453956052, 0.0003622213505366327], 'false,true': [nan, 0.0006268813453956001], 'false,true,false': [0.0007075731484123695, 1.0319101679809318e-05], 'false,false': [nan, 0.0003622213505366327], 'false,false,false': [nan, 0.0003622213505366327]}
{'': [0.003215472768343891, 0.0559949542823839], 'false': [0.0, 0.05360888058614158], 'false,false': [0.0480451434062582, 0.08275421865430703], 'false,false,true': [0.004318215215203214, 0.011283056226952649], 'true': [0.003371840364715569, 0.0], 'false,true': [0.0, nan]}
{'': [0.03700087568393738, 0.08400923691180305], 'false': [1.1102230246251566e-17, 0.092150267893185], 'false,false': [0.02288524209350789, 0.0009246605460684412], 'true': [nan, 0.03700087568393741], 'true,false': [nan, 0.03700087568393738], 'false,false,false': [0.0012061132922359479, 0.00037569725582838054]}
{'': [0.054949358762328745, 0.052009694467527165], 'true': [0.03850607797016483, 0.023325450131435735], 'false': [nan, 0.05200969446752719], 'false,false': [nan, 0.052009694467527165], 'false,false,false': [nan, 0.052009694467527165]}
{'': [5.871657858007584e-05, 0.034759098112945974], 'false': [nan, 0.03475909811294593], 'false,false': [0.02266627557289588, 0.04330427340408141], 'false,false,false': [0.017787055318568903, 0.07590977989325759], 'true': [4.815050441961253e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.05041300694741173, 0.033152155874702154], 'false': [0.013725735405099573, 0.06490872430754561], 'false,false': [0.01865691169195627, 0.00019630369078788666], 'false,true': [0.012930258094824168, 0.00025860116288931777], 'false,true,true': [0.012930258094824168, nan], 'false,false,false': [nan, 0.00019630369078788666]}
{'': [0.02439935728373023, 0.0346800502325151], 'false': [0.013800082258876193, 0.0609911512272662], 'false,false': [nan, 0.060991151227266185], 'false,false,false': [nan, 0.0609911512272662], 'true': [0.0347256240348722, 0.0013416062735463064], 'true,true': [0.037880811583619695, 0.0], 'true,false': [1.4576116056257349e-06, 0.00724814911507222], 'true,false,false': [0.0, 0.008385108776824614]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.506080865859985
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.8581489350995121;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995121;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.12144290163518157;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.736194001901998;  // std dev = 0.144, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.04081109272184224;  // std dev = 0.257, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else return -0.12770075042844756;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return -0.12770075042844756;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0805393112237268;  // std dev = 1.534, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.1676852169759469;  // std dev = 1.336, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.592553177874;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5512338157958413;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.7658902570856121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.7029346444045519;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5512338157958413;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.12229094513829777;  // std dev = 0.024, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.1250704538994723;  // std dev = 1.008, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07297885731244633;  // std dev = 1.578, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return -0.016248897496011026;  // std dev = 1.215, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5228738434178283;  // std dev = 0.140, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.11553637455203158;  // std dev = 0.054, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.10234516088957687;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return -0.1432772368977782;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.17125355034439466;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3043990538446782;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.29344433050889085;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.44786212501624734;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.474144283540326;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.295576802944285;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10422244504400745;  // std dev = 0.041, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.025418440521224342;  // std dev = 0.914, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02491541844538497;  // std dev = 1.202, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0.2601153151525686;  // std dev = 0.991, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.05774690618600437;  // std dev = 0.208, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.23832313762170032;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09382775455852732;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.26224326968676576;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.4604440868205555;  // std dev = 0.194, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6516818888335674;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11788243369114403;  // std dev = 0.062, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.12072480176523556;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.23351253515764264;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.19778151020326618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.28647399591015843;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.07755889406184155;  // std dev = 0.402, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return 0.03892714111685304;  // std dev = 0.987, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( follows(F, E), follows(A, F) )
%   | | | then return -0.10035840153205627;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.012104323394202438;  // std dev = 0.761, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then return 0.029193240408173383;  // std dev = 0.556, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.021280068593928548;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1927603174583236;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2030624980032942;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17545238390106482;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.24483037854214673;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.05942920920856668;  // std dev = 0.507, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.14686241729273614;  // std dev = 0.764, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tweets(J, G), recursion_accounttype(J, B) )
%   | | | then return 0.047288076816493274;  // std dev = 1.029, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1069541301130598;  // std dev = 0.070, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.0022109988853533887;  // std dev = 0.242, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.16895803210135038;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.14615720270415866;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25316100224032484;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2909143520688185;  // std dev = 0.413, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0903255886182129;  // std dev = 0.091, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.08157388075735471;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4646447326860055;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.10611768642993534;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.1859782010553424;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.139470903300552;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.35140310807093766;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1318050643869228;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08268054228827078;  // std dev = 0.016, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.05337670772868267;  // std dev = 0.077, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.24736089150807797;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09526049713672519;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.01066863645397824;  // std dev = 0.196, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.10805524495037694;  // std dev = 0.545, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
Inference time using transfer learning 9.565094709396362
Refined model CLL: -0.110536


******************************************
Best model found
******************************************
Results 

CLL : -0.106874 

AUC ROC : 0.993511 

AUC PR : 0.422525 

Precision : 0.337047 

Recall : 0.960317 

F1 : 0.498969 

Total Learning Time : 4.506080865859985 

Total Inference Time : 2.979921817779541 

Total revision time: 11.38907527923584
Best scored revision CLL: -0.104399


Results 

CLL : -0.106874 

AUC ROC : 0.993511 

AUC PR : 0.422525 

Precision : 0.337047 

Recall : 0.960317 

F1 : 0.498969 

Total Learning Time : 12.940718650817871 

Total Inference Time : 2.979921817779541 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7422831058502197
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.1637044906550679;  // std dev = 0.461, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7221784947435208;  // std dev = 0.088, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04184637958340269;  // std dev = 0.256, 79.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5373269569258905;  // std dev = 0.815, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1340931517754064;  // std dev = 3.266, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.573249383203717;  // std dev = 0.283, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6725349107094512;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5997741387310618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5546983587364334;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35469835873643335;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.031186529968966;  // std dev = 2.611, 95.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=11 */
%   | | | else return 0.07907493240143594;  // std dev = 2.806, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5376903213346548;  // std dev = 1.585, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11815850145913667;  // std dev = 0.132, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.1274767371040536;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16501123526483213;  // std dev = 0.187, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2817774565676855;  // std dev = 1.015, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0.37976338328434844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31937486472031695;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6279257750887128;  // std dev = 0.201, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10422727463093288;  // std dev = 1.181, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | else return 0.026884043171807273;  // std dev = 0.327, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02042399408716392;  // std dev = 1.982, 102.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25948014313818635;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4429709123386692;  // std dev = 1.437, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12968044425793288;  // std dev = 0.162, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.12432059719108976;  // std dev = 0.145, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2869834122428815;  // std dev = 0.654, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.09245325702764809;  // std dev = 1.090, 132.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0629117662670493;  // std dev = 1.536, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15745588536890112;  // std dev = 0.963, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return 0.195166937109313;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.052748621216272204;  // std dev = 0.156, 78.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01900801709470656;  // std dev = 0.950, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.09501187304654722;  // std dev = 1.819, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1775569825250362;  // std dev = 0.051, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.265647454423759;  // std dev = 0.399, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09021341580055385;  // std dev = 0.115, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42872176869420653;  // std dev = 0.577, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11962859224011903;  // std dev = 0.227, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12817207209442172;  // std dev = 1.406, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else return 0.14850164633608115;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08029221476610517;  // std dev = 0.024, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08612483640739847;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.05588831862479528;  // std dev = 0.222, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.0019787527036488873;  // std dev = 0.718, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05341045998902029;  // std dev = 1.482, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
Inference time using transfer learning 8.140178918838501
Parameter learned model CLL:-0.109371 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.46e-07, 0, 40], 'true,false,true': [6.14e-08, 59, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.461, 25, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.088, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 71, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 23, 0], 'false,false,false,true': [0.815, 1, 4], 'false,false,false,false': [3.266, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.283, 0, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.894, 1, 4], 'false,false,false,true': [2.611, 84, 11], 'false,false,false,false': [2.806, 36, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.585, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.132, 73, 0], 'false,true,false,false': [0.014, 13, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.015, 1, 32], 'true,false': [0.0, 0, 1], 'false,true,true': [0.057, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.201, 0, 14], 'false,false,true,false': [1.181, 121, 2], 'false,false,false': [0.327, 25, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.982, 69, 33], 'false,true': [0.062, 0, 8], 'false,false,true': [1.437, 2, 21], 'false,false,false,true': [0.162, 32, 0], 'false,false,false,false': [0.145, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.654, 0, 49], 'true,false': [1.09, 129, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.536, 22, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.963, 1, 32], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 70, 8], 'false,false,false,true': [0.95, 34, 10], 'false,false,false,false': [1.819, 20, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.051, 0, 33], 'false,true,true,true': [0.399, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.115, 99, 0], 'false,false,true': [0.577, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.227, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.406, 2, 35], 'true,true,false': [0.005, 0, 5], 'true,false,true': [0.024, 83, 0], 'true,false,false,true': [0.027, 13, 0], 'true,false,false,false': [0.222, 6, 1], 'false,true': [0.718, 23, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.482, 20, 11]}]
{'': [0.22583150907421914, 0.2151926932501672], 'true': [1.5099033134902129e-15, 0.012497997115846883], 'false': [0.21852237252861612, 0.21219135802469086], 'false,true': [-8.881784197001253e-17, 5.28677630773884e-18], 'true,false': [6.39789539614497e-17, 0.04750000000000004], 'true,false,false': [-3.0839528461809902e-18, 0.25], 'false,true,true': [-2.9605947323337506e-16, 0.0]}
{'': [0.0002341590882552766, 0.11815277109354182], 'false': [0.06560807174323877, 0.1589186503103771], 'false,false': [-2.413528314402514e-18, 0.19479195567411303], 'false,false,false': [0.13270932469165514, 0.18712509875389932], 'false,true': [nan, 0.06560807174323877], 'false,false,true': [nan, -2.413528314402514e-18]}
{'': [0.0027785773205441055, 0.11544103495127435], 'false': [nan, 0.11544103495127418], 'false,false': [0.10937499999999989, 0.10617708818759837], 'false,false,true': [0.0, 0.15999999999999998], 'false,false,false': [0.07178080327644826, 0.16756789485917234], 'true': [0.0028678375732148964, 0.0008470607902225869], 'true,true': [0.0028678375732148964, nan], 'true,false': [0.0, 0.0]}
{'': [0.03989823972210525, 0.0008732511998711794], 'false': [0.00021564357998969243, 0.0008116851208680984], 'false,false': [nan, 0.0008116851208680984], 'false,false,false': [nan, 0.0008116851208680984], 'false,true': [nan, 0.0002156435799896821], 'false,true,false': [0.00023827903773443763, 1.4832655156447136e-05]}
{'': [0.030566904807350772, 0.07056889719177124], 'false': [0.0004570272566426662, 0.06890974489180494], 'false,false': [0.05965297172930191, 0.10723456837087612], 'false,false,true': [0.002881459250669722, 0.01133613314582851], 'true': [0.031210785184276488, 0.0], 'false,true': [0.0004570272566426662, nan]}
{'': [0.03852201402954601, 0.09197928890463065], 'false': [0.0004853314207370202, 0.09740186018375026], 'false,false': [0.08982433053577492, 0.0009111321459477692], 'true': [nan, 0.038522014029546005], 'true,false': [nan, 0.03852201402954601], 'false,false,false': [0.0008151893018356754, 0.0010469619515548645]}
{'': [0.037351288031704594, 0.0737190279701678], 'false': [nan, 0.07371902797016777], 'false,false': [nan, 0.0737190279701678], 'false,false,false': [nan, 0.0737190279701678], 'true': [0.008741643094150677, 0.008995639362129545]}
{'': [0.02733361865061885, 0.0430843963399189], 'false': [nan, 0.04308439633991896], 'false,false': [0.02430521837047806, 0.059280742607026475], 'false,false,false': [0.020492090177151884, 0.10670862338300714], 'true': [0.02812008296536921, 0.0], 'true,false': [0.0, nan]}
{'': [0.0026508329027585616, 0.03463664679891393], 'false': [0.013763494054373458, 0.06892276327658343], 'false,false': [0.01957218970603965, 0.0012524718803693306], 'false,true': [0.013256552103693428, 0.00013445951416251876], 'false,true,true': [0.013256552103693428, nan], 'false,false,false': [nan, 0.0012524718803693306]}
{'': [0.023088696159916874, 0.0431294523693788], 'false': [0.015605224045165074, 0.07084751796702161], 'false,false': [nan, 0.07084751796702157], 'false,false,false': [nan, 0.07084751796702161], 'true': [0.0470820342527106, 0.0005358205064149523], 'true,true': [0.05339459412776599, 5.00096807824757e-06], 'true,false': [6.7946063772964944e-06, 0.00271309533785271], 'true,false,false': [5.7315645481062923e-05, 0.007050997068734279]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.647806882858276
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.08302753548872309;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7251843766857652;  // std dev = 0.146, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.5944734122109545;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.1398565154621286;  // std dev = 0.145, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1242580605066699;  // std dev = 3.106, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.45871766480579473;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5859815224154471;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6354297657748612;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5585308689541125;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11351150926598366;  // std dev = 0.014, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.04449046957002045;  // std dev = 1.418, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05076773334254139;  // std dev = 2.500, 48.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=11 */
%   | | | else return 0.29986145365072653;  // std dev = 1.580, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.45058321577073335;  // std dev = 0.284, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.48309241230162014;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6988109494421179;  // std dev = 0.146, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10493674589195999;  // std dev = 0.048, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.10440302828263001;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.14593758191424405;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.17302415879278396;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.26224835090792636;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3336313230306635;  // std dev = 0.002, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.011100349658711494;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3326675897807003;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5098289787998675;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3157443000043303;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09328163361811803;  // std dev = 0.012, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.031110385591983425;  // std dev = 1.164, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.01544132627108545;  // std dev = 1.974, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return 0.1893180267256357;  // std dev = 1.253, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26902635167560746;  // std dev = 0.015, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( tweets(A, E) )
%   | | then return -0.046370209861896654;  // std dev = 0.147, 65.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=5 */
%   | | else return -0.09199762477411666;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.2936374487148349;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25324492220497596;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2633144652217384;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5177602871542621;  // std dev = 0.202, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1273449727885621;  // std dev = 0.066, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return -0.13741835751444673;  // std dev = 0.351, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.21510402316542224;  // std dev = 0.001, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(D, A) )
%   | | then return 0.2605030330017266;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2154930825342346;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.47346632520254756;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08452214258104442;  // std dev = 0.005, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.19968631386687855;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20951879610562715;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08299912563351763;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 9.733208543531959E-4;  // std dev = 1.937, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18179812953496347;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.07446922085877994;  // std dev = 0.009, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.037967429274573986;  // std dev = 0.265, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return -0.019064335459854573;  // std dev = 1.232, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return -0.08470142257654255;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.29475491015345656;  // std dev = 0.304, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11626548161768088;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.001441887231391528;  // std dev = 0.878, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.08067628932442904;  // std dev = 1.254, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.16168331360847205;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.0875678920335636;  // std dev = 0.400, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.024625268938237868;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.36340020151742625;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07290314479780488;  // std dev = 0.006, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3111927591794103;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.39045311093229;  // std dev = 0.159, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.10999102271638289;  // std dev = 0.034, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.21032825352238768;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.09999454319533811;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.24823193038763652;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1482577676651854;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06539459186628588;  // std dev = 0.034, 89.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=1 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | then return 0.2094641104599524;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09440651654202145;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, J) )
%   | | then return -0.09395929469128224;  // std dev = 0.127, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.035585227998660596;  // std dev = 1.038, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.06595964512196481;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
Inference time using transfer learning 12.111184120178223
Refined model CLL: -0.10577


******************************************
Best model found
******************************************
Results 

CLL : -0.102066 

AUC ROC : 0.992807 

AUC PR : 0.339215 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 4.647806882858276 

Total Inference Time : 6.904841661453247 

Total revision time: 17.827452182769775
Best scored revision CLL: -0.10577


Results 

CLL : -0.102066 

AUC ROC : 0.992807 

AUC PR : 0.339215 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 19.379095554351807 

Total Inference Time : 6.904841661453247 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.14520525932312
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8248156017661792;  // std dev = 1.390, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.23592671287729014;  // std dev = 0.485, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7283707429078842;  // std dev = 0.077, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.057012793803604016;  // std dev = 0.232, 112.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1024285225849193;  // std dev = 0.840, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5825407516083486;  // std dev = 0.828, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15623085102211942;  // std dev = 4.089, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5543396559693281;  // std dev = 1.059, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5973940486714451;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4365206562438841;  // std dev = 0.929, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5793930633953829;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5613920781193206;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038929240772355996;  // std dev = 3.182, 153.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=16 */
%   | | | else return 0.04214015927353018;  // std dev = 3.632, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5162828372528808;  // std dev = 2.554, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1156117253749176;  // std dev = 0.125, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.12228091781867813;  // std dev = 0.011, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16389009159704446;  // std dev = 0.257, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2859716111332836;  // std dev = 1.464, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return 0.36196093260774553;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3023255690453922;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3661284170332184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.601065103961463;  // std dev = 1.053, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.10841435910403245;  // std dev = 1.199, 145.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=2 */
%   | | else return 0.05809726525020333;  // std dev = 0.332, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02910159886932708;  // std dev = 2.219, 142.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=46 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24884196042606893;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5303100664389911;  // std dev = 0.740, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12787106984622576;  // std dev = 0.216, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.12741571606832053;  // std dev = 0.205, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25715700840813666;  // std dev = 1.817, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return -0.09479156559840195;  // std dev = 1.068, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02930849032358244;  // std dev = 1.879, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1960026229010483;  // std dev = 0.066, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.19342739205823212;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05818195492627998;  // std dev = 0.158, 102.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03231286042921918;  // std dev = 1.632, 73.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=16 */
%   | | | else return 0.0698131648943828;  // std dev = 2.160, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12830279507281395;  // std dev = 0.234, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2591292779288387;  // std dev = 0.542, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0870204107544961;  // std dev = 0.103, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39705846395811956;  // std dev = 0.599, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12148849099519483;  // std dev = 0.235, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16598309795113908;  // std dev = 1.170, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.16434784430657917;  // std dev = 0.245, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.07875605977635934;  // std dev = 0.021, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08456864307291914;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.05542508288660607;  // std dev = 0.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.010200386241300175;  // std dev = 1.013, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.040385038046743565;  // std dev = 1.691, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
Inference time using transfer learning 7.831299066543579
Parameter learned model CLL:-0.110438 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.39, 2, 58], 'true,false,true': [8.69e-08, 102, 0], 'true,false,false,true': [4.08e-08, 39, 0], 'true,false,false,false': [0.816, 1, 2], 'false,true,true,true': [0.964, 1, 13], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.485, 28, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.077, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.232, 103, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.84, 36, 1], 'false,false,false,true': [0.828, 1, 5], 'false,false,false,false': [4.089, 58, 28]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.059, 1, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.051, 0, 2], 'true,false,false': [0.929, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.062, 0, 4], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.182, 137, 16], 'false,false,false,false': [3.632, 68, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.554, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.125, 88, 0], 'false,true,false,false': [0.011, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.257, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.464, 2, 47], 'true,false': [0.0, 0, 1], 'false,true,true': [0.005, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.053, 1, 22], 'false,false,true,false': [1.199, 143, 2], 'false,false,false': [0.332, 33, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.219, 96, 46], 'false,true': [0.055, 0, 13], 'false,false,true': [0.74, 0, 34], 'false,false,false,true': [0.216, 53, 0], 'false,false,false,false': [0.205, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.817, 3, 73], 'true,false': [1.068, 149, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.879, 42, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.066, 0, 48], 'true,false,true': [0.002, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 93, 9], 'false,false,false,true': [1.632, 57, 16], 'false,false,false,false': [2.16, 33, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.234, 3, 48], 'false,true,true,true': [0.542, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 140, 0], 'false,false,true': [0.599, 0, 28], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.235, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.17, 1, 49], 'true,true,false': [0.245, 0, 9], 'true,false,true': [0.021, 103, 0], 'true,false,false,true': [0.027, 22, 0], 'true,false,false,false': [0.317, 13, 2], 'false,true': [1.013, 35, 16], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.691, 30, 17]}]
{'': [0.20761245674740525, 0.2289281997918849], 'false': [0.22222222222222174, 0.2350617283950612], 'false,true': [0.055363321799307655, 2.5069552168955147e-17], 'true': [0.03222222222222181, 0.013695987654320908], 'false,true,true': [0.06632653061224467, 1.4802973661668753e-16], 'true,false': [7.401486830834377e-17, 0.04535147392290247], 'true,false,false': [4.2700885562506023e-17, 0.22222222222222224]}
{'': [0.00011818481301148153, 0.1195505933516087], 'false': [0.05359338770678403, 0.1650842183630674], 'false,false': [0.01907069735244061, 0.20027028962686017], 'false,false,false': [0.1141873858181049, 0.1944234563523538], 'false,true': [nan, 0.05359338770678403], 'false,false,true': [nan, 0.01907069735244061]}
{'': [0.04131661054438201, 0.10877555227894015], 'false': [nan, 0.1087755522789401], 'false,false': [0.0004284766557475127, 0.09907801480534743], 'false,false,false': [0.06618993424322962, 0.15338086620561117], 'true': [0.02670819193963397, 0.11295244486874575], 'true,false': [0.0012961418836360816, 0.14370115043266096], 'true,true': [0.02670819193963397, nan], 'false,false,true': [0.0009721064127269918, 6.344131569286608e-17]}
{'': [0.06725886257783632, 0.0009855365968650018], 'false': [0.00015125084350956397, 0.000985673287643595], 'false,false': [nan, 0.000985673287643595], 'false,false,false': [nan, 0.000985673287643595], 'false,true': [nan, 0.00015125084350955993], 'false,true,false': [0.00017889555001673885, 5.08951519925552e-06]}
{'': [0.04296710132278177, 0.08292216369363273], 'false': [0.000339174312171776, 0.08260992933659796], 'false,false': [0.07463877638952747, 0.10992036550484363], 'false,false,true': [0.04824956502077673, 0.00991211858338311], 'true': [0.043728493402051066, 0.0], 'false,true': [3.01870599282994e-06, 0.0]}
{'': [0.034688134167652145, 0.08663095620158351], 'false': [0.0002346516038440434, 0.09224442032170886], 'false,false': [0.016090703419386534, 0.0010053380648120543], 'true': [nan, 0.034688134167651964], 'true,false': [nan, 0.034688134167652145], 'false,false,false': [0.0008792380979046636, 0.0011961645637906995]}
{'': [0.047007074534383186, 0.05983658491735128], 'false': [nan, 0.05983658491735127], 'false,false': [nan, 0.05983658491735128], 'false,false,false': [nan, 0.05983658491735128], 'true': [0.043423174324139245, 0.00750975839109289]}
{'': [8.817669590164722e-05, 0.046201674042634124], 'false': [nan, 0.04620167404263417], 'false,false': [0.024905701810266807, 0.06164020677368498], 'false,false,false': [0.0364774398754508, 0.09151742050038232], 'true': [9.153693371607059e-05, 1.1644470174487775e-06], 'true,false': [1.1644470174487775e-06, nan]}
{'': [0.054635207358990495, 0.03411795912449351], 'false': [0.013505488947083718, 0.06676092749502383], 'false,false': [0.012802934606475969, 0.0010818040241408005], 'false,true': [0.017255771689134, 7.59999006602793e-05], 'false,true,true': [0.017255771689134, nan], 'false,false,false': [nan, 0.0010818040241408005]}
{'': [0.020036722257199362, 0.039865453646758524], 'false': [0.02010440862415423, 0.0608341389857755], 'false,false': [nan, 0.0608341389857754], 'false,false,false': [nan, 0.0608341389857755], 'true': [0.02420093815417443, 0.0007887333451103888], 'true,true': [0.027359615684887775, 0.0066504635023451174], 'true,false': [4.375388537297633e-06, 0.0029457096319402193], 'true,false,false': [3.4240245479534206e-05, 0.006710847537289812]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.304706335067749
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.08124500429442717;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7254046383136137;  // std dev = 0.205, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109543;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1271449627019369;  // std dev = 0.023, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return -0.017160041845528037;  // std dev = 1.935, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.08578487415644485;  // std dev = 2.070, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.18682820774032838;  // std dev = 3.224, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5539013352212891;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.35536643674628426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.6572387007297835;  // std dev = 0.146, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5726899471319241;  // std dev = 0.059, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7229237685405278;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11826230024645665;  // std dev = 0.071, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0746001047465597;  // std dev = 2.389, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.1475296030625049;  // std dev = 3.012, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.41495988412741097;  // std dev = 0.027, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.46680171834956075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3006202218052564;  // std dev = 1.267, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.33903157436766307;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.6897768493575015;  // std dev = 0.238, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10569763162137355;  // std dev = 0.054, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.10686985405991459;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.17713835649573184;  // std dev = 0.326, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.32029535739131;  // std dev = 6.32e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.22738010716234178;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.3665536992534688;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5398080903758371;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33050518643766214;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4838723756599332;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09633403095973159;  // std dev = 0.060, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.07531243313881389;  // std dev = 1.522, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.08761681626140772;  // std dev = 2.527, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26087064156664636;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.05871657632948169;  // std dev = 0.982, 81.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=5 */
%   | | | else return -0.08399304263135902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08685285904495631;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3100495326034061;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24941989280241716;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.34299273478330045;  // std dev = 1.148, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.46425228169712135;  // std dev = 0.947, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.13106432159710124;  // std dev = 0.037, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21500965888745704;  // std dev = 0.024, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, E) )
%   | | | then return -0.07901944792619202;  // std dev = 0.007, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.05399198360977888;  // std dev = 0.293, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.03360788868606511;  // std dev = 0.996, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return -0.06976922140441236;  // std dev = 0.345, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2963268750190087;  // std dev = 1.170, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.1265125541643706;  // std dev = 0.059, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.017536586089371003;  // std dev = 0.798, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.04538426670413659;  // std dev = 1.489, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.17547507261174553;  // std dev = 0.005, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.08334155599841539;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.28220145680458303;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), tweets(F, H) )
%   | | then return -0.0480447592438167;  // std dev = 0.105, 127.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=10 */
%   | | else return -0.20425519397165873;  // std dev = 0.671, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.28373325493407225;  // std dev = 0.295, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.11099249204820352;  // std dev = 0.054, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0669225676416117;  // std dev = 0.848, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.024204402750799398;  // std dev = 1.565, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.0896185273560555;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1597299579144149;  // std dev = 0.051, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.2332776662645335;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.026564668483452476;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15561501604088493;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.36783018788917426;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07402019666812212;  // std dev = 0.007, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3261369022237635;  // std dev = 0.096, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.11874580941350706;  // std dev = 0.036, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11420115445076913;  // std dev = 0.996, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.0027344882053949695;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1891582518635094;  // std dev = 0.078, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06609360654000647;  // std dev = 0.035, 116.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14574196680932883;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.19963974890662434;  // std dev = 0.101, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09148969414902805;  // std dev = 0.048, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01825656882593981;  // std dev = 0.551, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.07947787683140389;  // std dev = 1.194, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
Inference time using transfer learning 8.988455772399902
Refined model CLL: -0.105194


******************************************
Best model found
******************************************
Results 

CLL : -0.103606 

AUC ROC : 0.993044 

AUC PR : 0.367892 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 10.304706335067749 

Total Inference Time : 8.340059041976929 

Total revision time: 27.197657346725464
Best scored revision CLL: -0.105194


Results 

CLL : -0.103606 

AUC ROC : 0.993044 

AUC PR : 0.367892 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 28.749300718307495 

Total Inference Time : 8.340059041976929 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.3031961917877197
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.11243930019460538;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.19148226843284563;  // std dev = 0.471, 57.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6804236116199848;  // std dev = 1.708, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04761566007008354;  // std dev = 0.249, 148.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07398573678073134;  // std dev = 1.284, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7305483838299364;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13464670851345098;  // std dev = 4.619, 116.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5505459374914841;  // std dev = 1.233, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6408378114175369;  // std dev = 0.107, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5663214446559566;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5953274199698436;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5649871590047147;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.001767156778885088;  // std dev = 3.973, 178.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=26 */
%   | | | else return 0.04589254373411255;  // std dev = 3.850, 96.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5489404519550396;  // std dev = 2.099, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12113020963540758;  // std dev = 0.093, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return -0.1252942182001036;  // std dev = 0.000544, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16736527734566936;  // std dev = 0.257, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24303066851232966;  // std dev = 2.144, 68.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=63 */
%   | else return 0.4349497535992062;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2969643062443439;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.44616604220461564;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6326719641353142;  // std dev = 0.313, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10293064264873357;  // std dev = 1.655, 202.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=4 */
%   | | else return 0.035006086540303454;  // std dev = 0.315, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027033513648993274;  // std dev = 2.692, 205.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2509381247768822;  // std dev = 0.130, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.501628511702297;  // std dev = 1.302, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13040600300418276;  // std dev = 0.202, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.13087465842071702;  // std dev = 0.160, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2564697169755681;  // std dev = 2.179, 103.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=99 */
%   | else return -0.08963225232655796;  // std dev = 1.475, 195.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08403681865623379;  // std dev = 1.853, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18329939550488994;  // std dev = 0.992, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.23382879870249285;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05909133855284437;  // std dev = 0.135, 171.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005770706508351661;  // std dev = 1.809, 87.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=22 */
%   | | | else return 0.06414247399936276;  // std dev = 2.221, 61.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1586370810519704;  // std dev = 0.166, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27905131265521144;  // std dev = 0.768, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09295835115324391;  // std dev = 0.118, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35754256502939763;  // std dev = 1.184, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1177204541896398;  // std dev = 0.281, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17264645696599557;  // std dev = 1.190, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.08163971229894162;  // std dev = 0.823, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08377165338192681;  // std dev = 0.265, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09867845957465532;  // std dev = 0.014, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.02975559840290724;  // std dev = 0.829, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.010139953495387962;  // std dev = 1.189, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010953055520623327;  // std dev = 1.942, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
Inference time using transfer learning 8.376311540603638
Parameter learned model CLL:-0.112673 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 81], 'true,false,true': [0.0, 136, 0], 'true,false,false,true': [0.985, 33, 1], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.972, 1, 17], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.47e-08, 43, 0], 'false,false': [0.471, 38, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.708, 3, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.249, 134, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.284, 29, 2], 'false,false,false,true': [0.0, 0, 5], 'false,false,false,false': [4.619, 81, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.233, 2, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.107, 0, 2], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.136, 0, 5], 'false,false,true,false': [4.21e-08, 0, 9], 'false,false,false,true': [3.973, 152, 26], 'false,false,false,false': [3.85, 76, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.099, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.093, 142, 0], 'false,true,false,false': [0.000544, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.257, 95, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.144, 5, 63], 'true,false': [0.0, 0, 1], 'false,true,true': [0.011, 0, 13], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.313, 0, 31], 'false,false,true,false': [1.655, 198, 4], 'false,false,false': [0.315, 42, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.692, 139, 66], 'false,true': [0.13, 0, 16], 'false,false,true': [1.302, 1, 42], 'false,false,false,true': [0.202, 73, 0], 'false,false,false,false': [0.16, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.179, 4, 99], 'true,false': [1.475, 190, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.853, 29, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 66], 'true,false,true': [0.004, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.135, 157, 14], 'false,false,false,true': [1.809, 65, 22], 'false,false,false,false': [2.221, 41, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.166, 2, 64], 'false,true,true,true': [0.768, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 141, 0], 'false,false,true': [1.184, 1, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.281, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.19, 1, 69], 'true,true,false': [0.823, 1, 12], 'true,false,true': [0.265, 128, 0], 'true,false,false,true': [0.014, 30, 0], 'true,false,false,false': [0.829, 17, 3], 'false,true': [1.189, 44, 21], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.942, 44, 19]}]
{'': [0.22001847113506703, 0.2203708680462254], 'false': [0.21869822485207113, 0.2222222222222217], 'true': [-7.894919286223335e-16, 0.016754907024793233], 'false,true': [0.04338842975206614, 4.6474452193611206e-17], 'false,true,true': [0.05246913580246885, 0.0], 'true,false': [-6.204187490552346e-17, 0.06937499999999984], 'true,false,false': [0.02854671280276823, 0.22222222222222224]}
{'': [0.04109299999770294, 0.12358705572441422], 'false': [0.06179746089919959, 0.17122928315848884], 'false,false': [0.05321394090308053, 0.19036813081384027], 'false,false,false': [-8.881784197001253e-17, 0.18390014928692847], 'false,true': [nan, 0.06179746089919959], 'false,false,true': [nan, 0.05321394090308053]}
{'': [0.023454721841757013, 0.12139127984865532], 'false': [nan, 0.12139127984865469], 'false,false': [0.0015263914107931217, 0.11222272468246816], 'false,false,false': [0.08865975271137362, 0.1544367902897039], 'true': [0.025762295303003547, 0.0027770079541585674], 'true,true': [0.025762295303003547, nan], 'true,false': [0.005753321471450745, -4.4408920985006264e-17], 'false,false,true': [0.0036821257417285922, 1.9737298215558337e-16]}
{'': [0.035251293991442424, 0.000763908513756388], 'false': [5.3234021031144964e-05, 0.0006929652252704324], 'false,false': [nan, 0.0006929652252704324], 'false,false,false': [nan, 0.0006929652252704324], 'false,true': [nan, 5.3234021031144964e-05], 'false,true,false': [6.029560321190112e-05, 1.1362634613124674e-08]}
{'': [0.06716066638592517, 0.07988395917891046], 'false': [0.0014844039108570556, 0.07937320357949831], 'false,false': [0.07458937702169152, 0.09909613088523134], 'false,false,true': [0.003156898717688342, 0.013558452087062056], 'true': [0.06761451258917092, 0.0], 'false,true': [8.506111822664382e-06, 0.0]}
{'': [0.035340098029719956, 0.0846530909669709], 'false': [0.001050433024709474, 0.08880460814167498], 'false,false': [0.039423095519622746, 0.0005560245294706722], 'true': [nan, 0.03534009802972], 'true,false': [nan, 0.035340098029719956], 'false,false,false': [0.0005566012412768788, 0.0005549745770543756]}
{'': [0.05031799897457632, 0.0700429445854552], 'false': [nan, 0.0700429445854552], 'false,false': [nan, 0.0700429445854552], 'false,false,false': [nan, 0.0700429445854552], 'true': [0.04608374824813079, 0.011151810194386515]}
{'': [0.01434333313676115, 0.037751495617849844], 'false': [nan, 0.03775149561785016], 'false,false': [0.018289145608174004, 0.05662201520552935], 'false,false,false': [0.03762290473359525, 0.080845842363353], 'true': [0.014697204269885047, 9.435983445098273e-06], 'true,false': [9.435983445098273e-06, nan]}
{'': [0.02743104093107984, 0.03849132933324775], 'false': [0.021341312523832926, 0.06010389214781521], 'false,false': [0.03893749426066154, 0.000952584613769073], 'false,true': [0.02359857503327583, 9.904199288187194e-05], 'false,true,true': [0.02359857503327583, nan], 'false,false,false': [nan, 0.000952584613769073]}
{'': [0.02386038544446111, 0.0405096457093243], 'false': [0.021742678905578083, 0.059872053504430756], 'false,false': [nan, 0.05987205350443067], 'false,false,false': [nan, 0.059872053504430756], 'true': [0.026308936981694103, 0.004613388149986631], 'true,true': [0.020227665313284956, 0.05206923475769342], 'true,false': [0.0005491665761526892, 0.014902498436536604], 'true,false,false': [6.846959088763205e-06, 0.03439575917744836]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.243590354919434
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.1148240378734607;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.2792015666784597;  // std dev = 0.494, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7244814929232433;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7219281704122605;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.06443379628466427;  // std dev = 2.449, 125.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.03753077501790365;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.10769918211384205;  // std dev = 0.840, 41.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.12177702237787114;  // std dev = 4.420, 119.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5333309282322618;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5577703537480982;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5571404520417854;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5722857359828742;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.56534667090358;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11891351060858549;  // std dev = 0.140, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return 0.01742489283394026;  // std dev = 2.662, 67.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18591239501914927;  // std dev = 2.604, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.0970555766360383;  // std dev = 3.393, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.42335963388713277;  // std dev = 0.017, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.27560512638608314;  // std dev = 1.304, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.1277867872005778;  // std dev = 0.854, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4254843227915594;  // std dev = 0.117, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6894773656128507;  // std dev = 0.173, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.7446643023655877;  // std dev = 0.269, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11145876284088799;  // std dev = 0.128, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.11040867557566841;  // std dev = 0.034, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.16764499450040235;  // std dev = 0.164, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.328837828984923;  // std dev = 0.011, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.22824228151244288;  // std dev = 0.697, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5043241543877642;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3183714019849634;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.43205751920026514;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5942345364767974;  // std dev = 0.181, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10368945357362382;  // std dev = 0.226, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.025477567378081215;  // std dev = 1.859, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.12024825478936634;  // std dev = 2.699, 59.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2604119054977065;  // std dev = 0.009, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, E) )
%   | | then return -0.0497782343864759;  // std dev = 0.141, 113.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=9 */
%   | | else return -0.08951887779403904;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.29189386270918466;  // std dev = 0.118, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2535745843649711;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.30501596148965965;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.511812715015634;  // std dev = 0.364, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1360292546659346;  // std dev = 0.154, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12360624455544159;  // std dev = 0.363, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2132933129063521;  // std dev = 0.015, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.23316823605359546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4370982451656096;  // std dev = 0.154, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.08542185505652201;  // std dev = 0.075, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | | else return -0.16059244129313036;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.3224853728387789;  // std dev = 0.209, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12883277598091497;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02026653234564351;  // std dev = 1.399, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | | else return 0.046693216255912794;  // std dev = 1.680, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17759652400835302;  // std dev = 0.039, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else return 0.25002553659593607;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return -0.07658699959740983;  // std dev = 0.021, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.059041119035619274;  // std dev = 0.260, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.2972917241967845;  // std dev = 0.277, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08883740486481749;  // std dev = 0.094, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18990836022741292;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.005296632987832567;  // std dev = 1.405, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return 0.041320048598558916;  // std dev = 2.014, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15351873730451113;  // std dev = 2.79e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.039715370252208435;  // std dev = 0.942, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.17141837892730735;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.06711679845117409;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15294663133464348;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.19882380272968228;  // std dev = 0.856, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.0740182967031535;  // std dev = 0.006, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.35196604053784686;  // std dev = 0.066, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.14487751905972446;  // std dev = 0.036, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10108595777088664;  // std dev = 1.393, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return -0.12956486124942795;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.17390611669512762;  // std dev = 0.051, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.0639336156405371;  // std dev = 0.040, 164.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=3 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return 4.228057190013429E-4;  // std dev = 0.142, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2971656174760675;  // std dev = 0.118, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1272128490520963;  // std dev = 0.094, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.019747781407399707;  // std dev = 0.577, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.003670292841945372;  // std dev = 1.119, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
Inference time using transfer learning 11.024571418762207
Refined model CLL: -0.107918


******************************************
Best model found
******************************************
Results 

CLL : -0.104266 

AUC ROC : 0.993396 

AUC PR : 0.405631 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 8.243590354919434 

Total Inference Time : 9.977192401885986 

Total revision time: 28.790781259536743
Best scored revision CLL: -0.107918


Results 

CLL : -0.104266 

AUC ROC : 0.993396 

AUC PR : 0.405631 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 30.342424631118774 

Total Inference Time : 9.977192401885986 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.7444710731506348
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09307057709560969;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7043762600825432;  // std dev = 1.408, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04734298964101502;  // std dev = 0.247, 205.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06602246829001547;  // std dev = 1.804, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6527612675594449;  // std dev = 0.878, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13466225575070884;  // std dev = 4.921, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5636703929911268;  // std dev = 1.068, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.713452901205819;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.618186245458349;  // std dev = 0.173, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5879812054487635;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5659908236737647;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015006615057468737;  // std dev = 4.598, 259.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=34 */
%   | | | else return 0.06041386301619852;  // std dev = 4.081, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5136959767717746;  // std dev = 3.290, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12272301540319298;  // std dev = 0.208, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return -0.1275068842008202;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16535827611215245;  // std dev = 0.279, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29332606121126753;  // std dev = 1.653, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.40379576341630097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3058369926212746;  // std dev = 0.009, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.43433095279285383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6397399539702399;  // std dev = 0.320, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10173567464222508;  // std dev = 1.809, 266.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=5 */
%   | | else return 0.013489694132789906;  // std dev = 0.304, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03613695267759148;  // std dev = 3.090, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.251061488401294;  // std dev = 0.109, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47896795892362964;  // std dev = 2.012, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12913982508912572;  // std dev = 0.189, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.13166909755992162;  // std dev = 0.231, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2869659526538848;  // std dev = 1.433, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.09449437586873034;  // std dev = 2.009, 277.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03979543315821167;  // std dev = 2.354, 80.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15728305788530783;  // std dev = 1.702, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.21697350318197584;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048566144881800895;  // std dev = 0.149, 187.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0050762806773363735;  // std dev = 2.078, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | | else return 0.03190351685506361;  // std dev = 2.623, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18399777789112517;  // std dev = 0.060, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2573649128955767;  // std dev = 1.442, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09131027140201828;  // std dev = 0.117, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3730646456417865;  // std dev = 1.390, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12001605619442741;  // std dev = 0.266, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18584799486917078;  // std dev = 0.730, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16807744102555822;  // std dev = 0.386, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08192954960073592;  // std dev = 0.024, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09284406777106262;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.0136432201588347;  // std dev = 0.973, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.04048129146928282;  // std dev = 1.266, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19125170430795013;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01707395646320379;  // std dev = 2.042, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
Inference time using transfer learning 8.49937129020691
Parameter learned model CLL:-0.111461 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 159, 0], 'true,false,false,true': [1.379, 39, 2], 'true,false,false,false': [1.095, 3, 2], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 53, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.408, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 186, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.804, 51, 4], 'false,false,false,true': [0.878, 1, 8], 'false,false,false,false': [4.921, 93, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.068, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.173, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.12, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.598, 225, 34], 'false,false,false,false': [4.081, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.29, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.208, 184, 0], 'false,true,false,false': [0.008, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.279, 103, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.653, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.009, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.32, 0, 39], 'false,false,true,false': [1.809, 261, 5], 'false,false,false': [0.304, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.09, 154, 82], 'false,true': [0.109, 0, 22], 'false,false,true': [2.012, 2, 52], 'false,false,false,true': [0.189, 61, 0], 'false,false,false,false': [0.231, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.433, 2, 121], 'true,false': [2.009, 270, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.354, 52, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.702, 3, 83], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 168, 19], 'false,false,false,true': [2.078, 98, 28], 'false,false,false,false': [2.623, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 78], 'false,true,true,true': [1.442, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 229, 0], 'false,false,true': [1.39, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.266, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.73, 0, 85], 'true,true,false': [0.386, 0, 19], 'true,false,true': [0.024, 159, 0], 'true,false,false,true': [0.019, 29, 0], 'true,false,false,false': [0.973, 20, 4], 'false,true': [1.266, 36, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.042, 53, 21]}]
{'': [0.22633136094674802, 0.21760000000000082], 'true': [0.02725128832212642, 0.01913146936347402], 'false': [0.21631148854350374, 0.2190041658401121], 'false,true': [0.03698224852071082, 5.86532918669894e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.424437088198314e-16, 0.07939508506616241], 'true,false,false': [0.04640095181439618, 0.24000000000000005]}
{'': [0.02278280414362783, 0.11800157386393516], 'false': [0.06105792126153726, 0.16583786923916888], 'false,false': [0.05917673087997227, 0.19192546741354918], 'false,false,false': [0.0855635755741971, 0.18210993602967598], 'false,true': [nan, 0.06105792126153726], 'false,false,true': [nan, 0.05917673087997227]}
{'': [0.016470186476889317, 0.11641783949493016], 'false': [nan, 0.11641783949492945], 'false,false': [0.0007895132907919893, 0.10557145777901066], 'false,false,false': [0.08164300122121118, 0.16167130287820727], 'true': [0.016786729972240986, 0.00893575864790092], 'true,true': [0.016786729972240986, nan], 'true,false': [0.0161830054076119, 0.0037428404682891547], 'false,false,true': [0.0024178844530509855, -2.3684757858670006e-16]}
{'': [0.06641207085513338, 0.000753340132468348], 'false': [0.00019803718473025437, 0.000755770631206023], 'false,false': [nan, 0.000755770631206023], 'false,false,false': [nan, 0.000755770631206023], 'false,true': [nan, 0.00019803718473025838], 'false,true,false': [0.00023466588254892148, 1.7090944030923916e-06]}
{'': [0.033900055545926934, 0.07725400884601331], 'false': [0.0007526598211403826, 0.07628049396387053], 'false,false': [0.07238018088143613, 0.09246551899667779], 'false,false,true': [0.0026304375308107628, 0.012306128306139866], 'true': [0.03417314506611189, 0.0], 'false,true': [4.069107408122275e-06, 0.0]}
{'': [0.04045395978036917, 0.09109000662242217], 'false': [0.0005357037546584605, 0.09699651091915179], 'false,false': [0.07495421344998755, 0.000652307587405048], 'true': [nan, 0.040453959780368684], 'true,false': [nan, 0.04045395978036917], 'false,false,false': [0.0005829502603956341, 0.000705127571410023]}
{'': [0.046216796069032826, 0.0692388016354076], 'false': [nan, 0.06923880163540752], 'false,false': [nan, 0.0692388016354076], 'false,false,false': [nan, 0.0692388016354076], 'true': [0.016706072750271833, 0.014575901127701175]}
{'': [0.0329798007591837, 0.03984385162944863], 'false': [nan, 0.03984385162944866], 'false,false': [0.022138732492551084, 0.05416509688194341], 'false,false,false': [0.03427273781023274, 0.0839030120141398], 'true': [0.03366428533253563, 6.499096487513206e-05], 'true,false': [6.499096487513206e-05, nan]}
{'': [0.0035434600173988454, 0.03840010510752275], 'false': [0.0229228936060678, 0.0656061911667842], 'false,false': [0.04712970887518019, 0.0007360813708791719], 'false,true': [0.053287050864038864, 5.991054442800921e-05], 'false,true,true': [0.053287050864038864, nan], 'false,false,false': [nan, 0.0007360813708791719]}
{'': [0.020238457665430185, 0.04263717497926786], 'false': [0.026260503263794113, 0.05562384056643697], 'false,false': [0.0, 0.056328822139187086], 'false,false,false': [nan, 0.056328822139187086], 'true': [0.006601419406278414, 0.004971315451183788], 'true,true': [0.006270187674669286, 0.007825145866000915], 'true,false': [3.6413474509196077e-06, 0.01940746026622164], 'true,false,false': [1.2160498797258809e-05, 0.039411174775525526]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 34.27195143699646
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 0.189, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.12358622471783993;  // std dev = 0.134, 219.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7303146010548572;  // std dev = 0.204, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.39355420242446865;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7407589905315947;  // std dev = 0.196, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.127462189117374;  // std dev = 1.56e-07, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6527994776127476;  // std dev = 1.365, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.186440710460309;  // std dev = 2.759, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.1534823605167704;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.5629050089693995;  // std dev = 0.080, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.2284920264158731;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.698202269240514;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6072306479612677;  // std dev = 0.119, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5716110893238184;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5243795328280987;  // std dev = 0.932, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11394648775322834;  // std dev = 8.16e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0812703518966797;  // std dev = 2.564, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.13294583428988208;  // std dev = 3.399, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), tweets(D, G) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.41585173793270175;  // std dev = 0.932, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | | else return 0.5658955465447448;  // std dev = 0.181, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3611121137598512;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.08160420483350561;  // std dev = 0.851, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.45924714750551904;  // std dev = 0.175, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5651112329537906;  // std dev = 0.090, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6345214909126252;  // std dev = 0.149, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.79429952673901;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12005884785496779;  // std dev = 0.032, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3271448347070626;  // std dev = 0.112, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.22561874904192405;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0.5089545941823461;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.27532066151880674;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.33533576226167505;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5141335591614451;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.062474681642774664;  // std dev = 0.123, 236.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.030160128275431627;  // std dev = 2.054, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 0.07125575445860245;  // std dev = 2.751, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2600439732385488;  // std dev = 0.096, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.13375269175093626;  // std dev = 0.861, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04135931569404798;  // std dev = 0.134, 132.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=14 */
%   | | else return -0.06995869930280314;  // std dev = 0.085, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28048230834682675;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3051523466372515;  // std dev = 0.141, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45844993018533836;  // std dev = 0.998, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12362324252381418;  // std dev = 0.233, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.11968457534850288;  // std dev = 0.373, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21536144650725886;  // std dev = 0.073, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(A, E), follows(C, D) )
%   | | | then return 0.08143941454192118;  // std dev = 1.312, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.21313990126519955;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22452383199036738;  // std dev = 0.034, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.046560681412579456;  // std dev = 0.128, 256.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2459031031445266;  // std dev = 1.062, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.09990189160220182;  // std dev = 0.001, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.02617575885802231;  // std dev = 1.574, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0.048906667493747676;  // std dev = 1.683, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18397116970394572;  // std dev = 0.122, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.27481057523620434;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.05856538144266628;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3679807323705;  // std dev = 0.126, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07908425409065978;  // std dev = 0.034, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.23504141232585218;  // std dev = 0.160, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0917999984172963;  // std dev = 0.881, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04561126769656258;  // std dev = 0.531, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03721367114883295;  // std dev = 2.229, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.11109845684393489;  // std dev = 1.608, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return -0.08686832474610276;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.19738211997251093;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.155559122607449;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.14884518759531573;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.004430924634188815;  // std dev = 0.632, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then return -0.03666393316129457;  // std dev = 0.135, 250.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=38 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.323940627468278;  // std dev = 0.103, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12091238661633961;  // std dev = 0.043, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.10677545644462157;  // std dev = 0.198, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.22438660907115437;  // std dev = 0.065, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.0643878025653303;  // std dev = 0.045, 211.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15577664338596142;  // std dev = 0.074, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10029533907303473;  // std dev = 0.746, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.01133761123569281;  // std dev = 0.132, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.254250190172133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.018743628005845076;  // std dev = 1.232, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0.04213435587947764;  // std dev = 1.379, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
Inference time using transfer learning 10.065485715866089
Refined model CLL: -0.104315


******************************************
Best model found
******************************************
Results 

CLL : -0.103777 

AUC ROC : 0.993485 

AUC PR : 0.37308 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 34.27195143699646 

Total Inference Time : 12.658077955245972 

Total revision time: 59.80394792556763
Best scored revision CLL: -0.104315


Results 

CLL : -0.103777 

AUC ROC : 0.993485 

AUC PR : 0.37308 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 61.35559129714966 

Total Inference Time : 12.658077955245972 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1717522144317627
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036505896345302345;  // std dev = 0.259, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08578487415644509;  // std dev = 1.267, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5767933921423718;  // std dev = 0.227, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.026501252275176263;  // std dev = 1.573, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return -0.07662183243201683;  // std dev = 0.846, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.45937337134533124;  // std dev = 0.991, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11800204552447324;  // std dev = 0.012, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11182040937204833;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12856869062504667;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.299130631788084;  // std dev = 0.552, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31166169402120447;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.621558070132856;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09392860386480174;  // std dev = 0.712, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | else return -0.09869592737608199;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015993160315601294;  // std dev = 1.466, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24898670570716963;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.338751727361661;  // std dev = 0.608, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10555313602870432;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.09599757092033379;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29056130191311835;  // std dev = 0.391, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.08146868913633468;  // std dev = 0.703, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02506743537126166;  // std dev = 0.258, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19516844759516092;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03337740072790477;  // std dev = 0.155, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.005239298868436688;  // std dev = 0.771, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return -0.08567735792632769;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.038230068950892815;  // std dev = 0.353, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2516936183764693;  // std dev = 0.294, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09034849684680439;  // std dev = 0.031, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.389788679461516;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08892891692522482;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.10873862920627177;  // std dev = 1.327, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.1485113179807735;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08196885825422554;  // std dev = 0.008, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07469784239823614;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0705770670962114;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, G) )
%   | then return 0.11088558158446633;  // std dev = 0.519, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07501940579660202;  // std dev = 0.000663, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning 10.126681089401245
Parameter learned model CLL:-0.100874 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [3.65e-08, 36, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 34, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.267, 9, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.227, 0, 16], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.573, 29, 4], 'false,false,false,false': [0.846, 13, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.991, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.012, 26, 0], 'false,true,false,false': [0.011, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.008, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.552, 1, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.036, 0, 4], 'false,false,true,false': [0.712, 44, 1], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.466, 46, 19], 'false,true': [0.0, 0, 3], 'false,false,true': [0.608, 1, 3], 'false,false,false,true': [0.017, 9, 0], 'false,false,false,false': [0.021, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.391, 0, 22], 'true,false': [0.703, 51, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.258, 4, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.043, 0, 18], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 28, 4], 'false,false,false,true': [0.771, 13, 3], 'false,false,false,false': [0.014, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.353, 3, 16], 'false,true,true,true': [0.294, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 39, 0], 'false,false,true': [0.213, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.016, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.327, 2, 20], 'true,true,false': [0.005, 0, 2], 'true,false,true': [0.008, 35, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.519, 3, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000663, 4, 0]}]
{'': [0.23058317656544033, 0.1983471074380164], 'true': [1.6148698540002277e-16, 4.2700885562506023e-17], 'false': [0.24489795918367335, 0.0], 'false,true': [1.4802973661668753e-16, 0.0], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [3.700743415417188e-17, 0.0], 'true,false,false': [0.0, nan]}
{'': [1.9737298215558337e-16, 0.08054480884809435], 'false': [0.06723584881943498, 0.10875614838336659], 'false,false': [0.0, 0.1338537210872204], 'false,false,false': [nan, 0.1338537210872204], 'false,true': [nan, 0.06723584881943498], 'false,false,true': [nan, 0.0]}
{'': [0.0032138009228211417, 0.08879416286720973], 'false': [nan, 0.08879416286720979], 'false,false': [0.0, 0.06841645203410131], 'false,false,false': [0.07501644571878929, 0.05109552843914629], 'true': [0.0032138009228211417, nan], 'true,true': [0.0032138009228211417, nan], 'false,false,true': [3.700743415417188e-17, 0.0]}
{'': [0.037735229015936136, 3.618819404876204e-05], 'false': [1.5138027586642263e-05, 7.457741269062401e-06], 'false,true': [nan, 1.5138027586642263e-05], 'false,true,false': [5.742019942779086e-06, 1.196964013998325e-05], 'false,false': [nan, 7.457741269062401e-06], 'false,false,false': [nan, 7.457741269062401e-06]}
{'': [0.017930899147557862, 0.05180809069390794], 'false': [0.0, 0.04697964707868955], 'false,false': [0.04874067370664076, 0.0], 'false,false,true': [0.0003163748461577076, 0.011255571691390607], 'true': [0.017930899147557862, nan], 'false,true': [0.0, nan]}
{'': [0.03307915579254881, 0.04928566012058471], 'false': [0.0, 0.04746399603164025], 'false,false': [0.09232053819213853, 6.547962617834347e-05], 'true': [nan, 0.03307915579254883], 'true,false': [nan, 0.03307915579254881], 'false,false,false': [3.1536876883220574e-05, 5.5325253202251e-05]}
{'': [0.03732745874908812, 0.01327634595884122], 'true': [0.00696502171816799, 0.009331548987296922], 'false': [nan, 0.01327634595884122], 'false,false': [nan, 0.01327634595884122], 'false,false,false': [nan, 0.01327634595884122]}
{'': [0.00010433258304187731, 0.026006798662093676], 'false': [nan, 0.026006798662093714], 'false,false': [0.0240776439196147, 0.028699640804367457], 'false,false,false': [0.03719620041767818, 3.062960566952572e-05], 'true': [0.00010433258304187731, nan]}
{'': [0.12469008451264343, 0.022991370770231813], 'false': [0.015454919408708918, 0.04675365709491359], 'false,false': [0.015054559754989613, 2.738860231362038e-05], 'false,true': [0.014361328986472086, 2.4122944198195053e-05], 'false,true,true': [0.014361328986472086, nan], 'false,false,false': [nan, 2.738860231362038e-05]}
{'': [0.03734145182269916, 0.03518644487691439], 'true': [0.07354318612891954, 7.471942699427414e-06], 'true,true': [0.08009595235498158, 1.2713100913323838e-05], 'false': [0.04481973578441465, 1.0991577088607929e-07], 'true,false': [1.8892744110971764e-06, 3.773508686616874e-06], 'true,false,false': [0.0, 0.0], 'false,false': [nan, 1.0991577088607929e-07], 'false,false,false': [nan, 1.0991577088607929e-07]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,false;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 4.019622087478638
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.6425503352878774;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.019829882185973147;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.21252258176734698;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0435389716194778;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5871294148307956;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.1132842194395623;  // std dev = 0.018, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.025880156291155754;  // std dev = 1.010, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2679829703449037;  // std dev = 1.026, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.13029963138511108;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.3348965752874665;  // std dev = 0.957, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.14718476609546993;  // std dev = 1.160, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.4389271827373862;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.5174977189339737;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6493703460290378;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then if ( follows(A, K), follows(K, A) )
%   | | | then return -0.10354054645897301;  // std dev = 0.028, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.10597957304515108;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1261099092835268;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.15125297093586235;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.361622439614193;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15575260282790032;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.48991074972528253;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09505559820208151;  // std dev = 0.618, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | else return -0.09224223186212259;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2779874624728256;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3088664697024215;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2640732452361853;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.058012637234357366;  // std dev = 0.112, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | else return -0.029969402082849164;  // std dev = 0.181, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.06478298410902478;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3974796259954329;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1303353127394011;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.11089402140820931;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then return 0.2268732780516327;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.24350581797242943;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.30798102511646913;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.27317181265946466;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08275507672165441;  // std dev = 0.005, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.309689316126049;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13169891795290123;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.002013630866572432;  // std dev = 0.503, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.11203322335542051;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.18807095973016302;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19950079704288526;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.24684462243249872;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then return -0.046938586630892974;  // std dev = 0.091, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else return -0.026527766005766527;  // std dev = 0.183, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.07387096207857552;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.06339376093738522;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.08720057690529459;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1666774720263316;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return -0.0029557232943390743;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.28701478265985186;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0731026596336547;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.09157567496974076;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.23782920589849957;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11753955395203548;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14481851686999278;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2754039782410169;  // std dev = 0.191, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17603644264153545;  // std dev = 0.000182, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07246258257329652;  // std dev = 0.009, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.061836847394521756;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07819117189088039;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.025728938055007505;  // std dev = 0.315, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.026036270023013976;  // std dev = 0.314, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.06416388274722032;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning 25.93313241004944
Refined model CLL: -0.098519


******************************************
Best model found
******************************************
Results 

CLL : -0.096289 

AUC ROC : 0.994609 

AUC PR : 0.4471 

Precision : 0.326829 

Recall : 0.858974 

F1 : 0.473498 

Total Learning Time : 4.019622087478638 

Total Inference Time : 4.824004888534546 

Total revision time: 12.179803371429443
Best scored revision CLL: -0.098519


Results 

CLL : -0.096289 

AUC ROC : 0.994609 

AUC PR : 0.4471 

Precision : 0.326829 

Recall : 0.858974 

F1 : 0.473498 

Total Learning Time : 13.731446743011475 

Total Inference Time : 4.824004888534546 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7958142757415771
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8359267128772897;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7262286178087028;  // std dev = 0.084, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03943134820445772;  // std dev = 0.256, 79.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.02077157914670763;  // std dev = 1.602, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5814488388719057;  // std dev = 0.322, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6716423226936947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.588232901061704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5591824337380245;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5591824337380245;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05022607703169853;  // std dev = 2.193, 83.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=7 */
%   | | | else return -0.09757150021195755;  // std dev = 0.842, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48719587356949545;  // std dev = 0.891, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11621881992661931;  // std dev = 0.074, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return -0.11116916174447429;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11975363975568094;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3267624495917927;  // std dev = 0.336, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.39097498792211105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3082030565462656;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6461809810676105;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08575866882178557;  // std dev = 1.067, 79.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=2 */
%   | | else return -0.09676122468237537;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02431091888176556;  // std dev = 1.959, 114.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2528551610032965;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5229716407731926;  // std dev = 0.342, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09855381296480258;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.09528634019617235;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2533874961939583;  // std dev = 1.164, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return -0.0848026851281245;  // std dev = 1.171, 86.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037069858513319114;  // std dev = 0.485, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19223331101063584;  // std dev = 0.047, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, E) )
%   | | then return 0.20743879606166993;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041086552099016176;  // std dev = 0.145, 75.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.008667685480605702;  // std dev = 1.012, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | | else return -0.08032497898423772;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15593605250973594;  // std dev = 0.183, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24418214275904726;  // std dev = 0.436, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08772624104370208;  // std dev = 0.076, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4430745986518786;  // std dev = 0.258, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08287222887515619;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15834255884504178;  // std dev = 1.087, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.13919248396683126;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08090259571265031;  // std dev = 0.008, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07814824227526163;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.03296713516508364;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.10955462254416495;  // std dev = 0.676, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07117654003348325;  // std dev = 0.000237, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning 9.680372953414917
Parameter learned model CLL:-0.10172 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.989, 1, 44], 'true,false,true': [7.45e-08, 77, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.913, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.084, 0, 37], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 71, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 14, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.602, 20, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.322, 0, 31], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.193, 76, 7], 'false,false,false,false': [0.842, 33, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.891, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.074, 69, 0], 'false,true,false,false': [0.0, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.009, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.336, 0, 32], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.021, 0, 6], 'false,false,true,false': [1.067, 77, 2], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.959, 78, 36], 'false,true': [0.053, 0, 9], 'false,false,true': [0.342, 0, 5], 'false,false,false,true': [0.068, 17, 0], 'false,false,false,false': [0.025, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.164, 1, 42], 'true,false': [1.171, 83, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.485, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.047, 0, 36], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.145, 67, 8], 'false,false,false,true': [1.012, 20, 5], 'false,false,false,false': [0.012, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.183, 1, 33], 'false,true,true,true': [0.436, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.076, 90, 0], 'false,false,true': [0.258, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.024, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.087, 1, 38], 'true,true,false': [0.014, 0, 6], 'true,false,true': [0.008, 51, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.205, 5, 1], 'false,true': [0.676, 5, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000237, 5, 0]}]
{'': [0.22469008264462906, 0.19390581717451505], 'true': [0.0217283950617295, 0.01136213502444187], 'false': [0.22222222222222202, 0.0], 'false,true': [0.1388888888888887, -9.25185853854297e-18], 'false,true,true': [0.1388888888888887, nan], 'true,false': [7.209240419643874e-17, 0.09000000000000005], 'true,false,false': [-6.938893903907228e-18, 0.25]}
{'': [0.0001891198784132509, 0.07254484724604555], 'false': [0.06565978924710032, 0.08602274539422564], 'false,false': [3.96508223080413e-18, 0.12314409011258089], 'false,false,false': [0.0, 0.10689591155605982], 'false,true': [nan, 0.06565978924710032], 'false,false,true': [nan, 3.96508223080413e-18]}
{'': [0.00338304671798281, 0.06998016079583451], 'false': [nan, 0.0699801607958342], 'false,false': [-9.868649107779169e-17, 0.047624884222109504], 'false,false,false': [0.057940298421792456, 0.020852950656909307], 'true': [0.0033466013837062454, 0.0017392829042457425], 'true,true': [0.0033466013837062454, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.015869501724979786, 6.166752078739619e-05], 'false': [6.795414209008755e-05, 6.225453582180328e-06], 'false,true': [nan, 6.795414209008755e-05], 'false,true,false': [7.891180355968773e-05, -3.469446951953614e-18], 'false,false': [nan, 6.225453582180328e-06], 'false,false,false': [nan, 6.225453582180328e-06]}
{'': [0.0035510244036239375, 0.049234485757078957], 'false': [-3.700743415417188e-17, 0.04338162287375088], 'false,false': [0.048545701918967836, 0.0], 'false,false,true': [7.529697355653416e-05, 0.01441036430320305], 'true': [0.003537046944151634, 0.0], 'false,true': [-3.700743415417188e-17, nan]}
{'': [0.03366585114856274, 0.048633554707324195], 'false': [0.00031130776058405394, 0.046085503895928616], 'false,false': [0.023408551408629786, 0.00015551122895663175], 'true': [nan, 0.03366585114856267], 'true,false': [nan, 0.03366585114856274], 'false,false,false': [0.0002684004484595019, 3.728382030688848e-05]}
{'': [0.04655417158634561, 0.019591884894970903], 'true': [0.03152760719690452, 0.015943254200178607], 'false': [nan, 0.019591884894970903], 'false,false': [nan, 0.019591884894970903], 'false,false,false': [nan, 0.019591884894970903]}
{'': [6.690608675140207e-05, 0.024669958142539028], 'false': [nan, 0.024669958142539035], 'false,false': [0.020981246165803304, 0.03250191739863284], 'false,false,false': [0.04097648916479385, 1.911219865830243e-05], 'true': [6.25157573871814e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.033336427655591694, 0.01930266751207564], 'false': [0.014047217231370443, 0.03858512863229313], 'false,false': [0.01660172772933663, 2.5177478379232657e-05], 'false,true': [0.014590739424667197, 6.461839146414652e-05], 'false,true,true': [0.014590739424667197, nan], 'false,false,false': [nan, 2.5177478379232657e-05]}
{'': [0.024674803008478696, 0.037710647128730054], 'false': [0.045678047387901634, 1.1192607999449545e-08], 'true': [0.026320823462289936, 0.0008768605076804612], 'true,true': [0.030316458353241878, 3.136801897331981e-05], 'true,false': [1.4046747460259937e-06, 0.004318294843259776], 'true,false,false': [0.0, 0.006988995497627143], 'false,false': [nan, 1.1192607999449545e-08], 'false,false,false': [nan, 1.1192607999449545e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(F, A), follows(A, F).;true;true
7;false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 6.038750410079956
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.03156485511290851;  // std dev = 0.266, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.02120578107702634;  // std dev = 1.668, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5608642884405508;  // std dev = 0.168, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(E, A) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.588232901061704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.597974787376848;  // std dev = 0.148, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11380962099264723;  // std dev = 0.028, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.26749649403566045;  // std dev = 1.310, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.12313660731457139;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.37623059595009656;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.2694680440657334;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(G, D), recursion_accounttype(D, B) )
%   | | | then return 0.41706810214156903;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5373287429977222;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6509736576572073;  // std dev = 0.233, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10146011553591266;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.11034464510182579;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, J) )
%   | | then return -0.15504599855626094;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.1104460045691058;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3274391953175825;  // std dev = 0.014, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.07408475066889891;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.36381504805519366;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.29518823552239415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.323796387692851;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32080890573312293;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.432859866677713;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08852835479982746;  // std dev = 0.944, 103.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=2 */
%   | | else return -0.09257721366451775;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.25962065802898626;  // std dev = 0.012, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.27148091912582695;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3047768166947084;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06101417949472554;  // std dev = 0.088, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else return -0.06593806347603111;  // std dev = 0.105, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2531601214790113;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.45235155467808086;  // std dev = 0.287, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12440898046282486;  // std dev = 0.115, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09710761124776494;  // std dev = 0.066, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, C), follows(D, E) )
%   | | | then return 0.22182187215451696;  // std dev = 0.100, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.08028489052794541;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08075684301806153;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.2630107135253702;  // std dev = 0.099, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.09661440512479241;  // std dev = 0.018, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.23644340441201459;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.08690402836159537;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10449830404692857;  // std dev = 0.389, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.08411651192128802;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.18823396932130768;  // std dev = 0.127, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.16974112757089843;  // std dev = 0.000390, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18271220600536933;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.15687358734564338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then return -0.06607218479349165;  // std dev = 0.147, 86.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.015108196292169425;  // std dev = 0.788, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return -0.07116931768865037;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07948134443587013;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then return 0.15689219318863531;  // std dev = 0.014, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.1946881804874775;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.012446340989933339;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15518529972783185;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.26774954902388115;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07233975467383885;  // std dev = 0.005, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3362145975512146;  // std dev = 0.115, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.10548509604905651;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07192452203278353;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1421278963720433;  // std dev = 0.103, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2073976284993138;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.12876047380579891;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.06736600787889266;  // std dev = 0.004, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.062247146183943544;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.05209628137304192;  // std dev = 0.214, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.09119470879697421;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17887176418821446;  // std dev = 0.339, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.0671467216495673;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning 25.29827618598938
Refined model CLL: -0.09464


******************************************
Best model found
******************************************
Results 

CLL : -0.092834 

AUC ROC : 0.994344 

AUC PR : 0.354874 

Precision : 0.324455 

Recall : 0.858974 

F1 : 0.471002 

Total Learning Time : 6.038750410079956 

Total Inference Time : 9.297322988510132 

Total revision time: 20.75755476951599
Best scored revision CLL: -0.09464


Results 

CLL : -0.092834 

AUC ROC : 0.994344 

AUC PR : 0.354874 

Precision : 0.324455 

Recall : 0.858974 

F1 : 0.471002 

Total Learning Time : 22.309198141098022 

Total Inference Time : 9.297322988510132 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9322171211242676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.08921948595311938;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7225520485435828;  // std dev = 0.003, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02448501646542662;  // std dev = 0.275, 126.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06883348876651295;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.05644514454435921;  // std dev = 2.304, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5545917248218862;  // std dev = 0.897, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else return 0.727497164396142;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7154640855801775;  // std dev = 0.227, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5584623763112782;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5584623763112782;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03424524961474986;  // std dev = 3.190, 148.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=16 */
%   | | | else return -0.07422968678998663;  // std dev = 1.526, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.515825856633847;  // std dev = 1.222, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11927108974419023;  // std dev = 0.003, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | | else return -0.11509371083558373;  // std dev = 0.001, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1282762020418269;  // std dev = 0.005, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26660519150872936;  // std dev = 1.601, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else return 0.3508096734753294;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30166870422605296;  // std dev = 2.58e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5670796827016888;  // std dev = 1.014, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.09416564626899665;  // std dev = 1.218, 147.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=3 */
%   | | else return -0.10797742008584624;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.036713828240629034;  // std dev = 2.512, 160.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23864483347576648;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3544212685407097;  // std dev = 1.453, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12635458871601915;  // std dev = 0.224, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.10339111720856668;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2491065682158693;  // std dev = 2.108, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.08583407573392048;  // std dev = 1.143, 143.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.046233158827864426;  // std dev = 0.561, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19731306433359572;  // std dev = 0.054, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return -0.35120499228537017;  // std dev = 0.689, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0345344471490509;  // std dev = 0.174, 113.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0026107113531446216;  // std dev = 1.633, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return -0.050133583307827405;  // std dev = 0.621, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17340750674264746;  // std dev = 0.168, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24003182786466956;  // std dev = 1.042, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09317198938847732;  // std dev = 0.200, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4250842377986697;  // std dev = 0.360, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0866042747316806;  // std dev = 0.006, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19907379083385648;  // std dev = 0.677, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.13633796237706314;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08326593114630301;  // std dev = 0.012, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08529487356915647;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.01956996314254951;  // std dev = 0.530, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.07170152939662662;  // std dev = 1.271, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.041279305291705384;  // std dev = 0.518, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
Inference time using transfer learning 9.63976263999939
Parameter learned model CLL:-0.106542 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 63], 'true,false,true': [8.16e-08, 111, 0], 'true,false,false,true': [0.973, 18, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,false': [0.249, 14, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.003, 0, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 111, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.304, 33, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.897, 1, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.227, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.49e-08, 0, 6], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.19, 132, 16], 'false,false,false,false': [1.526, 44, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.222, 0, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.003, 81, 0], 'false,true,false,false': [0.001, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.005, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.601, 3, 41], 'true,false': [0.119, 0, 2], 'false,true,true': [2.58e-08, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.014, 1, 16], 'false,false,true,false': [1.218, 144, 3], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.512, 107, 53], 'false,true': [0.037, 0, 11], 'false,false,true': [1.453, 2, 11], 'false,false,false,true': [0.224, 17, 0], 'false,false,false,false': [0.021, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.108, 4, 64], 'true,false': [1.143, 139, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.561, 8, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.054, 0, 48], 'true,false,true': [0.689, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.174, 98, 15], 'false,false,false,true': [1.633, 37, 10], 'false,false,false,false': [0.621, 15, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.168, 1, 43], 'false,true,true,true': [1.042, 1, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.2, 117, 0], 'false,false,true': [0.36, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.006, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.677, 0, 55], 'true,true,false': [0.015, 0, 8], 'true,false,true': [0.012, 116, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.53, 9, 2], 'false,true': [1.271, 8, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.518, 13, 1]}]
{'': [0.22222222222222238, 0.19390581717451538], 'true': [0.015380859374999223, 0.015034088922556896], 'false': [0.23818525519848777, 0.06222222222222227], 'false,true': [-2.9605947323337506e-16, -1.1895246692412391e-17], 'true,false': [6.00120553851436e-17, 0.09000000000000004], 'true,false,false': [0.04986149584487539, 0.0], 'false,true,true': [-2.9605947323337506e-16, nan]}
{'': [1.974583686400625e-07, 0.08943290900606095], 'false': [0.07542705512451486, 0.11703720127913719], 'false,false': [0.05859374999999995, 0.13341522270267062], 'false,false,false': [0.0, 0.12636836902590776], 'false,true': [nan, 0.07542705512451486], 'false,false,true': [nan, 0.05859374999999995]}
{'': [0.021182362419023996, 0.08164405906794932], 'false': [nan, 0.08164405906794933], 'false,false': [2.049642507000289e-16, 0.06441078513969851], 'false,false,false': [0.06874723132347751, 0.04954217868602542], 'true': [0.020325903834900003, 0.02294603226861769], 'true,false': [0.02587529601554639, 0.0], 'true,true': [0.02010487360066593, 0.0], 'false,false,true': [3.700743415417188e-17, 6.344131569286608e-17]}
{'': [0.01990136776094829, 1.7499103997122843e-05], 'false': [2.860990223660513e-06, 9.882196185945213e-07], 'false,true': [nan, 2.860990223660513e-06], 'false,true,false': [9.596817291463506e-08, 6.43784574899664e-08], 'false,false': [nan, 9.882196185945213e-07], 'false,false,false': [nan, 9.882196185945213e-07]}
{'': [0.05635152529349206, 0.0565378936750122], 'false': [5.124106267500723e-17, 0.053098264034206345], 'true': [0.05828227634902339, 0.007092885322594], 'false,false': [0.05594616835513409, 1.3877787807814458e-18], 'false,false,true': [0.060463633105896246, 0.01009952371211432], 'false,true': [5.124106267500723e-17, nan]}
{'': [0.039452809099256324, 0.07625081614735678], 'false': [0.0001215172536481028, 0.08270523172698038], 'false,false': [0.16238793651317313, 0.001429949860753994], 'true': [nan, 0.03945280909925624], 'true,false': [nan, 0.039452809099256324], 'false,false,false': [0.002957403753148833, 1.9786698152954814e-05]}
{'': [0.05174358596462905, 0.02097513750170476], 'true': [0.06532100446032581, 0.009132707847780315], 'false': [nan, 0.02097513750170476], 'false,false': [nan, 0.02097513750170476], 'false,false,false': [nan, 0.02097513750170476]}
{'': [0.02109830274804814, 0.03703205046576658], 'false': [nan, 0.037032050465766624], 'false,false': [0.030278322411143303, 0.0488927867391374], 'false,false,false': [0.05674992419035252, 0.02412758995453251], 'true': [5.9943405002589136e-05, 0.2371817508815764], 'true,false': [0.2371817508815764, nan]}
{'': [0.028105105070206086, 0.031003367075001034], 'false': [0.023669400501496535, 0.05586231921831236], 'false,false': [0.014406212386240933, 1.504592469370412e-06], 'false,true': [0.045263854507952096, 0.0003419333645447039], 'false,true,true': [0.045263854507952096, nan], 'false,false,false': [nan, 1.504592469370412e-06]}
{'': [0.019534967205067724, 0.06392690391445836], 'false': [0.0950163241104468, 0.019175485327081687], 'true': [0.0077118273411918336, 0.00230542431164193], 'false,false': [nan, 0.019175485327081687], 'false,false,false': [nan, 0.019175485327081687], 'true,true': [0.008329635825096559, 2.8391959286527824e-05], 'true,false': [1.2777897970809037e-06, 0.0127881181933407], 'true,false,false': [-4.270088556250602e-18, 0.025561476699736796]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.376143455505371
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8303711573217337;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | | else if ( follows(F, C) )
%   | | | then return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7257745463843637;  // std dev = 0.110, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.728304118204931;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1254446385283911;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.0024292559005385356;  // std dev = 0.301, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.19352118395477677;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.13981214937855654;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.052806745544287735;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.07814913328060852;  // std dev = 2.270, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.572739980298262;  // std dev = 0.042, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.7504457057693191;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.30380993109604915;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5538099310960491;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4288099310960492;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10023813108577348;  // std dev = 0.936, 88.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=2 */
%   | | | else return -0.03173610837679249;  // std dev = 1.921, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15710373619499696;  // std dev = 1.913, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.049477888402417035;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.37503351721131745;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.4185117780808825;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4416688312536992;  // std dev = 0.135, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5153487685609708;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5652135925910499;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6546429659386984;  // std dev = 0.127, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7144257134394219;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then return -0.11276040236929466;  // std dev = 0.016, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | else return -0.14896621896397302;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.32669193173987743;  // std dev = 0.035, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.32789855685666375;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4809574583216426;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08980220621147074;  // std dev = 0.633, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then return 0.37065631595574117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.33373335114080244;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.054974540623338196;  // std dev = 1.693, 122.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=10 */
%   | | | else return 0.046464262047056136;  // std dev = 1.736, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else return -0.1025081485458894;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26260998888051207;  // std dev = 0.012, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.13500359213659685;  // std dev = 0.874, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.045363231753574956;  // std dev = 1.429, 96.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=8 */
%   | | | else return -0.04773987066072266;  // std dev = 0.923, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.26348960220992057;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27128048979883473;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5081805827134633;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5013727384106956;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1292672265113247;  // std dev = 0.016, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.21208597452500594;  // std dev = 0.027, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.22392791080866586;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.13105813502167477;  // std dev = 0.972, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.47766905054750053;  // std dev = 0.179, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.09129090687843362;  // std dev = 0.011, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3630213078534898;  // std dev = 0.123, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12582732669409286;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0688916664914154;  // std dev = 0.644, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11712426413072533;  // std dev = 8.33e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18087938738508527;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return 0.2179340934215378;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.24203321301449315;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35923170205762534;  // std dev = 0.178, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(G, E), follows(G, A) )
%   | | | then return -0.07869030011500044;  // std dev = 0.027, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.09199133391044474;  // std dev = 0.084, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28436857065334453;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11262592394263259;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.06432298838959018;  // std dev = 0.174, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then return 0.16155531830018488;  // std dev = 0.017, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return -0.04428391102565632;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.14769164021747527;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.0956225156256529;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2140427186411298;  // std dev = 0.071, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07753013001852346;  // std dev = 0.009, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.30470718433929384;  // std dev = 0.352, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24172018871721257;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1030688926690993;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.16319859873793488;  // std dev = 0.365, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return -0.21352460497615666;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13097449153663188;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06661430373222678;  // std dev = 0.034, 122.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.23583392049612;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.09676069673711525;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.20020848510539724;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09280225382768503;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.09075383386547536;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning 18.347926139831543
Refined model CLL: -0.100306


******************************************
Best model found
******************************************
Results 

CLL : -0.097517 

AUC ROC : 0.994815 

AUC PR : 0.435081 

Precision : 0.337156 

Recall : 0.942308 

F1 : 0.496622 

Total Learning Time : 8.376143455505371 

Total Inference Time : 9.355364322662354 

Total revision time: 24.78812599182129
Best scored revision CLL: -0.100306


Results 

CLL : -0.097517 

AUC ROC : 0.994815 

AUC PR : 0.435081 

Precision : 0.337156 

Recall : 0.942308 

F1 : 0.496622 

Total Learning Time : 26.33976936340332 

Total Inference Time : 9.355364322662354 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.2639312744140625
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.09624417319475045;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7260200395620429;  // std dev = 0.119, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02864993354330038;  // std dev = 0.270, 158.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08557901077870532;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.17270868403878437;  // std dev = 2.657, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5599482368201467;  // std dev = 0.913, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.14471965071352538;  // std dev = 0.828, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8013473466405641;  // std dev = 0.109, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5595560330310435;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5595560330310435;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03898092661206649;  // std dev = 3.254, 165.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=17 */
%   | | | else return -0.024174835738123776;  // std dev = 2.465, 64.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5024570039804447;  // std dev = 1.848, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11812622170471286;  // std dev = 0.002, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.11976305959538903;  // std dev = 2.69e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1559797818814014;  // std dev = 0.093, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30047472277185766;  // std dev = 1.306, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.12640021419415384;  // std dev = 0.926, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30520087684994035;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6266693222172948;  // std dev = 0.198, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08565682861501252;  // std dev = 1.872, 179.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=6 */
%   | | else return -0.10578502667553633;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02288301327828197;  // std dev = 2.968, 232.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25634006511471974;  // std dev = 0.135, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5365735154449015;  // std dev = 0.583, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12203122557209325;  // std dev = 0.093, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1136380636445254;  // std dev = 0.109, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26162347488171595;  // std dev = 1.951, 89.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=86 */
%   | else return -0.07783495656186241;  // std dev = 1.625, 171.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 6.230609411377138E-4;  // std dev = 0.634, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1652687123356662;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.23414519849462112;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048402578942292426;  // std dev = 0.161, 170.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.013343252745265316;  // std dev = 1.213, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0.08254109959479658;  // std dev = 1.305, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13578025687017925;  // std dev = 0.246, 64.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21881833518397825;  // std dev = 1.340, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08952262389245089;  // std dev = 0.042, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41303429872441083;  // std dev = 0.565, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10538681115837914;  // std dev = 0.078, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1753660173930573;  // std dev = 1.560, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.03568300374752875;  // std dev = 0.944, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08287997731495762;  // std dev = 0.005, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08094942143009476;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.06736339669229509;  // std dev = 0.408, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.007037019276876609;  // std dev = 1.225, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010196629356697604;  // std dev = 1.142, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning 10.034963130950928
Parameter learned model CLL:-0.108227 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 131, 0], 'true,false,false,true': [0.975, 19, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.426, 16, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.119, 0, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 140, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.657, 25, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 55], 'true,true,false': [0.828, 1, 1], 'true,false,true': [0.109, 0, 2], 'true,false,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.254, 148, 17], 'false,false,false,false': [2.465, 56, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.848, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.002, 102, 0], 'false,true,false,false': [2.69e-08, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.093, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.306, 2, 58], 'true,false': [0.926, 1, 2], 'false,true,true': [0.0, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.198, 0, 19], 'false,false,true,false': [1.872, 173, 6], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.968, 160, 72], 'false,true': [0.135, 0, 12], 'false,false,true': [0.583, 0, 16], 'false,false,false,true': [0.093, 33, 0], 'false,false,false,false': [0.109, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.951, 3, 86], 'true,false': [1.625, 164, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.634, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.393, 2, 64], 'true,false,true': [0.054, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 152, 18], 'false,false,false,true': [1.213, 31, 11], 'false,false,false,false': [1.305, 12, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.246, 4, 60], 'false,true,true,true': [1.34, 2, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 156, 0], 'false,false,true': [0.565, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.078, 30, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.56, 2, 75], 'true,true,false': [0.944, 1, 8], 'true,false,true': [0.005, 167, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.408, 3, 2], 'false,true': [1.225, 20, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.142, 17, 5]}]
{'': [0.2287326388888897, 0.2076124567474043], 'true': [0.022975778546712552, 0.012736732570239205], 'false': [0.2222222222222223, 0.1814058956916098], 'false,true': [-8.881784197001253e-17, 2.7755575615628915e-18], 'true,false': [-4.0679927619853064e-17, 0.07638888888888894], 'true,false,false': [0.04750000000000004, 0.18750000000000003], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.00021584286396710806, 0.09989261251819245], 'false': [0.07287167154672744, 0.15710572436426118], 'false,false': [0.04338842975206611, 0.19070172354688691], 'false,false,false': [0.0, 0.18579107296648475], 'false,true': [nan, 0.07287167154672744], 'false,false,true': [nan, 0.04338842975206611]}
{'': [0.04716346351455228, 0.08874407186237086], 'false': [nan, 0.0887440718623709], 'false,false': [-5.921189464667501e-17, 0.07283711382086935], 'false,false,false': [0.06419165221932396, 0.09496824100165636], 'true': [0.031916843443848944, 0.2162538038807833], 'true,false': [0.005938180924795589, 0.22222222222222224], 'true,true': [0.014882234246054045, 0.3424164594592498], 'false,false,true': [0.0, 6.344131569286608e-17]}
{'': [0.03347613964354418, 0.00027245855881289407], 'false': [4.950401113240205e-07, 0.000277408173236834], 'false,false': [nan, 0.000277408173236834], 'false,false,false': [nan, 0.000277408173236834], 'false,true': [nan, 4.950401113240205e-07], 'false,true,false': [5.386676864255746e-08, 2.577303450022685e-17]}
{'': [0.042026341606157355, 0.0617875626500702], 'false': [-2.960594732333751e-17, 0.0590546366749619], 'false,false': [0.061923387028900684, 1.261617073437678e-18], 'false,false,true': [0.0020677008061975237, 0.019586064910569873], 'true': [0.02840678738793739, 0.28555844069763214], 'false,true': [-2.960594732333751e-17, nan]}
{'': [0.03796176579309801, 0.07095394589696982], 'false': [0.001527129774090345, 0.07379009911742183], 'false,false': [0.021258067074509668, 0.0003444019923830606], 'true': [nan, 0.03796176579309798], 'true,false': [nan, 0.03796176579309801], 'false,false,false': [0.0002642520656645766, 0.00039566706231785784]}
{'': [0.05073563079110199, 0.01744986031449747], 'true': [0.042759331595690585, 0.015442228842547808], 'false': [nan, 0.01744986031449747], 'false,false': [nan, 0.01744986031449747], 'false,false,false': [nan, 0.01744986031449747]}
{'': [0.028699920361505326, 0.034707572556705195], 'false': [nan, 0.034707572556705354], 'false,false': [0.026007419161777078, 0.0548225696988928], 'false,false,false': [0.035060273881191845, 0.10023841500508905], 'true': [0.02938567437740242, 0.0014655960308732757], 'true,false': [0.0014655960308732757, nan]}
{'': [0.06048048209360227, 0.03151514749848499], 'false': [0.022289808530780827, 0.06425799640183828], 'false,false': [0.024570814079408976, 0.00020261696084397836], 'false,true': [0.06196204302535055, 1.1326919859169852e-05], 'false,true,true': [0.06196204302535055, nan], 'false,false,false': [nan, 0.00020261696084397836]}
{'': [0.026816020533303467, 0.05398620554666465], 'false': [0.05001435041055648, 0.05923102626911208], 'false,false': [nan, 0.05923102626911208], 'false,false,false': [nan, 0.05923102626911208], 'true': [0.040480430435557664, 0.0015531292955059987], 'true,true': [0.03159587839432451, 0.09902324957817493], 'true,false': [1.4481944315603743e-07, 0.020618635298521582], 'true,false,false': [1.1564823173178713e-18, 0.033362802009799256]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.307068824768066
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8337586911970727;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.7581489350995122;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1289478390940364;  // std dev = 0.113, 155.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7056591225739057;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else return 0.7372117708844838;  // std dev = 0.145, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6058736790281778;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.12686708415836281;  // std dev = 6.50e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0.01905369107772637;  // std dev = 0.320, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0731329158416371;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12686708415836287;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1185293056752064;  // std dev = 2.775, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.538463611210456;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.3426116126401132;  // std dev = 1.219, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.6326387525110387;  // std dev = 0.092, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2787753447144949;  // std dev = 0.678, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5702238943717208;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3287598097664217;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.07178948000306652;  // std dev = 0.179, 200.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08672731534348294;  // std dev = 2.028, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.07896533866547857;  // std dev = 1.943, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.40319053457338344;  // std dev = 0.987, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.4349879629178693;  // std dev = 0.134, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.48991389752035663;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.4913399928827971;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5814768797932758;  // std dev = 0.234, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6490377795268024;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7849860839038343;  // std dev = 0.121, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(K, A) )
%   | then return -0.1092235351635508;  // std dev = 0.006, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.1650247505236529;  // std dev = 0.078, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.3197979166586575;  // std dev = 0.142, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return -0.011650834760971063;  // std dev = 1.176, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3556383009209676;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.46597018805754803;  // std dev = 0.259, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3305327910829249;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.22613944391742496;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5150400059021871;  // std dev = 0.273, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08462711396535576;  // std dev = 1.723, 202.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=6 */
%   | | else return -0.09649173171515354;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2732505464822896;  // std dev = 0.126, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.2178249876281828;  // std dev = 0.989, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.033178390181461216;  // std dev = 0.858, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2625759311004279;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.05592728848820456;  // std dev = 0.125, 147.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.29646281996606333;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.41085117222041206;  // std dev = 0.329, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6188312158864644;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11602936036394554;  // std dev = 0.020, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22732340459742745;  // std dev = 0.024, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return -0.06601194498538188;  // std dev = 0.744, 72.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=3 */
%   | | | else return -0.09140050917462018;  // std dev = 0.031, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.34508440585428174;  // std dev = 0.294, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.09067761697869842;  // std dev = 0.048, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30459358710412576;  // std dev = 0.232, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10858385772297113;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09630170746809825;  // std dev = 0.635, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.037756999148465524;  // std dev = 1.021, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17410643478392118;  // std dev = 0.119, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return 0.22715108095353748;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.12977861581961544;  // std dev = 0.789, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.32116826798656845;  // std dev = 0.144, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.0815090831905189;  // std dev = 0.062, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2454685635110064;  // std dev = 0.201, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09851164805522285;  // std dev = 0.001, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07983614638291074;  // std dev = 0.622, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04747811616710893;  // std dev = 0.998, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.13829561811084992;  // std dev = 0.967, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return -0.1320128952022492;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19891160828706997;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18211771322066386;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20448518530622128;  // std dev = 0.053, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.07507303929655545;  // std dev = 0.053, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.22645990007941708;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.47684255180005997;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.105695602399536;  // std dev = 0.025, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.12615261172766049;  // std dev = 0.997, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.07480938245563046;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.20215115390581542;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06628092339610626;  // std dev = 0.035, 165.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(F, H) )
%   | | | then return 0.14200257321227727;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2511352962855796;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10162441991232743;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then return -0.06646501589378932;  // std dev = 0.997, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.034979030850254667;  // std dev = 0.206, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
Inference time using transfer learning 17.85484766960144
Refined model CLL: -0.100599


******************************************
Best model found
******************************************
Results 

CLL : -0.100826 

AUC ROC : 0.994837 

AUC PR : 0.364701 

Precision : 0.334773 

Recall : 0.99359 

F1 : 0.500808 

Total Learning Time : 14.307068824768066 

Total Inference Time : 14.730781555175781 

Total revision time: 38.02093505859375
Best scored revision CLL: -0.100599


Results 

CLL : -0.100826 

AUC ROC : 0.994837 

AUC PR : 0.364701 

Precision : 0.334773 

Recall : 0.99359 

F1 : 0.500808 

Total Learning Time : 39.57257843017578 

Total Inference Time : 14.730781555175781 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.7131431102752686
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8031030635398779;  // std dev = 2.381, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.11243930019460538;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6424290764249163;  // std dev = 2.703, 90.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04321914083089641;  // std dev = 0.252, 229.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09299277168656188;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07500424016863809;  // std dev = 3.307, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5725204746532617;  // std dev = 1.456, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7388724026548845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7856085286297521;  // std dev = 0.135, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3792254679229735;  // std dev = 0.939, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.58770060241069;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.31497332968341724;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04259588735436804;  // std dev = 3.694, 222.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=21 */
%   | | | else return 0.02467427320742234;  // std dev = 2.839, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5160515073159423;  // std dev = 2.412, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11656897922823625;  // std dev = 0.080, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.12325604145899945;  // std dev = 0.004, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1524738085196578;  // std dev = 0.164, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.309245799192429;  // std dev = 1.542, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4115924493427765;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.35019525320143097;  // std dev = 0.128, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6390114572834754;  // std dev = 0.185, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08116697755291417;  // std dev = 2.322, 228.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=9 */
%   | | else return -0.10297505113340445;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038678003240641384;  // std dev = 3.296, 265.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.28617109404236507;  // std dev = 0.089, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.41912247965513755;  // std dev = 1.847, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11308779861831221;  // std dev = 0.126, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.10788397029291943;  // std dev = 0.134, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.283920889561735;  // std dev = 1.628, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07460462903009332;  // std dev = 2.120, 245.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0415611506324775;  // std dev = 0.740, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20490097095679977;  // std dev = 0.130, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.1895858230923106;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.039635877164830254;  // std dev = 0.153, 186.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007230109060129073;  // std dev = 1.665, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.07136374234260058;  // std dev = 1.751, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1524580621328973;  // std dev = 0.203, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2727935937571125;  // std dev = 0.797, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09165363181017488;  // std dev = 0.066, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4719614158210689;  // std dev = 0.625, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11370774226423785;  // std dev = 0.139, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1812147102948152;  // std dev = 1.205, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.06150158667454383;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08835021138822587;  // std dev = 0.596, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08070707669323202;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.022303877782587442;  // std dev = 0.480, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.023297373821466943;  // std dev = 1.097, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26608102236264475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04762394127025472;  // std dev = 1.461, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning 9.944540739059448
Parameter learned model CLL:-0.110626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.381, 6, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false,true': [0.985, 33, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.703, 8, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 207, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.098, 0, 4], 'false,false,false,false': [3.307, 55, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.456, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.135, 0, 2], 'true,false,false': [0.939, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [1.477, 3, 8], 'false,false,false,true': [3.694, 201, 21], 'false,false,false,false': [2.839, 52, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.412, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.08, 160, 0], 'false,true,false,false': [0.004, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.542, 3, 73], 'true,false': [0.123, 0, 4], 'false,true,true': [0.128, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 23], 'false,false,true,false': [2.322, 219, 9], 'false,false,false': [1.86e-09, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.296, 174, 91], 'false,true': [0.089, 0, 13], 'false,false,true': [1.847, 3, 22], 'false,false,false,true': [0.126, 33, 0], 'false,false,false,false': [0.134, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.628, 2, 107], 'true,false': [2.12, 234, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.74, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.13, 0, 80], 'true,false,true': [0.007, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 164, 22], 'false,false,false,true': [1.665, 45, 13], 'false,false,false,false': [1.751, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.203, 3, 77], 'false,true,true,true': [0.797, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.066, 197, 0], 'false,false,true': [0.625, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.205, 1, 94], 'true,true,false': [0.947, 1, 9], 'true,false,true': [0.596, 170, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.48, 10, 2], 'false,true': [1.097, 24, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.461, 17, 8]}]
{'': [0.22328032544378915, 0.2100000000000002], 'true': [0.05201582358387565, 0.009755150573903595], 'false': [0.20118983234180587, 0.2222222222222223], 'false,true': [-1.4802973661668753e-16, 2.5069552168955147e-17], 'true,false': [-1.6753066000331702e-16, 0.05246913580246913], 'true,false,false': [0.02854671280276823, 0.25], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.08120965956279491, 0.08931437602888116], 'false': [0.063615169164606, 0.13917913447978375], 'false,false': [0.03443877551020411, 0.16662777614110508], 'false,false,false': [0.002425309837189915, 0.1519186953946414], 'false,true': [nan, 0.063615169164606], 'false,false,true': [nan, 0.03443877551020411]}
{'': [0.04154105207854264, 0.09352042625431431], 'false': [nan, 0.09352042625431432], 'false,false': [0.12749999999999997, 0.0769312004441998], 'false,false,true': [-9.868649107779169e-17, 0.1983471074380165], 'false,false,false': [0.06146858938669807, 0.12789354588686355], 'true': [0.029422191086543644, 0.16216140202058607], 'true,false': [0.009169537750254753, 0.17617323572031587], 'true,true': [0.0294517509314691, 0.0]}
{'': [0.04510207937886732, 0.00031208878759023107], 'false': [3.965510549182295e-05, 0.0006709762885627856], 'false,false': [nan, 0.0006709762885627856], 'false,false,false': [nan, 0.0006709762885627856], 'false,true': [nan, 3.965510549182072e-05], 'false,true,false': [4.0474727255554456e-05, 3.3934760823868714e-07]}
{'': [0.030398265226032183, 0.06642657036486524], 'false': [0.0009604012533193749, 0.06237530549533172], 'false,false': [0.06478522720058834, 2.523234146875356e-18], 'false,false,true': [0.0014900717391986694, 0.02364392818312851], 'true': [0.03127462579699412, 0.003796319420607236], 'false,true': [0.0009604012533193749, nan]}
{'': [0.04100247774818322, 0.08787859623424565], 'false': [0.0006091659418014244, 0.09215067479004051], 'false,false': [0.13640370509812746, 0.000503767967916526], 'true': [nan, 0.041002477748182824], 'true,false': [nan, 0.04100247774818322], 'false,false,false': [0.00048039738137318496, 0.0005126614105345603]}
{'': [0.04757482821756901, 0.026054949874476388], 'true': [0.024311611054906958, 0.01834571691748759], 'false': [nan, 0.026054949874476388], 'false,false': [nan, 0.026054949874476388], 'false,false,false': [nan, 0.026054949874476388]}
{'': [0.00021108917261646618, 0.03828899211386538], 'false': [nan, 0.038288992113865286], 'false,false': [0.023397746583028286, 0.06699284290810005], 'false,false,false': [0.047777165383237945, 0.09891929927248169], 'true': [0.00021008148281896345, 2.2563833676346456e-05], 'true,false': [2.2563833676346456e-05, nan]}
{'': [0.041038154462056636, 0.03301577009824878], 'false': [0.019105427552448657, 0.08335374373198], 'false,false': [0.022961181946929036, 0.0005499243870545599], 'false,true': [0.019261334451559142, 2.2273136238460622e-05], 'false,true,true': [0.019261334451559142, nan], 'false,false,false': [nan, 0.0005499243870545599]}
{'': [0.024654403295548064, 0.05484563225412682], 'false': [0.03342505034741435, 0.08388292871769099], 'false,false': [0.0, 0.08540272677872913], 'false,false,false': [nan, 0.08540272677872913], 'true': [0.02359559322764683, 0.0031570677323184836], 'true,true': [0.015279617641647666, 0.08963100856266092], 'true,false': [0.0020894279403789406, 0.008237890939180975], 'true,false,false': [-2.1912296538654404e-18, 0.019190646026746694]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.64157485961914
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.11621003925946208;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7211709059276795;  // std dev = 0.113, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.6569734122109546;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.03514999756508792;  // std dev = 3.200, 148.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=16 */
%   | | | else return -0.004742059851341899;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.004742059851341948;  // std dev = 0.296, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.014572350290893836;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.12828479256624897;  // std dev = 1.97e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7495347415919403;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08528408857364793;  // std dev = 3.283, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5722735540020253;  // std dev = 0.396, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7204295120324536;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6557529614667317;  // std dev = 0.295, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.56021203092477;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5549472275878108;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10140145648395711;  // std dev = 1.451, 132.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=3 */
%   | | | else return 0.03195360561254787;  // std dev = 2.657, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0834955284468554;  // std dev = 2.167, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.15216769636686406;  // std dev = 2.286, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.37378039406728525;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.16299608034179483;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.4166543656451126;  // std dev = 0.002, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4372583229765869;  // std dev = 0.124, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return 0.42117432532246113;  // std dev = 0.948, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5495009544737232;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6602268639481167;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.7737555433625002;  // std dev = 0.126, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12602699860394448;  // std dev = 0.023, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2937022258358764;  // std dev = 1.392, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.431828146631901;  // std dev = 0.202, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.12140997074447443;  // std dev = 0.766, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.403456411201655;  // std dev = 0.362, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.322658632025174;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20950944695824797;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.48807974719792085;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08831919871518255;  // std dev = 2.122, 242.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=9 */
%   | | else return -0.0934751102126742;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.2767510299967215;  // std dev = 0.033, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return -0.3483877691641521;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4163660265905961;  // std dev = 0.319, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0945542508884275;  // std dev = 0.063, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.05321658106826081;  // std dev = 0.176, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2761412734505933;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.31254319317797946;  // std dev = 0.343, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4850119381243608;  // std dev = 0.937, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12797817030801809;  // std dev = 0.033, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.21582848736516377;  // std dev = 0.006, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, C), follows(C, D) )
%   | | | then return -0.12464321544146971;  // std dev = 1.176, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1356611254893419;  // std dev = 1.367, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return 0.2956786192960109;  // std dev = 0.101, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.21894634913886185;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.07466041847445348;  // std dev = 0.798, 155.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */
%   | | | else return -0.0274746041635007;  // std dev = 1.495, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.006140706210378359;  // std dev = 1.381, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.11946684394190046;  // std dev = 1.417, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.18852277884870738;  // std dev = 0.112, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.12689646335154697;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.18967279323358974;  // std dev = 0.013, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2480741639850088;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.24049579553310485;  // std dev = 0.089, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37968047760980755;  // std dev = 0.123, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08396303071279523;  // std dev = 0.130, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.013400983499582455;  // std dev = 1.117, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.048693835369509636;  // std dev = 1.570, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.138589593110129;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.17068885180448146;  // std dev = 0.020, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.20092857969720782;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.08616337993761852;  // std dev = 1.822, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | | else return 0.2621448762301039;  // std dev = 0.203, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07838463374789553;  // std dev = 0.009, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2094693911289743;  // std dev = 0.966, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.46778087397712365;  // std dev = 0.175, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.15150082405449988;  // std dev = 0.029, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12085978975828265;  // std dev = 0.151, 83.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | | else return 0.20261175330177836;  // std dev = 0.198, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.06938968912859027;  // std dev = 0.036, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.03323846220834593;  // std dev = 0.251, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.024895593042524925;  // std dev = 0.642, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else return 0.12508086058233556;  // std dev = 0.198, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1478260437932326;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0023281297462615833;  // std dev = 0.667, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.010503497682684632;  // std dev = 1.071, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning 14.679865837097168
Refined model CLL: -0.108043


******************************************
Best model found
******************************************
Results 

CLL : -0.111717 

AUC ROC : 0.993866 

AUC PR : 0.323845 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 9.64157485961914 

Total Inference Time : 14.427849531173706 

Total revision time: 36.14517688751221
Best scored revision CLL: -0.108043


Results 

CLL : -0.111717 

AUC ROC : 0.993866 

AUC PR : 0.323845 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 37.69682025909424 

Total Inference Time : 14.427849531173706 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2576549053192139
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.4831489350995123;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06717442813257443;  // std dev = 0.214, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01982988218597316;  // std dev = 0.790, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7886573287083125;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1591820755708646;  // std dev = 2.331, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5701550164636543;  // std dev = 0.170, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6290617311727265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.003068861332845667;  // std dev = 2.162, 49.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=8 */
%   | | | else return -0.014570057674613309;  // std dev = 1.740, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.505555228172549;  // std dev = 1.379, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12457839610789395;  // std dev = 0.193, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.11887828730099091;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19347144375580927;  // std dev = 0.178, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25754443798105797;  // std dev = 0.823, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.3018415204316016;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3018415204316016;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6155844645886903;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10514653268750442;  // std dev = 0.704, 63.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=1 */
%   | | else return 0.03453245920310827;  // std dev = 0.318, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014262283903113576;  // std dev = 1.163, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24224958376787367;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5041755123458401;  // std dev = 0.336, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1355992816334219;  // std dev = 0.169, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.1494672679403643;  // std dev = 0.160, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1705426192788984;  // std dev = 1.585, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | else return -0.09437936537508029;  // std dev = 0.600, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004368843481324661;  // std dev = 1.261, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20862454649597556;  // std dev = 0.044, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E) )
%   | | then return 0.1746277781776978;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05803318317985861;  // std dev = 0.121, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.024648980954883465;  // std dev = 1.112, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.12395549186562323;  // std dev = 0.806, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19278744500229292;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24744392750146696;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08940385490590212;  // std dev = 0.145, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35872844107606566;  // std dev = 0.280, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1446820901444925;  // std dev = 0.164, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1136870192158372;  // std dev = 1.026, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.19144030044003965;  // std dev = 0.245, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07829980559581899;  // std dev = 0.002, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09461782012165311;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09065543258296838;  // std dev = 0.280, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.07081138652227639;  // std dev = 0.707, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13523676101897408;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02053993868920135;  // std dev = 0.759, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning 8.692262887954712
Parameter learned model CLL:-0.114077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [1.49e-08, 24, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 10, 0], 'false,false': [0.484, 3, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [7.3e-08, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.214, 27, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.79, 7, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.331, 18, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.17, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.162, 41, 8], 'false,false,false,false': [1.74, 17, 4]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.379, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.193, 36, 0], 'false,true,false,false': [0.007, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.823, 1, 13], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.114, 0, 7], 'false,false,true,false': [0.704, 62, 1], 'false,false,false': [0.318, 13, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.163, 31, 13], 'false,true': [0.0, 0, 6], 'false,false,true': [0.336, 0, 12], 'false,false,false,true': [0.169, 20, 0], 'false,false,false,false': [0.16, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.585, 3, 22], 'true,false': [0.6, 48, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.261, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.044, 0, 16], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.121, 29, 2], 'false,false,false,true': [1.112, 20, 7], 'false,false,false,false': [0.806, 4, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.055, 0, 14], 'false,true,true,true': [0.35, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.145, 46, 0], 'false,false,true': [0.28, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.026, 1, 14], 'true,true,false': [0.245, 0, 5], 'true,false,true': [0.002, 39, 0], 'true,false,false,true': [2.63e-09, 5, 0], 'true,false,false,false': [0.28, 4, 1], 'false,true': [0.707, 8, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.759, 9, 4]}]
{'': [0.23319615912208466, 0.24826388888888848], 'false': [0.23437500000000006, 0.23437499999999983], 'false,true': [-1.4802973661668753e-16, -1.1102230246251566e-17], 'true': [-2.8047739569477637e-16, 0.027755102040816354], 'true,false': [9.25185853854297e-18, 0.0826446280991736], 'true,false,false': [-1.1102230246251566e-17, 0.0], 'false,true,true': [0.0, 0.0]}
{'': [3.134747363647501e-16, 0.13186570505957665], 'false': [0.04583813516423238, 0.1808876594713173], 'false,false': [0.07808133730087863, 0.20053716671333477], 'false,false,false': [0.0, 0.1940357913364111], 'false,false,true': [nan, 0.07808133730087863], 'false,true': [nan, 0.04583813516423238]}
{'': [0.0023155964101040055, 0.12209461028254855], 'false': [nan, 0.12209461028254857], 'false,false': [-4.4408920985006264e-17, 0.11008860234350963], 'false,false,false': [0.09540833042938886, 0.14412477811849891], 'true': [0.002405722990626802, 0.0013577491051499635], 'true,true': [0.002405722990626802, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.05941554554826134, 0.002125277791789301], 'false': [0.0008694610191994859, 0.0021110853273498633], 'false,false': [nan, 0.0021110853273498633], 'false,false,false': [nan, 0.0021110853273498633], 'false,true': [nan, 0.0008694610191994859], 'false,true,false': [0.0010320567466217247, 6.05245231220202e-06]}
{'': [0.04533091178065507, 0.06572982244264257], 'false': [0.0, 0.06388273247020759], 'false,false': [0.05401978278272784, 0.10081741886447264], 'false,false,true': [0.0018485037647543961, 0.007871274519028875], 'true': [0.04843801861645982, 0.0], 'false,true': [0.0, nan]}
{'': [0.03073176358490629, 0.07977604885743324], 'false': [-1.850371707708594e-17, 0.08516274308325739], 'false,false': [0.009421459507134133, 0.001683161528103758], 'true': [nan, 0.03073176358490628], 'true,false': [nan, 0.03073176358490629], 'false,false,false': [0.0014273276633985006, 0.001960193880576905]}
{'': [0.05453540221839084, 0.06115092087410553], 'false': [nan, 0.061150920874105515], 'false,false': [nan, 0.06115092087410553], 'false,false,false': [nan, 0.06115092087410553], 'true': [0.10054319581476097, 0.007351342884217203]}
{'': [0.0001753627464010839, 0.038751398990404924], 'false': [nan, 0.03875139899040481], 'false,false': [0.01454024067150103, 0.05425210016064927], 'false,false,false': [0.045781773131876084, 0.07226674391502022], 'true': [0.00011833584416370141, 0.0], 'true,false': [0.0, nan]}
{'': [0.003053627769641124, 0.03459510371686486], 'false': [0.015710566446244974, 0.06822791819768893], 'false,false': [0.00783882461256069, 0.0024498737347574307], 'false,true': [0.017455585622310286, 0.0004588879821638776], 'false,true,true': [0.017455585622310286, nan], 'false,false,false': [nan, 0.0024498737347574307]}
{'': [0.027083007243077023, 0.040811132667954206], 'false': [0.03566799554809553, 0.04273629115891621], 'false,false': [0.0, 0.044290385301714044], 'false,false,false': [nan, 0.04429038530171404], 'true': [0.056810607188955684, 0.0016315066794185737], 'true,true': [0.07023904483408867, 0.011991114697709138], 'true,false': [1.203265111160423e-07, 0.007830316869089384], 'true,false,false': [1.3877787807814458e-18, 0.0156527834806754]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 4.088726758956909
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281548007084219;  // std dev = 0.143, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.07444368991324207;  // std dev = 0.207, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.13294298333209423;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.020441115135992227;  // std dev = 0.842, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15535090434115753;  // std dev = 2.232, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5190802827501917;  // std dev = 0.193, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(E, A) )
%   | | then return 0.7589679426525315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.553221684496431;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.553221684496431;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12428343824290342;  // std dev = 0.137, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.006554362420716594;  // std dev = 1.182, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.271788501681672;  // std dev = 1.175, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.20260145503874277;  // std dev = 1.648, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.47747981407830997;  // std dev = 0.267, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.42424184558702116;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17087771487266556;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4159247627507538;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.651345434589448;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.708296555361037;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.11185360213256873;  // std dev = 0.008, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, J) )
%   | | then return -0.17716540997563765;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.20514953659459648;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3513830140353109;  // std dev = 0.068, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.47766034314221006;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3196348947514208;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.49966833949277184;  // std dev = 0.164, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10781127824442946;  // std dev = 0.621, 63.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.04708077946860282;  // std dev = 0.702, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.12280871034193676;  // std dev = 0.928, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.29365774187489657;  // std dev = 0.100, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08887791218247365;  // std dev = 0.004, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -5.907967059213167E-4;  // std dev = 0.163, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.27234957499011686;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.34604141737788535;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.521815090272165;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12585828521812542;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.14809651665958412;  // std dev = 0.181, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.20833594854845555;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.23600073895907714;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.31338680137553965;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( tweets(A, G), follows(E, F) )
%   | | | then return -0.05320958504514173;  // std dev = 0.525, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.08353098876667078;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08970226966848147;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20629009114028926;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.04937122192507129;  // std dev = 0.578, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.004471998475865661;  // std dev = 1.222, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17954609879049307;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.23997530960449198;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return -0.075578607613914;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.012852015103240435;  // std dev = 0.642, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.33475712945503655;  // std dev = 0.218, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10792107192308492;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(I, A) )
%   | | then return -0.08385682591327111;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03263358334182727;  // std dev = 0.596, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.012419886562323935;  // std dev = 0.564, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.07902490953941076;  // std dev = 0.288, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.2094291302793965;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.2374803008821949;  // std dev = 0.138, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.07450430354597905;  // std dev = 0.029, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.08349122897623831;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.23814468899217225;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3301374365835788;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.11911657154824541;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.1827397467060487;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13646967031846655;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.3717910059092188;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.0684986362774624;  // std dev = 0.005, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07124479922002928;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05272511654004554;  // std dev = 0.189, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.03401160961965658;  // std dev = 0.121, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0.05625059453154185;  // std dev = 0.404, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14719904618126523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.02699212640840474;  // std dev = 0.181, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
Inference time using transfer learning 11.725551128387451
Refined model CLL: -0.104017


******************************************
Best model found
******************************************
Results 

CLL : -0.102835 

AUC ROC : 0.992916 

AUC PR : 0.339633 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 4.088726758956909 

Total Inference Time : 3.4465057849884033 

Total revision time: 11.668322086334229
Best scored revision CLL: -0.104017


Results 

CLL : -0.102835 

AUC ROC : 0.992916 

AUC PR : 0.339633 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 11.680248260498047 

Total Inference Time : 3.4465057849884033 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.608278512954712
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.32243464938522665;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6918754644404905;  // std dev = 0.991, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.050083373631427036;  // std dev = 0.247, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.031564855112908505;  // std dev = 1.127, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7510504613495087;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20658647624819215;  // std dev = 3.261, 52.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497553466440837;  // std dev = 0.719, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6791733826145332;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5897173184986105;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5621704953182898;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5621704953182898;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.045292205499826106;  // std dev = 2.705, 120.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=12 */
%   | | | else return 0.05856577254338776;  // std dev = 2.997, 53.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5404545365288874;  // std dev = 1.658, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11697610413071252;  // std dev = 0.101, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return -0.1268193500911458;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17825038050947872;  // std dev = 0.263, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31501755465986264;  // std dev = 0.256, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.38469853841418766;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.19000505434054796;  // std dev = 0.706, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5033124862783938;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.10086134762698579;  // std dev = 1.322, 104.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=3 */
%   | | else return -0.007981657708105369;  // std dev = 0.282, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0022840467822261173;  // std dev = 2.013, 107.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=30 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2660499666808506;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3958183274115403;  // std dev = 2.035, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14582738657359853;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.1232984258524473;  // std dev = 0.169, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27688938175757943;  // std dev = 1.305, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.09592415461066847;  // std dev = 1.387, 109.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06293100918146619;  // std dev = 1.582, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16259149528831401;  // std dev = 0.985, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( follows(A, E) )
%   | | then return 0.19824646703418203;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04768189508812813;  // std dev = 0.134, 59.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0014804773156500677;  // std dev = 1.304, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return 0.0997169103533237;  // std dev = 1.754, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12108052966517706;  // std dev = 0.231, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.14949659719105954;  // std dev = 1.389, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08829441612752402;  // std dev = 0.110, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34992356170106287;  // std dev = 1.193, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13219159194812455;  // std dev = 0.292, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16192644435706738;  // std dev = 0.917, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.10360465128175753;  // std dev = 1.070, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.07735167009862187;  // std dev = 0.015, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0916370633226666;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.020819468136375682;  // std dev = 0.201, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03620988561256281;  // std dev = 0.895, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16628621499930052;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055649953803845104;  // std dev = 1.406, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
Inference time using transfer learning 8.912495136260986
Parameter learned model CLL:-0.116019 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.6e-07, 0, 38], 'true,false,true': [6.32e-08, 63, 0], 'true,false,false,true': [1.05e-08, 22, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 17, 0], 'false,false': [0.499, 15, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.991, 1, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.247, 49, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.127, 16, 2], 'false,false,false,true': [0.077, 0, 3], 'false,false,false,false': [3.261, 32, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.719, 1, 27], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.103, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [1.49e-08, 0, 5], 'false,false,false,true': [2.705, 108, 12], 'false,false,false,false': [2.997, 40, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.658, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.101, 85, 0], 'false,true,false,false': [0.003, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.263, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.256, 0, 30], 'true,false': [0.0, 0, 1], 'false,true,true': [0.706, 1, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.328, 2, 15], 'false,false,true,false': [1.322, 101, 3], 'false,false,false': [0.282, 35, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.013, 77, 30], 'false,true': [0.035, 0, 7], 'false,false,true': [2.035, 3, 25], 'false,false,false,true': [0.186, 28, 0], 'false,false,false,false': [0.169, 26, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.305, 1, 47], 'true,false': [1.387, 106, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.582, 21, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.985, 1, 31], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.134, 54, 5], 'false,false,false,true': [1.304, 38, 11], 'false,false,false,false': [1.754, 19, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.231, 2, 31], 'false,true,true,true': [1.389, 2, 11], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.11, 90, 0], 'false,false,true': [1.193, 1, 20], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.292, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.917, 1, 31], 'true,true,false': [1.07, 1, 7], 'true,false,true': [0.015, 47, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.201, 3, 1], 'false,true': [0.895, 17, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.406, 17, 12]}]
{'': [0.21465600000000135, 0.24330578512396805], 'false': [0.2331961591220851, 0.2487244897959179], 'false,true': [-8.881784197001253e-17, -3.2653618371328133e-18], 'true': [1.7763568394002505e-15, 0.01136213502444187], 'true,false': [6.344131569286608e-17, 0.0399305555555556], 'true,false,false': [5.046468293750712e-18, 0.25], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.029782860141652396, 0.14581032640645972], 'false': [0.06086666074039569, 0.18800539658331497], 'false,false': [0.07050730987310373, 0.20876919120736662], 'false,false,false': [0.001994220064597337, 0.2045290056798355], 'false,false,true': [nan, 0.07050730987310373], 'false,true': [nan, 0.06086666074039569]}
{'': [0.017104796181215742, 0.10400245709638416], 'false': [nan, 0.10400245709638432], 'false,false': [7.401486830834377e-17, 0.09650220178503296], 'false,false,false': [0.06097662263627614, 0.16945552415952103], 'true': [0.01846751280971372, 0.004166817111781684], 'true,true': [0.01846751280971372, nan], 'true,false': [0.0, 0.0035551592972643173], 'false,false,true': [0.0, 4.4408920985006264e-17]}
{'': [0.04363832652598507, 0.0013167523568710468], 'false': [0.00011559767012870544, 0.0017356309145395987], 'false,false': [nan, 0.0017356309145395987], 'false,false,false': [nan, 0.0017356309145395987], 'false,true': [nan, 0.00011559767012870544], 'false,true,false': [0.00012081820475516151, 7.136201888818012e-07]}
{'': [0.0022697134343256428, 0.07628189965068154], 'false': [0.07111909236123042, 0.07479132180676062], 'false,false': [0.07310738852025477, 0.07959519452811123], 'false,false,true': [0.10373208399592931, 0.01681678102345742], 'false,true': [0.07111909236123042, nan], 'true': [0.0021887434682557644, 0.0]}
{'': [0.03786445637431825, 0.1092221126917458], 'false': [0.00017572760195439758, 0.11473175530617347], 'false,false': [0.14796250609996847, 0.0012947096799226685], 'true': [nan, 0.037864456374318144], 'true,false': [nan, 0.03786445637431825], 'false,false,false': [0.0012374796851050934, 0.0010931657969801534]}
{'': [0.052613112716600276, 0.07580404672864434], 'false': [nan, 0.07580404672864438], 'false,false': [nan, 0.07580404672864434], 'false,false,false': [nan, 0.07580404672864434], 'true': [0.03550488372108882, 0.017653274276847878]}
{'': [0.029465697526777444, 0.04473370100131397], 'false': [nan, 0.04473370100131386], 'false,false': [0.018087282247188773, 0.06074425259051424], 'false,false,false': [0.03471980135674416, 0.09326705064374452], 'true': [0.03034797702872564, 0.0], 'true,false': [0.0, nan]}
{'': [0.05314974988784284, 0.04520384354127328], 'false': [0.025071974288770282, 0.07254177309589122], 'false,false': [0.06779239623818653, 0.0018571989841031898], 'false,true': [0.1483137609497561, 0.0001336900841637524], 'false,true,true': [0.1483137609497561, nan], 'false,false,false': [nan, 0.0018571989841031898]}
{'': [0.032873903942909476, 0.04911119067821774], 'false': [0.02969478601013617, 0.06633258035519178], 'false,false': [0.0, 0.06821189796922376], 'false,false,false': [nan, 0.06821189796922374], 'true': [0.050170021497472336, 0.0009149734006192752], 'true,true': [0.026260227676544345, 0.14308805154316878], 'true,false': [4.554354101624494e-06, 0.004162371424363538], 'true,false,false': [-1.5419764230904951e-18, 0.010055692814433467]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.189898490905762
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.12886405191347466;  // std dev = 0.113, 77.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.681011873749416;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.7589407311753493;  // std dev = 0.125, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12687636570761307;  // std dev = 5.27e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.12687636570761326;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.12687636570761326;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.01075983503395539;  // std dev = 1.147, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.4893969860192291;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1548509161844523;  // std dev = 3.258, 62.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5641406364021735;  // std dev = 0.013, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(E, A) )
%   | | then return 0.7631311553101601;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6357161794256555;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.545600519295224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5763751155215594;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10531260649053352;  // std dev = 0.667, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | | else return -0.03482905974208313;  // std dev = 1.462, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11202955180893288;  // std dev = 2.468, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0.15567249146582296;  // std dev = 2.075, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.4240628968589702;  // std dev = 0.014, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.46112309825511894;  // std dev = 0.152, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2580839498242524;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4486756822507255;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6468413465616485;  // std dev = 0.164, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.6601529291407997;  // std dev = 0.194, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7440515353401678;  // std dev = 0.161, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.1083733290050536;  // std dev = 0.007, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.16111176059351506;  // std dev = 0.010, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.2702178151055265;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.32029381723273964;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.36021603113121947;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.48642060699012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), follows(A, I) )
%   | then return -0.06750133807650248;  // std dev = 0.114, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.5298849550180801;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13751528440032967;  // std dev = 2.36e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0.32528517081795083;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.0702571103570702;  // std dev = 1.879, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26954601760090896;  // std dev = 0.009, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.059817295885058935;  // std dev = 0.868, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | | | else return -0.08811045345275313;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09044244584241304;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28386039234732846;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3746502057922918;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.547320844953964;  // std dev = 0.224, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1175440854761688;  // std dev = 0.057, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.1391287981562607;  // std dev = 0.136, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22159099254191486;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return -0.08333901322019927;  // std dev = 0.002, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.051678436069617736;  // std dev = 0.727, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return 0.13243784208314624;  // std dev = 0.454, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0873401739563486;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21963125401497247;  // std dev = 1.080, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.10958400921578026;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05346637043211507;  // std dev = 0.869, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.25369381325776286;  // std dev = 0.836, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1855363957070713;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.25995490984008385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.0840185787064499;  // std dev = 0.924, 61.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=1 */
%   | | | else return -0.005949794019662575;  // std dev = 0.845, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | else if ( tweets(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.17187271587833905;  // std dev = 0.945, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1032549322159551;  // std dev = 0.036, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then return -0.08001356022535847;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.06852039633555637;  // std dev = 0.965, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | | else return 0.1104564584849082;  // std dev = 0.893, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(A, E) )
%   | | | then return 0.1578576262151783;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.042142373784821704;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16736300576367544;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.16352180271023212;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2755738028579167;  // std dev = 0.133, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08117247794109335;  // std dev = 0.016, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.10311200595030785;  // std dev = 0.934, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.30831537784427704;  // std dev = 0.215, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1288348348154735;  // std dev = 0.042, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13962221351506623;  // std dev = 0.014, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.29245854047574993;  // std dev = 0.100, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07640841954202064;  // std dev = 0.064, 78.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20640832523980035;  // std dev = 0.115, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08233724205135085;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.015893460276277152;  // std dev = 0.132, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1255374479527761;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.024212976696876106;  // std dev = 0.798, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return -0.09964931189210179;  // std dev = 0.849, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
Inference time using transfer learning 11.40689468383789
Refined model CLL: -0.107006


******************************************
Best model found
******************************************
Results 

CLL : -0.10388 

AUC ROC : 0.991888 

AUC PR : 0.304274 

Precision : 0.338843 

Recall : 0.97619 

F1 : 0.503067 

Total Learning Time : 7.189898490905762 

Total Inference Time : 7.239402770996094 

Total revision time: 20.38587236404419
Best scored revision CLL: -0.107006


Results 

CLL : -0.10388 

AUC ROC : 0.991888 

AUC PR : 0.304274 

Precision : 0.338843 

Recall : 0.97619 

F1 : 0.503067 

Total Learning Time : 20.397798538208008 

Total Inference Time : 7.239402770996094 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0536108016967773
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.16584124279182005;  // std dev = 0.462, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7251564092223275;  // std dev = 0.120, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06982399412324732;  // std dev = 0.210, 122.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.062613910589247;  // std dev = 1.154, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5723509352811836;  // std dev = 0.940, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.131280363723772;  // std dev = 4.084, 92.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=27 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5669362052236732;  // std dev = 0.246, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6412349028904978;  // std dev = 0.118, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6216777234485688;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5580096232210521;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.558009623221052;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021222355638234408;  // std dev = 3.439, 155.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=19 */
%   | | | else return 0.06105856076450366;  // std dev = 3.425, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5080174988950978;  // std dev = 2.729, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11837492359944525;  // std dev = 0.119, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return -0.1245935989233351;  // std dev = 0.001, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16651886013474448;  // std dev = 0.224, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3144162722188759;  // std dev = 0.311, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.040823294112736885;  // std dev = 0.585, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21969065458045833;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6444260382315543;  // std dev = 0.277, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10213978377039788;  // std dev = 1.388, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else return 0.061530120763901554;  // std dev = 0.344, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01908344751708017;  // std dev = 2.269, 148.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=47 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2714725112969975;  // std dev = 0.183, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5311179905542325;  // std dev = 0.845, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12107332336560588;  // std dev = 0.160, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.1292525323510697;  // std dev = 0.166, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26026949041120256;  // std dev = 1.580, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return -0.0907883063860101;  // std dev = 1.183, 162.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05826174000233632;  // std dev = 1.867, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19149430243061827;  // std dev = 0.066, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E) )
%   | | then return 0.3197060418156401;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05154006767285959;  // std dev = 0.131, 99.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009400666777465223;  // std dev = 1.504, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | | | else return 0.056921713753025883;  // std dev = 2.203, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13117826666175483;  // std dev = 0.204, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2753998077024851;  // std dev = 0.568, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08893827961458409;  // std dev = 0.094, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4035767692084093;  // std dev = 0.672, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1138221661983082;  // std dev = 0.195, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1601139644080083;  // std dev = 0.993, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.18412645091715651;  // std dev = 0.324, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.0790053981971481;  // std dev = 0.017, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09254271220983616;  // std dev = 0.041, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.0687695817998635;  // std dev = 0.313, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.03567986564038457;  // std dev = 1.026, 40.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20394935028488348;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08009116742046965;  // std dev = 1.543, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
Inference time using transfer learning 9.437773704528809
Parameter learned model CLL:-0.111278 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false,true': [4.71e-08, 45, 0], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [3.65e-08, 36, 0], 'false,false': [0.462, 36, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.12, 0, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.21, 114, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.154, 25, 2], 'false,false,false,true': [0.94, 1, 5], 'false,false,false,false': [4.084, 65, 27]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.246, 0, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.118, 0, 2], 'true,false,false': [0.136, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [2.11e-08, 0, 7], 'false,false,false,true': [3.439, 136, 19], 'false,false,false,false': [3.425, 55, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.729, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.119, 112, 0], 'false,true,false,false': [0.001, 22, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.224, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.311, 0, 46], 'true,false': [0.585, 1, 1], 'false,true,true': [0.957, 1, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.277, 0, 22], 'false,false,true,false': [1.388, 147, 3], 'false,false,false': [0.344, 32, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.269, 101, 47], 'false,true': [0.183, 0, 12], 'false,false,true': [0.845, 0, 34], 'false,false,false,true': [0.16, 53, 0], 'false,false,false,false': [0.166, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.58, 2, 73], 'true,false': [1.183, 159, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.867, 34, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.066, 0, 50], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.131, 91, 8], 'false,false,false,true': [1.504, 59, 17], 'false,false,false,false': [2.203, 33, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 2, 47], 'false,true,true,true': [0.568, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.094, 118, 0], 'false,false,true': [0.672, 0, 27], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.195, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.993, 1, 50], 'true,true,false': [0.324, 0, 10], 'true,false,true': [0.017, 81, 0], 'true,false,false,true': [0.041, 22, 0], 'true,false,false,false': [0.313, 22, 1], 'false,true': [1.026, 24, 16], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.543, 20, 15]}]
{'': [0.2060997732426308, 0.2118820861678018], 'false': [0.2107511569953715, 0.21301775147928942], 'false,true': [0.055363321799307655, 3.700743415417188e-17], 'true': [0.016124697661918288, 0.0066663663798927075], 'false,true,true': [-2.7328566760003855e-16, 0.18750000000000006], 'true,false': [7.993605777301127e-17, 0.019991670137442803], 'true,false,false': [4.9343245538895844e-17, 0.18750000000000003]}
{'': [0.0002847024309748663, 0.11502388657266648], 'false': [0.04408459919762001, 0.1681871531658849], 'false,false': [0.049346254667034684, 0.19038905647961868], 'false,false,false': [0.14731349556354642, 0.1812875210225164], 'false,false,true': [nan, 0.049346254667034684], 'false,true': [nan, 0.04408459919762001]}
{'': [0.0024479073323882988, 0.114353679577265], 'false': [nan, 0.11435367957726504], 'false,false': [1.6148698540002277e-16, 0.10570624973331623], 'false,false,false': [0.07630778578871264, 0.16524275104134373], 'true': [0.0015139934587404368, 0.004687006990970577], 'true,false': [0.006926447176057393, 0.0036819499833006474], 'true,true': [0.0015139934587404368, nan], 'false,false,true': [0.0, 6.344131569286608e-17]}
{'': [0.07677006967308812, 0.0008199104612159052], 'false': [0.00011167650616258368, 0.0007050806306138221], 'false,false': [nan, 0.0007050806306138221], 'false,false,false': [nan, 0.0007050806306138221], 'false,true': [nan, 0.00011167650616258368], 'false,true,false': [0.0001272494784491671, 7.311884351778421e-08]}
{'': [0.012128788867586357, 0.08527211528520892], 'false': [0.07638888888888888, 0.08336220416085414], 'false,false': [0.07382788153046352, 0.11867145543709852], 'false,true': [0.07638888888888888, nan], 'false,false,true': [0.0034994943485801918, 0.012852411738891628], 'true': [0.0020973530287647104, 0.17111757539437306]}
{'': [0.03477938885677757, 0.08729602539763172], 'false': [0.002798804486465911, 0.09125895139492757], 'false,false': [0.020989400145262013, 0.0006023911011801339], 'true': [nan, 0.03477938885677773], 'true,false': [nan, 0.03477938885677757], 'false,false,false': [0.00048565645625232097, 0.0007262417896695011]}
{'': [0.04309288647491596, 0.06837706992946099], 'false': [nan, 0.06837706992946099], 'false,false': [nan, 0.06837706992946099], 'false,false,false': [nan, 0.06837706992946099], 'true': [0.033281264929951766, 0.008634804903643446]}
{'': [0.000400168490470721, 0.040942637563807185], 'false': [nan, 0.040942637563807234], 'false,false': [0.01723297189522236, 0.05750961326806042], 'false,false,false': [0.02976769562657613, 0.09702416919342151], 'true': [8.585323055203098e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.04158497229245441, 0.03899324359920293], 'false': [0.0182767520331879, 0.06910063073577498], 'false,false': [0.01672878317710331, 0.0008276860827122105], 'false,true': [0.01699017116709296, 7.440536253449451e-05], 'false,true,true': [0.01699017116709296, nan], 'false,false,false': [nan, 0.0008276860827122105]}
{'': [0.019466551815767442, 0.04593659269319048], 'false': [0.02631031731763212, 0.0665384098486295], 'false,false': [0.0, 0.06801337256558518], 'false,false,false': [nan, 0.06801337256558511], 'true': [0.01796055218868785, 0.00084621379901612], 'true,true': [0.01933351064582565, 0.010476389058498996], 'true,false': [3.47752022002825e-06, 0.0023619031002221342], 'true,false,false': [7.749453694615918e-05, 0.004270688262078657]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.572093725204468
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.834339411289988;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.1343883783333237;  // std dev = 0.086, 134.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6753566360660461;  // std dev = 0.215, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else return 0.7327268492216931;  // std dev = 0.147, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.120550571718374;  // std dev = 0.090, 94.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7205357020890584;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12626564811164878;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12544463852839133;  // std dev = 1.83e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2500744951335401;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.39727375351688315;  // std dev = 1.707, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5715158271388739;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.5862319949643703;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5556265350704234;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5520913498358907;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.10416734381858998;  // std dev = 0.865, 76.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=1 */
%   | | | else return -0.04212283603061257;  // std dev = 1.671, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.062068096891297816;  // std dev = 2.174, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.13427166846470545;  // std dev = 2.512, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.43106366306294813;  // std dev = 0.031, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.41262462005924344;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5493619558349149;  // std dev = 0.231, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6350349428144471;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7003709127946398;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then return -0.10530511335575041;  // std dev = 0.003, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.12276396316733745;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.16387030143049366;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.2800302330725446;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32869325879320754;  // std dev = 0.002, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.010113882276655736;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.315079245968785;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5459613529665084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.06322743742702805;  // std dev = 0.130, 117.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3884632648928682;  // std dev = 0.306, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10560909290688361;  // std dev = 0.112, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.08954518957768058;  // std dev = 0.580, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0012861406541985368;  // std dev = 2.151, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2641867415432563;  // std dev = 0.014, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( tweets(A, E) )
%   | | then return -0.05035942514002945;  // std dev = 0.146, 96.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=7 */
%   | | else return -0.09078155550061998;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.28577556850070923;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24655416290344737;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.277205876271218;  // std dev = 0.793, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.44903561682540144;  // std dev = 0.404, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10085533846520213;  // std dev = 0.057, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.13523780353018294;  // std dev = 0.352, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.2152606828931149;  // std dev = 0.025, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.07044148417491904;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.22511124133239835;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.0597213979654293;  // std dev = 0.913, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.37346402681529756;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08477178580743913;  // std dev = 0.004, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.09387110612611997;  // std dev = 0.568, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.010525990311577298;  // std dev = 1.322, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.01587212153770678;  // std dev = 1.655, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18261466083887248;  // std dev = 0.021, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.29473805137328435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, E) )
%   | | | then return -0.07303067650652798;  // std dev = 0.885, 64.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=1 */
%   | | | else return -0.09133858431832027;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.293634139361966;  // std dev = 0.246, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08069829170743124;  // std dev = 0.026, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18309561402988356;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.00461244161816921;  // std dev = 1.452, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return 0.03770477691359999;  // std dev = 1.546, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15870572850306824;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(E, A) )
%   | | then return -0.06177948870762984;  // std dev = 0.543, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1572947920499957;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.35424722190470437;  // std dev = 0.378, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14886475895265283;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07285395104536611;  // std dev = 0.004, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27280527343040956;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3976261812833629;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12706441393793716;  // std dev = 0.047, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.15795077810343;  // std dev = 0.073, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.06491728411344945;  // std dev = 0.200, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06604902047365778;  // std dev = 0.025, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19331998858479765;  // std dev = 0.130, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.07960673991735713;  // std dev = 0.039, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.04690815691599733;  // std dev = 0.176, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.4295673438821077;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.011316770307445623;  // std dev = 1.004, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return -0.033720244687028667;  // std dev = 1.005, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning 9.89028000831604
Refined model CLL: -0.098893


******************************************
Best model found
******************************************
Results 

CLL : -0.10184 

AUC ROC : 0.99369 

AUC PR : 0.381992 

Precision : 0.343575 

Recall : 0.97619 

F1 : 0.508264 

Total Learning Time : 7.572093725204468 

Total Inference Time : 7.5334765911102295 

Total revision time: 23.97264289855957
Best scored revision CLL: -0.098893


Results 

CLL : -0.10184 

AUC ROC : 0.99369 

AUC PR : 0.381992 

Precision : 0.343575 

Recall : 0.97619 

F1 : 0.508264 

Total Learning Time : 23.98456907272339 

Total Inference Time : 7.5334765911102295 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.464550495147705
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.994, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.07935106490048778;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.723671991084517;  // std dev = 0.122, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03651071154663268;  // std dev = 0.264, 149.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05974557890063819;  // std dev = 1.786, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.48925612548726016;  // std dev = 1.416, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.1342700720758434;  // std dev = 4.202, 96.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5021356434252805;  // std dev = 1.905, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7187477501144448;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6479651506314235;  // std dev = 0.180, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5572339837302392;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5572339837302394;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.022282114858567306;  // std dev = 4.111, 216.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=27 */
%   | | | else return 0.03680878439537159;  // std dev = 3.584, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5402937532982821;  // std dev = 2.357, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12105049161660121;  // std dev = 0.089, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | | else return -0.1261605322489527;  // std dev = 0.009, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16291723029816055;  // std dev = 0.196, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3178848388163993;  // std dev = 0.994, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.4277927431461913;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.23693374937903733;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6038809733242696;  // std dev = 0.955, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return -0.09934936954704104;  // std dev = 1.788, 212.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=5 */
%   | | else return 0.009025701359918741;  // std dev = 0.304, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03245034502592773;  // std dev = 2.804, 193.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19535351275773694;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44976509065734144;  // std dev = 2.101, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12473065803198748;  // std dev = 0.176, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return -0.12437101503753112;  // std dev = 0.166, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28910521028152214;  // std dev = 1.262, 97.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=96 */
%   | else return -0.08666441546913357;  // std dev = 1.780, 198.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07114652319858492;  // std dev = 1.960, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1609529277106085;  // std dev = 1.396, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( follows(A, E) )
%   | | then return 0.23092173499789548;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05310934386692035;  // std dev = 0.151, 162.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002366787807462847;  // std dev = 1.867, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
%   | | | else return 0.0626848660207307;  // std dev = 2.210, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18230353431662152;  // std dev = 0.061, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2991529478494803;  // std dev = 0.814, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09398932548728268;  // std dev = 0.117, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38195551419757073;  // std dev = 1.178, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11865395723070056;  // std dev = 0.203, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16842338185384081;  // std dev = 1.222, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.17174694595256462;  // std dev = 0.352, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08218216378631572;  // std dev = 0.018, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09716194506017506;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.010260950931530389;  // std dev = 0.930, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.00970172828095118;  // std dev = 1.176, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2062380809194292;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027047085592949757;  // std dev = 1.833, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
Inference time using transfer learning 8.516969919204712
Parameter learned model CLL:-0.112418 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 84], 'true,false,true': [2.98e-08, 121, 0], 'true,false,false,true': [1.369, 30, 2], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.47e-08, 42, 0], 'false,false': [0.463, 40, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.122, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 133, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.786, 47, 4], 'false,false,false,true': [1.416, 3, 8], 'false,false,false,false': [4.202, 67, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.905, 4, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.18, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.111, 189, 27], 'false,false,false,false': [3.584, 68, 17]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.357, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.089, 129, 0], 'false,true,false,false': [0.009, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.196, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.994, 1, 63], 'true,false': [0.0, 0, 1], 'false,true,true': [0.97, 1, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.955, 1, 29], 'false,false,true,false': [1.788, 207, 5], 'false,false,false': [0.304, 46, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.804, 127, 66], 'false,true': [0.978, 1, 17], 'false,false,true': [2.101, 3, 41], 'false,false,false,true': [0.176, 69, 0], 'false,false,false,false': [0.166, 55, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.262, 1, 96], 'true,false': [1.78, 192, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.96, 34, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 66], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 146, 16], 'false,false,false,true': [1.867, 70, 22], 'false,false,false,false': [2.21, 39, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.061, 0, 64], 'false,true,true,true': [0.814, 0, 31], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 161, 0], 'false,false,true': [1.178, 1, 29], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.203, 63, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.222, 1, 69], 'true,true,false': [0.352, 0, 15], 'true,false,true': [0.018, 142, 0], 'true,false,false,true': [0.033, 22, 0], 'true,false,false,false': [0.93, 17, 3], 'false,true': [1.176, 42, 19], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.833, 35, 16]}]
{'': [0.23026091113995042, 0.21425040604477227], 'true': [0.01162629757785438, 0.018743153880481873], 'false': [0.21445847890352004, 0.2140309155766939], 'false,true': [-2.8047739569477637e-16, 4.7580986769649563e-17], 'true,false': [7.340317518182853e-18, 0.07638888888888874], 'true,false,false': [0.05859375000000002, 0.18750000000000003], 'false,true,true': [-2.220446049250313e-16, 1.4802973661668753e-16]}
{'': [0.00022108393872557244, 0.12261051141175973], 'false': [0.06949311010728361, 0.16413383691827685], 'false,false': [0.0625488731084975, 0.19540178044195014], 'false,false,false': [0.18218680961984182, 0.18396117267778314], 'false,true': [nan, 0.06949311010728361], 'false,false,true': [nan, 0.0625488731084975]}
{'': [0.05846951716011267, 0.10968784485053766], 'false': [nan, 0.10968784485053715], 'false,false': [-1.1102230246251565e-16, 0.0995296925354062], 'false,false,false': [0.07824142550074595, 0.15112123939517305], 'true': [0.06370020755449243, 0.008507033701412954], 'true,true': [0.06370020755449243, nan], 'true,false': [0.016768213970707935, 0.004042679357816326], 'false,false,true': [0.0, -1.1102230246251565e-16]}
{'': [0.04409613096205943, 0.0005443246709777083], 'false': [5.3877098388846725e-05, 0.0006285211078552933], 'false,false': [nan, 0.0006285211078552933], 'false,false,false': [nan, 0.0006285211078552933], 'false,true': [nan, 5.387709838883569e-05], 'false,true,false': [6.142667067207954e-05, 2.5204350032372036e-06]}
{'': [0.015393057559993376, 0.07683326675876895], 'false': [0.05536332179930795, 0.07481538200079353], 'false,false': [0.0706883277570762, 0.0922852479219105], 'false,false,true': [0.030372258018905817, 0.015087698684121466], 'false,true': [0.05536332179930795, nan], 'true': [0.015447731816150334, 0.0]}
{'': [0.04073537227781075, 0.08928419805454685], 'false': [0.05313434585688606, 0.09037694283752305], 'false,false': [0.1002750321054176, 0.0004722616328294652], 'true': [nan, 0.04073537227781081], 'true,false': [nan, 0.04073537227781075], 'false,false,false': [0.0004469380201457745, 0.0005039592828470814]}
{'': [0.04730337075832743, 0.06859652918985505], 'false': [nan, 0.06859652918985494], 'false,false': [nan, 0.06859652918985505], 'false,false,false': [nan, 0.06859652918985505], 'true': [0.016407753817787696, 0.016009703209233308]}
{'': [0.02832556256851535, 0.04063620364456095], 'false': [nan, 0.040636203644560435], 'false,false': [0.022800032052275022, 0.05667520851035691], 'false,false,false': [0.03790608910564286, 0.08421544254258752], 'true': [0.028671163741935984, 0.0], 'true,false': [0.0, nan]}
{'': [0.0037400939699054614, 0.04053626504199355], 'false': [0.02444982931427574, 0.07012277582262866], 'false,false': [0.04624185844494108, 0.0006527564393839599], 'false,true': [0.02138706023628145, 8.441826853259247e-05], 'false,true,true': [0.02138706023628145, nan], 'false,false,false': [nan, 0.0006527564393839599]}
{'': [0.022599450060155568, 0.042272869135183924], 'false': [0.022653250695190683, 0.0645429672855035], 'false,false': [0.0, 0.06586238808685077], 'false,false,false': [nan, 0.06586238808685078], 'true': [0.019027824551773785, 0.005256730192841875], 'true,true': [0.02133589621088891, 0.008247726705523605], 'true,false': [2.3985226197023004e-06, 0.02248343704728926], 'true,false,false': [5.000160899963761e-05, 0.043204520287216684]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.55255937576294
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8399671169176942;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.822434649385226;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.12344615692502788;  // std dev = 0.134, 163.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.06648226843284567;  // std dev = 0.406, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7266081162449821;  // std dev = 0.148, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.7231283888169974;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4337386289033884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7425376591919715;  // std dev = 0.198, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1274777676509871;  // std dev = 5.96e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04555068126409535;  // std dev = 3.111, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | | | else return 0.16675896572132473;  // std dev = 2.586, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.5374023248560915;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.6105599445988017;  // std dev = 0.182, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then return 0.328717799034127;  // std dev = 0.433, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.46205379871241814;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5772285558686348;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5121511412775379;  // std dev = 1.006, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11395905712723732;  // std dev = 6.32e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07187466275337001;  // std dev = 2.303, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0.10989648659698756;  // std dev = 3.247, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.4265934314766206;  // std dev = 0.103, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.3561068955386547;  // std dev = 0.922, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.6357831392253759;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.4403661609972254;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5631017021408515;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7048318448911546;  // std dev = 0.269, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.1029486319794942;  // std dev = 5.16e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.1029486319794944;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.1509661765762312;  // std dev = 0.169, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3263979807133753;  // std dev = 0.042, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.25072012573033287;  // std dev = 0.964, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.37043703628917846;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5057938391429955;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3371971937978548;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25374421985706275;  // std dev = 0.272, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(I, A) )
%   | | then return -0.0650214973463031;  // std dev = 0.120, 212.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=15 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.015165141570369944;  // std dev = 1.912, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | | | else return 0.054662188888750206;  // std dev = 2.590, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.2620089637928334;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.1857934625184738;  // std dev = 0.289, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2606936669163821;  // std dev = 1.051, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.08843838365509993;  // std dev = 4.94e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.08843838365509997;  // std dev = 1.86e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2819644075287395;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.39674962588018337;  // std dev = 1.036, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.5193157997467927;  // std dev = 0.470, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.11767437321997842;  // std dev = 0.026, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.2117035940371574;  // std dev = 0.013, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.04199194666141676;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21680214703583617;  // std dev = 0.011, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.2520541557641817;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07530184204541221;  // std dev = 0.045, 118.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=2 */
%   | | else return -0.007424986606376249;  // std dev = 0.149, 91.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19391399373812612;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 7.713508876671052E-4;  // std dev = 1.961, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | | | else return 0.04724476100266284;  // std dev = 1.714, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18568453322266976;  // std dev = 0.016, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else return 0.2656831830406863;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.14123398765140532;  // std dev = 1.294, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.3050995221557767;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07770364708492332;  // std dev = 0.003, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.32746108882967156;  // std dev = 0.514, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11060589990900396;  // std dev = 0.032, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.009201681471745212;  // std dev = 1.532, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | | else return 0.03417262281868949;  // std dev = 1.593, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15995925438683645;  // std dev = 0.014, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.015804364895993062;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15745571881665427;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1606880180183621;  // std dev = 0.088, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.20234362717402915;  // std dev = 0.811, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07195513438913198;  // std dev = 0.002, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.3595017813024641;  // std dev = 0.087, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4628380396391884;  // std dev = 0.224, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.11908402006211531;  // std dev = 0.025, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11247935740863238;  // std dev = 0.197, 88.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=84 */
%   | else return -0.06116908033530896;  // std dev = 0.046, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.10658963173024094;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.5674771830279065;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.005226921009604116;  // std dev = 1.210, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0.01813751955846034;  // std dev = 0.534, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15190095317255703;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.005763606619163711;  // std dev = 1.030, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.03103224470423912;  // std dev = 1.115, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning 14.966557741165161
Refined model CLL: -0.103131


******************************************
Best model found
******************************************
Results 

CLL : -0.101232 

AUC ROC : 0.992613 

AUC PR : 0.333611 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 16.55255937576294 

Total Inference Time : 14.1198091506958 

Total revision time: 41.81538677215576
Best scored revision CLL: -0.103131


Results 

CLL : -0.101232 

AUC ROC : 0.992613 

AUC PR : 0.333611 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 41.82731294631958 

Total Inference Time : 14.1198091506958 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.6887543201446533
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10851773156715437;  // std dev = 1.390, 60.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.1607805140468801;  // std dev = 0.459, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7032118574566361;  // std dev = 1.413, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03956180259086599;  // std dev = 0.258, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06635380093354229;  // std dev = 1.795, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7557737273661961;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11660747570393226;  // std dev = 5.002, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5471458832821036;  // std dev = 1.456, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7269147160110082;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4798279907865687;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5931173851409532;  // std dev = 0.159, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5640233911861817;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018292405670767176;  // std dev = 4.621, 265.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=34 */
%   | | | else return 0.06883306505859124;  // std dev = 4.078, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5548919368453731;  // std dev = 2.115, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12062846641090368;  // std dev = 0.094, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.12883835451189957;  // std dev = 0.002, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16118574046845352;  // std dev = 0.244, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2874618184457237;  // std dev = 1.646, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4395059318635284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29553546382621837;  // std dev = 0.012, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.47268469433948523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6118359697785134;  // std dev = 0.892, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.1013918853081694;  // std dev = 1.795, 270.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=5 */
%   | | else return 0.017886052629754866;  // std dev = 0.308, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04060938555990043;  // std dev = 2.932, 229.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2468425764958417;  // std dev = 0.152, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5004537477725268;  // std dev = 1.638, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12703473556419664;  // std dev = 0.197, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.12592525931771403;  // std dev = 0.209, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26302235596749274;  // std dev = 2.153, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09205592705759796;  // std dev = 1.847, 270.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03887694396574183;  // std dev = 2.226, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17814808257463272;  // std dev = 1.004, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.24203110974227993;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.6212516982935937;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05259443041324631;  // std dev = 0.143, 200.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.014777155352535069;  // std dev = 2.369, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.04585586591804146;  // std dev = 2.467, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1551081187611583;  // std dev = 0.171, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2616882374481028;  // std dev = 1.188, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0918403237954484;  // std dev = 0.086, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39864399065622563;  // std dev = 0.774, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1142771973244923;  // std dev = 0.275, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16361349772263423;  // std dev = 1.528, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.1600156417048321;  // std dev = 0.367, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08301103476647732;  // std dev = 0.030, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08965106445332892;  // std dev = 0.038, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.019625208146004738;  // std dev = 0.972, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02322132740271144;  // std dev = 1.283, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1973125998342513;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03351636637881881;  // std dev = 1.944, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
Inference time using transfer learning 8.802511930465698
Parameter learned model CLL:-0.111129 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 150, 0], 'true,false,false,true': [1.39, 58, 2], 'true,false,false,false': [1.265, 8, 2], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.459, 53, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.413, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 167, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.795, 55, 4], 'false,false,false,true': [0.133, 0, 8], 'false,false,false,false': [5.002, 102, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.456, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.995, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.159, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.621, 231, 34], 'false,false,false,false': [4.078, 77, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.115, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.094, 175, 0], 'false,true,false,false': [0.002, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.244, 86, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.646, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.012, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.892, 1, 39], 'false,false,true,false': [1.795, 265, 5], 'false,false,false': [0.308, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.932, 147, 82], 'false,true': [0.152, 0, 22], 'false,false,true': [1.638, 1, 52], 'false,false,false,true': [0.197, 80, 0], 'false,false,false,false': [0.209, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.153, 4, 121], 'true,false': [1.847, 263, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.226, 57, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.004, 1, 83], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 181, 19], 'false,false,false,true': [2.369, 96, 28], 'false,false,false,false': [2.467, 56, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.171, 2, 78], 'false,true,true,true': [1.188, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.086, 207, 0], 'false,false,true': [0.774, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.275, 102, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.528, 2, 85], 'true,true,false': [0.367, 0, 19], 'true,false,true': [0.03, 157, 0], 'true,false,false,true': [0.038, 27, 0], 'true,false,false,false': [0.972, 24, 4], 'false,true': [1.283, 47, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.944, 44, 21]}]
{'': [0.22153637698069403, 0.2191380569758956], 'true': [0.01851192595229848, 0.01785123966942138], 'false': [0.2266589506172851, 0.21104570637119213], 'false,true': [0.03698224852071082, 5.3097622916855314e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.1546319456101628e-16, 0.0538775510204081], 'true,false,false': [0.032222222222222166, 0.16000000000000003]}
{'': [0.022960971395791695, 0.11980098673345298], 'false': [0.06632717740369626, 0.15955585062160849], 'false,false': [0.05458604920873766, 0.18754476140989032], 'false,false,false': [0.0022225117778191805, 0.17619699834259436], 'false,true': [nan, 0.06632717740369626], 'false,false,true': [nan, 0.05458604920873766]}
{'': [0.04071151737942326, 0.11644798147636998], 'false': [nan, 0.11644798147636942], 'false,false': [0.0013819763008003757, 0.1055927869288392], 'false,false,false': [0.08058918980868027, 0.1663411559350684], 'true': [0.030723787316732934, 0.09811476188630645], 'true,false': [0.01651230839128237, 0.11005261727244672], 'true,true': [0.030723787316732934, nan], 'false,false,true': [0.0042323024212013545, -2.3684757858670006e-16]}
{'': [0.028485756298993026, 0.0005455481809247557], 'false': [5.1239726465839506e-05, 0.0006932268696349161], 'false,false': [nan, 0.0006932268696349161], 'false,false,false': [nan, 0.0006932268696349161], 'false,true': [nan, 5.123972646583744e-05], 'false,true,false': [5.039193721029583e-05, 8.649766632395916e-08]}
{'': [0.033739909695904784, 0.07561591618877976], 'false': [0.0014297255890590034, 0.07473407267802433], 'false,false': [0.0701299898809706, 0.09481177452790862], 'false,false,true': [0.01988334456907892, 0.011936005299545907], 'true': [0.033876258413708484, 0.0], 'false,true': [6.838065109926461e-06, 0.0]}
{'': [0.03754115158674541, 0.08378465775284794], 'false': [0.0010491960713566728, 0.0882265933859881], 'false,false': [0.05059770790966905, 0.0005349095228125765], 'true': [nan, 0.037541151586745064], 'true,false': [nan, 0.03754115158674541], 'false,false,false': [0.0004833027780126259, 0.0005900611501984579]}
{'': [0.04764527614516609, 0.05831776911871925], 'false': [nan, 0.05831776911871939], 'false,false': [nan, 0.05831776911871925], 'false,false,false': [nan, 0.05831776911871925], 'true': [0.03708550690920308, 0.01263513823807804]}
{'': [0.018958589072183948, 0.040514623155896295], 'false': [nan, 0.04051462315589654], 'false,false': [0.020531430350016446, 0.05822780278131865], 'false,false,false': [0.04526349992741061, 0.0760878200221246], 'true': [0.011990593916102058, 0.1656694566866818], 'true,false': [8.511614658836264e-05, 0.0]}
{'': [0.02921819697421534, 0.0364609766098661], 'false': [0.022441339297624797, 0.05798666011806659], 'false,false': [0.014987695710468495, 0.0007396624593113497], 'false,true': [0.03619543406508477, 3.569826816029429e-05], 'false,true,true': [0.03619543406508477, nan], 'false,false,false': [nan, 0.0007396624593113497]}
{'': [0.023699643381874202, 0.039466641968311754], 'false': [0.022855860080084788, 0.057197603333696306], 'false,false': [0.0, 0.058156657766410616], 'false,false,false': [nan, 0.05815665776641067], 'true': [0.023304963137162946, 0.004943612774721332], 'true,true': [0.026840434933880854, 0.0071055995422715295], 'true,false': [5.8062892672731824e-06, 0.018415581798744408], 'true,false,false': [5.294348949460097e-05, 0.03371517968981326]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;true,false;follows(A, E).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.43483829498291
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.09837280403092252;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.09952824544433996;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7076407356905915;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7310362266083236;  // std dev = 0.115, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6308302169796434;  // std dev = 1.245, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.12544463852839127;  // std dev = 5.16e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.09149622355963201;  // std dev = 0.166, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.05152543012024613;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.08151798099001979;  // std dev = 1.172, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7224028569698224;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1057726216437581;  // std dev = 4.742, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.5716479958263354;  // std dev = 0.316, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( tweets(A, F) )
%   | | then return 0.41178579591450937;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5012075744669384;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5770322561699565;  // std dev = 0.103, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5571695835695928;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5796512989183074;  // std dev = 0.886, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11731583353439845;  // std dev = 0.179, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.08422194836129937;  // std dev = 3.887, 110.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=29 */
%   | | | else return 0.20950056525516375;  // std dev = 2.450, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.4215748898764893;  // std dev = 1.059, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | | | else return 0.6586397300106136;  // std dev = 0.300, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24956968138875313;  // std dev = 0.697, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3392705008756132;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6857002691120995;  // std dev = 0.034, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.6671207776196453;  // std dev = 0.936, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(I, A) )
%   | then return -0.10559390444582221;  // std dev = 0.012, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( follows(A, J) )
%   | | then return -0.14781319273490448;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.18712968004922984;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3261087541389516;  // std dev = 0.051, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.17332438076321996;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2966503244466022;  // std dev = 1.012, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.4724272910708175;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3250556942274736;  // std dev = 0.035, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.09670590814550356;  // std dev = 0.706, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   | | | else return -0.030857192182047154;  // std dev = 1.873, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.02308138625492342;  // std dev = 2.228, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.10566169049196154;  // std dev = 2.871, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.24305972479729027;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.13557234348038522;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.0506424853686418;  // std dev = 0.122, 182.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.29235247431085487;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12128752317756494;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.2394094297137187;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.4285850515374605;  // std dev = 1.254, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5619572093433987;  // std dev = 0.340, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.13051522040337804;  // std dev = 0.031, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(C, B), follows(D, A) )
%   | | | then return 0.21364793545537963;  // std dev = 0.016, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.16318737296561878;  // std dev = 1.393, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return -0.050174120517222504;  // std dev = 0.140, 145.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=17 */
%   | else return 0.03837856682940323;  // std dev = 0.182, 104.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=35 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.22842842708482014;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.39524351131002483;  // std dev = 0.094, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.12359293370588242;  // std dev = 0.054, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.018520674785349075;  // std dev = 0.763, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.1983099317836547;  // std dev = 1.224, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18683166170925367;  // std dev = 0.112, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2467566206336576;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.34246660828040576;  // std dev = 0.312, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.06985121155618883;  // std dev = 1.214, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.08269351874827921;  // std dev = 0.118, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2066075027565677;  // std dev = 1.429, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.11140365044090696;  // std dev = 0.075, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.019564913540962604;  // std dev = 1.538, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.09123589018483359;  // std dev = 1.312, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1503032028061375;  // std dev = 0.125, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.019080450858506477;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.18759706928334063;  // std dev = 0.208, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.2590451534793043;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.18942870464949338;  // std dev = 0.082, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.26271286122947424;  // std dev = 1.038, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07719188196086176;  // std dev = 0.010, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.31116419760643976;  // std dev = 0.062, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11958855773963767;  // std dev = 0.035, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1260981167519887;  // std dev = 0.151, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | else return 0.24209032677611805;  // std dev = 0.065, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.0652512704718272;  // std dev = 0.047, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1409146497106576;  // std dev = 1.045, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08614116849108053;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.05661070466167901;  // std dev = 0.267, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2181653688516373;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0024796279426664894;  // std dev = 1.002, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return -0.0014371285170814213;  // std dev = 1.255, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
Inference time using transfer learning 16.78646421432495
Refined model CLL: -0.104219


******************************************
Best model found
******************************************
Results 

CLL : -0.099679 

AUC ROC : 0.993188 

AUC PR : 0.3785 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 11.43483829498291 

Total Inference Time : 17.2551748752594 

Total revision time: 41.01283264160156
Best scored revision CLL: -0.104219


Results 

CLL : -0.099679 

AUC ROC : 0.993188 

AUC PR : 0.3785 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 41.02475881576538 

Total Inference Time : 17.2551748752594 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3382277488708496
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(E, C) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5248156017661788;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022416020350994204;  // std dev = 0.321, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.8509220325135542;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04787446301914894;  // std dev = 1.617, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5843774442742592;  // std dev = 0.204, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.20908185502506504;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03858787534441706;  // std dev = 1.990, 49.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | | | else return 0.08564009974338863;  // std dev = 1.365, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.513924628465572;  // std dev = 1.166, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1734518107099568;  // std dev = 0.373, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.13778680761195258;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18424045600547762;  // std dev = 0.183, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.275312622206989;  // std dev = 0.901, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30008074025871445;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6032318212044143;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08236166620465617;  // std dev = 1.312, 52.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=3 */
%   | | else return -0.24918405935499754;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01663294335114049;  // std dev = 1.610, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24103854151272874;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5227172791896288;  // std dev = 0.371, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.16894502681393742;  // std dev = 0.217, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.17922372286422128;  // std dev = 0.162, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.31158677487264635;  // std dev = 0.432, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06299275619309602;  // std dev = 1.071, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07388388229754693;  // std dev = 0.308, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18600712767029504;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03683967170944131;  // std dev = 0.190, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.046297327505028275;  // std dev = 0.710, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.027967582807742742;  // std dev = 0.896, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11600668021554447;  // std dev = 0.273, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1955132519798434;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10165410667621066;  // std dev = 0.147, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4664535928845856;  // std dev = 0.247, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1002682245073108;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1056006507239708;  // std dev = 1.486, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.13664531665409863;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08483835277041277;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.18051689643598232;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.016117545171818445;  // std dev = 0.336, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.05176887571053528;  // std dev = 0.442, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24191472765576086;  // std dev = 0.483, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
Inference time using transfer learning 10.050275564193726
Parameter learned model CLL:-0.12732 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [2.79e-08, 30, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.471, 1, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.321, 33, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.617, 13, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.204, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.707, 1, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.99, 43, 6], 'false,false,false,false': [1.365, 8, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.166, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.373, 26, 0], 'false,true,false,false': [0.0, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.183, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.901, 1, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.027, 0, 6], 'false,false,true,false': [1.312, 49, 3], 'false,false,false': [3.73e-09, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.61, 40, 17], 'false,true': [0.0, 0, 2], 'false,false,true': [0.371, 0, 6], 'false,false,false,true': [0.217, 11, 0], 'false,false,false,false': [0.162, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.432, 0, 20], 'true,false': [1.071, 41, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.308, 1, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.003, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.19, 37, 7], 'false,false,false,true': [0.71, 6, 4], 'false,false,false,false': [0.896, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.273, 1, 13], 'false,true,true,true': [0.937, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.147, 32, 0], 'false,false,true': [0.247, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.103, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.486, 2, 17], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.021, 25, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.336, 2, 1], 'false,true': [0.442, 4, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.483, 1, 2]}]
{'': [0.23319615912208466, 0.24999999999999983], 'false': [0.24489795918367335, 0.22222222222222224], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [-2.8047739569477637e-16, 0.027755102040816385], 'true,false': [2.590520390792032e-17, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [1.4802973661668753e-16, 0.13314406008529325], 'false': [0.10306736523715984, 0.18926089761175433], 'false,false': [0.0, 0.1689147386023565], 'false,false,false': [0.0, 0.1537928358879718], 'false,true': [nan, 0.10306736523715984], 'false,false,true': [nan, 0.0]}
{'': [0.055770248533552724, 0.10941881217190012], 'false': [nan, 0.10941881217190011], 'false,false': [3.700743415417188e-17, 0.09935424518700169], 'false,false,false': [0.08081845757489203, 0.1693194719755046], 'true': [0.0037873735100466747, 0.19331400256396444], 'true,false': [0.25, 0.0], 'true,true': [0.0037873735100466747, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.05230387668667037, 0.004090354503413139], 'false': [0.004216847559179222, 0.003337771885468943], 'false,true': [nan, 0.004216847559179222], 'false,true,false': [0.005349441788609999, -1.2335811384723961e-17], 'false,false': [nan, 0.003337771885468943], 'false,false,false': [nan, 0.003337771885468943]}
{'': [0.05799580547190245, 0.0735918545731298], 'false': [-1.850371707708594e-17, 0.07231430185112407], 'false,false': [0.07327487254359313, 0.0], 'false,false,true': [0.00011954146035852986, 0.03309120711385619], 'true': [0.05799580547190245, nan], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.04545770007118813, 0.08584341980000448], 'false': [0.0, 0.08702083013144936], 'false,false': [0.022933968854856473, 0.0032196944185041492], 'true': [nan, 0.04545770007118813], 'true,false': [nan, 0.04545770007118813], 'false,false,false': [0.004288202275840743, 0.0021896998601150706]}
{'': [0.05097285405492761, 0.031670469639652817], 'true': [0.009322606271465972, 0.02605796452389457], 'false': [nan, 0.031670469639652817], 'false,false': [nan, 0.031670469639652817], 'false,false,false': [nan, 0.031670469639652817]}
{'': [9.702897149401386e-07, 0.04879002056376459], 'false': [nan, 0.04879002056376461], 'false,false': [0.036285253778899525, 0.0770338942799986], 'false,false,false': [0.05046064952324253, 0.1147980374800137], 'true': [9.702897149401386e-07, nan]}
{'': [0.0743774259339098, 0.047458440822485536], 'false': [0.03708575287734824, 0.07066535748537547], 'false,false': [0.015253459884353088, 0.001066225580649012], 'false,true': [0.0976314066161888, 0.0006725084595055903], 'false,true,true': [0.0976314066161888, nan], 'false,false,false': [nan, 0.001066225580649012]}
{'': [0.05423254005851916, 0.05052278640448443], 'true': [0.10522350503611606, 0.005092492587014698], 'true,true': [0.11620787571975959, 0.0], 'false': [0.02793662748626932, 0.07791501237193674], 'false,false': [nan, 0.07791501237193674], 'false,false,false': [nan, 0.07791501237193674], 'true,false': [1.797720931993818e-05, 0.022718782821652742], 'true,false,false': [0.0, 0.03756640942419282]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.108537673950195
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.017958296738500423;  // std dev = 1.592, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return -0.04095283345445681;  // std dev = 0.802, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return 0.10951139965368212;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10050695404238742;  // std dev = 1.576, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.584491210872685;  // std dev = 0.128, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(E, A) )
%   | | then return 0.8295356164576335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7239997509487329;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12619374652501247;  // std dev = 0.068, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0412369135155221;  // std dev = 0.794, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.15301981405092513;  // std dev = 1.340, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.41280321442793916;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.46535297011156596;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.540668018545422;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6015532504688589;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7328255062712613;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(J, A), follows(A, J) )
%   | | | then return -0.11046470692394102;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1293383979881608;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11198609097073521;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.18056064879582784;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3282800670529292;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3856183051190589;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.0717388937851583;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.44954600131549793;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0755386375374038;  // std dev = 1.171, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   | | else return -0.11028121771018366;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.034780870322155905;  // std dev = 0.179, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3062880341494564;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4796075256634888;  // std dev = 0.346, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12184457093211515;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.13443910452638366;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.24418819291298632;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.27498965963234684;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(E, A), follows(F, A) )
%   | | | then return -0.09603394975628995;  // std dev = 0.004, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.005543603865816555;  // std dev = 0.620, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.3213507460732713;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10762695339563567;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.00690143886405596;  // std dev = 0.399, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.01099447741991177;  // std dev = 0.448, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.17094901440924654;  // std dev = 0.684, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2179221053520437;  // std dev = 0.033, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08930514878753644;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(E, A), follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.08840562467623508;  // std dev = 1.58e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.0931419353870675;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, A), tweets(A, G) )
%   | | | then return 0.08340670309965888;  // std dev = 0.624, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.025968420798450253;  // std dev = 0.602, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.08901750118936526;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.4678956292930725;  // std dev = 1.054, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.025676357783068867;  // std dev = 0.770, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.16796931485858413;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18944890460062289;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20430216575417268;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.25938939946330336;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2627711378477911;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return -0.08390470584680335;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.09071829729935228;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.42882530774125915;  // std dev = 0.175, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13920734016518746;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10560601273667328;  // std dev = 1.003, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.18776548146536923;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21402963255311336;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08050409147660251;  // std dev = 0.008, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.07547863727850385;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.07347056010745054;  // std dev = 0.240, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return 0.014415926370274538;  // std dev = 0.258, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.029811926139600476;  // std dev = 0.416, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return -0.017569903551994673;  // std dev = 0.240, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning 16.6377170085907
Refined model CLL: -0.112501


******************************************
Best model found
******************************************
Results 

CLL : -0.112351 

AUC ROC : 0.993485 

AUC PR : 0.31282 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 5.108537673950195 

Total Inference Time : 3.278312921524048 

Total revision time: 11.872307538986206
Best scored revision CLL: -0.112501


Results 

CLL : -0.112351 

AUC ROC : 0.993485 

AUC PR : 0.31282 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 11.884233713150024 

Total Inference Time : 3.278312921524048 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.555013656616211
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.05851773156715445;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6872153476948256;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029942324331039466;  // std dev = 0.271, 78.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09139765510230898;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15431420302955057;  // std dev = 2.301, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.536289948935721;  // std dev = 1.017, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8754374152972235;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5633171780648603;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5633171780648603;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.028840749520718422;  // std dev = 2.358, 76.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=9 */
%   | | | else return 0.08202901859864212;  // std dev = 2.143, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5404001508754551;  // std dev = 1.042, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11969185297524373;  // std dev = 0.021, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.1312713380823303;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17254636857560862;  // std dev = 0.127, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29241189455016525;  // std dev = 1.076, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2996255459029213;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6102912426947817;  // std dev = 0.093, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.061969703907080204;  // std dev = 1.935, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | | else return -0.10924775997266731;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013836303557405175;  // std dev = 2.076, 110.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2407253052095497;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.573126138260934;  // std dev = 0.449, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13040280612580557;  // std dev = 0.118, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.10961808258023041;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29909891523965476;  // std dev = 0.550, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.06781725574405716;  // std dev = 1.606, 107.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10309920025086637;  // std dev = 0.409, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1589765840359213;  // std dev = 0.982, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.058770371716255536;  // std dev = 0.143, 96.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.02523052761512311;  // std dev = 1.039, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.13912230180008403;  // std dev = 1.176, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18822986962442512;  // std dev = 0.058, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21369775012964687;  // std dev = 0.976, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09343627706338659;  // std dev = 0.039, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.458564149100155;  // std dev = 0.328, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11351415519739701;  // std dev = 0.126, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11783920058918361;  // std dev = 1.637, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | else return -0.07326350067249301;  // std dev = 1.018, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08576950922887137;  // std dev = 0.029, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08843610019475084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.11075539687756167;  // std dev = 0.284, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04989529742298486;  // std dev = 0.661, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05674538099744509;  // std dev = 0.973, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning 9.852818489074707
Parameter learned model CLL:-0.117774 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.46e-07, 0, 39], 'true,false,true': [6.83e-08, 69, 0], 'true,false,false,true': [0.957, 11, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.487, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.984, 1, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 69, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.978, 22, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.301, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.017, 1, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [1.49e-08, 0, 6], 'false,false,false,true': [2.358, 67, 9], 'false,false,false,false': [2.143, 21, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.042, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.021, 79, 0], 'false,true,false,false': [1.05e-08, 13, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.127, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.076, 1, 26], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.093, 0, 9], 'false,false,true,false': [1.935, 87, 7], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.076, 77, 33], 'false,true': [7.45e-09, 0, 6], 'false,false,true': [0.449, 0, 11], 'false,false,false,true': [0.118, 17, 0], 'false,false,false,false': [0.072, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.55, 0, 37], 'true,false': [1.606, 100, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.409, 3, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.982, 1, 30], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 87, 9], 'false,false,false,true': [1.039, 32, 6], 'false,false,false,false': [1.176, 7, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 26], 'false,true,true,true': [0.976, 1, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 83, 0], 'false,false,true': [0.328, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.637, 3, 33], 'true,true,false': [1.018, 2, 6], 'true,false,true': [0.029, 79, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.284, 1, 1], 'false,true': [0.661, 8, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.973, 8, 5]}]
{'': [0.22129635953828417, 0.21852237252861612], 'true': [1.548618783066885e-15, 0.012046400951814426], 'false': [0.20061728395061712, 0.2366863905325442], 'false,true': [0.0, -1.2810265668751807e-17], 'true,false': [6.75787928032704e-17, 0.07100591715976336], 'true,false,false': [0.07638888888888894, 0.0], 'false,true,true': [0.0, nan]}
{'': [0.03121748178980186, 0.10396730343783747], 'false': [0.07355916725439994, 0.14615376002804115], 'false,false': [0.041587901701323204, 0.200162494266717], 'false,false,false': [0.0, 0.19616860099020805], 'false,true': [nan, 0.07355916725439994], 'false,false,true': [nan, 0.041587901701323204]}
{'': [0.04240599547713191, 0.11384568542127714], 'false': [nan, 0.11384568542127713], 'false,false': [0.0, 0.1000179952540525], 'false,false,false': [0.07314757481019842, 0.16396930113342664], 'true': [0.04137318868644926, 0.025611357827638903], 'true,true': [0.04137318868644926, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 3.700743415417188e-17]}
{'': [0.02171400964363837, 0.00045744443091455], 'false': [2.125933321856438e-05, 0.0012457712836621432], 'false,false': [nan, 0.0012457712836621432], 'false,false,false': [nan, 0.0012457712836621432], 'false,true': [nan, 2.125933321856438e-05], 'false,true,false': [5.810985165415395e-06, 8.540177112501205e-18]}
{'': [0.04289154157678029, 0.0699354282959829], 'false': [-2.7755575615628914e-17, 0.06852316098062242], 'false,false': [0.07246479620196898, -3.96508223080413e-18], 'false,false,true': [0.0009572374258213223, 0.03982181777082521], 'true': [0.04289154157678029, nan], 'false,true': [-2.7755575615628914e-17, nan]}
{'': [0.03916858187573209, 0.08862142503542919], 'false': [9.25185853854297e-18, 0.09684584756965618], 'false,false': [0.01833535244918635, 0.0007005568293589927], 'true': [nan, 0.03916858187573212], 'true,false': [nan, 0.03916858187573209], 'false,false,false': [0.0008139982507426084, 0.0003424873707891611]}
{'': [0.0457181798286511, 0.018585602316396912], 'true': [0.008190183380831904, 0.024103368399152964], 'false': [nan, 0.018585602316396912], 'false,false': [nan, 0.018585602316396912], 'false,false,false': [nan, 0.018585602316396912]}
{'': [0.03108694127839413, 0.033121921877721026], 'false': [nan, 0.03312192187772114], 'false,false': [0.02031882069460278, 0.05420136176837212], 'false,false,false': [0.028419789893825917, 0.11531399810981262], 'true': [0.03108694127839413, nan]}
{'': [0.003355150277066181, 0.037306117830941364], 'false': [0.022413222411555293, 0.08186021620296678], 'false,false': [0.01198547665128623, 0.0010574650909890627], 'false,true': [0.05950163837309335, 1.8183901234612636e-05], 'false,true,true': [0.05950163837309335, nan], 'false,false,false': [nan, 0.0010574650909890627]}
{'': [0.03876551353852427, 0.05326055386434858], 'false': [0.03364953268537893, 0.07284811322082968], 'false,false': [nan, 0.07284811322082968], 'false,false,false': [nan, 0.07284811322082968], 'true': [0.0899220807808066, 0.0019117083258442253], 'true,true': [0.07448350025465804, 0.12951549479705815], 'true,false': [1.0719068467153288e-05, 0.035657371649425895], 'true,false,false': [0.0, 0.04026030663883581]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.224907636642456
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.4295775065280837;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then return 0.6639178566553987;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.02832615707535843;  // std dev = 0.277, 64.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=7 */
%   | | else return -0.02315731466095466;  // std dev = 0.280, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.0268545172881101;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.13981214937855654;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.10958356357178625;  // std dev = 2.339, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5927602862594157;  // std dev = 0.074, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.8569268532465967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7490776370399982;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12403003270282112;  // std dev = 0.050, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.006831627037333056;  // std dev = 1.189, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.1334185109011537;  // std dev = 2.014, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(A, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.39807180949355925;  // std dev = 1.474, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.22105227145855805;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.5059874726302148;  // std dev = 0.247, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6569048401449608;  // std dev = 0.217, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F) )
%   | | then return 0.7178925310287613;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.11071606151282927;  // std dev = 0.038, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.11183610888802203;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.1609580005361457;  // std dev = 0.166, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2829185742611664;  // std dev = 0.226, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.5355284007436696;  // std dev = 0.270, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22540693397300898;  // std dev = 0.620, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32177439302677685;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4008406213612378;  // std dev = 0.953, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.05655175692634198;  // std dev = 1.708, 88.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=7 */
%   | | else return -0.10052459297705352;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.009363060375045373;  // std dev = 1.677, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | | else return 0.141555910436688;  // std dev = 0.964, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else return -0.09436423430495512;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.006828782922823015;  // std dev = 0.181, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.11211320545511107;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.5214646887608585;  // std dev = 0.119, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12147300823867974;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.14205663900655263;  // std dev = 0.205, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(A, D), follows(C, E) )
%   | | | then return 0.2690298030335278;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3042231388250306;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.29844365639966075;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2418367548557523;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, G) )
%   | | | then return 0.28437716597429674;  // std dev = 1.002, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.4412262862882747;  // std dev = 0.137, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(F, H) )
%   | | | then return -0.0978770994621327;  // std dev = 0.056, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.14878961590518414;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.08061720063860243;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.13806843762671486;  // std dev = 0.961, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.2171287657941635;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20094746677508837;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.24387537169345844;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.30509436672234425;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.0859077209292852;  // std dev = 0.050, 86.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24347850823457212;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09462660648745384;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.02111587510014364;  // std dev = 0.249, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.20571873506796448;  // std dev = 0.034, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.15886053908077566;  // std dev = 0.875, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.11972510147554197;  // std dev = 0.912, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1642178369162689;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08182558712331946;  // std dev = 0.006, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.23272416856889727;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3840335653234964;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08728603909587972;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1659425616934942;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(E, G) )
%   | | | then return 0.16609819843395615;  // std dev = 0.049, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.14359813478073694;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2199777037308071;  // std dev = 0.035, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0762335234561474;  // std dev = 0.004, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.064023447068265;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.006252079274442218;  // std dev = 0.372, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, I), follows(I, J) )
%   | then if ( recursion_accounttype(J, B) )
%   | | then return 0.20424371465911384;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08357280954462964;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.04761063794698343;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
Inference time using transfer learning 15.977248907089233
Refined model CLL: -0.10786


******************************************
Best model found
******************************************
Results 

CLL : -0.102992 

AUC ROC : 0.994369 

AUC PR : 0.339359 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 7.224907636642456 

Total Inference Time : 6.216518402099609 

Total revision time: 18.78820300102234
Best scored revision CLL: -0.10786


Results 

CLL : -0.102992 

AUC ROC : 0.994369 

AUC PR : 0.339359 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 18.800129175186157 

Total Inference Time : 6.216518402099609 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8815298080444336
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8119950889456665;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7106553897864584;  // std dev = 0.995, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02758947325942028;  // std dev = 0.279, 109.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06801686112189353;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13803548267422788;  // std dev = 2.443, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5816053233232163;  // std dev = 0.275, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.7341135510413405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7760386943299816;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.13202967550590486;  // std dev = 0.599, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5688963043467062;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5688963043467062;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04883189814339034;  // std dev = 2.781, 132.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=12 */
%   | | | else return -0.004076938845201218;  // std dev = 2.284, 48.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4762858506362329;  // std dev = 2.217, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11825900564844648;  // std dev = 0.088, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.12205653979751274;  // std dev = 0.000731, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15728589920660893;  // std dev = 0.115, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29439033756210786;  // std dev = 1.375, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return 0.4120202405681394;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31694813749206485;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5634935091766213;  // std dev = 0.965, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.08117981639910002;  // std dev = 2.056, 167.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=7 */
%   | | else return -0.10607226946615943;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020257058599262228;  // std dev = 2.750, 174.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2559005776542296;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.606307943995592;  // std dev = 0.445, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13122580642071835;  // std dev = 0.129, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.1207074797200907;  // std dev = 0.126, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2599852865189267;  // std dev = 1.731, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else return -0.07027038865520346;  // std dev = 1.704, 137.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07384912642605118;  // std dev = 0.485, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1433156470404947;  // std dev = 1.682, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.1967876279155158;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04518211174291287;  // std dev = 0.162, 122.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03343753784954344;  // std dev = 1.387, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
%   | | | else return 0.053645816288403134;  // std dev = 1.389, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1601937017632639;  // std dev = 0.204, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25076859034834903;  // std dev = 0.976, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09057003449702117;  // std dev = 0.060, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48575148130885254;  // std dev = 0.425, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10574291210370008;  // std dev = 0.110, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18574125141054706;  // std dev = 1.230, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | else return 0.1408056335966955;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08359798652462225;  // std dev = 0.013, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08253117658504792;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.021614053331874522;  // std dev = 0.449, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.01979460324027042;  // std dev = 0.770, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008361961366460622;  // std dev = 1.156, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning 10.340902328491211
Parameter learned model CLL:-0.110144 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.692, 3, 62], 'true,false,true': [8.69e-08, 104, 0], 'true,false,false,true': [0.977, 21, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.471, 10, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.995, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 96, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.443, 22, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.275, 0, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.143, 0, 2], 'true,false,false': [0.599, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 7], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [2.781, 120, 12], 'false,false,false,false': [2.284, 41, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.217, 4, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.088, 102, 0], 'false,true,false,false': [0.000731, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.115, 21, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.375, 2, 41], 'true,false': [0.056, 0, 2], 'false,true,true': [1.49e-08, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.965, 1, 12], 'false,false,true,false': [2.056, 160, 7], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.75, 120, 54], 'false,true': [0.028, 0, 9], 'false,false,true': [0.445, 0, 12], 'false,false,false,true': [0.129, 24, 0], 'false,false,false,false': [0.126, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.731, 3, 62], 'true,false': [1.704, 130, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.485, 5, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.682, 3, 48], 'true,false,true': [0.009, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 109, 13], 'false,false,false,true': [1.387, 35, 7], 'false,false,false,false': [1.389, 15, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 2, 43], 'false,true,true,true': [0.976, 1, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.06, 122, 0], 'false,false,true': [0.425, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.11, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.23, 1, 56], 'true,true,false': [3.73e-09, 0, 6], 'true,false,true': [0.013, 101, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.449, 10, 2], 'false,true': [0.77, 15, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.156, 17, 5]}]
{'': [0.22164353405460568, 0.1963117192147526], 'true': [0.044023668639052445, 0.015380859374999955], 'false': [0.17751479289940844, 0.22222222222222202], 'false,true': [-1.4802973661668753e-16, 2.7755575615628915e-18], 'true,false': [7.259150545626024e-17, 0.07638888888888894], 'true,false,false': [0.04338842975206616, 0.25], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.01940810254587384, 0.10563108896241673], 'false': [0.07802075428316597, 0.15867083287215944], 'false,false': [0.058593750000000014, 0.19085704892965144], 'false,false,false': [0.0, 0.18657678425706806], 'false,true': [nan, 0.07802075428316597], 'false,false,true': [nan, 0.058593750000000014]}
{'': [0.021695547650785286, 0.0905220984759855], 'false': [nan, 0.09052209847598477], 'false,false': [-2.049642507000289e-16, 0.07234055338324116], 'false,false,false': [0.058589179085908126, 0.10868796135426656], 'true': [0.0024567064744823062, 0.19839149169560785], 'true,false': [0.01019516181034641, 0.1792140134174942], 'true,true': [0.0019382299601437998, 0.0], 'false,false,true': [6.344131569286608e-17, 0.0]}
{'': [0.062241750849009375, 0.0003236924401099543], 'false': [6.317713145792283e-05, 0.0006292166683652612], 'false,false': [nan, 0.0006292166683652612], 'false,false,false': [nan, 0.0006292166683652612], 'false,true': [nan, 6.317713145792283e-05], 'false,true,false': [7.529019854051972e-05, 2.223847934042696e-08]}
{'': [0.04267631804113182, 0.058912037284665146], 'false': [1.708035422500241e-17, 0.05484894006627403], 'false,false': [0.05651254723235798, 2.3129646346357427e-18], 'false,false,true': [0.0716045030268221, 0.025321901786117786], 'true': [0.043973974551354905, 0.0015548776159590716], 'false,true': [1.708035422500241e-17, nan]}
{'': [0.04347718556390462, 0.08587660810355534], 'false': [8.702556368390802e-05, 0.09204919242116949], 'false,false': [0.016530997626475658, 0.0007369691525646617], 'true': [nan, 0.04347718556390459], 'true,false': [nan, 0.04347718556390462], 'false,false,false': [0.000694229553857395, 0.0007258714580765178]}
{'': [0.053017809936934626, 0.021402372638517513], 'true': [0.04610961708895554, 0.021199020108034834], 'false': [nan, 0.021402372638517513], 'false,false': [nan, 0.021402372638517513], 'false,false,false': [nan, 0.021402372638517513]}
{'': [0.053467690591830236, 0.039207633467429254], 'true': [0.0554548387403914, 4.405639458392174e-05], 'false': [nan, 0.039207633467428935], 'false,false': [0.026156673711514894, 0.06383636714764307], 'false,false,false': [0.045833410181184996, 0.09650535994087538], 'true,false': [4.405639458392174e-05, nan]}
{'': [0.04144679743201556, 0.034350569478399186], 'false': [0.02214598352122542, 0.0769079974230128], 'false,false': [0.0180575202992181, 0.0004865832901068168], 'false,true': [0.04143056046838094, 2.9143751222605215e-05], 'false,true,true': [0.04143056046838094, nan], 'false,false,false': [nan, 0.0004865832901068168]}
{'': [0.02504089425160145, 0.04488858402539682], 'false': [0.028225643998362433, 0.06073028486653089], 'false,false': [nan, 0.06073028486653089], 'false,false,false': [nan, 0.06073028486653089], 'true': [0.0241914235940317, 0.0020804926363227148], 'true,true': [0.02654558354519323, 2.3129646346357427e-18], 'true,false': [1.7097532714324818e-06, 0.013315751898135272], 'true,false,false': [0.0, 0.01682661188781978]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.877961874008179
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7849782033921947;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.127036250085673;  // std dev = 0.121, 135.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6820137991232398;  // std dev = 0.225, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else return 0.725829569698327;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.025213078018245714;  // std dev = 2.540, 84.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=10 */
%   | | | else return -0.12707898544525398;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.030715551358847782;  // std dev = 0.273, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.20625434788807936;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.12707898544525398;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7670719622367217;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11500918194816763;  // std dev = 2.505, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5534411137942041;  // std dev = 0.985, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.34829663221642304;  // std dev = 1.113, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7868262603202871;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7430976123373387;  // std dev = 0.177, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5571193970579622;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.08610153039911257;  // std dev = 1.857, 109.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=5 */
%   | | | else return 0.09263940932506118;  // std dev = 1.460, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06471940297007549;  // std dev = 1.412, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.3793935763697402;  // std dev = 1.598, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.4437037413629829;  // std dev = 0.191, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.2726856653960947;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4780775731778684;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6219353321568121;  // std dev = 0.971, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.6920580729608181;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7730466270113847;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11880739950113692;  // std dev = 0.081, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.11978897711484078;  // std dev = 0.037, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.18642262387033542;  // std dev = 0.218, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.3382368168981363;  // std dev = 0.020, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.1698910887614864;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3682143982334094;  // std dev = 0.928, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4857062932320372;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.31871603289122236;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.35119659894246014;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05892562904541261;  // std dev = 1.998, 133.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=9 */
%   | | | else return 0.07587565632011596;  // std dev = 1.892, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.1110280090304865;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2715491364198435;  // std dev = 0.012, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.4476093402579502;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.4984363821345014;  // std dev = 0.502, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09826750583592926;  // std dev = 0.026, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.009852772305997803;  // std dev = 0.208, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.28405199389867003;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.46281553460826697;  // std dev = 0.290, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5944792021309032;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1464840520177741;  // std dev = 0.039, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then return 0.2145090094605564;  // std dev = 0.014, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.22706007675547504;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2613096225048893;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3579234580910497;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.50253696561456;  // std dev = 0.148, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09288967892821662;  // std dev = 0.007, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( tweets(A, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.03240142792618757;  // std dev = 0.794, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return -0.009047715710253215;  // std dev = 0.700, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.10164291554134476;  // std dev = 0.319, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.15984049788090085;  // std dev = 0.156, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.018813352421420793;  // std dev = 0.945, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.18601838954086403;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.24250556840582654;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.046798622742925455;  // std dev = 0.139, 143.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.35056386671762696;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13153692372217177;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0762058521568898;  // std dev = 0.542, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09252950971024312;  // std dev = 0.870, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.1057870318684884;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.1588112665242438;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.18723351490369797;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return -0.027920850758271627;  // std dev = 1.189, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.14472609084161314;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.20721127990297264;  // std dev = 0.255, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return -0.0811590919311715;  // std dev = 0.005, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3557503298478233;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.1600549835021474;  // std dev = 0.051, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12098190334608931;  // std dev = 0.987, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.32661630164473354;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.00800606376567243;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.07454177502401073;  // std dev = 0.005, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.0384100125804531;  // std dev = 0.114, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.2909389473409104;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10336725644092774;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, I) )
%   | | then return 0.07023175044020369;  // std dev = 0.345, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.002810111803586518;  // std dev = 0.246, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning 16.542901754379272
Refined model CLL: -0.112182


******************************************
Best model found
******************************************
Results 

CLL : -0.109079 

AUC ROC : 0.99512 

AUC PR : 0.434348 

Precision : 0.343182 

Recall : 0.967949 

F1 : 0.506711 

Total Learning Time : 7.877961874008179 

Total Inference Time : 8.76409912109375 

Total revision time: 23.92932391166687
Best scored revision CLL: -0.110144


Results 

CLL : -0.109079 

AUC ROC : 0.99512 

AUC PR : 0.434348 

Precision : 0.343182 

Recall : 0.967949 

F1 : 0.506711 

Total Learning Time : 23.94125008583069 

Total Inference Time : 8.76409912109375 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.216745615005493
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8461007423284279;  // std dev = 0.994, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10018439823382112;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.08542166237223962;  // std dev = 0.419, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7086042610629838;  // std dev = 1.002, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.035942445443791354;  // std dev = 0.264, 167.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06342093887988552;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10805401633518537;  // std dev = 2.800, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5167565760723379;  // std dev = 1.854, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | | else return 0.7290566546168415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8023372905745516;  // std dev = 0.105, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5610181024501073;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5610181024501073;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040042277685927136;  // std dev = 3.185, 157.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=16 */
%   | | | else return 0.027989570446550715;  // std dev = 2.397, 45.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4874755291367704;  // std dev = 2.257, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1179468234823959;  // std dev = 0.047, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return -0.12462334947487902;  // std dev = 0.002, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15310351761162966;  // std dev = 0.114, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28014260819652154;  // std dev = 1.972, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   | else return 0.39106236561350166;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30934171593693843;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6274029209955281;  // std dev = 0.139, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08124252989117918;  // std dev = 2.212, 196.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=8 */
%   | | else return -0.1070156052568867;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03540826448877162;  // std dev = 3.094, 211.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.255891658397568;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4780769641890949;  // std dev = 1.336, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11260899542810579;  // std dev = 0.079, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.11052322250077605;  // std dev = 0.093, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.269659221069476;  // std dev = 1.658, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | else return -0.07628760307847755;  // std dev = 1.955, 205.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014704255812882167;  // std dev = 0.573, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1733451056696444;  // std dev = 1.398, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.21120715849651012;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.050676758687683475;  // std dev = 0.172, 154.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0011834537749748203;  // std dev = 1.392, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.01047962531604696;  // std dev = 1.672, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17232484234905668;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2752291556872404;  // std dev = 0.606, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09079377949106279;  // std dev = 0.028, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.48466333029261033;  // std dev = 0.587, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10677903786480403;  // std dev = 0.081, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14351455488915837;  // std dev = 2.141, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else return 0.015831388498215443;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08412711124038823;  // std dev = 0.022, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08210837282589807;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03984910979647908;  // std dev = 0.494, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.025597085135779376;  // std dev = 0.968, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10699566876231922;  // std dev = 1.230, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning 9.896967649459839
Parameter learned model CLL:-0.108996 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.994, 1, 82], 'true,false,true': [0.0, 142, 0], 'true,false,false,true': [0.979, 23, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.419, 17, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.002, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 149, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [2.8, 35, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.854, 4, 56], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.105, 0, 2], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 8], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.185, 141, 16], 'false,false,false,false': [2.397, 37, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.257, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 142, 0], 'false,true,false,false': [0.002, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.114, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.972, 4, 59], 'true,false': [0.106, 0, 3], 'false,true,true': [0.0, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.139, 0, 16], 'false,false,true,false': [2.212, 188, 8], 'false,false,false': [1.86e-09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.094, 138, 73], 'false,true': [0.081, 0, 10], 'false,false,true': [1.336, 1, 17], 'false,false,false,true': [0.079, 26, 0], 'false,false,false,false': [0.093, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.658, 3, 85], 'true,false': [1.955, 196, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.573, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 63], 'true,false,true': [0.023, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.172, 136, 18], 'false,false,false,true': [1.392, 43, 12], 'false,false,false,false': [1.672, 20, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.174, 2, 62], 'false,true,true,true': [0.606, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.028, 139, 0], 'false,false,true': [0.587, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.141, 4, 75], 'true,true,false': [0.927, 1, 7], 'true,false,true': [0.022, 143, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.494, 13, 2], 'false,true': [0.968, 22, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.23, 8, 5]}]
{'': [0.22178131200300025, 0.2175999999999995], 'true': [0.011903033822034635, 0.011626297577854505], 'false': [0.23852040816326484, 0.17561983471074363], 'false,true': [0.07638888888888877, -6.938893903907228e-18], 'false,true,true': [-1.6148698540002277e-16, 0.0], 'true,false': [-8.443949764754712e-17, 0.06632653061224494], 'true,false,false': [0.0399305555555556, 0.18750000000000003]}
{'': [0.015202396499995186, 0.0978231270445701], 'false': [0.06965666598087625, 0.15644935472348878], 'false,false': [0.06222222222222218, 0.17438328850854637], 'false,false,false': [1.4802973661668753e-16, 0.1632920277077959], 'false,true': [nan, 0.06965666598087625], 'false,false,true': [nan, 0.06222222222222218]}
{'': [0.055268563356556805, 0.09513277736771746], 'false': [nan, 0.09513277736771733], 'false,false': [-1.2688263138573217e-16, 0.07947622336175711], 'false,false,false': [0.06462376585188795, 0.1276975291199882], 'true': [0.0570578511083078, 0.01686389217857851], 'true,true': [0.05726994114016755, 0.0], 'true,false': [0.005562968862048101, 3.700743415417188e-17], 'false,false,true': [5.551115123125783e-17, 7.401486830834377e-17]}
{'': [0.04898268777822796, 0.0002411459391056438], 'false': [1.9608306199288607e-05, 0.0003580884706091321], 'false,false': [nan, 0.0003580884706091321], 'false,false,false': [nan, 0.0003580884706091321], 'false,true': [nan, 1.9608306199288607e-05], 'false,true,false': [1.5812686328655123e-05, 7.325498083306237e-08]}
{'': [0.059632132953623136, 0.057982344548028836], 'true': [0.06173583302309404, 0.0037104749359040032], 'false': [-3.172065784643304e-17, 0.05475029287599851], 'false,false': [0.0582090589752275, 3.7007434154171884e-18], 'false,false,true': [0.0012086629079868794, 0.024961897810044348], 'false,true': [-3.172065784643304e-17, nan]}
{'': [0.04537511629537984, 0.08378613628962099], 'false': [0.0006493424720435792, 0.08923565148410091], 'false,false': [0.09916212081483497, 0.00027447201693031], 'true': [nan, 0.045375116295380366], 'true,false': [nan, 0.04537511629537984], 'false,false,false': [0.0002426060567744611, 0.00030098492269821505]}
{'': [0.04758359875380722, 0.01931322986090537], 'true': [0.03125549160669316, 0.018648129745077794], 'false': [nan, 0.01931322986090537], 'false,false': [nan, 0.01931322986090537], 'false,false,false': [nan, 0.01931322986090537]}
{'': [0.029237512341107438, 0.04034281509568617], 'false': [nan, 0.040342815095685845], 'false,false': [0.029531112221268696, 0.0591814880322911], 'false,false,false': [0.03521304850860078, 0.11185264205575139], 'true': [0.030086290533860804, 0.00026147812323257247], 'true,false': [0.00026147812323257247, nan]}
{'': [0.030329752534794547, 0.034156490300628735], 'false': [0.01955438767342319, 0.07966991879767223], 'false,false': [0.026523726324170046, 0.00020604897733347144], 'false,true': [0.014695525061656722, 5.602564950946771e-06], 'false,true,true': [0.014695525061656722, nan], 'false,false,false': [nan, 0.00020604897733347144]}
{'': [0.032320789477918034, 0.05457351971089186], 'false': [0.028368071448672028, 0.11634180155438872], 'false,false': [nan, 0.11634180155438872], 'false,false,false': [nan, 0.11634180155438872], 'true': [0.0639143713012297, 0.0015570798692986906], 'true,true': [0.058021673734307826, 0.10730089440228717], 'true,false': [3.532351656994463e-06, 0.00830861626011192], 'true,false,false': [0.0, 0.01624941365836139]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 9.963341474533081
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6791016523643786;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6480448407823828;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.12544463852839108;  // std dev = 7.74e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.022433418655353993;  // std dev = 0.291, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.1013237559975303;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19887217215406935;  // std dev = 2.585, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5325066772449158;  // std dev = 0.184, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | else return 0.7239788095377118;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7043008628009788;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5589184371188821;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6141234594802009;  // std dev = 0.223, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11535347952800591;  // std dev = 0.073, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09872799980251984;  // std dev = 1.975, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.0101614470467544;  // std dev = 1.999, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.43811827948887966;  // std dev = 0.346, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else return 0.23451031893455512;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.28805670968027325;  // std dev = 0.662, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6557137476032215;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.8079120478098408;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10309023194450913;  // std dev = 0.077, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.11048094681161931;  // std dev = 0.013, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.17422889611687722;  // std dev = 0.087, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3284401510772118;  // std dev = 0.024, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.37628297924270765;  // std dev = 0.168, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1460633137054489;  // std dev = 0.739, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.41000302819654694;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.32425461405179234;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3154721200075046;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.35035804572532275;  // std dev = 1.142, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.07628065512935221;  // std dev = 1.913, 194.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=8 */
%   | | else return -0.09231092316577258;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23021088516377158;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.26186150832299926;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25877504294109643;  // std dev = 0.008, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then return -0.060761775180595654;  // std dev = 0.128, 128.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=13 */
%   | | else return -0.02503179466534308;  // std dev = 0.169, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25965578441102866;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3097540036690406;  // std dev = 0.984, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.591471227866814;  // std dev = 0.213, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12071998601542346;  // std dev = 0.024, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23296381575983852;  // std dev = 0.044, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.11777978382467862;  // std dev = 0.956, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.07601892683235348;  // std dev = 0.481, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.27586043279483596;  // std dev = 0.254, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08608195187159244;  // std dev = 0.051, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.35472102189113297;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11758713333582865;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04439649414663819;  // std dev = 0.530, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.014829063511190524;  // std dev = 1.168, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18140557710476535;  // std dev = 0.009, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return -0.19429768798857858;  // std dev = 0.942, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07644140711365545;  // std dev = 0.036, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.20713139299215738;  // std dev = 0.997, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07934826018766641;  // std dev = 0.045, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16871476797623827;  // std dev = 1.052, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10592412911760919;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07041300291863221;  // std dev = 0.517, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12224491288541621;  // std dev = 1.032, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1261716319994634;  // std dev = 0.984, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.15172584112758067;  // std dev = 0.024, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.22074235436281375;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.07089082010394475;  // std dev = 0.812, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.15733278061908404;  // std dev = 0.177, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.07210591888103061;  // std dev = 0.004, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.13616619398483287;  // std dev = 0.931, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.48799378295560614;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12278464136616794;  // std dev = 0.031, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10771343985273281;  // std dev = 0.171, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17716584088984313;  // std dev = 0.161, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.08819722883725957;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.06380198681411522;  // std dev = 0.036, 172.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.17316332941881762;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.221447041050077;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08613426725468767;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.020235474585720246;  // std dev = 0.422, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.03112374937778258;  // std dev = 1.059, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning 19.550817489624023
Refined model CLL: -0.099419


******************************************
Best model found
******************************************
Results 

CLL : -0.098926 

AUC ROC : 0.995247 

AUC PR : 0.432442 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 9.963341474533081 

Total Inference Time : 13.03717303276062 

Total revision time: 31.623977661132812
Best scored revision CLL: -0.099419


Results 

CLL : -0.098926 

AUC ROC : 0.995247 

AUC PR : 0.432442 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 31.63590383529663 

Total Inference Time : 13.03717303276062 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.7616381645202637
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10185106490048777;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6943691221057845;  // std dev = 1.705, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033138554768926874;  // std dev = 0.267, 202.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09286207672817494;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7474590973303332;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07678082896996835;  // std dev = 3.307, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5868324685323568;  // std dev = 0.380, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7352230046124466;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7794353265193417;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5863835033812148;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5729208557748483;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5729208557748483;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04041039879480583;  // std dev = 3.689, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return 0.02555927068386621;  // std dev = 2.831, 62.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4994527180804162;  // std dev = 2.401, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1185272951148451;  // std dev = 0.137, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | | else return -0.12451130623101306;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15437971378891185;  // std dev = 0.168, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3301398173635748;  // std dev = 0.532, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.38718331995626076;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31462270251057406;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6390721110580617;  // std dev = 0.182, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08129332428963706;  // std dev = 2.322, 234.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=9 */
%   | | else return -0.11625774054177722;  // std dev = 0.053, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026189740581772855;  // std dev = 3.229, 286.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25364606325560174;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4851300405101796;  // std dev = 1.396, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11384518142431102;  // std dev = 0.119, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.1155293355538964;  // std dev = 0.152, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2640170151899432;  // std dev = 2.016, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07838707214351268;  // std dev = 2.180, 245.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016813906819390777;  // std dev = 0.664, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15948325603222555;  // std dev = 1.719, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.19629293372408652;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04266220555396859;  // std dev = 0.149, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009428452498949629;  // std dev = 1.648, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.07960233760375773;  // std dev = 1.693, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14484312712384206;  // std dev = 0.203, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28698111226049555;  // std dev = 0.690, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09071725256146851;  // std dev = 0.090, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36078766999420553;  // std dev = 1.418, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10459815077368514;  // std dev = 0.119, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.160873242140921;  // std dev = 1.936, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return -0.0390330857580796;  // std dev = 1.273, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08415927633381275;  // std dev = 0.026, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07807674640121044;  // std dev = 5.27e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.01898871291929732;  // std dev = 0.464, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.019167174216321678;  // std dev = 1.081, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22166843965633554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03689010654106546;  // std dev = 1.454, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning 9.605618953704834
Parameter learned model CLL:-0.110381 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 180, 0], 'true,false,false,true': [0.98, 24, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.705, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 180, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 26, 1], 'false,false,false,true': [0.097, 0, 4], 'false,false,false,false': [3.307, 53, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.38, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.143, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.689, 189, 21], 'false,false,false,false': [2.831, 51, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.401, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.137, 177, 0], 'false,true,false,false': [0.003, 41, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.168, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.532, 0, 73], 'true,false': [0.127, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 23], 'false,false,true,false': [2.322, 225, 9], 'false,false,false': [0.053, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.229, 195, 91], 'false,true': [0.033, 0, 13], 'false,false,true': [1.396, 1, 22], 'false,false,false,true': [0.119, 33, 0], 'false,false,false,false': [0.152, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.016, 3, 107], 'true,false': [2.18, 234, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.664, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.719, 3, 80], 'true,false,true': [0.006, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 179, 22], 'false,false,false,true': [1.648, 46, 13], 'false,false,false,false': [1.693, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.203, 4, 77], 'false,true,true,true': [0.69, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 227, 0], 'false,false,true': [1.418, 2, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.119, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.936, 3, 94], 'true,true,false': [1.273, 2, 9], 'true,false,true': [0.026, 179, 0], 'true,false,false,true': [5.27e-09, 24, 0], 'true,false,false,false': [0.464, 10, 2], 'false,true': [1.081, 29, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.454, 21, 8]}]
{'': [0.22222222222222435, 0.22750000000000006], 'false': [0.22837370242214483, 0.22633136094674564], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true': [0.04415294924554408, 0.009568484678755465], 'true,false': [-1.9984014443252818e-16, 0.0685871056241427], 'true,false,false': [0.03840000000000005, 0.25], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03418933913005889, 0.09690616628287115], 'false': [0.0710462972092064, 0.14308935406030404], 'false,false': [0.0356652949245542, 0.17095181683705937], 'false,false,false': [0.0023495957148030877, 0.1562722111131111], 'false,true': [nan, 0.0710462972092064], 'false,false,true': [nan, 0.0356652949245542]}
{'': [0.0035667403962110263, 0.0953664160060451], 'false': [nan, 0.09536641600604524], 'false,false': [1.0449157878825003e-16, 0.0802705951910994], 'false,false,false': [0.06480791717279716, 0.12928418411869505], 'true': [0.002341045508381547, 0.014547833532294385], 'true,false': [0.010161758260734288, 0.004317869029089483], 'true,true': [0.0020643516748253075, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.04469793627443676, 0.00034307288677675195], 'false': [9.213740162536526e-05, 0.0007227805284269743], 'false,false': [nan, 0.0007227805284269743], 'false,false,false': [nan, 0.0007227805284269743], 'false,true': [nan, 9.213740162535101e-05], 'false,true,false': [0.00010669633383030895, 2.1164224796006002e-07]}
{'': [0.0040470225425863525, 0.062487652309457006], 'false': [-1.3061447348531253e-17, 0.05969216577637334], 'false,false': [0.0634011093807728, 0.002859191201866118], 'false,false,true': [0.0014468460111346938, 0.023049750487394723], 'true': [0.0038802879838470243, 0.0040050039963702155], 'false,true': [-1.3061447348531253e-17, nan]}
{'': [0.03646209411524199, 0.0837108263617651], 'false': [8.320982178758104e-05, 0.08978507713602059], 'false,false': [0.08474144111062153, 0.0005498964272666149], 'true': [nan, 0.0364620941152423], 'true,false': [nan, 0.03646209411524199], 'false,false,false': [0.0004301792388001062, 0.0006613961573679455]}
{'': [0.04990682642525327, 0.019166208250935575], 'true': [0.03693544214906941, 0.019402652700899435], 'false': [nan, 0.019166208250935575], 'false,false': [nan, 0.019166208250935575], 'false,false,false': [nan, 0.019166208250935575]}
{'': [0.03480748740287252, 0.036166319736624306], 'false': [nan, 0.036166319736624465], 'false,false': [0.0222676128383096, 0.06518903726415966], 'false,false,false': [0.046057311882752625, 0.09879785708629343], 'true': [0.03561392248168626, 1.7360492601120603e-05], 'true,false': [1.7360492601120603e-05, nan]}
{'': [0.04102345088630812, 0.03157231683197631], 'false': [0.017319467845449493, 0.09785888310637739], 'false,false': [0.10588600741592451, 0.0005463458435280758], 'false,true': [0.014895634615414863, 3.569508035641296e-05], 'false,true,true': [0.014895634615414863, nan], 'false,false,false': [nan, 0.0005463458435280758]}
{'': [0.02946740683836491, 0.046828604317497954], 'false': [0.02851896902434411, 0.07152240975822996], 'false,false': [0.0, 0.07285059867026449], 'false,false,false': [nan, 0.07285059867026449], 'true': [0.05336167944370533, 0.001229109183581411], 'true,true': [0.03862680460328482, 0.14740420361761117], 'true,false': [3.8120006820614796e-06, 0.006768296556474042], 'true,false,false': [1.1564823173178713e-18, 0.017977292535582338]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.67357611656189
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.098, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else return -0.07733493586822972;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.15814893509951236;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7071242829316308;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7326326675611737;  // std dev = 0.140, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6161468393226092;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.12544463852839127;  // std dev = 5.58e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.046884989523988174;  // std dev = 0.258, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.055772211389812414;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.1326952883128893;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7847506353732859;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09489532976724213;  // std dev = 3.177, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5453988135184252;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.6076666832355325;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7307343284345134;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6892277673266195;  // std dev = 0.250, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5563418285744949;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6125893890434919;  // std dev = 0.229, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11486830322441756;  // std dev = 0.069, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.031001049799630576;  // std dev = 2.115, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | | else return 0.17712094924016775;  // std dev = 2.229, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), tweets(E, F) )
%   | | | then return 0.38779582126671575;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | | | else return 0.23617732625789595;  // std dev = 1.148, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4243505824259221;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6208300253968343;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4887213724078471;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6791943828950237;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7583622713956887;  // std dev = 0.142, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10346244711815179;  // std dev = 0.004, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return -0.15918346661680863;  // std dev = 0.156, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.33310522400925524;  // std dev = 0.018, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.09313792913683047;  // std dev = 1.969, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | else if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.34863444046955705;  // std dev = 0.125, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4922964007546044;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.017686669405312067;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34254085124123473;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4179828068266354;  // std dev = 0.413, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07801853082747792;  // std dev = 2.058, 237.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=9 */
%   | | else return -0.09723241686850875;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.276501540251141;  // std dev = 0.164, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.19929269275544162;  // std dev = 0.987, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.19339897345654922;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05612142725523216;  // std dev = 0.096, 171.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=15 */
%   | | else return -0.0448379403949266;  // std dev = 0.130, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2825948115991871;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4044547585095766;  // std dev = 0.213, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.49817449595840985;  // std dev = 0.917, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.11701613739294374;  // std dev = 0.026, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.22963877537208316;  // std dev = 0.020, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.16549241720181926;  // std dev = 0.236, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2649733183344463;  // std dev = 0.197, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.18336012161675116;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.08311020876385401;  // std dev = 0.048, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21322174730967267;  // std dev = 1.034, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10246113931598459;  // std dev = 1.67e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11038502961956757;  // std dev = 0.762, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.11036739323819907;  // std dev = 1.434, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17926302174566325;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.25285676229417436;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.016950332709961446;  // std dev = 0.859, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2436406093194459;  // std dev = 0.181, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07763213727215733;  // std dev = 0.051, 196.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.20830777278290166;  // std dev = 1.075, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11245689377977854;  // std dev = 0.086, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.00879403885642596;  // std dev = 0.557, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.09239374783319608;  // std dev = 1.246, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.11524385553901757;  // std dev = 1.372, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.16780396634459008;  // std dev = 0.065, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.07738776313773221;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.11666760575740232;  // std dev = 0.914, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.22877892025415644;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.041386090141423235;  // std dev = 0.100, 244.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=32 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.18480190584383122;  // std dev = 0.917, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.41384634970953316;  // std dev = 0.304, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12761200940473302;  // std dev = 0.041, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.13838202889161555;  // std dev = 0.122, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | else return 0.160880760804369;  // std dev = 0.160, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.06561177783127019;  // std dev = 0.033, 209.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13666164236766187;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.015804259930201542;  // std dev = 0.539, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.08916592271703404;  // std dev = 0.546, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.2804430187825654;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.00241239224855494;  // std dev = 0.410, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.04027704527705834;  // std dev = 1.101, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
Inference time using transfer learning 17.746927738189697
Refined model CLL: -0.101001


******************************************
Best model found
******************************************
Results 

CLL : -0.098075 

AUC ROC : 0.995207 

AUC PR : 0.411502 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 17.67357611656189 

Total Inference Time : 16.822447061538696 

Total revision time: 45.42317247390747
Best scored revision CLL: -0.101001


Results 

CLL : -0.098075 

AUC ROC : 0.995207 

AUC PR : 0.411502 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 45.43509864807129 

Total Inference Time : 16.822447061538696 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3332655429840088
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7285554015677006;  // std dev = 8.43e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0034446328003782103;  // std dev = 0.299, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06644463184570935;  // std dev = 0.842, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.16391927822007096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.09705792620484918;  // std dev = 2.517, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5918135478747205;  // std dev = 0.213, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5643290406600243;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.04666596697926455;  // std dev = 2.119, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0.10873959380806295;  // std dev = 2.015, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5758069578604196;  // std dev = 0.883, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12827139504911642;  // std dev = 0.020, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.13679543430701904;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16243716009932482;  // std dev = 0.122, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31534211199588075;  // std dev = 0.218, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2928906915551107;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6230143919356972;  // std dev = 0.173, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10276063155289;  // std dev = 0.957, 59.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=2 */
%   | | else return 0.039098156405455047;  // std dev = 0.334, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0048000882719628915;  // std dev = 1.445, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23608286025256708;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5583967405737347;  // std dev = 0.295, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12843357300439864;  // std dev = 0.092, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.1206991404005818;  // std dev = 0.042, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.306631490277177;  // std dev = 0.404, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07930964259864179;  // std dev = 0.760, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050476427351865055;  // std dev = 1.156, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18089277880857557;  // std dev = 0.020, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.038761155580471454;  // std dev = 0.153, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.012656529328053178;  // std dev = 0.911, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.12436700146051141;  // std dev = 1.038, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17986267304515338;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.16818285942210087;  // std dev = 0.914, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09827315555822938;  // std dev = 0.062, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3735248298975028;  // std dev = 0.339, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13555904663897086;  // std dev = 0.168, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1908948487923568;  // std dev = 0.336, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.1773628403446285;  // std dev = 0.201, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08822076538641682;  // std dev = 0.007, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10178400249662085;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08630731089630037;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return 0.0304267742027209;  // std dev = 0.698, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.017024890945281212;  // std dev = 1.126, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning 8.544461965560913
Parameter learned model CLL:-0.114651 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.977, 1, 21], 'true,false,true': [3.8e-08, 37, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 11, 0], 'false,false': [0.464, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [8.43e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.299, 30, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.842, 11, 1], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [2.517, 28, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.213, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.119, 30, 8], 'false,false,false,false': [2.015, 16, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.883, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.02, 42, 0], 'false,true,false,false': [0.007, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.122, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.218, 0, 12], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.173, 0, 8], 'false,false,true,false': [0.957, 57, 2], 'false,false,false': [0.334, 13, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.445, 34, 15], 'false,true': [0.0, 0, 5], 'false,false,true': [0.295, 0, 11], 'false,false,false,true': [0.092, 19, 0], 'false,false,false,false': [0.042, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.404, 0, 20], 'true,false': [0.76, 35, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.156, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.02, 0, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 31, 5], 'false,false,false,true': [0.911, 15, 5], 'false,false,false,false': [1.038, 7, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.062, 0, 12], 'false,true,true,true': [0.914, 1, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.062, 47, 0], 'false,false,true': [0.339, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.168, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.336, 0, 15], 'true,true,false': [0.201, 0, 6], 'true,false,true': [0.007, 29, 0], 'true,false,false,true': [0.014, 6, 0], 'true,false,false,false': [0.019, 5, 0], 'false,true': [0.698, 10, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.126, 8, 5]}]
{'': [0.21172022684310035, 0.21484375000000008], 'false': [0.2148437499999998, 0.2148437499999998], 'false,true': [0.0, -1.0092936587501423e-17], 'true': [0.04338842975206614, 5.196788625904988e-17], 'true,false': [3.900783600034334e-17, -1.1102230246251566e-17], 'false,true,true': [0.0, 0.0], 'true,false,false': [-9.25185853854297e-18, 0.0]}
{'': [4.736951571734001e-16, 0.12240410580702502], 'false': [0.08930400838581161, 0.14380157066815252], 'false,false': [0.059071670609449324, 0.1640865119878605], 'false,false,false': [0.0, 0.16665819088179273], 'false,true': [nan, 0.08930400838581161], 'false,false,true': [nan, 0.059071670609449324]}
{'': [0.003776990684173217, 0.1497723387053051], 'false': [nan, 0.14977233870530504], 'false,false': [0.0, 0.14341269571045062], 'false,false,false': [0.11815497707920582, 0.18459934532846276], 'true': [0.003776990684173217, nan], 'true,true': [0.003776990684173217, nan], 'false,false,true': [nan, 0.0]}
{'': [0.025133242464313636, 0.00043106106897335784], 'false': [2.0727720177471376e-05, 0.0006446948699109126], 'false,false': [nan, 0.0006446948699109126], 'false,false,false': [nan, 0.0006446948699109126], 'false,true': [nan, 2.0727720177471376e-05], 'false,true,false': [9.922604014379028e-06, 4.404593700955341e-06]}
{'': [0.00395115480204868, 0.078777181224007], 'false': [-1.1102230246251566e-17, 0.0784833229643723], 'false,false': [0.06950266908970824, 0.11144736825234493], 'false,false,true': [0.0037558510090133224, 0.015522042958536748], 'true': [0.00395115480204868, nan], 'false,true': [-1.1102230246251566e-17, nan]}
{'': [0.042585015574944665, 0.08397665630793762], 'false': [0.0, 0.08982228237880246], 'false,false': [0.007888138698719193, 0.0003238413781411949], 'true': [nan, 0.04258501557494465], 'true,false': [nan, 0.042585015574944665], 'false,false,false': [0.00044477119484780917, 0.00012527968947443187]}
{'': [0.04692692120911471, 0.05565275437827116], 'false': [nan, 0.0556527543782712], 'false,false': [nan, 0.05565275437827116], 'false,false,false': [nan, 0.05565275437827116], 'true': [0.008151436773000297, 0.015623288825768319]}
{'': [2.7727050330624465e-05, 0.043529977365551496], 'false': [nan, 0.04352997736555157], 'false,false': [0.023353068139114405, 0.06079024661339266], 'false,false,false': [0.0414846453648056, 0.08292800216633608], 'true': [2.7727050330624465e-05, nan]}
{'': [0.0037936034474029177, 0.03864392836102496], 'false': [0.02500750519761117, 0.059073520213954], 'false,false': [0.011485462559487392, 0.00122870935178169], 'false,true': [0.08361455686552513, 8.198852245850882e-05], 'false,true,true': [0.08361455686552513, nan], 'false,false,false': [nan, 0.00122870935178169]}
{'': [0.019876907624383378, 0.06322194508471972], 'false': [0.03248848043374496, 0.09747738835662177], 'false,false': [nan, 0.09747738835662177], 'false,false,false': [nan, 0.09747738835662177], 'true': [0.007330478357583793, 4.036880924697256e-05], 'true,true': [0.007514514434184679, 0.006739591557060619], 'true,false': [1.7818230137869393e-06, 0.00011119884679177734], 'true,false,false': [3.4542722517651864e-05, 7.253456888905996e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.703250408172607
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.41405060014124423;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04361695990311305;  // std dev = 0.254, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0491210758722024;  // std dev = 0.781, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15390853323975417;  // std dev = 2.350, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4947947376941465;  // std dev = 0.274, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.11913319282277778;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.07193181046899084;  // std dev = 1.541, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.08325374343412137;  // std dev = 1.750, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.2503341658264498;  // std dev = 1.471, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.43231380069272485;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.27506790350590504;  // std dev = 0.658, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7340660854218048;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6712506571797364;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.11412033215813322;  // std dev = 0.011, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( tweets(A, J) )
%   | | then return -0.15961120979267907;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.24612694120871628;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.2950583917809725;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3548399815412882;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.09673484869311944;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.03362571442846329;  // std dev = 1.068, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.05684366023914951;  // std dev = 1.541, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.17281817787231055;  // std dev = 1.031, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2573914710660072;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3447301296842921;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.036549790879526575;  // std dev = 0.200, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.4058212945548728;  // std dev = 0.903, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4918188998331976;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.14332476938432617;  // std dev = 0.096, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.17633874727374627;  // std dev = 0.285, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.21132412517616667;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2076538455483751;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.43223895602409607;  // std dev = 0.277, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4931968746124588;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return -0.1025779218413613;  // std dev = 0.076, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.14553224562979558;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.0708554245544354;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.05864006068930675;  // std dev = 0.428, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.15583988592179693;  // std dev = 0.746, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.17675364138920396;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17764366003183302;  // std dev = 0.000380, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.3365303006278798;  // std dev = 0.254, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3746025469963454;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(F, A) )
%   | | | then return -0.07984995162839714;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.1157281217038199;  // std dev = 0.104, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.07205553186220666;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.160354219891812;  // std dev = 0.392, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.041672350328996216;  // std dev = 0.823, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.07893957359233547;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15294542550936452;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.38335380346669923;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.07526366040799679;  // std dev = 0.046, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.10005432830846032;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2535692842314982;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.31449849987948647;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.10797141994162585;  // std dev = 0.079, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14701651104961327;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13991524141399114;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.252289521923114;  // std dev = 0.158, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07528135792295658;  // std dev = 0.010, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then return -0.05575782429830001;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.062135082997060886;  // std dev = 0.376, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.23607137370304754;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12503680190267227;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.06510424082801716;  // std dev = 0.332, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11109030505961337;  // std dev = 0.628, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
Inference time using transfer learning 10.576883792877197
Refined model CLL: -0.113945


******************************************
Best model found
******************************************
Results 

CLL : -0.113172 

AUC ROC : 0.993188 

AUC PR : 0.375677 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 4.703250408172607 

Total Inference Time : 3.3158113956451416 

Total revision time: 11.97555422782898
Best scored revision CLL: -0.113945


Results 

CLL : -0.113172 

AUC ROC : 0.993188 

AUC PR : 0.375677 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 12.025440454483032 

Total Inference Time : 3.3158113956451416 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.583519697189331
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1637044906550679;  // std dev = 0.461, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6891703819079245;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.018492986536069272;  // std dev = 0.281, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04095283345445679;  // std dev = 1.134, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14806782439078486;  // std dev = 3.297, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5557566420350332;  // std dev = 0.898, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5628361979848948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5628361979848948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5628361979848949;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01853151877345736;  // std dev = 2.916, 106.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=14 */
%   | | | else return 0.11125668128417408;  // std dev = 2.851, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.557678197986074;  // std dev = 1.502, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12126652958484903;  // std dev = 0.029, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.13525306145557167;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16869052369399432;  // std dev = 0.195, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2853543476964396;  // std dev = 1.051, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.4051208478552935;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2957052611116175;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6314406685361855;  // std dev = 0.225, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10841284093930927;  // std dev = 0.983, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   | | else return 0.035986852755189126;  // std dev = 0.319, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.036242268930677966;  // std dev = 1.914, 96.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=33 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.23823398803614243;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5552248491455453;  // std dev = 0.402, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12704567378094142;  // std dev = 0.109, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.12619494087512165;  // std dev = 0.124, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28684351357124277;  // std dev = 1.035, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.09373022248300893;  // std dev = 0.849, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05996322586447424;  // std dev = 1.524, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15691674915458098;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03468547558156472;  // std dev = 0.153, 73.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.007522638007386386;  // std dev = 1.140, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
%   | | | else return 0.06821171035146667;  // std dev = 1.554, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18648353741928786;  // std dev = 0.057, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27892228556689047;  // std dev = 0.449, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0942661825611304;  // std dev = 0.075, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37023369638663767;  // std dev = 0.461, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12245293016758256;  // std dev = 0.240, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18761067606868345;  // std dev = 0.439, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.17792815423223982;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.0857447691295169;  // std dev = 0.033, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0944034748837313;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0828012396067035;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, G) )
%   | then return -0.010297799791489452;  // std dev = 0.832, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03392963528406627;  // std dev = 1.229, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
Inference time using transfer learning 7.681976318359375
Parameter learned model CLL:-0.110413 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.38e-07, 0, 44], 'true,false,true': [6.14e-08, 60, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 18, 0], 'false,false': [0.461, 25, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.985, 1, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 69, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.134, 18, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.297, 40, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.898, 1, 27], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.916, 92, 14], 'false,false,false,false': [2.851, 31, 12]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.502, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.029, 70, 0], 'false,true,false,false': [0.005, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.195, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.051, 1, 28], 'true,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.225, 0, 17], 'false,false,true,false': [0.983, 106, 2], 'false,false,false': [0.319, 26, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.914, 63, 33], 'false,true': [0.002, 0, 9], 'false,false,true': [0.402, 0, 20], 'false,false,false,true': [0.109, 21, 0], 'false,false,false,false': [0.124, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.035, 1, 45], 'true,false': [0.849, 111, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.524, 22, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.985, 1, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 63, 10], 'false,false,false,true': [1.14, 33, 8], 'false,false,false,false': [1.554, 20, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.057, 0, 28], 'false,true,true,true': [0.449, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.075, 91, 0], 'false,false,true': [0.461, 0, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.24, 55, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.439, 0, 34], 'true,true,false': [0.289, 0, 10], 'true,false,true': [0.033, 68, 0], 'true,false,false,true': [0.029, 9, 0], 'true,false,false,false': [0.044, 12, 0], 'false,true': [0.832, 25, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.229, 18, 11]}]
{'': [0.23303439022667988, 0.2080085998387525], 'true': [1.2918958832001822e-15, 7.105427357601002e-17], 'false': [0.2016000000000001, 0.21219135802469086], 'false,true': [-2.5376526277146434e-16, -3.0839528461809902e-18], 'true,false': [6.29126380620922e-17, -1.4802973661668754e-17], 'true,false,false': [-1.1895246692412391e-17, 0.0], 'false,true,true': [-1.4802973661668753e-16, 0.0]}
{'': [0.02938475665748342, 0.12401961079300415], 'false': [0.07892672546081911, 0.16267310189683362], 'false,false': [0.06424978612186576, 0.18745094320141845], 'false,false,false': [nan, 0.18745094320141859], 'false,true': [nan, 0.07892672546081911], 'false,false,true': [nan, 0.06424978612186576]}
{'': [0.027810478010893095, 0.12352356144466428], 'false': [nan, 0.12352356144466427], 'false,false': [-1.1102230246251565e-16, 0.11508103243066488], 'false,false,false': [0.08023938849498671, 0.1889860612628022], 'true': [0.028801981088685542, 0.0], 'true,true': [0.028801981088685542, nan], 'true,false': [0.0, nan], 'false,false,true': [0.0, -1.2688263138573217e-16]}
{'': [0.03580154356320332, 0.0007543251078756753], 'false': [4.156929902081961e-05, 0.0009294397534977581], 'false,false': [nan, 0.0009294397534977581], 'false,false,false': [nan, 0.0009294397534977581], 'false,true': [nan, 4.156929902081961e-05], 'false,true,false': [1.1891353724432666e-05, 1.3742675022317592e-06]}
{'': [0.0521736202964894, 0.07906628843700163], 'false': [-4.163336342344337e-17, 0.07889401186070333], 'false,false': [0.07246191152366112, 0.1017416874561081], 'false,false,true': [0.0029781441100835693, 0.008955053903415533], 'true': [0.03808084412913396, 0.0], 'false,true': [-4.163336342344337e-17, nan]}
{'': [0.03817278805024654, 0.09264360114187659], 'false': [3.4997679221326905e-07, 0.10283194362322634], 'false,false': [0.008097415186399592, 0.0006160769601988934], 'true': [nan, 0.03817278805024655], 'true,false': [nan, 0.03817278805024654], 'false,false,false': [0.0005629216925990567, 0.0006642646061611734]}
{'': [0.040858614138244556, 0.06451886659019464], 'false': [nan, 0.06451886659019469], 'false,false': [nan, 0.06451886659019464], 'false,false,false': [nan, 0.06451886659019464], 'true': [0.023267493804667652, 0.006316329535807026]}
{'': [0.029372415835879868, 0.038799840888217], 'false': [nan, 0.0387998408882169], 'false,false': [0.023487362492692593, 0.05229056659653828], 'false,false,false': [0.03170251127128313, 0.07544759669606332], 'true': [0.029372415835879868, nan]}
{'': [0.0032633798908181444, 0.031803235075945915], 'false': [0.019644933979528188, 0.04878864798157832], 'false,false': [0.01179160573553786, 0.0010430446554945446], 'false,true': [0.012578661727078513, 6.198983054088676e-05], 'false,true,true': [0.012578661727078513, nan], 'false,false,false': [nan, 0.0010430446554945446]}
{'': [0.01844783315292788, 0.036625638549949185], 'false': [0.021652965799289478, 0.05212107549109522], 'false,false': [nan, 0.05212107549109518], 'false,false,false': [nan, 0.05212107549109522], 'true': [0.006284765695390806, 5.1023429640103994e-05], 'true,true': [0.00566249050893499, 0.008328057197753114], 'true,false': [1.5581418169530672e-05, 0.0001626430299400432], 'true,false,false': [9.21359427680821e-05, 0.00015783254670894328]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.659910678863525
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.14185106490048774;  // std dev = 2.63e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.19148226843284566;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.6528067455442876;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.724547385066237;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1254446385283913;  // std dev = 1.49e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( follows(A, F) )
%   | then return 0.2970143868412815;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.16436944576267934;  // std dev = 0.710, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.23320549123154835;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5223035852987794;  // std dev = 0.982, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5541131481088049;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5847500055516242;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.054113148108804715;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5679263794553993;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4606241869486042;  // std dev = 0.973, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.11377904021748844;  // std dev = 0.066, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.027999573920194486;  // std dev = 1.655, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | | | else return 0.11243274748887114;  // std dev = 2.217, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E) )
%   | | then return 0.44655677625419526;  // std dev = 0.028, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.41446225780374407;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2437181165160303;  // std dev = 0.698, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.5338269924080854;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6158132680784864;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7795213981528946;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.10241896456597321;  // std dev = 0.005, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.11886466257337246;  // std dev = 0.004, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.1736225859834934;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.27281360137135746;  // std dev = 0.967, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3590524823707907;  // std dev = 0.108, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09848338573164382;  // std dev = 0.477, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3298917021523763;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.366940493739157;  // std dev = 0.200, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09594070646948566;  // std dev = 0.100, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.028109826459645666;  // std dev = 1.254, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | | else return 0.13040040678817452;  // std dev = 1.604, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.28486860848684353;  // std dev = 0.025, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2579180511290904;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08475442851205592;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.08475442851205589;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27089675998979157;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3797722448029946;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4980919433018227;  // std dev = 0.291, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10801648208428802;  // std dev = 0.084, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.13409382230292977;  // std dev = 0.273, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2248717513570877;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08201460849994484;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.22078591189564623;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22104025662312815;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.17358017072531962;  // std dev = 0.453, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.22696591286148526;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07909364050927138;  // std dev = 0.057, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.002298013594844203;  // std dev = 1.139, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.07227157679565464;  // std dev = 1.171, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.19031252872884735;  // std dev = 0.065, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13092447065414203;  // std dev = 0.931, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.2905694576829827;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.08199532224648158;  // std dev = 0.015, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.17834260656201462;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.07214148976224993;  // std dev = 0.032, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -1.415545314358511E-4;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.004410509460485899;  // std dev = 0.330, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.03169674036624039;  // std dev = 1.213, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16878460667190673;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.09183335110438326;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1648296132938312;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2185295470826507;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.16497165496222024;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.06771842792699269;  // std dev = 0.004, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23830559038609794;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.38664326493694856;  // std dev = 0.173, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11342147781367422;  // std dev = 0.041, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14511222356344997;  // std dev = 0.017, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18350398382901623;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1537713326592127;  // std dev = 0.111, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06524009656182986;  // std dev = 0.008, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.015233174378741055;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.18689675024376515;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08742656944166867;  // std dev = 0.007, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( tweets(A, J) )
%   | | then return 0.0626377983807572;  // std dev = 0.443, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.023448435543601792;  // std dev = 0.264, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning 15.865831136703491
Refined model CLL: -0.097131


******************************************
Best model found
******************************************
Results 

CLL : -0.101149 

AUC ROC : 0.994261 

AUC PR : 0.457252 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 8.659910678863525 

Total Inference Time : 7.9477479457855225 

Total revision time: 22.504490613937378
Best scored revision CLL: -0.097131


Results 

CLL : -0.101149 

AUC ROC : 0.994261 

AUC PR : 0.457252 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 22.55437684059143 

Total Inference Time : 7.9477479457855225 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0334763526916504
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10959300038435871;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03495029154319623;  // std dev = 0.264, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06841944079912346;  // std dev = 1.519, 42.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2518526675222027;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.13193638803160354;  // std dev = 3.959, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5519267507876469;  // std dev = 1.070, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7169177822094082;  // std dev = 0.228, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.7019634200604238;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010221959221396713;  // std dev = 3.618, 152.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=21 */
%   | | | else return 0.05823228980255587;  // std dev = 3.295, 69.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5487570065138052;  // std dev = 1.906, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12110267000086206;  // std dev = 0.032, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return -0.12799184185987555;  // std dev = 0.000267, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17217337796566043;  // std dev = 0.213, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28394831567095036;  // std dev = 1.453, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2158930619536433;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6415069349626742;  // std dev = 0.221, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10371085991196836;  // std dev = 1.325, 157.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=3 */
%   | | else return 0.05509075822391501;  // std dev = 0.332, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006486112155854009;  // std dev = 2.802, 165.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24680196378577982;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4850307757104487;  // std dev = 1.690, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12684761352868873;  // std dev = 0.168, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.1315018448723365;  // std dev = 0.172, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.21061558710590667;  // std dev = 2.616, 77.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=69 */
%   | else return -0.0867036572032379;  // std dev = 1.308, 175.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11208965726852686;  // std dev = 1.863, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1977995562174699;  // std dev = 0.073, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03516833064602279;  // std dev = 0.155, 114.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=14 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.012515949752409633;  // std dev = 1.757, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.030251557008508078;  // std dev = 2.010, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1770278343625064;  // std dev = 0.167, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2821127989565185;  // std dev = 0.597, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09251733375022554;  // std dev = 0.100, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3719751676095623;  // std dev = 1.224, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12143610240626322;  // std dev = 0.226, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19604791005803004;  // std dev = 0.595, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.16509239419146568;  // std dev = 0.321, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08246948801720971;  // std dev = 0.017, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10301342379307389;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.027281339843967075;  // std dev = 0.518, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.006499099542050648;  // std dev = 1.385, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -7.798629145390621E-4;  // std dev = 1.783, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
Inference time using transfer learning 8.19949460029602
Parameter learned model CLL:-0.111653 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 65], 'true,false,true': [7.88e-08, 83, 0], 'true,false,false,true': [0.984, 30, 1], 'true,false,false,false': [0.0, 3, 0], 'false,true,true,true': [1.291, 2, 10], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.49e-08, 35, 0], 'false,false': [0.471, 28, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 115, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.519, 39, 3], 'false,false,false,true': [1.0, 2, 2], 'false,false,false,false': [3.959, 59, 25]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.07, 1, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.228, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.618, 131, 21], 'false,false,false,false': [3.295, 54, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.906, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.032, 101, 0], 'false,true,false,false': [0.000267, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.213, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.453, 2, 45], 'true,false': [0.0, 0, 0], 'false,true,true': [0.961, 1, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.221, 0, 23], 'false,false,true,false': [1.325, 154, 3], 'false,false,false': [0.332, 32, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.802, 114, 51], 'false,true': [0.039, 0, 12], 'false,false,true': [1.69, 2, 30], 'false,false,false,true': [0.168, 48, 0], 'false,false,false,false': [0.172, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.616, 8, 69], 'true,false': [1.308, 170, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.863, 18, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.073, 0, 49], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 100, 14], 'false,false,false,true': [1.757, 42, 15], 'false,false,false,false': [2.01, 38, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.167, 1, 45], 'false,true,true,true': [0.597, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 126, 0], 'false,false,true': [1.224, 1, 25], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.226, 59, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.595, 0, 52], 'true,true,false': [0.321, 0, 13], 'true,false,true': [0.017, 96, 0], 'true,false,false,true': [0.031, 14, 0], 'true,false,false,false': [0.518, 8, 1], 'false,true': [1.385, 29, 13], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.783, 33, 14]}]
{'': [0.23113150585678063, 0.20734877126654183], 'true': [-8.745141363201234e-16, 0.008473957191905898], 'false': [0.1923999999999995, 0.22222222222222174], 'false,true': [0.11555555555555533, 3.489272363107635e-17], 'false,true,true': [0.1388888888888887, 1.4802973661668753e-16], 'true,false': [7.490661370964911e-17, 0.02854671280276823], 'true,false,false': [0.031217481789802347, 0.0]}
{'': [-6.525392471266227e-16, 0.11555687417764912], 'false': [0.06947326607456722, 0.1557059262509813], 'false,false': [0.05496622037425084, 0.1901018832032487], 'false,false,false': [0.24999999999999994, 0.18659595946871776], 'false,true': [nan, 0.06947326607456722], 'false,false,true': [nan, 0.05496622037425084]}
{'': [0.02802009713980675, 0.1182001507590661], 'false': [nan, 0.11820015075906622], 'false,false': [-1.8503717077085943e-16, 0.10936482469544671], 'false,false,false': [0.08613504913778951, 0.15731472423930418], 'true': [0.027283106840229637, 0.013105326847293597], 'true,true': [0.027283106840229637, nan], 'true,false': [0.026098837220945525, 0.0], 'false,false,true': [-3.700743415417188e-17, -4.9343245538895844e-17]}
{'': [0.03825730046338897, 0.0008040487300437532], 'false': [1.5536979985747257e-05, 0.0007451034363483311], 'false,false': [nan, 0.0007451034363483311], 'false,false,false': [nan, 0.0007451034363483311], 'false,true': [nan, 1.5536979985752627e-05], 'false,true,false': [1.0271204343837872e-05, 3.1068503518653138e-09]}
{'': [0.0449069501812913, 0.08159589071933766], 'false': [0.07100591715976333, 0.07972147095459765], 'false,false': [0.0719133148961162, 0.10990742959991358], 'false,false,true': [0.0021271530851816323, 0.011175432456106532], 'false,true': [0.07100591715976333, nan], 'true': [0.0449069501812913, nan]}
{'': [0.04758403919040476, 0.09237402149352333], 'false': [0.0001257130129176757, 0.09741349073986803], 'false,false': [0.08920880983876694, 0.000654768296320249], 'true': [nan, 0.04758403919040501], 'true,false': [nan, 0.04758403919040476], 'false,false,false': [0.0005866767211524468, 0.0007228024564017884]}
{'': [0.05269758979591725, 0.09378115794624178], 'false': [nan, 0.09378115794624181], 'false,false': [nan, 0.09378115794624178], 'false,false,false': [nan, 0.09378115794624178], 'true': [0.08885980750754502, 0.009775490019407244]}
{'': [0.00010844512611993319, 0.04491738713123616], 'false': [nan, 0.04491738713123609], 'false,false': [0.024127323344711692, 0.06485433815312057], 'false,false,false': [0.0541611560402552, 0.07619155787291101], 'true': [0.00010844512611993319, nan]}
{'': [0.027949129251056005, 0.039576134625576236], 'false': [0.020780634723208874, 0.06990085773750658], 'false,false': [0.0575774444855176, 0.0008630236501841235], 'false,true': [0.015505030941482676, 7.922608734057935e-05], 'false,true,true': [0.015505030941482676, nan], 'false,false,false': [nan, 0.0008630236501841235]}
{'': [0.02090991539085209, 0.057289697864256306], 'false': [0.0456860839716016, 0.06763388139461969], 'false,false': [nan, 0.06763388139461972], 'false,false,false': [nan, 0.06763388139461969], 'true': [0.007185757941761333, 0.0025448651826971984], 'true,true': [0.006803140571084516, 0.007949632254416639], 'true,false': [3.1184201083391907e-06, 0.013087231935481385], 'true,false,false': [6.707840616628729e-05, 0.029849722372635296]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.284897565841675
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.6914822684328455;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return -0.13323037524531522;  // std dev = 0.092, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.13592671287729013;  // std dev = 0.448, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7254206223701636;  // std dev = 0.088, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.12847633750336324;  // std dev = 0.153, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.03240824963208369;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7311304363195686;  // std dev = 0.150, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12639345736246357;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7284620358927258;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12544463852839124;  // std dev = 4.34e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.26187761132831916;  // std dev = 1.407, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.17675881390326997;  // std dev = 1.935, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5618156465495295;  // std dev = 0.097, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.44676186363189174;  // std dev = 0.785, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.6613977629674797;  // std dev = 0.152, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5754928902524477;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5606844664200382;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4151198016960178;  // std dev = 1.200, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.11365830484916369;  // std dev = 0.029, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.033076738636631194;  // std dev = 2.238, 65.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=14 */
%   | | | else return 0.17515424030037577;  // std dev = 2.383, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4358759751499999;  // std dev = 0.310, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.418870793135932;  // std dev = 0.039, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0032429567941309467;  // std dev = 0.966, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.5393271658523116;  // std dev = 0.167, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6320260774568179;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7637871674701341;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10278844360191747;  // std dev = 0.025, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.10207213791109056;  // std dev = 0.000466, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.13893385689030252;  // std dev = 0.294, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.3202087541659526;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.19944612496003472;  // std dev = 1.516, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.329503189067669;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.3586860518922463;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.24618446646247108;  // std dev = 0.268, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.39115115861068556;  // std dev = 0.181, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08705400931501854;  // std dev = 0.998, 161.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=3 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return -0.056004946024229965;  // std dev = 0.525, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.11128832618238489;  // std dev = 1.755, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.260520250794365;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.21211001708494423;  // std dev = 0.997, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.08661269849669646;  // std dev = 0.002, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2921628046694756;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08601011468060266;  // std dev = 0.000382, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.19185075653674682;  // std dev = 0.268, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.454756460896342;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3710662081633732;  // std dev = 1.128, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return -0.11386476883640971;  // std dev = 0.043, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2198850891531824;  // std dev = 0.011, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.10142244213272579;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then return 0.006947414834190746;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2163467003630152;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.041104330487925896;  // std dev = 0.110, 147.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=17 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.15716349642326552;  // std dev = 1.389, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.10662411509441089;  // std dev = 0.166, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04506736580160936;  // std dev = 0.845, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.06268267232573792;  // std dev = 1.266, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.184452440336427;  // std dev = 0.011, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.22059915028569024;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2468423755720963;  // std dev = 0.191, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.35551930128099807;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07694715154313136;  // std dev = 0.002, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.003109588838789971;  // std dev = 0.708, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return -0.01905167466981193;  // std dev = 1.091, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05771708179640702;  // std dev = 0.786, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return -0.015017449708907457;  // std dev = 1.344, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16077650230346005;  // std dev = 0.015, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.09080877282119178;  // std dev = 0.779, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.19107498836386708;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.18837564699078796;  // std dev = 0.033, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07167235308181123;  // std dev = 0.002, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22976834145493094;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4204586477379843;  // std dev = 0.265, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.08999101870260207;  // std dev = 0.105, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.17967430141140805;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14162055761554196;  // std dev = 0.013, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.18985682928501943;  // std dev = 0.050, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06517104297380752;  // std dev = 0.024, 149.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.04577512597061971;  // std dev = 0.981, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.248833762086717;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09094601901932094;  // std dev = 0.024, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J) )
%   | | | then return 0.009685022193957515;  // std dev = 0.629, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.02797941962869687;  // std dev = 0.347, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.020273795661666576;  // std dev = 0.269, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning 17.32261037826538
Refined model CLL: -0.097294


******************************************
Best model found
******************************************
Results 

CLL : -0.097156 

AUC ROC : 0.99411 

AUC PR : 0.417305 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 8.284897565841675 

Total Inference Time : 12.070570230484009 

Total revision time: 29.323366403579712
Best scored revision CLL: -0.097294


Results 

CLL : -0.097156 

AUC ROC : 0.99411 

AUC PR : 0.417305 

Precision : 0.342391 

Recall : 1.0 

F1 : 0.510121 

Total Learning Time : 29.373252630233765 

Total Inference Time : 12.070570230484009 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.3824503421783447
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8228548174524533;  // std dev = 1.701, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09307057709560969;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.22851930546988244;  // std dev = 0.483, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7128428797676741;  // std dev = 0.997, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033503700085745075;  // std dev = 0.264, 139.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05013666691159537;  // std dev = 1.781, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7466037067931512;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11862458833629183;  // std dev = 4.631, 123.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5811985530200304;  // std dev = 0.357, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7049950851241182;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.37798001206165294;  // std dev = 0.936, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5656935974697752;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5656935974697753;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015149423824612348;  // std dev = 4.096, 200.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=27 */
%   | | | else return 0.04850852962825685;  // std dev = 3.914, 98.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5539518822974392;  // std dev = 2.124, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12265594927143496;  // std dev = 0.150, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.12864703129836363;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1700564374038616;  // std dev = 0.255, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3197087276420704;  // std dev = 0.535, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.3705311662050196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2983132067695156;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5421311052434735;  // std dev = 1.706, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return -0.09783055935903265;  // std dev = 1.775, 178.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=5 */
%   | | else return 0.054700833072125477;  // std dev = 0.326, 48.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.012712219691379778;  // std dev = 2.839, 212.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=65 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2411387060567105;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5137657975930247;  // std dev = 1.516, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12601792154948827;  // std dev = 0.208, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.1264064326062376;  // std dev = 0.168, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2766189338383657;  // std dev = 1.775, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | else return -0.08220284785843703;  // std dev = 1.647, 195.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.042951532262520284;  // std dev = 1.989, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1859825558834921;  // std dev = 0.065, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.19493959219662493;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0453747972627797;  // std dev = 0.144, 147.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02205392053828175;  // std dev = 2.097, 110.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=22 */
%   | | | else return 0.060783341457666756;  // std dev = 2.259, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14860566074503265;  // std dev = 0.176, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2689733547655628;  // std dev = 1.153, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09340487104393873;  // std dev = 0.129, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39128864112844003;  // std dev = 0.669, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12438039515777556;  // std dev = 0.265, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18449142402323385;  // std dev = 0.687, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return 0.16287048956782826;  // std dev = 0.347, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08237370346726718;  // std dev = 0.018, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09671063648661327;  // std dev = 0.036, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.013515597007290991;  // std dev = 0.906, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.025953190073231595;  // std dev = 1.142, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19363877582851796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010609964293070083;  // std dev = 1.863, 63.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=19 */
Inference time using transfer learning 7.851309299468994
Parameter learned model CLL:-0.113691 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.701, 3, 82], 'true,false,true': [5.16e-08, 118, 0], 'true,false,false,true': [1.379, 39, 2], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 16], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.65e-08, 36, 0], 'false,false': [0.483, 34, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.997, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 124, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.781, 42, 4], 'false,false,false,true': [0.094, 0, 4], 'false,false,false,false': [4.631, 88, 35]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.357, 0, 54], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.936, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.096, 173, 27], 'false,false,false,false': [3.914, 77, 21]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.124, 1, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.15, 138, 0], 'false,true,false,false': [0.008, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.255, 73, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.535, 0, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [2.11e-08, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.706, 3, 32], 'false,false,true,false': [1.775, 173, 5], 'false,false,false': [0.326, 37, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.839, 147, 65], 'false,true': [0.056, 0, 16], 'false,false,true': [1.516, 1, 43], 'false,false,false,true': [0.208, 65, 0], 'false,false,false,false': [0.168, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.775, 2, 94], 'true,false': [1.647, 188, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.989, 43, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.065, 0, 65], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 132, 15], 'false,false,false,true': [2.097, 88, 22], 'false,false,false,false': [2.259, 41, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.176, 2, 61], 'false,true,true,true': [1.153, 1, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.129, 177, 0], 'false,false,true': [0.669, 0, 35], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 74, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.687, 0, 66], 'true,true,false': [0.347, 0, 16], 'true,false,true': [0.018, 128, 0], 'true,false,false,true': [0.036, 22, 0], 'true,false,false,false': [0.906, 11, 3], 'false,true': [1.142, 36, 19], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.863, 44, 19]}]
{'': [0.2261385418732244, 0.22977863816177227], 'false': [0.22611570247933835, 0.23319615912208466], 'true': [0.03404844290657402, 0.018286331545850753], 'false,true': [-2.8047739569477637e-16, 3.700743415417188e-17], 'true,false': [2.258080728051166e-17, 0.06489994591671158], 'true,false,false': [0.04640095181439618, 0.25], 'false,true,true': [-2.220446049250313e-16, 1.4802973661668753e-16]}
{'': [0.014838571655131121, 0.12247017121673445], 'false': [0.06987925893683881, 0.15811870949036771], 'false,false': [0.06892146745293312, 0.180974467776217], 'false,false,false': [0.002208158652350467, 0.17436728901760593], 'false,true': [nan, 0.06987925893683881], 'false,false,true': [nan, 0.06892146745293312]}
{'': [0.020934768359651225, 0.11771638218450749], 'false': [nan, 0.11771638218450772], 'false,false': [-1.1842378929335003e-16, 0.10861785879868197], 'false,false,false': [0.08390316279564992, 0.15633632596207483], 'true': [0.0023559557368312977, 0.14068533388210902], 'true,false': [0.016376886631064513, 0.17516833047896704], 'true,true': [0.0023559557368312977, nan], 'false,false,true': [0.0, -7.401486830834377e-17]}
{'': [0.03609946738124506, 0.0008477991288011821], 'false': [0.00014565577470244156, 0.0008882691106044093], 'false,false': [nan, 0.0008882691106044093], 'false,false,false': [nan, 0.0008882691106044093], 'false,true': [nan, 0.0001456557747024276], 'false,true,false': [0.0001625946332372539, 3.1908052447090127e-06]}
{'': [0.004732620232951277, 0.08825075866404103], 'false': [2.960594732333751e-17, 0.08899230040314479], 'false,false': [0.08470440348430348, 0.10618833969928283], 'false,false,true': [0.08319413506821723, 0.017704264846335013], 'true': [0.004769154281727446, 0.0], 'false,true': [2.960594732333751e-17, nan]}
{'': [0.03801317407969036, 0.08894594337093942], 'false': [0.00019835773926233508, 0.09406355199667346], 'false,false': [0.05224884318393834, 0.0005873860559878394], 'true': [nan, 0.03801317407969036], 'true,false': [nan, 0.03801317407969036], 'false,false,false': [0.0006665769922207311, 0.0004970001830883095]}
{'': [0.04861204570896297, 0.05991616935151158], 'false': [nan, 0.05991616935151159], 'false,false': [nan, 0.05991616935151158], 'false,false,false': [nan, 0.05991616935151158], 'true': [0.032823364126235176, 0.013909695179390903]}
{'': [6.502713829028359e-05, 0.04094585705370793], 'false': [nan, 0.0409458570537081], 'false,false': [0.020842881872886555, 0.05682361122847022], 'false,false,false': [0.039974472856549044, 0.08232874779330049], 'true': [6.481197247647166e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.030829443993303323, 0.037941755053039206], 'false': [0.02241676518878132, 0.0627128929631053], 'false,false': [0.012773631850728709, 0.0009474061957160249], 'false,true': [0.04582679772321957, 9.471159295903904e-05], 'false,true,true': [0.04582679772321957, nan], 'false,false,false': [nan, 0.0009474061957160249]}
{'': [0.020902451242043065, 0.04043964547689095], 'false': [0.02370880636352184, 0.054745685625828294], 'false,false': [0.0, 0.05509123435880733], 'false,false,false': [nan, 0.05509123435880748], 'true': [0.007303754838478346, 0.005790883745728764], 'true,true': [0.0071570878107261645, 0.007532504166445807], 'true,false': [2.4839324002500635e-06, 0.025736626655276207], 'true,false,false': [5.834056432123384e-05, 0.05866332752543196]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.034632921218872
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8461007423284279;  // std dev = 0.109, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.07802127766644519;  // std dev = 0.244, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7022908305907625;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0.7309914866803535;  // std dev = 0.141, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.721898673728017;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.09236432307540013;  // std dev = 0.185, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.06738368096540023;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.08378689087673595;  // std dev = 1.173, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12906584361065424;  // std dev = 4.360, 115.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=35 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5621250385864079;  // std dev = 0.010, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( follows(E, A) )
%   | | then return 0.724634743803693;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4040520610480189;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5578556749320926;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5554973374295301;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11541671965482468;  // std dev = 0.053, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 8.832091960429636E-4;  // std dev = 2.479, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1699073371700964;  // std dev = 3.422, 70.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=26 */
%   | | | else return 0.08239670017933488;  // std dev = 2.408, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3912479307944429;  // std dev = 1.395, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return 0.4934799462699886;  // std dev = 1.059, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.17952269728976838;  // std dev = 1.153, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.6008506117916742;  // std dev = 0.241, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4803580284999349;  // std dev = 1.665, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6670958031223777;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7794255137333157;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.11077672914511859;  // std dev = 0.012, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.16808553838331694;  // std dev = 0.019, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3110108314996816;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1383324150678503;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2553650522141882;  // std dev = 1.003, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4555041322759238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3268673317142652;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5114611671353961;  // std dev = 0.450, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09876519164615728;  // std dev = 0.126, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05911511648260745;  // std dev = 2.641, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
%   | | | else return 0.17023545116933292;  // std dev = 2.020, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2673679387501118;  // std dev = 0.003, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( tweets(A, E) )
%   | | then return -0.04795868191259937;  // std dev = 0.118, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | else return -0.06748723799303923;  // std dev = 0.118, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.27867249655241727;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2590549730894721;  // std dev = 0.000435, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.44823803709472304;  // std dev = 1.221, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.5445602929426637;  // std dev = 0.296, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.14316512537972143;  // std dev = 0.095, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.13863150675645697;  // std dev = 0.384, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.19049880257073634;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return 0.21814196613902362;  // std dev = 0.018, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07783280385350012;  // std dev = 0.029, 111.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3503608513310242;  // std dev = 0.472, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.0915809763589396;  // std dev = 0.042, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.37690204625467083;  // std dev = 0.371, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.13334520959031199;  // std dev = 0.099, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07033365342640954;  // std dev = 0.624, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.059643014765402104;  // std dev = 1.391, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18568201581135355;  // std dev = 0.008, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.10137781266623157;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.244018260795697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07229027382309161;  // std dev = 0.029, 117.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=1 */
%   | | else return -0.007546478928928855;  // std dev = 0.156, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.25802449573472513;  // std dev = 1.161, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return -0.12019301422963304;  // std dev = 0.108, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09235772975220186;  // std dev = 0.575, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.019089337287075646;  // std dev = 1.361, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1595712115343636;  // std dev = 0.007, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.01887223733310796;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.1952097344701032;  // std dev = 0.302, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16469291482556864;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29973714244209587;  // std dev = 0.323, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07509965115388338;  // std dev = 0.007, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2626795442834166;  // std dev = 0.109, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.4112696968114715;  // std dev = 0.221, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1234323869103334;  // std dev = 0.029, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.0870752161112953;  // std dev = 1.686, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   | | | else return 0.1800699652625333;  // std dev = 0.234, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.03513633414713969;  // std dev = 0.329, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return -0.06510980671890848;  // std dev = 0.069, 172.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10752603040806341;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.004387926091221828;  // std dev = 0.146, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.10752603040806341;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.030656561138421846;  // std dev = 0.892, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 7.376139485378823E-4;  // std dev = 1.076, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
Inference time using transfer learning 14.236636638641357
Refined model CLL: -0.105334


******************************************
Best model found
******************************************
Results 

CLL : -0.102947 

AUC ROC : 0.993042 

AUC PR : 0.338747 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 15.034632921218872 

Total Inference Time : 11.845346450805664 

Total revision time: 37.608394145965576
Best scored revision CLL: -0.105334


Results 

CLL : -0.102947 

AUC ROC : 0.993042 

AUC PR : 0.338747 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 37.65828037261963 

Total Inference Time : 11.845346450805664 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.714141368865967
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10018439823382107;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.17759337954395607;  // std dev = 0.466, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6736946014349969;  // std dev = 2.184, 90.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04153628976446535;  // std dev = 0.254, 193.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05866548472715394;  // std dev = 1.790, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6469134186345591;  // std dev = 0.873, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1461045081976516;  // std dev = 4.863, 127.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5727221794258128;  // std dev = 1.061, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7233909386262658;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6114566524380564;  // std dev = 0.187, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5994351428446573;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.57571161766743;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015469516694847864;  // std dev = 4.579, 254.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=34 */
%   | | | else return 0.04391082663902089;  // std dev = 4.139, 108.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48943647476061125;  // std dev = 3.858, 168.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12097681821668729;  // std dev = 0.114, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | | else return -0.1259527961457112;  // std dev = 0.004, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16660879206947052;  // std dev = 0.237, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30360459001213025;  // std dev = 1.643, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4309431203651958;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3173740210392289;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4615638585546771;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6416845297779981;  // std dev = 0.353, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10601817335354048;  // std dev = 1.828, 282.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=5 */
%   | | else return 0.05088639488430704;  // std dev = 0.328, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.046309843799578046;  // std dev = 3.132, 221.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21619368904180733;  // std dev = 0.991, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5026357431151429;  // std dev = 1.545, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12991640951074057;  // std dev = 0.205, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.13445008655435642;  // std dev = 0.224, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26019992540896114;  // std dev = 2.506, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.0901636409978099;  // std dev = 1.868, 250.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025206341662033553;  // std dev = 2.470, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1802210596165224;  // std dev = 1.357, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2426669787375082;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05217753660757568;  // std dev = 0.144, 204.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005062408657549102;  // std dev = 2.098, 119.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=28 */
%   | | | else return 0.0626285342177786;  // std dev = 2.451, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1635687434622206;  // std dev = 0.169, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27497023602478343;  // std dev = 1.202, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09378147171762725;  // std dev = 0.139, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3739421881481021;  // std dev = 1.190, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1175602712752757;  // std dev = 0.264, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1833185461845915;  // std dev = 1.123, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.0743787380905083;  // std dev = 1.432, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08260654321777924;  // std dev = 0.019, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09252508681268296;  // std dev = 0.046, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.030779223030008244;  // std dev = 0.990, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.011358532591774467;  // std dev = 1.972, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11807181307820891;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 1.307342794208825E-4;  // std dev = 2.117, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
Inference time using transfer learning 9.177795648574829
Parameter learned model CLL:-0.110875 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 165, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 51, 0], 'false,false': [0.466, 49, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.184, 5, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.254, 174, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.79, 48, 4], 'false,false,false,true': [0.873, 1, 8], 'false,false,false,false': [4.863, 87, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.061, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.213, 0, 3], 'true,false,false': [0.187, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.13, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.579, 220, 34], 'false,false,false,false': [4.139, 85, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.858, 12, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.114, 174, 0], 'false,true,false,false': [0.004, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.237, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.643, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.01, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.353, 0, 39], 'false,false,true,false': [1.828, 277, 5], 'false,false,false': [0.328, 46, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.132, 139, 82], 'false,true': [0.991, 1, 22], 'false,false,true': [1.545, 1, 52], 'false,false,false,true': [0.205, 84, 0], 'false,false,false,false': [0.224, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.506, 5, 121], 'true,false': [1.868, 243, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.47, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.357, 2, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 185, 19], 'false,false,false,true': [2.098, 91, 28], 'false,false,false,false': [2.451, 49, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.169, 2, 78], 'false,true,true,true': [1.202, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.139, 214, 0], 'false,false,true': [1.19, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.264, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.123, 1, 85], 'true,true,false': [1.432, 2, 19], 'true,false,true': [0.019, 162, 0], 'true,false,false,true': [0.046, 36, 0], 'true,false,false,false': [0.99, 29, 4], 'false,true': [1.972, 44, 25], 'false,false,true': [0.767, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.117, 58, 21]}]
{'': [0.22119350223045423, 0.2191380569758956], 'true': [0.035665294924556515, 0.017931235795750608], 'false': [0.22074099722991802, 0.2173996913580257], 'false,true': [7.105427357601002e-16, 5.659960517696876e-17], 'true,false': [-1.6417843515668981e-16, 0.06858710562414251], 'true,false,false': [0.03993055555555552, 0.22222222222222224], 'false,true,true': [0.0, 0.0]}
{'': [0.05297725635270949, 0.12225160647687934], 'false': [0.06447717435043185, 0.16939603093017613], 'false,false': [0.06160681884279829, 0.1949536794485256], 'false,false,false': [0.08460397940968721, 0.186176045145144], 'false,true': [nan, 0.06447717435043185], 'false,false,true': [nan, 0.06160681884279829]}
{'': [0.016195850368843006, 0.11767014851453896], 'false': [nan, 0.11767014851453897], 'false,false': [0.0009188663621787761, 0.10598260723661274], 'false,false,false': [0.0825379522520337, 0.15864690061538853], 'true': [0.01656388646348753, 0.009791460823012764], 'true,true': [0.01656388646348753, nan], 'true,false': [0.015084010134681192, 0.004389677260828728], 'false,false,true': [0.0028140282341727976, -1.7763568394002506e-16]}
{'': [0.08859459440533515, 0.0006495394507928173], 'false': [6.617417752515256e-05, 0.0006821277543763093], 'false,false': [nan, 0.0006821277543763093], 'false,false,false': [nan, 0.0006821277543763093], 'false,true': [nan, 6.617417752514612e-05], 'false,true,false': [7.466104931821886e-05, 6.121639975941274e-07]}
{'': [0.033513371311153596, 0.07818577379044649], 'false': [0.0009475858516312808, 0.07678023944357774], 'false,false': [0.07047013177401243, 0.10742489243957981], 'false,false,true': [0.0031869319654126626, 0.01185215870775398], 'true': [0.033732102016586496, 0.0], 'false,true': [4.9313707494613725e-06, 0.0]}
{'': [0.04439730893748032, 0.08908442842176317], 'false': [0.04273475303696264, 0.09111986217984407], 'false,false': [0.04502854303899177, 0.0006367473118170667], 'true': [nan, 0.04439730893748017], 'true,false': [nan, 0.04439730893748032], 'false,false,false': [0.000502530913414599, 0.0008067631638941749]}
{'': [0.053336561320520434, 0.07096000783165697], 'false': [nan, 0.070960007831657], 'false,false': [nan, 0.07096000783165697], 'false,false,false': [nan, 0.07096000783165697], 'true': [0.04984014804507375, 0.013962894005429322]}
{'': [0.021251518799208474, 0.038794386462042356], 'false': [nan, 0.03879438646204201], 'false,false': [0.020692070224265138, 0.05529399102390633], 'false,false,false': [0.036977839813599776, 0.08231190163177245], 'true': [0.021660181393706603, 7.350923115796715e-05], 'true,false': [7.350923115796715e-05, nan]}
{'': [0.028457518454591747, 0.03807820971090451], 'false': [0.02351763018876181, 0.062387736458484666], 'false,false': [0.03454465205198148, 0.0007480075303195025], 'false,true': [0.03705200027668075, 9.007797864344089e-05], 'false,true,true': [0.03705200027668075, nan], 'false,false,false': [nan, 0.0007480075303195025]}
{'': [0.025869805828511165, 0.05959787258922069], 'false': [0.05635012274097147, 0.0623072779525544], 'false,false': [0.1959896423333086, 0.05671956751113743], 'false,false,false': [nan, 0.05671956751113743], 'true': [0.03281462443481629, 0.0046177076993804906], 'true,true': [0.014666999893182103, 0.09759479645250921], 'true,false': [2.2144586467122127e-06, 0.015184339842460865], 'true,false,false': [5.779757350667411e-05, 0.029696864911978284]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.093987703323364
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.1212325081994573;  // std dev = 0.142, 194.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.11740819435877163;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.6901238457444496;  // std dev = 0.175, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | else return 0.3885365441571477;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7355431442025466;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.5700179896669781;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.73645145655676;  // std dev = 0.144, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7446606066271485;  // std dev = 0.132, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12772418867679636;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11858857005830098;  // std dev = 3.895, 101.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=29 */
%   | | | else return 0.2533029486007857;  // std dev = 2.388, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.5220506417972225;  // std dev = 0.204, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.5822044015766954;  // std dev = 0.212, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(F, A) )
%   | | then return 0.4009968368305019;  // std dev = 0.416, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.5511701270861465;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5649483295315375;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10820375275056116;  // std dev = 0.682, 115.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=1 */
%   | | | else return -0.007091976527604848;  // std dev = 2.577, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10624281604835292;  // std dev = 3.503, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.16790298505866852;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4203794564307116;  // std dev = 1.011, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.31463575150863804;  // std dev = 1.282, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.5811139938292817;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, G) )
%   | | | then return 0.41482491673948935;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.47322744766916297;  // std dev = 0.205, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.599732269590347;  // std dev = 1.030, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7080217153668353;  // std dev = 0.330, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(K, A) )
%   | then return -0.10714944896168795;  // std dev = 0.005, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.16795163463449364;  // std dev = 0.275, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3382816638266382;  // std dev = 0.090, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.37052388955874943;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5055925089139847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3169239249901939;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5368116682782696;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.434715178207171;  // std dev = 0.218, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09804646089164318;  // std dev = 0.064, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.10859488264522624;  // std dev = 2.036, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0.05535405860532291;  // std dev = 2.979, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.23975478894281882;  // std dev = 0.986, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.27087908862236315;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2895708647273195;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3196355870933946;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08964375526429727;  // std dev = 0.045, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else return -0.09187446055683558;  // std dev = 0.104, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2645573337585007;  // std dev = 0.041, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.47145069690313185;  // std dev = 0.117, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12994220882191895;  // std dev = 0.038, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.18926122011745797;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.2133554558018115;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.01988962245162782;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21955957396853443;  // std dev = 0.028, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04892038096336803;  // std dev = 0.117, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2094903304077227;  // std dev = 1.860, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | | else return -0.13263097233105445;  // std dev = 0.045, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.030100883757468028;  // std dev = 1.702, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | | else return 0.07180985002254374;  // std dev = 1.448, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17329576825433082;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.28497776733918867;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07466774460167022;  // std dev = 0.065, 161.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=2 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.2203079798650002;  // std dev = 0.918, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08314803437803488;  // std dev = 0.996, 86.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.23959181191460066;  // std dev = 1.212, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.1191650629179977;  // std dev = 0.047, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03393577514748331;  // std dev = 1.667, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | | else return 0.024058488984166668;  // std dev = 1.489, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.09370322184305792;  // std dev = 1.669, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.15752301137579044;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.20351982791827403;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.11419907265467892;  // std dev = 0.931, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13863467731340393;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.14281180791235984;  // std dev = 0.227, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.07238603481225077;  // std dev = 0.045, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.35166260806594063;  // std dev = 0.086, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12716525656684194;  // std dev = 0.032, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.10331297460301998;  // std dev = 0.225, 110.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=104 */
%   | else return -0.06332843392190184;  // std dev = 0.071, 199.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1135450601405443;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21283117461647716;  // std dev = 0.962, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.10039154517242665;  // std dev = 0.094, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3306616498651334;  // std dev = 0.241, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12565639491489883;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.029080364497897346;  // std dev = 0.450, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.02349945235677537;  // std dev = 1.223, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning 14.30797529220581
Refined model CLL: -0.102859


******************************************
Best model found
******************************************
Results 

CLL : -0.099982 

AUC ROC : 0.992583 

AUC PR : 0.323571 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 12.093987703323364 

Total Inference Time : 15.091511011123657 

Total revision time: 39.79887342453003
Best scored revision CLL: -0.102859


Results 

CLL : -0.099982 

AUC ROC : 0.992583 

AUC PR : 0.323571 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 39.84875965118408 

Total Inference Time : 15.091511011123657 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1255662441253662
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.35814893509951223;  // std dev = 0.500, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.027729782355763236;  // std dev = 0.279, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2324679237518462;  // std dev = 1.588, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.479881846485183;  // std dev = 0.983, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02755806246517923;  // std dev = 1.744, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | | else return 0.1346155648639252;  // std dev = 1.320, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49187424852245376;  // std dev = 1.191, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11950364558024648;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.13640409493986624;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20792165616479666;  // std dev = 0.156, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3357090263115404;  // std dev = 0.172, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3047323492383099;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.614756413541033;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08310695881383989;  // std dev = 1.269, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | else return -0.09846857743131825;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010485801939807306;  // std dev = 1.396, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24423577948699482;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5069572119606081;  // std dev = 0.367, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10797599689635488;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.11017079507115499;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23996704580656417;  // std dev = 1.094, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return -0.05595208541184229;  // std dev = 1.032, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031939146367639434;  // std dev = 0.310, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20014201197149895;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04688371220631426;  // std dev = 0.150, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.015037613358762898;  // std dev = 0.631, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.33296749373458073;  // std dev = 0.526, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1902989324496169;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24703104849915972;  // std dev = 0.373, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09143795796772544;  // std dev = 0.040, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38222967748504066;  // std dev = 0.244, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15805435489955985;  // std dev = 0.198, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14473558109375406;  // std dev = 0.921, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.13552768211590538;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08504848112125796;  // std dev = 0.016, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07603129227704349;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08490207746169169;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.007469811858447717;  // std dev = 0.492, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10577122493431171;  // std dev = 0.589, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
Inference time using transfer learning 9.594512701034546
Parameter learned model CLL:-0.119977 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [4.08e-08, 39, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.5, 3, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.16e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 29, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.588, 7, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.983, 1, 10], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.744, 37, 5], 'false,false,false,false': [1.32, 7, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.191, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 29, 0], 'false,true,false,false': [0.011, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.172, 0, 11], 'true,false': [0.0, 0, 0], 'false,true,true': [1.49e-08, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.062, 0, 5], 'false,false,true,false': [1.269, 53, 3], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.396, 39, 15], 'false,true': [0.0, 0, 4], 'false,false,true': [0.367, 0, 6], 'false,false,false,true': [0.029, 6, 0], 'false,false,false,false': [0.103, 7, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.094, 1, 20], 'true,false': [1.032, 34, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.31, 3, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.054, 0, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 35, 4], 'false,false,false,true': [0.631, 11, 3], 'false,false,false,false': [0.526, 1, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 11], 'false,true,true,true': [0.373, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 40, 0], 'false,false,true': [0.244, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.921, 1, 17], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.016, 39, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.033, 3, 0], 'false,true': [0.492, 7, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.589, 2, 3]}]
{'': [0.20686390532544327, 0.25], 'false': [0.24999999999999992, 0.24999999999999992], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [-2.8047739569477637e-16, 5.3097622916855314e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [4.2700885562506023e-17, -7.93016446160826e-18], 'true,false,false': [-7.93016446160826e-18, nan]}
{'': [1.7763568394002506e-16, 0.11947699886854557], 'false': [0.07771230569671385, 0.17259253470051633], 'false,false': [-1.982541115402065e-18, 0.21081462177832935], 'false,false,false': [0.0, 0.2101383264811931], 'false,true': [nan, 0.07771230569671385], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [0.08094447341940932, 0.11432750095223726], 'false': [nan, 0.1143275009522372], 'false,false': [-7.401486830834377e-17, 0.09602803144418345], 'false,false,false': [0.07237894585497318, 0.1741116527103026], 'true': [0.08782823496484243, 0.0], 'true,true': [0.08782823496484243, nan], 'true,false': [nan, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.0545390212811327, 0.0016666053087323123], 'false': [5.455707729799151e-05, 0.0027116342962783596], 'false,false': [nan, 0.0027116342962783596], 'false,false,false': [nan, 0.0027116342962783596], 'false,true': [nan, 5.455707729799151e-05], 'false,true,false': [0.0, 1.237498656399426e-05]}
{'': [0.0027028504022762567, 0.06475184124914768], 'false': [3.700743415417188e-17, 0.06127957830029153], 'false,false': [0.06312158713456452, 0.0], 'false,false,true': [0.0007722621148354758, 0.028769369312009876], 'true': [0.0027028504022762567, nan], 'false,true': [3.700743415417188e-17, nan]}
{'': [0.03608594964964944, 0.07773527920328846], 'false': [0.0, 0.08971324961574818], 'false,false': [0.02244575025583236, 0.0008868229760215401], 'true': [nan, 0.03608594964964944], 'true,false': [nan, 0.03608594964964944], 'false,false,false': [0.0001384917003835149, 0.0015260264887752303]}
{'': [0.059235775352337525, 0.019280818587389704], 'true': [0.05703985483127686, 0.028776405575492603], 'false': [nan, 0.019280818587389704], 'false,false': [nan, 0.019280818587389704], 'false,false,false': [nan, 0.019280818587389704]}
{'': [0.00019574747034158956, 0.03650188904735901], 'false': [nan, 0.03650188904735898], 'false,false': [0.022642687320620664, 0.058374098876729556], 'false,false,false': [0.028398587349282387, 0.06909362456264513], 'true': [0.00019574747034158956, nan]}
{'': [0.0033270537644791254, 0.03277134304487773], 'false': [0.020055944477966603, 0.0740720731711637], 'false,false': [0.011924655650987926, 0.004345974934440854], 'false,true': [0.01549581645401109, 4.0107670129621574e-05], 'false,true,true': [0.01549581645401109, nan], 'false,false,false': [nan, 0.004345974934440854]}
{'': [0.023852556391755018, 0.04136538503966009], 'false': [0.024177133032263612, 0.06929977717931186], 'false,false': [nan, 0.06929977717931186], 'false,false,false': [nan, 0.06929977717931186], 'true': [0.0423756795852984, 3.667548788849581e-05], 'true,true': [0.04707560988775071, 0.0], 'true,false': [6.924291821220355e-06, 0.0001793707352370202], 'true,false,false': [0.0, 0.0003735655271003754]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 3.822300672531128
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.03156485511290852;  // std dev = 0.266, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.294482264882742;  // std dev = 1.488, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5797140656780352;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.0425391161696307;  // std dev = 1.398, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | | else return -0.11609703225131979;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3789853053891021;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.02324018669236231;  // std dev = 1.406, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.21160449782182517;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4151499496237161;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.6999313374890994;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.54512218344787;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7108977158825399;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11679437130155865;  // std dev = 0.010, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.10125177151385897;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.26675734385276345;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.36148124005156645;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3519727828075705;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.31431259389806765;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5311382467275145;  // std dev = 0.136, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08369174652729877;  // std dev = 1.193, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   | | else return -0.09110746608111173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.27361679892193397;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2521788069217198;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.42010673209046834;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09828375306934398;  // std dev = 1.05e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.08561930209628389;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4396740858120831;  // std dev = 0.356, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1905638210653575;  // std dev = 0.184, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.1295206106133623;  // std dev = 0.123, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.22102149350470948;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.20973372968770299;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return -0.017839565888419617;  // std dev = 0.892, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.0876966291923669;  // std dev = 0.029, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, H), tweets(E, H) )
%   | | | then return -0.03419825135311648;  // std dev = 0.515, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.0827367687760139;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21766563582651524;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.16298528534942924;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.325280934320477;  // std dev = 0.503, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return -0.006130508676585533;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.17251477814015212;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.17795990508678142;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.3255049928984772;  // std dev = 1.051, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, G), tweets(G, H) )
%   | | | then return -0.030049757365601264;  // std dev = 0.707, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | | else return -0.07275732726798967;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.06555232341223731;  // std dev = 0.433, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return -0.03154507844854243;  // std dev = 0.868, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.19711178634438;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1541620110937605;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1521949446536973;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.35850226674928826;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.08058101914470332;  // std dev = 0.028, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.06674283465598559;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, J) )
%   | | then return 0.007866465742220366;  // std dev = 0.485, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.06997781997515108;  // std dev = 0.719, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14209469578388154;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2820772838562853;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1339733203921284;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07566189518778023;  // std dev = 0.010, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.06462829515068046;  // std dev = 0.000346, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.060068130586857504;  // std dev = 0.000293, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.23585946260523602;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13518112338044322;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.05621748397249926;  // std dev = 0.714, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning 16.39619731903076
Refined model CLL: -0.114729


******************************************
Best model found
******************************************
Results 

CLL : -0.123427 

AUC ROC : 0.99524 

AUC PR : 0.431103 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 3.822300672531128 

Total Inference Time : 3.7404422760009766 

Total revision time: 11.050591230392456
Best scored revision CLL: -0.114729


Results 

CLL : -0.123427 

AUC ROC : 0.99524 

AUC PR : 0.431103 

Precision : 0.34375 

Recall : 0.987179 

F1 : 0.509934 

Total Learning Time : 11.100477457046509 

Total Inference Time : 3.7404422760009766 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5096774101257324
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.41370449065506787;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029664730002746078;  // std dev = 0.276, 101.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7597367979634488;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1543180893936732;  // std dev = 2.216, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5775475351811153;  // std dev = 0.275, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7254215247466532;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5985559511610682;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03137136360690967;  // std dev = 2.613, 96.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=11 */
%   | | | else return 0.039558772853184;  // std dev = 2.010, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.501674640535204;  // std dev = 1.639, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11802646622499488;  // std dev = 0.035, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.12653412556974786;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17686989402106867;  // std dev = 0.177, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24079303388766934;  // std dev = 1.417, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | else return 0.41009899377285197;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3026599174450095;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6198258627586546;  // std dev = 0.090, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07746418800752615;  // std dev = 1.613, 91.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=5 */
%   | | else return -0.0982613884639668;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02096448900823005;  // std dev = 2.367, 109.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24281213751466502;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.292037509319574;  // std dev = 1.626, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12485467497661563;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1324318951959815;  // std dev = 0.148, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2424318149763515;  // std dev = 1.843, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | else return -0.06602241455209527;  // std dev = 1.500, 90.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01390917644250282;  // std dev = 0.324, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20006593329212485;  // std dev = 0.053, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.040145009427981215;  // std dev = 0.195, 81.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=12 */
%   | | else if ( tweets(A, F) )
%   | | | then return 5.098907885648102E-4;  // std dev = 1.380, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.02595267510654784;  // std dev = 1.214, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16519991912299578;  // std dev = 0.196, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2938725761643184;  // std dev = 0.487, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09198303546192604;  // std dev = 0.042, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.47138655609230945;  // std dev = 0.370, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12989021096907666;  // std dev = 0.160, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20529084190064878;  // std dev = 0.538, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return -0.048530039026075146;  // std dev = 0.441, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.0860263182058096;  // std dev = 0.017, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0741274428611552;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07544179943978375;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, G) )
%   | then return 0.062395170618347665;  // std dev = 0.811, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2140071007036619;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0927830513243914;  // std dev = 0.841, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
Inference time using transfer learning 9.812791347503662
Parameter learned model CLL:-0.114531 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.46e-07, 0, 39], 'true,false,true': [7.3e-08, 75, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.497, 4, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 27], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.276, 89, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 12, 0], 'false,false,false,true': [0.057, 0, 2], 'false,false,false,false': [2.216, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.275, 0, 23], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.075, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.613, 85, 11], 'false,false,false,false': [2.01, 21, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.639, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 76, 0], 'false,true,false,false': [1.05e-08, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.417, 2, 24], 'true,false': [0.037, 0, 2], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.09, 0, 12], 'false,false,true,false': [1.613, 86, 5], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.367, 74, 35], 'false,true': [0.0, 0, 4], 'false,false,true': [1.626, 3, 11], 'false,false,false,true': [0.072, 6, 0], 'false,false,false,false': [0.148, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.843, 3, 42], 'true,false': [1.5, 84, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.324, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.053, 0, 27], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.195, 69, 12], 'false,false,false,true': [1.38, 19, 6], 'false,false,false,false': [1.214, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.196, 1, 26], 'false,true,true,true': [0.487, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 79, 0], 'false,false,true': [0.37, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.16, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.538, 0, 37], 'true,true,false': [0.441, 1, 2], 'true,false,true': [0.017, 77, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.019, 8, 0], 'false,true': [0.811, 10, 6], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.841, 5, 4]}]
{'': [0.209078725016026, 0.24408284023668594], 'false': [0.2283737024221454, 0.2469135802469134], 'false,true': [0.12244897959183662, -1.1102230246251566e-17], 'true': [1.548618783066885e-15, 7.723290606088045e-17], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [7.105427357601002e-17, -3.2653618371328133e-18], 'true,false,false': [-6.938893903907228e-18, 0.0]}
{'': [-2.631639762074445e-16, 0.10345419759239129], 'false': [0.07635877726679496, 0.1578770186965179], 'false,false': [2.3129646346357427e-18, 0.19295011167468756], 'false,false,false': [0.0016211402322542368, 0.18184457203050003], 'false,true': [nan, 0.07635877726679496], 'false,false,true': [nan, 2.3129646346357427e-18]}
{'': [0.003940506571631466, 0.10103301089212435], 'false': [nan, 0.10103301089212438], 'false,false': [-6.344131569286608e-17, 0.0892164850897309], 'false,false,false': [0.07110860610148705, 0.14967335491683287], 'true': [0.004016490688168191, 0.002825220187172406], 'true,true': [0.0032800075185039817, 0.0], 'true,false': [nan, 0.002825220187172406], 'false,false,true': [-4.4408920985006264e-17, 0.0]}
{'': [0.05166223663148163, 0.00070952483182465], 'false': [2.356460463667655e-05, 0.0020874384122700524], 'false,false': [nan, 0.0020874384122700524], 'false,false,false': [nan, 0.0020874384122700524], 'false,true': [nan, 2.356460463667655e-05], 'false,true,false': [1.5937701420609685e-05, 6.938893903907228e-18]}
{'': [0.07363135042873992, 0.07219041561409142], 'true': [0.07719442023479597, 0.0006943997582707362], 'false': [-4.7580986769649563e-17, 0.0712048919938066], 'false,false': [0.07538153384873826, -1.982541115402065e-18], 'false,false,true': [0.0006763619029729698, 0.02858654221925924], 'false,true': [-4.7580986769649563e-17, nan]}
{'': [0.05140446714174187, 0.11870581638271212], 'false': [0.0, 0.13023370001837256], 'false,false': [0.18885277654924998, 0.0016122183739683091], 'true': [nan, 0.05140446714174167], 'true,false': [nan, 0.05140446714174187], 'false,false,false': [0.000861909721724651, 0.0020012137801510414]}
{'': [0.06296140227002829, 0.017499101310534736], 'true': [0.07546460417507404, 0.024995130746175914], 'false': [nan, 0.017499101310534736], 'false,false': [nan, 0.017499101310534736], 'false,false,false': [nan, 0.017499101310534736]}
{'': [0.00010449451863926964, 0.053569700271529096], 'false': [nan, 0.05356970027152883], 'false,false': [0.03805492641543253, 0.08252201658449296], 'false,false,false': [0.07614884916586567, 0.09208537404570095], 'true': [0.00010449451863926964, nan]}
{'': [0.038320605443427684, 0.03813578996031909], 'false': [0.022508756040474656, 0.08298809383165986], 'false,false': [0.015218147612741218, 0.001284440131203163], 'false,true': [0.015809716267344478, 2.2552262843336984e-05], 'false,true,true': [0.015809716267344478, nan], 'false,false,false': [nan, 0.001284440131203163]}
{'': [0.020723572455415975, 0.053459690423418985], 'false': [0.041095855279224554, 0.07212975010918729], 'false,false': [0.0, 0.0786746397731951], 'false,false,false': [nan, 0.0786746397731951], 'true': [0.01657761913275272, 2.2538914575465084e-05], 'true,true': [0.007835547644092982, 0.06480333920138596], 'true,false': [3.898340563009987e-06, 2.7724547067874245e-05], 'true,false,false': [0.0, 4.43879531330767e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.511752128601074
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7291098928136793;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.0019887796791348347;  // std dev = 0.302, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7695100762434695;  // std dev = 0.071, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.0734231490413586;  // std dev = 2.403, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.65395796578392;  // std dev = 0.128, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7583839413531546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6103992632730403;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0907104722837921;  // std dev = 0.927, 58.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   | | | else return 0.010100386427301102;  // std dev = 1.627, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09753185110430876;  // std dev = 1.530, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2039159255935419;  // std dev = 1.592, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3341802508249765;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4175135841583099;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.529061923383469;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5351909770077383;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7177655574771548;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10901365662937511;  // std dev = 0.007, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else if ( tweets(A, K) )
%   | | then return -0.14695607608695235;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.22255503111100924;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.27330155069042045;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.3113587364456812;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3543044103033844;  // std dev = 0.150, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.43175549815740777;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49733074373683034;  // std dev = 0.274, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07384974890467327;  // std dev = 1.446, 91.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=5 */
%   | | else return -0.09389144584239571;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27798396265674213;  // std dev = 0.034, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.042438444412483727;  // std dev = 1.030, 66.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=8 */
%   | | | else return -0.09621043543098502;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10190403241896502;  // std dev = 0.240, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.40522813891859844;  // std dev = 0.244, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5176658656537324;  // std dev = 0.280, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13631346519582724;  // std dev = 0.098, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11699466525009364;  // std dev = 0.135, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.22747147200159631;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10512479760798883;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21259852621956998;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21856457962729525;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then return -0.04257554013737207;  // std dev = 0.139, 62.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.33631924812484154;  // std dev = 0.241, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11379765209175378;  // std dev = 0.081, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04676962346811904;  // std dev = 0.703, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.030626743573853914;  // std dev = 0.853, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.12433532939305057;  // std dev = 0.260, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.17447979992829424;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.19267539418228302;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08102929264993666;  // std dev = 0.134, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | else return -0.0031292565326881167;  // std dev = 0.165, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2810682363945284;  // std dev = 0.232, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.11000411208588526;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.050145056771449426;  // std dev = 0.520, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.025586355508369137;  // std dev = 0.849, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16804335826728256;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.20388040857673037;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2940006118977582;  // std dev = 0.228, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.024871143587734103;  // std dev = 0.558, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.0820343095569039;  // std dev = 0.010, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.25780457925170436;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.41421963813723844;  // std dev = 0.181, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.09331379678182011;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.16564986441857116;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11655304768198366;  // std dev = 0.190, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.2135699483769934;  // std dev = 0.065, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07885922478849229;  // std dev = 0.011, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.04881959587964844;  // std dev = 0.139, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1309258502068528;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.07474349976872352;  // std dev = 0.437, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.16640327235050612;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.004129203365080765;  // std dev = 0.424, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.009970567862549715;  // std dev = 0.656, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning 14.751218557357788
Refined model CLL: -0.10795


******************************************
Best model found
******************************************
Results 

CLL : -0.106114 

AUC ROC : 0.994469 

AUC PR : 0.354278 

Precision : 0.348416 

Recall : 0.987179 

F1 : 0.51505 

Total Learning Time : 5.511752128601074 

Total Inference Time : 6.167057514190674 

Total revision time: 17.20173740386963
Best scored revision CLL: -0.10795


Results 

CLL : -0.106114 

AUC ROC : 0.994469 

AUC PR : 0.354278 

Precision : 0.348416 

Recall : 0.987179 

F1 : 0.51505 

Total Learning Time : 17.25162363052368 

Total Inference Time : 6.167057514190674 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.809020757675171
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8264029033534809;  // std dev = 1.392, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.050941973991396876;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281700162250795;  // std dev = 0.106, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.010016769635284875;  // std dev = 0.291, 118.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=16 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06909566973780455;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4528556309209744;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08851567722973024;  // std dev = 2.506, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5482383800486492;  // std dev = 1.038, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.7278246975799122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7895184512299824;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6813206593363315;  // std dev = 0.087, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5610506313654882;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5610506313654882;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03419315179951921;  // std dev = 2.983, 129.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=14 */
%   | | | else return 0.085556896660115;  // std dev = 2.252, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5193215112482674;  // std dev = 1.666, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12212235836204684;  // std dev = 0.076, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return -0.13440025491742488;  // std dev = 0.006, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16577780557259178;  // std dev = 0.169, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2871063563268657;  // std dev = 1.249, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else return 0.431328262019256;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30260047919233335;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5673130510637739;  // std dev = 0.908, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.07985506350975465;  // std dev = 1.838, 115.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=6 */
%   | | else return -0.111416503611363;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03655144581949519;  // std dev = 2.574, 162.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2505720818465047;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.468634661902776;  // std dev = 1.243, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11655917591200407;  // std dev = 0.097, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.1134015243100013;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28884929847828406;  // std dev = 1.188, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.07837616886842776;  // std dev = 1.657, 155.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03287912102127456;  // std dev = 0.450, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1486348030131267;  // std dev = 1.375, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else if ( follows(A, E) )
%   | | then return 0.1929767758764402;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.046161045584009526;  // std dev = 0.163, 134.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.002058324416103915;  // std dev = 1.194, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | | else return 0.19671635703439963;  // std dev = 1.208, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1729001524373213;  // std dev = 0.131, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2977847689181331;  // std dev = 0.564, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0951845291628751;  // std dev = 0.061, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44964152695046183;  // std dev = 0.386, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12063659916336553;  // std dev = 0.170, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16228061544631697;  // std dev = 1.468, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | else return -0.05722616195326058;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08737369423247376;  // std dev = 0.037, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0808173518301157;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.07872531287843915;  // std dev = 0.373, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.031045160118208282;  // std dev = 0.807, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.3083137890971416;  // std dev = 0.731, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014856696491892543;  // std dev = 1.047, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning 9.597691535949707
Parameter learned model CLL:-0.115557 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.392, 2, 61], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.495, 8, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.106, 0, 46], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.291, 102, 16], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [0.779, 1, 2], 'false,false,false,false': [2.506, 29, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.038, 1, 38], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.117, 0, 2], 'true,false,false': [0.087, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 7], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.983, 115, 14], 'false,false,false,false': [2.252, 25, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.666, 1, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.076, 105, 0], 'false,true,false,false': [0.006, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.169, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.249, 2, 40], 'true,false': [0.05, 0, 3], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.908, 1, 16], 'false,false,true,false': [1.838, 109, 6], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.574, 107, 55], 'false,true': [0.051, 0, 7], 'false,false,true': [1.243, 1, 13], 'false,false,false,true': [0.097, 20, 0], 'false,false,false,false': [0.108, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.188, 1, 64], 'true,false': [1.657, 147, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.45, 12, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.375, 2, 44], 'true,false,true': [0.007, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 118, 16], 'false,false,false,true': [1.194, 28, 7], 'false,false,false,false': [1.208, 4, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.131, 1, 43], 'false,true,true,true': [0.564, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 123, 0], 'false,false,true': [0.386, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.468, 2, 57], 'true,true,false': [0.896, 1, 4], 'true,false,true': [0.037, 102, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.373, 2, 2], 'false,true': [0.807, 14, 6], 'false,false,true': [0.731, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.047, 14, 5]}]
{'': [0.22045898437500022, 0.22222222222222174], 'false': [0.19834710743801667, 0.24489795918367352], 'true': [0.030738221214411016, 0.0152635057989303], 'false,true': [-1.4802973661668753e-16, -6.938893903907228e-18], 'true,false': [3.8616453030440226e-17, 0.12244897959183677], 'true,false,false': [0.0826446280991736, 0.22222222222222224], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00024516557799613776, 0.1074906737904478], 'false': [0.08493790484717609, 0.15026041839811075], 'false,false': [0.06222222222222225, 0.17282840911396494], 'false,false,false': [0.20220918731666246, 0.16108666340538058], 'false,true': [nan, 0.08493790484717609], 'false,false,true': [nan, 0.06222222222222225]}
{'': [0.02869919090262291, 0.10125283727966364], 'false': [nan, 0.10125283727966373], 'false,false': [8.881784197001253e-17, 0.08855708141010585], 'false,false,false': [0.06896835661484506, 0.15371223952865376], 'true': [0.027712093355624433, 0.008228175016248618], 'true,true': [0.02761637871581148, 0.0], 'true,false': [0.006826755146581043, 0.003776213800585293], 'false,false,true': [6.344131569286608e-17, 0.0]}
{'': [0.03650641085445068, 0.00044408322118486384], 'false': [6.794401891011523e-05, 0.0014338506307050246], 'false,false': [nan, 0.0014338506307050246], 'false,false,false': [nan, 0.0014338506307050246], 'false,true': [nan, 6.794401891011861e-05], 'false,true,false': [5.449623671152199e-05, 1.4248273366178876e-06]}
{'': [0.036022261511661754, 0.07281054859003618], 'false': [-1.1102230246251566e-17, 0.07158768755036751], 'false,false': [0.07883751884541992, -6.938893903907228e-18], 'false,false,true': [0.04851308387349076, 0.02938047606670683], 'true': [0.03714906093964267, 0.0008337753104883383], 'false,true': [-1.1102230246251566e-17, nan]}
{'': [0.04091064716033399, 0.09022303544848798], 'false': [0.0003651143526731523, 0.09716226025147723], 'false,false': [0.11039744460067172, 0.0005582793222872356], 'true': [nan, 0.04091064716033385], 'true,false': [nan, 0.04091064716033399], 'false,false,false': [0.0004739592240514456, 0.0006467205499903514]}
{'': [0.04697348751875142, 0.013524243108835127], 'true': [0.021724484626196805, 0.01771839109333534], 'false': [nan, 0.013524243108835127], 'false,false': [nan, 0.013524243108835127], 'false,false,false': [nan, 0.013524243108835127]}
{'': [0.03945961427761433, 0.03928765187992243], 'true': [0.04109225475130719, 2.4598265159700428e-05], 'false': [nan, 0.03928765187992261], 'false,false': [0.026708625001889818, 0.07091174204823972], 'false,false,false': [0.0407161519887442, 0.145865238600891], 'true,false': [2.4598265159700428e-05, nan]}
{'': [0.01722712729078004, 0.03353516419876993], 'false': [0.022091684614023343, 0.08100749484999062], 'false,false': [0.014876649382184404, 0.0015978744703954533], 'false,true': [0.014438035062072186, 3.0649902655799726e-05], 'false,true,true': [0.014438035062072186, nan], 'false,false,false': [nan, 0.0015978744703954533]}
{'': [0.03089469193862801, 0.06083834146651362], 'false': [0.03259974301574525, 0.08507183264370016], 'false,false': [0.26753528351045186, 0.05766352834792079], 'false,false,false': [nan, 0.05766352834792079], 'true': [0.049682347127179026, 0.0021424001650243076], 'true,true': [0.036530532088208806, 0.16045485374114477], 'true,false': [1.3452191438233312e-05, 0.01609997394468382], 'true,false,false': [0.0, 0.034703010954010335]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.078683376312256
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1276666677373673;  // std dev = 0.118, 141.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7228107495605698;  // std dev = 0.152, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.09381367825900873;  // std dev = 1.173, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return -0.12700906970676235;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.6766867743758621;  // std dev = 1.000, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12700906970676232;  // std dev = 3.33e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.24446743783575556;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.22895152751901957;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5004881272319808;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.32600672158431865;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6063107992425967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7240581284515532;  // std dev = 0.196, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.554542181286035;  // std dev = 1.29e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6046912694570304;  // std dev = 0.215, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11522503087251543;  // std dev = 0.017, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.032832059836804685;  // std dev = 1.321, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.007537908353389358;  // std dev = 1.992, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.390114670510347;  // std dev = 0.979, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.4254801488620729;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, E), follows(D, E) )
%   | | | then return 0.4928732163614724;  // std dev = 0.268, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.43223114526764517;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5223930354253108;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5472450330543195;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7744305829712346;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(I, A) )
%   | then return -0.10390147630155139;  // std dev = 0.002, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.14610065135374162;  // std dev = 0.204, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.21085192079305703;  // std dev = 1.621, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.33421253337125406;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.15442166397435847;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1161055311464421;  // std dev = 0.937, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.43505840305132587;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then if ( follows(A, J) )
%   | | then return 0.3195365676150958;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.07229524128232995;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, K) )
%   | | then return -0.010295659050558867;  // std dev = 0.213, 126.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=22 */
%   | | else return -0.09331601357957632;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.24772136270489484;  // std dev = 0.974, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.2834212708804554;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3383763352643483;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.04743624465102927;  // std dev = 0.143, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.28581657624608414;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.056712472420563376;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.10068053095233748;  // std dev = 0.948, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5329244092465686;  // std dev = 0.369, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12173305613961134;  // std dev = 0.039, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, C), follows(A, F) )
%   | | then return 0.23942781229003;  // std dev = 0.164, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.09945230409685453;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.22864188356861204;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.08956464818905548;  // std dev = 0.040, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2447379159527417;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.013107467617899379;  // std dev = 0.718, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.06312922828754423;  // std dev = 0.372, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07044187203918607;  // std dev = 0.658, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.06619831159329896;  // std dev = 1.260, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.11551207611257837;  // std dev = 1.357, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.1802439714510623;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.22922299535016805;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.28098506317166455;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.039945392072679275;  // std dev = 0.144, 139.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=17 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.17500191043190147;  // std dev = 1.082, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.13729066251265568;  // std dev = 0.103, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12882653145805892;  // std dev = 0.411, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.010220697560209817;  // std dev = 1.071, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.17763625991573528;  // std dev = 0.027, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return 0.3080203833415912;  // std dev = 0.244, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.193841250175539;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.32867781886523517;  // std dev = 0.224, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07998045154034258;  // std dev = 0.049, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.25197644244591;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.48846981753602214;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.09134088815558597;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.1481710844754197;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.0871293647753876;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return -0.12703831583693564;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2413689127586198;  // std dev = 0.204, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.25821985031508177;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06668645136798984;  // std dev = 0.053, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.19787700299383962;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08557495012946996;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.11569933005523314;  // std dev = 0.483, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.084649243618728;  // std dev = 0.224, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
Inference time using transfer learning 48.271676540374756
Refined model CLL: -0.104643


******************************************
Best model found
******************************************
Results 

CLL : -0.103146 

AUC ROC : 0.99478 

AUC PR : 0.373221 

Precision : 0.341357 

Recall : 1.0 

F1 : 0.508972 

Total Learning Time : 14.078683376312256 

Total Inference Time : 22.270192623138428 

Total revision time: 43.22863817214966
Best scored revision CLL: -0.104643


Results 

CLL : -0.103146 

AUC ROC : 0.99478 

AUC PR : 0.373221 

Precision : 0.341357 

Recall : 1.0 

F1 : 0.508972 

Total Learning Time : 43.27852439880371 

Total Inference Time : 22.270192623138428 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.215726375579834
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925352;  // std dev = 1.953, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10613677918620204;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.32873717039363;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7149865728458804;  // std dev = 0.999, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03216893867370491;  // std dev = 0.266, 174.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06691548731931919;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.570105689091172;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.04791297976565041;  // std dev = 2.890, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5358177270818681;  // std dev = 1.571, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | else return 0.7350761418975098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7937784604350882;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3264459956993689;  // std dev = 1.100, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5679215490076782;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4250644061505353;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05958680984212263;  // std dev = 3.199, 201.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=15 */
%   | | | else return 0.01579326361335228;  // std dev = 2.679, 59.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5084562682135242;  // std dev = 2.215, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11572955174436343;  // std dev = 0.000338, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return -0.12365908314255092;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16142962594033147;  // std dev = 0.214, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2832248359133873;  // std dev = 1.795, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | else return 0.443286698727553;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32280808472112976;  // std dev = 0.058, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6440521965564027;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07852287684264814;  // std dev = 2.211, 199.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=8 */
%   | | else return -0.10448376708628368;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018003585255441375;  // std dev = 3.229, 237.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=72 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1820750464951737;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5695870416325244;  // std dev = 0.596, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10964901790911198;  // std dev = 0.107, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11990181689707577;  // std dev = 0.201, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2923050597341122;  // std dev = 1.328, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else return -0.07316629333863502;  // std dev = 1.928, 209.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0070199377816758295;  // std dev = 0.669, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20479200679581794;  // std dev = 0.105, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, E) )
%   | | then return 0.20095376685993943;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03646911403645602;  // std dev = 0.155, 157.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008049094806834514;  // std dev = 1.242, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0.05182953661873631;  // std dev = 1.699, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14998661040339;  // std dev = 0.212, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22008109197169104;  // std dev = 1.508, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09081828173208809;  // std dev = 0.080, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4901129663238554;  // std dev = 0.453, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10795393718706067;  // std dev = 0.196, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18723065189512422;  // std dev = 1.117, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.16718448314175255;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.0837861166286479;  // std dev = 0.027, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07837729460171876;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07172954361935295;  // std dev = 0.752, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.07419943573551441;  // std dev = 0.789, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25440241169522826;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.070143525362016;  // std dev = 1.185, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning 9.823237895965576
Parameter learned model CLL:-0.110184 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.953, 4, 82], 'true,false,true': [0.0, 136, 0], 'true,false,false,true': [0.982, 27, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.943, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.499, 9, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.999, 1, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 155, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.848, 1, 4], 'false,false,false,false': [2.89, 43, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.571, 3, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.119, 0, 2], 'true,false,false': [1.1, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.926, 1, 6], 'false,false,false,true': [3.199, 186, 15], 'false,false,false,false': [2.679, 49, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.215, 3, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.000338, 126, 0], 'false,true,false,false': [0.0, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.214, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.795, 4, 57], 'true,false': [0.091, 0, 4], 'false,true,true': [0.058, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.104, 0, 17], 'false,false,true,false': [2.211, 191, 8], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.229, 165, 72], 'false,true': [0.952, 1, 11], 'false,false,true': [0.596, 0, 17], 'false,false,false,true': [0.107, 28, 0], 'false,false,false,false': [0.201, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.328, 1, 84], 'true,false': [1.928, 199, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.669, 15, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.105, 0, 62], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 138, 19], 'false,false,false,true': [1.242, 41, 9], 'false,false,false,false': [1.699, 17, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.212, 3, 61], 'false,true,true,true': [1.508, 2, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.08, 177, 0], 'false,false,true': [0.453, 0, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.196, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.117, 1, 75], 'true,true,false': [0.008, 0, 7], 'true,false,true': [0.027, 139, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.752, 10, 2], 'false,true': [0.789, 10, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.185, 12, 7]}]
{'': [0.22178131200300025, 0.2379535990481851], 'false': [0.22222222222222232, 0.24913494809688583], 'false,true': [0.09876543209876527, -1.4802973661668754e-17], 'true': [0.044348296376419516, 0.011832622180787955], 'false,true,true': [0.09876543209876527, nan], 'true,false': [-6.204187490552346e-17, 0.060353798126951116], 'true,false,false': [0.034438775510204134, 0.22222222222222224]}
{'': [0.015362601279608812, 0.09743556403068447], 'false': [0.07097658991705913, 0.1523421816751362], 'false,false': [0.058593750000000035, 0.17206323946021346], 'false,false,false': [0.14398348548754142, 0.15189217556075935], 'false,true': [nan, 0.07097658991705913], 'false,false,true': [nan, 0.058593750000000035]}
{'': [0.06248865451424605, 0.08288966333997821], 'false': [nan, 0.08288966333997827], 'false,false': [0.06222222222222197, 0.06795570278185373], 'false,false,false': [0.05090371651509309, 0.12165531950499146], 'true': [0.04322824556419073, 0.19403207889627686], 'true,false': [0.007082925552573727, 0.2017485551951873], 'false,false,true': [-5.551115123125783e-17, 0.12244897959183675], 'true,true': [0.04330208556354246, 0.0]}
{'': [0.04761857722438092, 0.0005375148490324883], 'false': [9.96459709712082e-06, 0.0013111873727494133], 'false,false': [nan, 0.0013111873727494133], 'false,false,false': [nan, 0.0013111873727494133], 'false,true': [nan, 9.96459709712082e-06], 'false,true,false': [9.080516532703669e-10, -1.9697505275607617e-17]}
{'': [0.05115980623634327, 0.06143349448029112], 'false': [0.00024028213906497026, 0.05815468025243934], 'false,false': [0.060543449298129076, -9.714451465470119e-18], 'false,false,true': [0.0006352932632407699, 0.02456886793557449], 'true': [0.05280293074671942, 0.0020589605980314285], 'false,true': [0.00024028213906497026, nan]}
{'': [0.0439870902191053, 0.08104597584247127], 'false': [0.07550082668483356, 0.07855271405381971], 'false,false': [0.02088420870266769, 0.0007664512825905665], 'true': [nan, 0.043987090219105233], 'true,false': [nan, 0.0439870902191053], 'false,false,false': [0.0004094531299369502, 0.0009624020961912479]}
{'': [0.046096949052956165, 0.021295454494915697], 'true': [0.020741163251621657, 0.017792133385589486], 'false': [nan, 0.021295454494915697], 'false,false': [nan, 0.021295454494915697], 'false,false,false': [nan, 0.021295454494915697]}
{'': [0.00017598388868391573, 0.03622247412027489], 'false': [nan, 0.03622247412027489], 'false,false': [0.024165101080709274, 0.05987864659917959], 'false,false,false': [0.03086873039431816, 0.11550817867463621], 'true': [0.00017869858926517114, 7.755646254059556e-05], 'true,false': [7.755646254059556e-05, nan]}
{'': [0.04490373347028434, 0.032353997279413335], 'false': [0.02275681304419208, 0.06372865380882638], 'false,false': [0.017130540369844627, 0.0008529182188420581], 'false,true': [0.07838205443340399, 3.581954844608612e-05], 'false,true,true': [0.07838205443340399, nan], 'false,false,false': [nan, 0.0008529182188420581]}
{'': [0.023916933981118105, 0.05418475417779135], 'false': [0.034595519996997344, 0.07180246730935759], 'false,false': [0.0, 0.0738839776765281], 'false,false,false': [nan, 0.0738839776765281], 'true': [0.015057687399983083, 0.003645481899649149], 'true,true': [0.016409855508232606, 9.047069696371812e-06], 'true,false': [5.373863666304305e-06, 0.03331780032994689], 'true,false,false': [-1.3877787807814458e-18, 0.047187219312584516]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.874060153961182
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8425239350995126;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.13042249347191676;  // std dev = 0.106, 175.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6749971391814646;  // std dev = 0.213, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else return 0.7288945196896236;  // std dev = 0.148, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4106642810114875;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6917174854566635;  // std dev = 0.984, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.1267038238608333;  // std dev = 1.32e-07, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.6278579654131274;  // std dev = 0.984, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.1315999918003805;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12803077669341234;  // std dev = 1.224, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.12373365448410585;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5373729102839976;  // std dev = 0.168, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else return 0.5554000195552865;  // std dev = 0.321, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.3568978612650628;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5568978612650628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.41404071840792006;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5241231663673168;  // std dev = 0.972, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.11333428464832408;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.047763126651215564;  // std dev = 1.530, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.0444922510703051;  // std dev = 2.251, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.43477610393304866;  // std dev = 0.030, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.3138520294546105;  // std dev = 0.848, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.45900294495197647;  // std dev = 0.259, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5180484412493715;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6826673620985217;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7735433671273977;  // std dev = 0.096, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10243467710689326;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.10243467710689302;  // std dev = 1.83e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.14780380183119035;  // std dev = 0.231, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33259964769320993;  // std dev = 0.007, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.4109734209308706;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3305410323768399;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4236650219870845;  // std dev = 0.207, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.3349973710610603;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2013814263360807;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.39185394253855865;  // std dev = 0.317, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06792703040445909;  // std dev = 1.950, 181.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=8 */
%   | | else return -0.09339277855114138;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.26985893284581364;  // std dev = 0.013, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.08779803411381866;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.018569320383279672;  // std dev = 0.160, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.28179285902086476;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1574483522857406;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1433273296525494;  // std dev = 0.999, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5473166366570771;  // std dev = 0.395, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0996823856578195;  // std dev = 0.049, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.1043270188861305;  // std dev = 0.155, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.18173909453058404;  // std dev = 0.984, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.13379094063167954;  // std dev = 0.894, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.2363091319331916;  // std dev = 0.144, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2890551546007511;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08325761377845504;  // std dev = 0.005, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25813327615724196;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4711412462426716;  // std dev = 0.199, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1424811334326614;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.0779440188720831;  // std dev = 2.46e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.17001406334347924;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.007113461953359002;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20202069117124621;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.2657769277710788;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05616384695975026;  // std dev = 0.125, 180.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), tweets(A, J) )
%   | | | then return 0.1789780937810883;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08137522591855528;  // std dev = 0.829, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05018621661366732;  // std dev = 0.538, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.15072125753485965;  // std dev = 0.881, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1702245904421028;  // std dev = 0.016, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(E, A) )
%   | | then return 0.23126977990434572;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17522504103894296;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.1868873678316658;  // std dev = 0.025, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.07232139140133503;  // std dev = 0.003, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.23525899092664848;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.355979409871901;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.08057287813355002;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.1435125613173902;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15282745220954377;  // std dev = 0.018, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.06809750604582354;  // std dev = 0.003, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.04057704445452558;  // std dev = 0.087, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return -0.2005513692059476;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.044198409566579895;  // std dev = 0.320, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else return -0.07136880702792597;  // std dev = 0.262, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21841860431979898;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.023450319778135276;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.05995449349394399;  // std dev = 0.721, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning 17.994892597198486
Refined model CLL: -0.098618


******************************************
Best model found
******************************************
Results 

CLL : -0.094987 

AUC ROC : 0.995388 

AUC PR : 0.437438 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 12.874060153961182 

Total Inference Time : 12.624145746231079 

Total revision time: 34.1736216545105
Best scored revision CLL: -0.098618


Results 

CLL : -0.094987 

AUC ROC : 0.995388 

AUC PR : 0.437438 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 34.22350788116455 

Total Inference Time : 12.624145746231079 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.4726834297180176
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.08921948595311938;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7211630830591031;  // std dev = 0.138, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.031227972457544224;  // std dev = 0.269, 194.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08785522789694773;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11416391610599366;  // std dev = 3.207, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5695877565401644;  // std dev = 0.400, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7257327896583342;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8122261248148769;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5851046539752132;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5549491596853366;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5549491596853366;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04584004701515165;  // std dev = 3.655, 223.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=21 */
%   | | | else return -0.003984251116946548;  // std dev = 2.869, 71.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4996366769129976;  // std dev = 2.072, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11795476876231982;  // std dev = 0.066, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12159768097782607;  // std dev = 0.000708, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1610555388909854;  // std dev = 0.177, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3051610432292221;  // std dev = 1.146, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.40114140993430225;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3028215206415873;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6306415784993805;  // std dev = 0.183, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08067600914249275;  // std dev = 2.321, 219.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=9 */
%   | | else return -0.1173154616247821;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022544647398015698;  // std dev = 3.192, 291.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2508782137539599;  // std dev = 0.099, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4795172735107293;  // std dev = 1.389, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11762514949315267;  // std dev = 0.122, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.11081444285443087;  // std dev = 0.134, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2604827504370728;  // std dev = 1.965, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07966064495220254;  // std dev = 2.162, 263.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0068476832434454585;  // std dev = 0.687, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17983084907245792;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.21791197720199873;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0419950975331723;  // std dev = 0.148, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.017680062584449475;  // std dev = 1.377, 51.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
%   | | | else return 0.1295590521158106;  // std dev = 1.586, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14136203560759988;  // std dev = 0.197, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28077778942964626;  // std dev = 0.693, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09149025941259728;  // std dev = 0.256, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3810052656391279;  // std dev = 1.293, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11367986672421534;  // std dev = 0.170, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14929943065438944;  // std dev = 2.040, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.13787209847376436;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08314519816185197;  // std dev = 0.015, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07946361274731828;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.038241368719744394;  // std dev = 0.493, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03744304903335674;  // std dev = 1.008, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20812774889110752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0304015556771542;  // std dev = 1.409, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
Inference time using transfer learning 9.698393821716309
Parameter learned model CLL:-0.111071 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [4.46e-07, 0, 103], 'true,false,true': [0.0, 188, 0], 'true,false,false,true': [0.973, 18, 1], 'true,false,false,false': [0.926, 6, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.138, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 172, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.978, 22, 1], 'false,false,false,true': [0.093, 0, 4], 'false,false,false,false': [3.207, 43, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.4, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.094, 0, 2], 'true,false,false': [0.126, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.655, 202, 21], 'false,false,false,false': [2.869, 60, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.072, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.066, 169, 0], 'false,true,false,false': [0.000708, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.146, 1, 73], 'true,false': [0.127, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 23], 'false,false,true,false': [2.321, 210, 9], 'false,false,false': [0.054, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.192, 200, 91], 'false,true': [0.099, 0, 13], 'false,false,true': [1.389, 1, 22], 'false,false,false,true': [0.122, 35, 0], 'false,false,false,false': [0.134, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.965, 3, 107], 'true,false': [2.162, 252, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.687, 21, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.033, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 178, 22], 'false,false,false,true': [1.377, 38, 13], 'false,false,false,false': [1.586, 14, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.197, 4, 77], 'false,true,true,true': [0.693, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.256, 200, 0], 'false,false,true': [1.293, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.04, 4, 94], 'true,true,false': [0.008, 0, 9], 'true,false,true': [0.015, 154, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.493, 14, 2], 'false,true': [1.008, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.409, 20, 8]}]
{'': [0.22151678293146723, 0.23097502972651607], 'false': [0.22837370242214483, 0.23437500000000003], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true': [1.9315724855614373e-15, 0.009258450519695885], 'true,false': [-2.1732025162875404e-16, 0.07100591715976336], 'true,false,false': [0.04986149584487539, 0.12244897959183677], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.000231253993582665, 0.10194253968471331], 'false': [0.07232736466030232, 0.15786382525141557], 'false,false': [0.041587901701323204, 0.18422732228085792], 'false,false,false': [0.002181367125499989, 0.17137801304917824], 'false,true': [nan, 0.07232736466030232], 'false,false,true': [nan, 0.041587901701323204]}
{'': [0.004172998102954815, 0.0877644742035254], 'false': [nan, 0.0877644742035254], 'false,false': [1.0449157878825003e-16, 0.07376735425810517], 'false,false,false': [0.05991660082313675, 0.11594159699436246], 'true': [0.0025921122046233857, 0.015572293001850998], 'true,false': [0.004374877201732463, 0.003976280063119619], 'true,true': [0.002285744190700965, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.03352789533632722, 0.000391385994183759], 'false': [2.3043903615707978e-05, 0.000779605417006568], 'false,false': [nan, 0.000779605417006568], 'false,false,false': [nan, 0.000779605417006568], 'false,true': [nan, 2.3043903615710133e-05], 'false,true,false': [2.5702462961248133e-05, 1.353674436207816e-08]}
{'': [0.017506720726547582, 0.0639313641208404], 'false': [-3.918434204559376e-17, 0.06168174106663779], 'false,false': [0.0659113214305197, 0.0029417400435152916], 'false,false,true': [0.0014499795456693067, 0.02459291858889754], 'true': [0.01776263239001686, 0.004032546251463848], 'false,true': [-3.918434204559376e-17, nan]}
{'': [0.03500358755603869, 0.08179502786624428], 'false': [0.0007593875581588356, 0.08743171772953047], 'false,false': [0.08382522064247619, 0.0004883044999319249], 'true': [nan, 0.03500358755603838], 'true,false': [nan, 0.03500358755603869], 'false,false,false': [0.0004286178921288702, 0.0005262176052990384]}
{'': [0.046946150239812905, 0.016266582449295], 'true': [0.03510658416485491, 0.01777814516059708], 'false': [nan, 0.016266582449295], 'false,false': [nan, 0.016266582449295], 'false,false,false': [nan, 0.016266582449295]}
{'': [0.011996590199576362, 0.03455702400918218], 'false': [nan, 0.03455702400918225], 'false,false': [0.021883788287357157, 0.06229770396128151], 'false,false,false': [0.037174842542356826, 0.10937840053050184], 'true': [0.012244556262330918, 0.0005387362497146081], 'true,false': [0.0005387362497146081, nan]}
{'': [0.03885520239350428, 0.032428526114594874], 'false': [0.01883283350077451, 0.08169308230605407], 'false,false': [0.09286388179463, 0.0007206907557793963], 'false,true': [0.015016719478539872, 0.0003284462010477385], 'false,true,true': [0.015016719478539872, nan], 'false,false,false': [nan, 0.0007206907557793963]}
{'': [0.027890297043928265, 0.048895985334269615], 'false': [0.03081945649166168, 0.06946538482234871], 'false,false': [0.0, 0.07085709832817019], 'false,false,false': [nan, 0.07085709832817019], 'true': [0.03890500258243991, 0.0015567913984545546], 'true,true': [0.04246621967211176, 7.705157294664774e-06], 'true,false': [1.3903841673517132e-06, 0.01187957555003999], 'true,false,false': [-1.3877787807814458e-18, 0.015187354004030136]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.508148193359375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8224346493852265;  // std dev = 0.186, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | else return 0.7748156017661786;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.13259180564122913;  // std dev = 0.096, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then return 0.6497017847412848;  // std dev = 0.266, 65.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=60 */
%   | | else return 0.7266248616643611;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.737925719700872;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.7359812264346162;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.40264789310128285;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06896763650795808;  // std dev = 0.215, 225.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=15 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.08479731719433224;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7608941694169665;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12317913313031571;  // std dev = 3.109, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5497951264557622;  // std dev = 1.391, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.45151366558907446;  // std dev = 0.868, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.6507952170282199;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.674565099502555;  // std dev = 0.288, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5604434087835438;  // std dev = 0.001, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10174088632983201;  // std dev = 1.489, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return 0.01062591052043364;  // std dev = 2.775, 80.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13175732743353252;  // std dev = 1.978, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.08534484750839721;  // std dev = 2.373, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.44474372152982833;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.3798592570455324;  // std dev = 1.410, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return 0.22047987352436418;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.1745101968985682;  // std dev = 1.459, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.5057947114250894;  // std dev = 0.336, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7296318788769911;  // std dev = 0.238, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11122413457944945;  // std dev = 0.062, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.11436332987873893;  // std dev = 0.032, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.16812358884473838;  // std dev = 0.137, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.34234937447683894;  // std dev = 0.046, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.24751847561499832;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.11869005198117151;  // std dev = 0.481, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else return 0.4169733009117163;  // std dev = 0.375, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.33305953770875507;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.36788902279144736;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5629417559677808;  // std dev = 0.205, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08476060423156924;  // std dev = 2.064, 236.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=9 */
%   | | else return -0.09705760031232914;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.28608512020565974;  // std dev = 0.041, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.41683748686763616;  // std dev = 0.298, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09317182350791488;  // std dev = 0.048, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.036867632822252576;  // std dev = 0.159, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.3045860960140574;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28441292786733097;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3497167901886627;  // std dev = 0.353, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5685064034359012;  // std dev = 0.349, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11837396156955793;  // std dev = 0.029, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.2040720000591063;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then if ( tweets(C, E) )
%   | | | then return -0.26270371758705263;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2300027062074428;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24375820699642525;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then return -0.044022257125203225;  // std dev = 0.154, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25617381871832695;  // std dev = 0.197, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1132291706609441;  // std dev = 2.69e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0316029378036774;  // std dev = 0.830, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.06329226978233767;  // std dev = 1.269, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.17155265816697682;  // std dev = 0.117, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else return 0.19427542930285374;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.26549453505982457;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.38033627699288586;  // std dev = 0.052, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08402138852464623;  // std dev = 0.005, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21119298318896254;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10234816211770689;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.047447470620273845;  // std dev = 0.991, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.04036060689412905;  // std dev = 1.274, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.1597548248489431;  // std dev = 0.004, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.12206983025312852;  // std dev = 1.082, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1979004439248111;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2338540641321103;  // std dev = 0.093, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.22686564088683905;  // std dev = 0.075, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07705842641116145;  // std dev = 0.004, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.006819368970095075;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3436609866415988;  // std dev = 0.914, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.12352354836279941;  // std dev = 0.036, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09014792281993843;  // std dev = 2.089, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.21128237736843491;  // std dev = 0.326, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.03796360521213289;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06849666400423216;  // std dev = 0.038, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.009967891564475355;  // std dev = 0.118, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return 0.07020408005489645;  // std dev = 0.195, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14792603020309525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.035139642103584875;  // std dev = 0.362, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.06305310156336816;  // std dev = 0.994, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning 15.939503192901611
Refined model CLL: -0.104792


******************************************
Best model found
******************************************
Results 

CLL : -0.102576 

AUC ROC : 0.994693 

AUC PR : 0.359613 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 8.508148193359375 

Total Inference Time : 15.54590368270874 

Total revision time: 34.50293827056885
Best scored revision CLL: -0.104792


Results 

CLL : -0.102576 

AUC ROC : 0.994693 

AUC PR : 0.359613 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 34.5528244972229 

Total Inference Time : 15.54590368270874 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4321999549865723
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.29564893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6528067455442875;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06112917358359724;  // std dev = 0.233, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7523897833398173;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22551302669241527;  // std dev = 2.368, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.585085648324419;  // std dev = 0.153, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5913513963405745;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5717621504054302;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.006525621950206644;  // std dev = 1.977, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return 0.11256663190798855;  // std dev = 1.970, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.558491882519167;  // std dev = 0.815, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11957746078589385;  // std dev = 0.056, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.1311973174742471;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18426125355511067;  // std dev = 0.177, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26053451551277673;  // std dev = 0.843, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30128006552346165;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5876994616674679;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0997341514230859;  // std dev = 1.105, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | else return 0.10759496589018609;  // std dev = 0.346, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0022906666783497538;  // std dev = 1.464, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2418635278825264;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.40364328474138705;  // std dev = 1.334, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14712946970366125;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.1472377625771006;  // std dev = 0.184, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28152691520912965;  // std dev = 0.370, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07982610443382886;  // std dev = 0.958, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08513844673789592;  // std dev = 1.242, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19564166028187766;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04176367587815039;  // std dev = 0.147, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.012414267537809442;  // std dev = 0.917, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0.06543969228245873;  // std dev = 1.372, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.177252956200767;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25675898671426484;  // std dev = 0.268, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0886441266443206;  // std dev = 0.042, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41990097952403393;  // std dev = 0.366, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1190402101827966;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11574379085774862;  // std dev = 1.045, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.1276506876361302;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08205011427610316;  // std dev = 0.010, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09657176323571652;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0946173414707495;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then return 0.025124985741981683;  // std dev = 0.665, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1699080088410525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03363139192504053;  // std dev = 1.318, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning 8.062467575073242
Parameter learned model CLL:-0.116106 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [2.11e-08, 26, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [0.0, 7, 0], 'false,false': [0.496, 9, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.966, 1, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.233, 34, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 9, 0], 'false,false,false,true': [0.081, 0, 3], 'false,false,false,false': [2.368, 16, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.153, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.108, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [1.977, 36, 7], 'false,false,false,false': [1.97, 14, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.815, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.056, 42, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.843, 1, 15], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.097, 0, 5], 'false,false,true,false': [1.105, 51, 2], 'false,false,false': [0.346, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.464, 33, 14], 'false,true': [0.0, 0, 3], 'false,false,true': [1.334, 1, 14], 'false,false,false,true': [0.15, 17, 0], 'false,false,false,false': [0.184, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.37, 0, 20], 'true,false': [0.958, 48, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.242, 12, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.017, 0, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 24, 3], 'false,false,false,true': [0.917, 23, 7], 'false,false,false,false': [1.372, 12, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.047, 0, 15], 'false,true,true,true': [0.268, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 46, 0], 'false,false,true': [0.366, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.142, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.045, 1, 14], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.01, 22, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.032, 3, 0], 'false,true': [0.665, 11, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.318, 15, 6]}]
{'': [0.2243999999999995, 0.2488888888888884], 'false': [0.25, 0.24609375000000003], 'false,true': [-2.5376526277146434e-16, -7.93016446160826e-18], 'true': [-2.0898315757650005e-16, 3.027880976250427e-17], 'true,false': [1.708035422500241e-17, -7.93016446160826e-18], 'true,false,false': [-7.93016446160826e-18, nan], 'false,true,true': [0.0, 1.4802973661668753e-16]}
{'': [0.06222222222222236, 0.14021958532419831], 'false': [0.054396222276556876, 0.19213665492855236], 'false,false': [0.0, 0.21217852189513126], 'false,false,false': [0.0021669749765862445, 0.20775322654988546], 'false,true': [nan, 0.054396222276556876], 'false,false,true': [nan, 0.0]}
{'': [0.0023473045705230196, 0.1325544604600951], 'false': [nan, 0.13255446046009484], 'false,false': [3.700743415417188e-17, 0.12602250707252874], 'false,false,false': [0.09085469834519834, 0.1939583447395707], 'true': [0.001952671564770488, 0.003894428914971456], 'true,false': [nan, 0.003894428914971456], 'true,true': [0.001952671564770488, nan], 'false,false,true': [nan, 3.700743415417188e-17]}
{'': [0.021437725878565593, 0.0013586520078389792], 'false': [7.987779505420812e-05, 0.0016552184821823372], 'false,false': [nan, 0.0016552184821823372], 'false,false,false': [nan, 0.0016552184821823372], 'false,true': [nan, 7.987779505421048e-05], 'false,true,false': [7.502311281084478e-05, 0.0]}
{'': [0.044445094148564124, 0.07746215581556197], 'false': [0.0, 0.07694815942993809], 'false,false': [0.058448435400898224, 0.11982689704210443], 'false,false,true': [0.0018724876623188447, 0.023047429270905907], 'true': [0.044445094148564124, nan], 'false,true': [0.0, nan]}
{'': [0.0455979455481956, 0.10256731677364855], 'false': [-9.25185853854297e-18, 0.1065712257149281], 'false,false': [0.11859474541694105, 0.0018171429093995011], 'true': [nan, 0.04559794554819558], 'true,false': [nan, 0.0455979455481956], 'false,false,false': [0.0013229386741143417, 0.0024172416211202846]}
{'': [0.04172560755795392, 0.0734710027220329], 'false': [nan, 0.07347100272203291], 'false,false': [nan, 0.0734710027220329], 'false,false,false': [nan, 0.0734710027220329], 'true': [0.006845398806647451, 0.018370261114166665]}
{'': [2.0273220998076207e-05, 0.045268114285498325], 'false': [nan, 0.04526811428549829], 'false,false': [0.021692036461342355, 0.05699970050486508], 'false,false,false': [0.028022840340238008, 0.09904167491729803], 'true': [2.0273220998076207e-05, nan]}
{'': [0.0022302145939037195, 0.0408900768747974], 'false': [0.011987037522365254, 0.07917587178984663], 'false,false': [0.01218415180224604, 0.001670441245636085], 'false,true': [0.014313505587247977, 3.7757547241658365e-05], 'false,true,true': [0.014313505587247977, nan], 'false,false,false': [nan, 0.001670441245636085]}
{'': [0.034110398871808965, 0.056110254345062414], 'false': [0.024587434891330407, 0.08079883523195244], 'false,false': [0.0, 0.08276329482968908], 'false,false,false': [nan, 0.08276329482968907], 'true': [0.06063046705083716, 6.825978217377589e-05], 'true,true': [0.07273293142918942, 0.0], 'true,false': [4.456997142014065e-06, 0.0002037955468982472], 'true,false,false': [0.0, 0.00033813133905626416]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.090219497680664
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.5992916525123169;  // std dev = 0.333, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.03405181371974526;  // std dev = 0.269, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.1254446385283914;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.58e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18227503634684314;  // std dev = 2.336, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5042109040485873;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.35536643674628426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462843;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7144411391230576;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13004169898700682;  // std dev = 0.083, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.6189261583353222;  // std dev = 0.891, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.46680383914978435;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3152609173054316;  // std dev = 0.761, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5472537743887128;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6029824361049689;  // std dev = 0.166, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10638953653284987;  // std dev = 0.023, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.10449518754269722;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.149773562373648;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.3478608693057499;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.36241196071276616;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4045821085733131;  // std dev = 0.212, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.41765176614283517;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08849686480785943;  // std dev = 0.734, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.0922889556040468;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.26839171253100413;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2956195963472556;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.06181754633946669;  // std dev = 0.641, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return -0.09105416307751962;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09121106716045924;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27184315724216496;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3997702419378646;  // std dev = 0.169, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10338696722532457;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.223749139731319;  // std dev = 0.471, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2330833281041839;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.08520347881268296;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.19269872527613385;  // std dev = 0.620, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2963236724563668;  // std dev = 0.173, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0930117000845884;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06905159289945857;  // std dev = 0.000260, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.030578923600632784;  // std dev = 0.543, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.16171408621302158;  // std dev = 0.714, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18338502218568017;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, D), follows(E, A) )
%   | | | then return -0.07939041112492377;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.051702057777698845;  // std dev = 0.425, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.12207095493945422;  // std dev = 0.403, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06611099978555034;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1791000272578814;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08524707790379754;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09842511457229684;  // std dev = 0.405, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.24201011540915376;  // std dev = 0.453, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.15598582565684094;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1626792043192019;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20519640287666227;  // std dev = 0.192, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2100930828153563;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07223206560407722;  // std dev = 0.007, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15881955572133755;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24606493799527915;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.09150117638540678;  // std dev = 0.124, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.36650099038409434;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1688375067452552;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1267923940634249;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.06604255306421299;  // std dev = 0.006, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.13207742592177252;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.073777542893592;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.059203701036133524;  // std dev = 0.173, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1254222969875829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.043678816568129504;  // std dev = 0.357, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.042209581722784995;  // std dev = 0.667, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning 9.155633926391602
Refined model CLL: -0.106459


******************************************
Best model found
******************************************
Results 

CLL : -0.104811 

AUC ROC : 0.993171 

AUC PR : 0.348665 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 5.090219497680664 

Total Inference Time : 2.990712881088257 

Total revision time: 12.126068115234375
Best scored revision CLL: -0.106459


Results 

CLL : -0.104811 

AUC ROC : 0.993171 

AUC PR : 0.348665 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 12.152191877365112 

Total Inference Time : 2.990712881088257 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6434195041656494
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2010060779566552;  // std dev = 0.475, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7242537166624232;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028336255078012716;  // std dev = 0.270, 70.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=8 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07823917435112393;  // std dev = 0.826, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7569415164372857;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18840343129907386;  // std dev = 3.194, 50.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5819721059755224;  // std dev = 0.317, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5970298470314709;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5600603215864848;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.047544901734379336;  // std dev = 2.474, 103.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=10 */
%   | | | else return 0.12371519106313501;  // std dev = 2.885, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.526615861936218;  // std dev = 1.653, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11674268300899394;  // std dev = 0.030, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return -0.13451276672545587;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16873203142529833;  // std dev = 0.246, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2627028717740187;  // std dev = 1.450, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30042616802593536;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6263600564914054;  // std dev = 0.174, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10696104652147494;  // std dev = 1.163, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   | | else return 0.012804808074887673;  // std dev = 0.319, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0044552816742553375;  // std dev = 2.270, 115.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24127619934830102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4204702438319744;  // std dev = 1.563, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13174615627191097;  // std dev = 0.172, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.12610628124301207;  // std dev = 0.190, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2989207455594983;  // std dev = 0.597, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.09459245304585796;  // std dev = 1.030, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03690722797117123;  // std dev = 1.894, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19281983586227036;  // std dev = 0.003, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return -0.8074087525880561;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04069075350822182;  // std dev = 0.143, 72.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.030260566865408397;  // std dev = 1.118, 57.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=9 */
%   | | | else return 0.10108670295694598;  // std dev = 1.887, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15568960387254935;  // std dev = 0.180, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28735697894515;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08968009127422936;  // std dev = 0.078, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41660599632464884;  // std dev = 0.527, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1355165072653544;  // std dev = 0.228, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12085646182421073;  // std dev = 1.421, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | else return 0.17233957763579225;  // std dev = 0.234, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08029047997242526;  // std dev = 0.033, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08465532099515673;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07710679839151607;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.015024332359087749;  // std dev = 0.825, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1793932810332327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0631086474500217;  // std dev = 1.357, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
Inference time using transfer learning 8.591057538986206
Parameter learned model CLL:-0.111961 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.988, 1, 41], 'true,false,true': [6.66e-08, 67, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [0.0, 16, 0], 'false,false': [0.475, 23, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 62, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.826, 17, 1], 'false,false,false,true': [0.092, 0, 3], 'false,false,false,false': [3.194, 32, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.317, 0, 31], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.125, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.11e-08, 0, 5], 'false,false,false,true': [2.474, 93, 10], 'false,false,false,false': [2.885, 31, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.653, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 68, 0], 'false,true,false,false': [0.01, 13, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.45, 2, 34], 'true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.174, 0, 13], 'false,false,true,false': [1.163, 112, 2], 'false,false,false': [0.319, 31, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.27, 80, 35], 'false,true': [0.0, 0, 5], 'false,false,true': [1.563, 3, 22], 'false,false,false,true': [0.172, 32, 0], 'false,false,false,false': [0.19, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.597, 0, 47], 'true,false': [1.03, 106, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.894, 24, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.003, 0, 32], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 64, 8], 'false,false,false,true': [1.118, 48, 9], 'false,false,false,false': [1.887, 17, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.18, 1, 34], 'false,true,true,true': [0.39, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 89, 0], 'false,false,true': [0.527, 0, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.228, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.421, 3, 35], 'true,true,false': [0.234, 0, 6], 'true,false,true': [0.033, 62, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.039, 6, 0], 'false,true': [0.825, 20, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.357, 16, 11]}]
{'': [0.22131893860562035, 0.22750000000000006], 'false': [0.23040000000000005, 0.2253061224489791], 'false,true': [-2.9605947323337506e-16, -6.938893903907228e-18], 'true': [0.023242630385488926, 7.311224796312007e-17], 'true,false': [6.628197161941232e-17, -1.4802973661668754e-17], 'true,false,false': [-1.2810265668751807e-17, 0.0], 'false,true,true': [-1.4802973661668753e-16, 1.4802973661668753e-16]}
{'': [-5.551115123125783e-16, 0.13603213136945838], 'false': [0.07308279555668004, 0.1832084949904821], 'false,false': [0.03788204941925181, 0.2099262777870012], 'false,false,false': [0.002807717668630453, 0.2040570392665964], 'false,true': [nan, 0.07308279555668004], 'false,false,true': [nan, 0.03788204941925181]}
{'': [0.00343094360974577, 0.11083536756478295], 'false': [nan, 0.11083536756478325], 'false,false': [8.881784197001253e-17, 0.10442375462626816], 'false,false,false': [0.05944249459512674, 0.18916982919006456], 'true': [0.0032408524920034365, 0.005188489006700436], 'true,false': [nan, 0.005188489006700436], 'true,true': [0.0032408524920034365, nan], 'false,false,true': [nan, 8.881784197001253e-17]}
{'': [0.042709350900764276, 0.0010681670776373116], 'false': [5.4833771930595936e-05, 0.0012866368106561055], 'false,false': [nan, 0.0012866368106561055], 'false,false,false': [nan, 0.0012866368106561055], 'false,true': [nan, 5.4833771930595936e-05], 'false,true,false': [1.3281578805829038e-05, 7.087908658716284e-06]}
{'': [0.058393721289175145, 0.07129004863687612], 'false': [1.1102230246251566e-17, 0.07040901884653895], 'false,false': [0.06029319475164402, 0.10182153107109676], 'false,false,true': [0.002338667561502916, 0.011855761496160947], 'true': [0.058393721289175145, nan], 'false,true': [1.1102230246251566e-17, nan]}
{'': [0.04480860102921134, 0.08938186592371856], 'false': [0.0, 0.09221875070500547], 'false,false': [0.09769019931195551, 0.0011027813518428408], 'true': [nan, 0.04480860102921127], 'true,false': [nan, 0.04480860102921134], 'false,false,false': [0.0009298032015788854, 0.001283506298248065]}
{'': [0.0418568100760047, 0.096952918928557], 'false': [nan, 0.096952918928557], 'false,false': [nan, 0.096952918928557], 'false,false,false': [nan, 0.096952918928557], 'true': [0.00758903973067676, 0.0098143201796125]}
{'': [0.02939846583892285, 0.042378264238853824], 'false': [nan, 0.042378264238853956], 'false,false': [0.02037505835337093, 0.05918178519493681], 'false,false,false': [0.021926596369146865, 0.11866354049821569], 'true': [2.821644700112813e-07, 0.0], 'true,false': [0.0, nan]}
{'': [0.03234200946538409, 0.03899205306046936], 'false': [0.014506915308295064, 0.07976904487467765], 'false,false': [0.015408219321798465, 0.001858933878292085], 'false,true': [0.015205565973756973, 6.912712043180215e-05], 'false,true,true': [0.015205565973756973, nan], 'false,false,false': [nan, 0.001858933878292085]}
{'': [0.027157311830911177, 0.045168487310952334], 'false': [0.02346858311752314, 0.06625508204575657], 'false,false': [0.0, 0.06822604125882072], 'false,false,false': [nan, 0.06822604125882069], 'true': [0.047445926414670374, 3.66334048176747e-05], 'true,true': [0.053137227356803186, 0.009111942581479066], 'true,false': [1.7441835775651853e-05, 0.00010912992378571927], 'true,false,false': [1.3877787807814458e-18, 0.00025540050915920837]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.472604751586914
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7239677240518405;  // std dev = 0.044, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.49553847277924223;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.018931019817795994;  // std dev = 1.782, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09821013960849448;  // std dev = 2.174, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.26825895954063367;  // std dev = 2.113, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5608738781075902;  // std dev = 0.053, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(E, A) )
%   | | then return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.6097621628605627;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5542563614837852;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.021740854516076675;  // std dev = 1.792, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.011474771401486145;  // std dev = 1.521, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.14524877007147166;  // std dev = 2.732, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4208914111194402;  // std dev = 0.054, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.46427725804222036;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6857366549370962;  // std dev = 0.124, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6490904802969342;  // std dev = 0.217, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7540638960756627;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10849929733227472;  // std dev = 0.073, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.10993368026098929;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.16584212125557551;  // std dev = 0.222, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.31780404718752375;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.3378314882180669;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then return 0.35496942904545503;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.33446726415903383;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3192404821079935;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5410211414417405;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0936479576886109;  // std dev = 0.995, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05874443681775326;  // std dev = 0.657, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.17327922443169208;  // std dev = 1.370, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25722720234553126;  // std dev = 0.006, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.0784354729705647;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.06376926825455251;  // std dev = 0.895, 62.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=3 */
%   | | | else return -0.08556730234068913;  // std dev = 0.684, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25416799890163155;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.35848392478108354;  // std dev = 0.193, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.527776115541031;  // std dev = 0.240, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11276489512632039;  // std dev = 0.044, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.13334595378972564;  // std dev = 0.289, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21087761209982045;  // std dev = 0.005, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return -0.07897358135843299;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return 0.006540983263205898;  // std dev = 0.296, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.3589798494507059;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09444702118640658;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2181718948591371;  // std dev = 1.107, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.09917091512836951;  // std dev = 0.059, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.013679036504250319;  // std dev = 0.647, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.07346515518760817;  // std dev = 1.292, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.12511648375089526;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.18202214320455037;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.07878051169656848;  // std dev = 0.094, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | else return 0.012382255914828673;  // std dev = 0.183, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.24015780003352746;  // std dev = 0.148, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09471519414724588;  // std dev = 0.032, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.08811024668062233;  // std dev = 0.694, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1943517248666501;  // std dev = 0.979, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1583238986413042;  // std dev = 0.004, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.18308271234739532;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.3654404740018815;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14250634354857683;  // std dev = 0.761, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.0764282436574869;  // std dev = 0.009, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12109245793308407;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3440026421033758;  // std dev = 0.203, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return -0.08810246452133717;  // std dev = 0.028, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.2461951363392683;  // std dev = 0.126, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14658613707125867;  // std dev = 0.111, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.10876710589243782;  // std dev = 0.726, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.19231015217126476;  // std dev = 0.106, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.0699281224922094;  // std dev = 0.009, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.0021965181561940245;  // std dev = 0.123, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return 0.05954456731001878;  // std dev = 0.386, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1046209202645656;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 6.477294219448468E-4;  // std dev = 0.519, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.051007605420203495;  // std dev = 0.898, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
Inference time using transfer learning 10.684609413146973
Refined model CLL: -0.106223


******************************************
Best model found
******************************************
Results 

CLL : -0.102896 

AUC ROC : 0.993201 

AUC PR : 0.369315 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 5.472604751586914 

Total Inference Time : 5.731031656265259 

Total revision time: 17.452941417694092
Best scored revision CLL: -0.106223


Results 

CLL : -0.102896 

AUC ROC : 0.993201 

AUC PR : 0.369315 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 17.47906517982483 

Total Inference Time : 5.731031656265259 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.985870122909546
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.07935106490048778;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.20814893509951235;  // std dev = 0.477, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7212237597320268;  // std dev = 0.088, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03840638511056154;  // std dev = 0.260, 105.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.037398867962034905;  // std dev = 1.567, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7417540048821586;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15253764074474216;  // std dev = 3.722, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5699102713608947;  // std dev = 0.329, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6998182943640282;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4334345149833921;  // std dev = 0.814, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5549341736749067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5549341736749067;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038195585377767294;  // std dev = 3.324, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return 0.0708523735803313;  // std dev = 3.251, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5254718938818913;  // std dev = 2.145, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12135125597221011;  // std dev = 0.158, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return -0.1304178760267238;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16699040734624063;  // std dev = 0.230, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2820993073989127;  // std dev = 1.513, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | else return 0.3764455013051552;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20013994108311442;  // std dev = 0.728, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6331487746587976;  // std dev = 0.231, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.09640680893182052;  // std dev = 1.640, 147.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=4 */
%   | | else return 0.025466474351093383;  // std dev = 0.332, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028769052337463883;  // std dev = 2.502, 149.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25673604789845406;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4983433997083761;  // std dev = 1.376, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12623582094256433;  // std dev = 0.161, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.13981868338966813;  // std dev = 0.186, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2737426375006963;  // std dev = 1.133, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return -0.08478083775064685;  // std dev = 1.575, 170.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06092177774640169;  // std dev = 1.687, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1898742393063958;  // std dev = 0.068, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E) )
%   | | then return 0.19598385447253863;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051160934936545575;  // std dev = 0.161, 100.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01261995785010305;  // std dev = 1.689, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return 0.04087685289584241;  // std dev = 1.967, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13096387391112674;  // std dev = 0.219, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.32636973168786326;  // std dev = 0.628, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09218572521881188;  // std dev = 0.107, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4097020983021371;  // std dev = 0.611, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11896807784341444;  // std dev = 0.231, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16379388190122882;  // std dev = 1.006, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.16182463049371515;  // std dev = 0.214, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08189603410083339;  // std dev = 0.029, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09836963505781034;  // std dev = 0.019, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.026443046848999736;  // std dev = 0.953, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.005225137461002842;  // std dev = 1.065, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.2916393451823369;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04237342642363689;  // std dev = 1.495, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
Inference time using transfer learning 8.20541763305664
Parameter learned model CLL:-0.112527 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 62], 'true,false,true': [8.69e-08, 98, 0], 'true,false,false,true': [1.369, 30, 2], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.866, 1, 3], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.477, 26, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.088, 0, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 94, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.567, 27, 3], 'false,false,false,true': [0.1, 0, 5], 'false,false,false,false': [3.722, 48, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.329, 0, 46], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.814, 1, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.324, 142, 17], 'false,false,false,false': [3.251, 46, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.145, 2, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.158, 111, 0], 'false,true,false,false': [0.011, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.513, 2, 53], 'true,false': [0.0, 0, 1], 'false,true,true': [0.728, 1, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.231, 0, 20], 'false,false,true,false': [1.64, 143, 4], 'false,false,false': [0.332, 30, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.502, 96, 53], 'false,true': [0.054, 0, 9], 'false,false,true': [1.376, 1, 31], 'false,false,false,true': [0.161, 39, 0], 'false,false,false,false': [0.186, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.133, 1, 73], 'true,false': [1.575, 164, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.687, 26, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.068, 0, 50], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 89, 11], 'false,false,false,true': [1.689, 64, 16], 'false,false,false,false': [1.967, 33, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 3, 54], 'false,true,true,true': [0.628, 0, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.107, 125, 0], 'false,false,true': [0.611, 0, 23], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.231, 52, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.006, 1, 54], 'true,true,false': [0.214, 0, 8], 'true,false,true': [0.029, 94, 0], 'true,false,false,true': [0.019, 17, 0], 'true,false,false,false': [0.953, 18, 3], 'false,true': [1.065, 35, 14], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.495, 23, 13]}]
{'': [0.22279200765224802, 0.2275000000000013], 'false': [0.2274999999999995, 0.2274999999999995], 'false,true': [0.06222222222222188, 1.3322676295501878e-17], 'true': [-6.87622002348484e-16, 0.022210743801652794], 'false,true,true': [-1.6148698540002277e-16, 0.18750000000000006], 'true,false': [7.703588334133739e-17, 0.08044982698961922], 'true,false,false': [0.05859375000000002, 0.25]}
{'': [0.00015318582222573752, 0.1307302848100388], 'false': [0.06744150480486338, 0.17987703078208178], 'false,false': [0.08182260856876747, 0.2037796964208062], 'false,false,false': [0.0019856992391203755, 0.1951500199922736], 'false,false,true': [nan, 0.08182260856876747], 'false,true': [nan, 0.06744150480486338]}
{'': [0.017841993345998022, 0.10700459357653064], 'false': [nan, 0.10700459357653072], 'false,false': [0.0, 0.10063860020804867], 'false,false,false': [0.06949821015415955, 0.17321353308576812], 'true': [0.0023549767699518644, 0.09509638869795628], 'true,false': [0.01709788965458814, 0.11044219891393654], 'true,true': [0.0023549767699518644, nan], 'false,false,true': [0.0, -3.700743415417188e-17]}
{'': [0.0484325737984343, 0.0008508892973620282], 'false': [0.00020608313158723975, 0.0010209182541625404], 'false,false': [nan, 0.0010209182541625404], 'false,false,false': [nan, 0.0010209182541625404], 'false,true': [nan, 0.00020608313158724148], 'false,true,false': [0.00022425979594516507, 8.135282347287304e-06]}
{'': [0.041058898658838765, 0.08069619792346541], 'false': [0.06619698722801916, 0.07971762620808535], 'false,false': [0.07253309929057485, 0.11032203676887317], 'false,false,true': [0.0026576864264193922, 0.01829728159105304], 'false,true': [0.06619698722801916, nan], 'true': [0.04164647401213171, 0.0]}
{'': [0.042025616579030846, 0.09635943555105729], 'false': [0.0003267369035857806, 0.10120581607225278], 'false,false': [0.059209060714933065, 0.000843252285862774], 'true': [nan, 0.042025616579030894], 'true,false': [nan, 0.042025616579030846], 'false,false,false': [0.000661638364542409, 0.0009400085451397049]}
{'': [0.04259701085789686, 0.07113921101159706], 'false': [nan, 0.07113921101159706], 'false,false': [nan, 0.07113921101159706], 'false,false,false': [nan, 0.07113921101159706], 'true': [0.01736243474268609, 0.014598309096156439]}
{'': [9.237130769131973e-05, 0.04213072099180806], 'false': [nan, 0.042130720991807875], 'false,false': [0.026052745473607457, 0.05318539929872729], 'false,false,false': [0.03565184176454211, 0.08061930221404365], 'true': [9.348682409068055e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.04806239466574372, 0.03773774049414907], 'false': [0.020498819815239676, 0.0651093040997359], 'false,false': [0.016217378072907816, 0.0010236514951050396], 'false,true': [0.024622317636925573, 9.144664653422118e-05], 'false,true,true': [0.024622317636925573, nan], 'false,false,false': [nan, 0.0010236514951050396]}
{'': [0.022878218663103352, 0.046982667561023296], 'false': [0.023135588788417524, 0.07751717327565466], 'false,false': [0.25, 0.06206297656077501], 'false,false,false': [nan, 0.062062976560775], 'true': [0.016804238380013808, 0.007362911705951745], 'true,true': [0.018415136249181275, 0.005725930016616747], 'true,false': [8.824319673531802e-06, 0.02516881720145871], 'true,false,false': [2.1108394819572535e-05, 0.04321205519453318]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.880794763565063
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8359267128772897;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.7581489350995122;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else return -0.1187741418235646;  // std dev = 0.150, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), follows(J, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.7002717442199723;  // std dev = 0.167, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return 0.7392070123615109;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7239366034204544;  // std dev = 5.16e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12799832779691317;  // std dev = 4.71e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.07018463845301838;  // std dev = 0.216, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.20533500553642006;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.09331011419057632;  // std dev = 0.850, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10324593512549514;  // std dev = 3.630, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5671333672747422;  // std dev = 0.030, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(E, A) )
%   | | then return 0.7282174268409957;  // std dev = 0.206, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5655705645594207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5750887498568714;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10867257315127826;  // std dev = 0.675, 83.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=1 */
%   | | | else return -9.935389674684818E-4;  // std dev = 2.015, 51.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07163058101499781;  // std dev = 2.608, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | | | else return 0.16702128643390754;  // std dev = 2.377, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.43034720443432134;  // std dev = 0.030, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.3200746234389197;  // std dev = 0.275, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.4183467104903584;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5210567521165728;  // std dev = 0.254, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.6703140587915742;  // std dev = 0.364, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5270991361255138;  // std dev = 1.291, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.1123092750991119;  // std dev = 0.011, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.1459189769532472;  // std dev = 2.36e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.2030042301685787;  // std dev = 0.032, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32943832366732095;  // std dev = 0.040, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.5149799571811564;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, E) )
%   | | | then return -0.07173660620686272;  // std dev = 1.365, 107.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=6 */
%   | | | else return -0.11344034952643416;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.5023809133142244;  // std dev = 0.226, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1217418097553017;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.35158179899637887;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.016711389719793496;  // std dev = 1.065, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.10160314259078919;  // std dev = 2.008, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2581475718004416;  // std dev = 0.003, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( tweets(A, E) )
%   | | then return -0.058758070863307844;  // std dev = 0.116, 83.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=6 */
%   | | else return -0.06299516964104025;  // std dev = 0.137, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.28938912472363376;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2800726803633901;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3464974947098475;  // std dev = 0.936, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.6022857249573973;  // std dev = 0.268, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1181225644960247;  // std dev = 0.023, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.1492144048194131;  // std dev = 0.289, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2132718948346214;  // std dev = 0.865, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.12799425491192223;  // std dev = 0.643, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4606529805316472;  // std dev = 0.206, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30161516863130977;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.09396531833720624;  // std dev = 0.013, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21499143390055708;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3962443340140941;  // std dev = 0.243, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10519433416395174;  // std dev = 0.023, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.010054179189402788;  // std dev = 0.305, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18113372452156354;  // std dev = 0.010, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.23057198358179087;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return -0.06014751074140458;  // std dev = 0.528, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | | else return -0.07734765618144744;  // std dev = 0.007, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.3147705513608379;  // std dev = 0.394, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08725092914563902;  // std dev = 0.060, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1479427842873714;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0361066885401104;  // std dev = 1.137, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.03310583049135354;  // std dev = 1.620, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.15340131069224114;  // std dev = 0.002, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.047570334122770716;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15865774215411743;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.17195017346734282;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.00949415202951289;  // std dev = 0.766, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.04726657369398068;  // std dev = 0.134, 141.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.27672059339768984;  // std dev = 0.184, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3024906514322231;  // std dev = 0.901, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return -0.11345830139794431;  // std dev = 0.033, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13645250113837246;  // std dev = 0.053, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.07262026771899803;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2471641876451254;  // std dev = 0.091, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06321749983384953;  // std dev = 0.062, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2101114966491067;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.09752374721725363;  // std dev = 0.023, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23207779193868772;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10943579936974379;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.03876745672164365;  // std dev = 0.283, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning 15.14130449295044
Refined model CLL: -0.102109


******************************************
Best model found
******************************************
Results 

CLL : -0.103482 

AUC ROC : 0.992546 

AUC PR : 0.324086 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 11.880794763565063 

Total Inference Time : 13.74973726272583 

Total revision time: 33.86594104766846
Best scored revision CLL: -0.102109


Results 

CLL : -0.103482 

AUC ROC : 0.992546 

AUC PR : 0.324086 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 33.892064809799194 

Total Inference Time : 13.74973726272583 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.313345193862915
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.08302753548872306;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.17481560176617897;  // std dev = 0.465, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7259408105330972;  // std dev = 0.119, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04666984550888388;  // std dev = 0.246, 151.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.056877319777117574;  // std dev = 1.587, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5141065326662145;  // std dev = 1.106, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.11591342236905824;  // std dev = 4.469, 115.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5748251775681744;  // std dev = 0.371, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return -0.266578791163847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7194069414368608;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6298341299992422;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5595755591770222;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5595755591770221;  // std dev = 5.16e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03323500302962852;  // std dev = 3.816, 210.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=23 */
%   | | | else return 0.07570071451616601;  // std dev = 3.781, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5105309785900745;  // std dev = 2.763, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11947220819589066;  // std dev = 0.099, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return -0.12962114714649228;  // std dev = 0.011, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16139191253303453;  // std dev = 0.251, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2794610945798556;  // std dev = 1.820, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | else return 0.43437387778991987;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30350408214236335;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6458145810948722;  // std dev = 0.290, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10215396046436681;  // std dev = 1.671, 221.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=4 */
%   | | else return -0.003037937116109201;  // std dev = 0.293, 68.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0031044278730366975;  // std dev = 3.198, 216.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24719492641972576;  // std dev = 0.091, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5383037465240399;  // std dev = 0.933, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11957217324779675;  // std dev = 0.188, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.12581995397744034;  // std dev = 0.197, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2869434182011886;  // std dev = 1.226, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else return -0.08854567164996723;  // std dev = 1.742, 194.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04658661352590001;  // std dev = 2.029, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17898795764042683;  // std dev = 0.994, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E) )
%   | | then return 0.2257371951015844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03498640961624496;  // std dev = 0.151, 119.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02618126011212302;  // std dev = 2.061, 104.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
%   | | | else return 0.034220883915266356;  // std dev = 2.309, 70.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13109050335414654;  // std dev = 0.234, 70.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=66 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21114149471815805;  // std dev = 1.572, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08962999858793996;  // std dev = 0.090, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40186691032481153;  // std dev = 0.730, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1191316090582174;  // std dev = 0.255, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17727911511282474;  // std dev = 1.082, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.15662060836184602;  // std dev = 0.257, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08070300396020302;  // std dev = 0.031, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09159714985988178;  // std dev = 0.032, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.01626339827554815;  // std dev = 0.954, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.006367228337915753;  // std dev = 1.153, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21428168941332615;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02967661391122108;  // std dev = 1.868, 54.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=18 */
Inference time using transfer learning 9.04695177078247
Parameter learned model CLL:-0.108657 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 124, 0], 'true,false,false,true': [1.372, 32, 2], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 15], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.465, 41, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.119, 0, 69], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 137, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.587, 35, 3], 'false,false,false,true': [1.106, 2, 6], 'false,false,false,false': [4.469, 83, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.371, 0, 57], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.223, 0, 3], 'true,false,false': [0.134, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [5.16e-08, 0, 12], 'false,false,false,true': [3.816, 187, 23], 'false,false,false,false': [3.781, 63, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.763, 6, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.099, 131, 0], 'false,true,false,false': [0.011, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.251, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.82, 3, 65], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.29, 0, 28], 'false,false,true,false': [1.671, 217, 4], 'false,false,false': [0.293, 57, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.198, 150, 66], 'false,true': [0.091, 0, 17], 'false,false,true': [0.933, 0, 41], 'false,false,false,true': [0.188, 75, 0], 'false,false,false,false': [0.197, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.226, 1, 95], 'true,false': [1.742, 188, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.029, 45, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 68], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 105, 14], 'false,false,false,true': [2.061, 83, 21], 'false,false,false,false': [2.309, 50, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.234, 4, 66], 'false,true,true,true': [1.572, 2, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 170, 0], 'false,false,true': [0.73, 0, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.255, 69, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.082, 1, 68], 'true,true,false': [0.257, 0, 15], 'true,false,true': [0.031, 109, 0], 'true,false,false,true': [0.032, 24, 0], 'true,false,false,false': [0.954, 20, 3], 'false,true': [1.153, 47, 19], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.868, 36, 18]}]
{'': [0.22695012211313167, 0.22319680476153325], 'true': [0.022975778546712552, 0.018175582990397704], 'false': [0.22997508009967915, 0.21638888888888838], 'false,true': [-2.8047739569477637e-16, 3.2653618371328135e-17], 'true,false': [-7.162729191130042e-18, 0.07271468144044306], 'true,false,false': [0.05536332179930797, 0.18750000000000003], 'false,true,true': [-2.3684757858670006e-16, 0.0]}
{'': [0.00020659649087940085, 0.11786697535529946], 'false': [0.06072493700653324, 0.16175773226145806], 'false,false': [0.06627523140514943, 0.18193871792536434], 'false,false,false': [0.1528860669499464, 0.17364707251841716], 'false,false,true': [nan, 0.06627523140514943], 'false,true': [nan, 0.06072493700653324]}
{'': [0.014838441496091887, 0.11060751503327049], 'false': [nan, 0.11060751503327108], 'false,false': [2.9605947323337506e-16, 0.10089065000628077], 'false,false,false': [0.06934533294874715, 0.1721987512085397], 'true': [0.014372596054083038, 0.009291965376357878], 'true,true': [0.002418528955187464, 0.0], 'true,false': [0.016524941409691518, 0.0030010478434114862], 'false,false,true': [3.700743415417188e-17, 2.220446049250313e-16]}
{'': [0.05874503653641631, 0.0006696900293015664], 'false': [7.698852436082981e-05, 0.0008283822199628801], 'false,false': [nan, 0.0008283822199628801], 'false,false,false': [nan, 0.0008283822199628801], 'false,true': [nan, 7.698852436081315e-05], 'false,true,false': [7.439009510458419e-05, 4.394219025720451e-06]}
{'': [0.04837172256202903, 0.07250399869623951], 'false': [-1.4802973661668754e-17, 0.071356446152395], 'false,false': [0.06738423539085812, 0.08572484469841865], 'false,false,true': [0.0030073503267238344, 0.012629762351753391], 'true': [0.04873527475074419, 0.0], 'false,true': [-1.4802973661668754e-17, nan]}
{'': [0.047350746248672325, 0.0780527742581005], 'false': [0.0004833672429900032, 0.08108229796036291], 'false,false': [0.021217245831556084, 0.0005300495791618847], 'true': [nan, 0.047350746248672276], 'true,false': [nan, 0.047350746248672325], 'false,false,false': [0.00046892289850886115, 0.0005778580151116101]}
{'': [0.046865328248881816, 0.060546641683009175], 'false': [nan, 0.06054664168300919], 'false,false': [nan, 0.060546641683009175], 'false,false,false': [nan, 0.060546641683009175], 'true': [0.015652124499423093, 0.015637804792034166]}
{'': [0.014138253485326725, 0.04279395306641728], 'false': [nan, 0.04279395306641736], 'false,false': [0.022947237279183286, 0.05592217622030891], 'false,false,false': [0.040837558037117826, 0.07615294471787996], 'true': [0.014311934406848905, 0.0], 'true,false': [0.0, nan]}
{'': [0.05468994491814815, 0.039348017399028185], 'false': [0.02350408203133282, 0.06467679972888664], 'false,false': [0.01666140352833617, 0.0009441894582748636], 'false,true': [0.08824678854919499, 4.7760493056238284e-05], 'false,true,true': [0.08824678854919499, nan], 'false,false,false': [nan, 0.0009441894582748636]}
{'': [0.023169082106173185, 0.0402876427397647], 'false': [0.020155303976264385, 0.06405859447280968], 'false,false': [0.0, 0.06462524594262216], 'false,false,false': [nan, 0.06462524594262214], 'true': [0.01479141911686812, 0.006418794178362062], 'true,true': [0.01697057822690275, 0.004416722934739307], 'true,false': [9.084149220676263e-06, 0.02081257497723906], 'true,false,false': [4.296612904600034e-05, 0.039587249040358985]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.548521041870117
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.7840748610254382;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return -0.12480561035503356;  // std dev = 0.129, 176.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.6194734122109542;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7414599041786037;  // std dev = 0.136, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.7450067375039168;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6623860444608517;  // std dev = 0.978, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12732663603127034;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.040225567498931074;  // std dev = 2.396, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0.15805195475381734;  // std dev = 3.455, 66.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5586868965333148;  // std dev = 0.071, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6934637633747207;  // std dev = 0.176, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.44744989432106974;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5681887834677902;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6049270639577259;  // std dev = 0.183, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1138371068856021;  // std dev = 9.88e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16028093770444662;  // std dev = 2.525, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.10373163288953113;  // std dev = 3.239, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4222086778313086;  // std dev = 0.089, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.35909249075953475;  // std dev = 0.976, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.08627931977241268;  // std dev = 1.118, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, I) )
%   | | | then return 0.31279112828542277;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6720887877225618;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6469995790525658;  // std dev = 0.176, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.7386469343811325;  // std dev = 0.215, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(L, A) )
%   | then return -0.1028483486023666;  // std dev = 6.59e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.16187272255089555;  // std dev = 0.022, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.25591550086317005;  // std dev = 1.680, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.29841787659047464;  // std dev = 0.974, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.3383076250574802;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.45457389565399353;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33016481154168914;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.36767981395830307;  // std dev = 0.285, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09373860221462181;  // std dev = 7.74e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.009290902775806189;  // std dev = 1.860, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.0995856205428126;  // std dev = 2.657, 60.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.24266683815532986;  // std dev = 0.988, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.01284460033906612;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2847865768903366;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06867297357998466;  // std dev = 0.105, 122.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=8 */
%   | | else return -0.07044985379820946;  // std dev = 0.073, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26511137841729565;  // std dev = 0.021, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14514228881389352;  // std dev = 1.173, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.513625756604723;  // std dev = 0.398, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.1295010802316302;  // std dev = 0.041, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, C) )
%   | | | then return 0.21993627144340108;  // std dev = 0.022, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.23417298186053964;  // std dev = 0.063, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.28368508358435246;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3453652627749666;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2137174832670656;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.18862407916968346;  // std dev = 1.073, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.07991183546554267;  // std dev = 0.020, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.006123659885745978;  // std dev = 1.589, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
%   | | | else return 0.03220421295947219;  // std dev = 2.005, 54.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1856554414353811;  // std dev = 0.008, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.22317526021545186;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.1757991307074538;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22579931219702543;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2908938210674543;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.24480593293809105;  // std dev = 0.160, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.07400720050358421;  // std dev = 0.023, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.020892831238627264;  // std dev = 1.626, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.06028962666299808;  // std dev = 2.019, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.16069875687911864;  // std dev = 0.007, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.20010308399537216;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.09790664606475742;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.16250396177612014;  // std dev = 0.167, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.06933835250753238;  // std dev = 0.020, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3635321722793082;  // std dev = 0.118, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.408366804215285;  // std dev = 0.242, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.128775812754868;  // std dev = 0.109, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.18376330524627696;  // std dev = 0.153, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11888129808030555;  // std dev = 0.157, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return -0.05919879584589117;  // std dev = 0.043, 162.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.259082924211476;  // std dev = 0.254, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10275582973606727;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.0314950725439609;  // std dev = 0.363, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.007331030757298278;  // std dev = 0.584, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.12761064150552115;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.02942329315733379;  // std dev = 1.123, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | | else return 0.015209767772175831;  // std dev = 1.052, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning 11.023409128189087
Refined model CLL: -0.106927


******************************************
Best model found
******************************************
Results 

CLL : -0.104433 

AUC ROC : 0.991425 

AUC PR : 0.288452 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 12.548521041870117 

Total Inference Time : 11.86643648147583 

Total revision time: 35.08645582199097
Best scored revision CLL: -0.106927


Results 

CLL : -0.104433 

AUC ROC : 0.991425 

AUC PR : 0.288452 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 35.112579584121704 

Total Inference Time : 11.86643648147583 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.8933932781219482
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09423201728144012;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.2547006592374425;  // std dev = 0.489, 58.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7028045806455556;  // std dev = 1.410, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02921447295983889;  // std dev = 0.271, 166.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05186786348621129;  // std dev = 1.779, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6387061508532875;  // std dev = 0.972, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.09271034542196531;  // std dev = 5.059, 153.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5615464237459068;  // std dev = 1.066, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7170888097463136;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6177840623738463;  // std dev = 0.154, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5887899720353903;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.564123538350749;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015612737416584425;  // std dev = 4.615, 260.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=34 */
%   | | | else return 0.03582302817405411;  // std dev = 4.136, 114.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5233088530689125;  // std dev = 3.090, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12207428403449194;  // std dev = 0.098, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | | else return -0.12667659438998263;  // std dev = 0.007, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15799651167487028;  // std dev = 0.278, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2738479970416665;  // std dev = 2.050, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.4171012477203765;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3024492044060822;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.44858595067843676;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6126730986462714;  // std dev = 1.063, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10456238477370214;  // std dev = 1.821, 276.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=5 */
%   | | else return -0.004119936813717805;  // std dev = 0.291, 81.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01522214266090762;  // std dev = 3.310, 268.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24990910094773372;  // std dev = 0.123, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48537825945969393;  // std dev = 1.976, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1267708604559249;  // std dev = 0.220, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.12255111895665495;  // std dev = 0.193, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25912661873932047;  // std dev = 2.454, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else return -0.08565203426982433;  // std dev = 1.708, 240.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03832193954967644;  // std dev = 2.282, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19828006609481025;  // std dev = 0.092, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2293862020244628;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0460767902225363;  // std dev = 0.154, 181.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0071679615937410845;  // std dev = 2.127, 132.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=28 */
%   | | | else return 0.051963324156194;  // std dev = 2.485, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18608034849075614;  // std dev = 0.060, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2868413354171128;  // std dev = 0.917, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09200549522912495;  // std dev = 0.111, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38387781913106694;  // std dev = 1.210, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11410272212427176;  // std dev = 0.266, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1547325331351101;  // std dev = 1.798, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.15868717909078106;  // std dev = 0.382, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08217973157076056;  // std dev = 0.017, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09444980863135562;  // std dev = 0.027, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.004094481122760707;  // std dev = 0.956, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.015624017927959094;  // std dev = 1.374, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.13040886352695277;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03430516742315251;  // std dev = 1.983, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
Inference time using transfer learning 8.274199485778809
Parameter learned model CLL:-0.111496 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 162, 0], 'true,false,false,true': [1.38, 40, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 53, 0], 'false,false': [0.489, 35, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.41, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.271, 147, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.779, 43, 4], 'false,false,false,true': [0.972, 1, 8], 'false,false,false,false': [5.059, 113, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.066, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.154, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.135, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.615, 226, 34], 'false,false,false,false': [4.136, 91, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.09, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.098, 190, 0], 'false,true,false,false': [0.007, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.278, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.05, 4, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.01, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.063, 1, 39], 'false,false,true,false': [1.821, 271, 5], 'false,false,false': [0.291, 68, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.31, 186, 82], 'false,true': [0.123, 0, 22], 'false,false,true': [1.976, 2, 52], 'false,false,false,true': [0.22, 78, 0], 'false,false,false,false': [0.193, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.454, 6, 121], 'true,false': [1.708, 233, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.282, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.092, 0, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 162, 19], 'false,false,false,true': [2.127, 104, 28], 'false,false,false,false': [2.485, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 78], 'false,true,true,true': [0.917, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.111, 222, 0], 'false,false,true': [1.21, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.266, 88, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.798, 3, 85], 'true,true,false': [0.382, 0, 19], 'true,false,true': [0.017, 158, 0], 'true,false,false,true': [0.027, 32, 0], 'true,false,false,false': [0.956, 16, 4], 'false,true': [1.374, 55, 25], 'false,false,true': [0.77, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.983, 43, 21]}]
{'': [0.2249639480852451, 0.22760935585273656], 'false': [0.21631148854350374, 0.23929845422116636], 'true': [0.01851192595229848, 0.01868480725623573], 'false,true': [0.03698224852071082, 5.86532918669894e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.507710280355151e-16, 0.07638888888888874], 'true,false,false': [0.04535147392290247, 0.22222222222222224]}
{'': [0.022847703199704663, 0.12453642214504018], 'false': [0.07332267835332662, 0.15956857733727975], 'false,false': [0.06736558727084738, 0.1794388447369168], 'false,false,false': [0.10507252344104856, 0.16725158869443113], 'false,true': [nan, 0.07332267835332662], 'false,false,true': [nan, 0.06736558727084738]}
{'': [0.0163927878613844, 0.11423058114894058], 'false': [nan, 0.114230581148941], 'false,false': [0.0009933599195405527, 0.10324858677704706], 'false,false,false': [0.08192096276286878, 0.15005132271276653], 'true': [0.016699896129641727, 0.008518608746704586], 'true,true': [0.016699896129641727, nan], 'true,false': [0.016121846648306553, 0.0029779128470467375], 'false,false,true': [0.0030421647535940157, -1.7763568394002506e-16]}
{'': [0.05929259361917717, 0.0005157491659045081], 'false': [4.4840609596923203e-05, 0.0008864375641279639], 'false,false': [nan, 0.0008864375641279639], 'false,false,false': [nan, 0.0008864375641279639], 'false,true': [nan, 4.4840609596928896e-05], 'false,true,false': [5.097603280608616e-05, 1.1482771801993055e-06]}
{'': [0.05148332950456446, 0.0750395542984902], 'false': [0.0009733359552077658, 0.07377388514683442], 'false,false': [0.07094865696230171, 0.08472159196589944], 'false,false,true': [0.028256860428888687, 0.012018565157951642], 'true': [0.05186866404523642, 0.0], 'false,true': [5.052819107664863e-06, 0.0]}
{'': [0.040881286964523124, 0.08834898135408299], 'false': [0.0006928861272723428, 0.09368509169735412], 'false,false': [0.0723422006399921, 0.0005956265629636527], 'true': [nan, 0.04088128696452313], 'true,false': [nan, 0.040881286964523124], 'false,false,false': [0.0006191973901765138, 0.0005586073810056154]}
{'': [0.05125633838832941, 0.06053757183947033], 'false': [nan, 0.06053757183947046], 'false,false': [nan, 0.06053757183947033], 'false,false,false': [nan, 0.06053757183947033], 'true': [0.047409638593623904, 0.01215623087485785]}
{'': [0.00012389349122215814, 0.03982481789707025], 'false': [nan, 0.03982481789706984], 'false,false': [0.02358228756036965, 0.0522550285875143], 'false,false,false': [0.03426410250881215, 0.08128348813874793], 'true': [0.0001023489861938693, 7.31656207741821e-05], 'true,false': [7.31656207741821e-05, nan]}
{'': [0.003560516907621449, 0.03738973112890691], 'false': [0.0211935648595746, 0.06566893192937842], 'false,false': [0.0357207761880298, 0.0008052329047117794], 'false,true': [0.022133362188524814, 5.597941378154036e-05], 'false,true,true': [0.022133362188524814, nan], 'false,false,false': [nan, 0.0008052329047117794]}
{'': [0.02597124066182223, 0.04416850896000039], 'false': [0.02359243150657351, 0.06866739597844869], 'false,false': [0.19743838268401218, 0.06141644797699106], 'false,false,false': [nan, 0.061416447976991126], 'true': [0.03159258251868735, 0.004931866376049442], 'true,true': [0.03674849619581987, 0.007699699111176403], 'true,false': [1.916533686080398e-06, 0.01953104663414995], 'true,false,false': [2.2320229412793602e-05, 0.045720956445307576]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 19.910624265670776
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.106136779186202;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.6950758028271762;  // std dev = 0.160, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.6213915923008599;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7274596506308105;  // std dev = 0.163, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7328652456208923;  // std dev = 0.144, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6741245323219609;  // std dev = 0.991, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1267895648210386;  // std dev = 0.054, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10246698450664116;  // std dev = 3.618, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.21705659151354764;  // std dev = 2.776, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.5665337705851402;  // std dev = 0.164, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.44145747986642864;  // std dev = 0.369, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5520571260292543;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.031207101072781147;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5634156429693851;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1080573641992415;  // std dev = 0.680, 138.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=1 */
%   | | | else return 4.355421470556929E-4;  // std dev = 2.553, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09239772459697448;  // std dev = 3.558, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.15629681917201907;  // std dev = 2.822, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4080430825631127;  // std dev = 1.009, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.3241442491184534;  // std dev = 0.773, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4061274264690325;  // std dev = 0.788, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5484647560447484;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.43999155166879617;  // std dev = 0.162, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6620797044386831;  // std dev = 0.110, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.6690255332140564;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.7747211728499152;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12254898395334442;  // std dev = 0.030, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.3302786347940942;  // std dev = 0.057, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return -0.004389779705408843;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.36855761141096205;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.48054777451029906;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32155849789632096;  // std dev = 0.027, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.34269919089875;  // std dev = 1.380, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.0956757258282133;  // std dev = 0.094, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.036662395525432184;  // std dev = 2.844, 94.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=25 */
%   | | | else return 0.10739203805799234;  // std dev = 2.173, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26402414850146927;  // std dev = 0.113, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.04458954935299302;  // std dev = 0.143, 162.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=18 */
%   | | else return -0.07306957132387243;  // std dev = 0.080, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.280484106810521;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2533682451303954;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2098051190706542;  // std dev = 0.906, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5063844340636556;  // std dev = 0.356, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.13359631067243005;  // std dev = 0.117, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.12860381518132227;  // std dev = 0.425, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), follows(E, C) )
%   | | then return 0.21253183215971272;  // std dev = 0.065, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.2705731802242316;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1474010375223593;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.16130941809958907;  // std dev = 1.028, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.34304799033495736;  // std dev = 0.250, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.08296082283873303;  // std dev = 0.081, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23816502851981597;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.0012206696346942667;  // std dev = 1.788, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.0680641120191196;  // std dev = 2.119, 63.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.16011190968386946;  // std dev = 0.995, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.12071648595199631;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18443869881376032;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.24246506936040635;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.046222455302594695;  // std dev = 0.123, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.33529102811368383;  // std dev = 0.471, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12593341361984278;  // std dev = 0.031, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.011551811599494486;  // std dev = 0.941, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.026232811283093165;  // std dev = 1.576, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1563617418253771;  // std dev = 0.008, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.09898427342822201;  // std dev = 0.972, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.1670509417338565;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.02457992595687118;  // std dev = 0.424, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.17491527133052406;  // std dev = 0.079, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then return -0.02716132624218915;  // std dev = 0.112, 244.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=38 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2740549208851562;  // std dev = 0.964, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.40098332763140204;  // std dev = 0.221, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12859062567299706;  // std dev = 0.030, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.13111791545045623;  // std dev = 1.003, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.052888348915345905;  // std dev = 1.326, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.07696691436656167;  // std dev = 0.935, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3002954440240509;  // std dev = 0.228, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.07165791272281015;  // std dev = 0.048, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.06635006426046061;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.047784804285947224;  // std dev = 0.926, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else return -0.005875356515924784;  // std dev = 0.177, 151.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=48 */
Inference time using transfer learning 10.739914178848267
Refined model CLL: -0.106974


******************************************
Best model found
******************************************
Results 

CLL : -0.103716 

AUC ROC : 0.993725 

AUC PR : 0.39413 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 19.910624265670776 

Total Inference Time : 12.216201782226562 

Total revision time: 44.76621055603027
Best scored revision CLL: -0.106974


Results 

CLL : -0.103716 

AUC ROC : 0.993725 

AUC PR : 0.39413 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 44.79233431816101 

Total Inference Time : 12.216201782226562 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.2260138988494873
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(E, C) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5248156017661789;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.739207012361511;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014769142696998184;  // std dev = 0.319, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04489878247426092;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7505511758931249;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11600435727573573;  // std dev = 1.544, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5151788230532698;  // std dev = 0.988, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.860576107764184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5879550920336301;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.022014877091548635;  // std dev = 1.910, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
%   | | | else return 0.017750811758654145;  // std dev = 1.438, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5689695726172096;  // std dev = 0.704, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.13371949655698395;  // std dev = 0.035, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.12905601705506758;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14138525852438366;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.34172345652334984;  // std dev = 0.315, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.3469911419354226;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.599181811880877;  // std dev = 0.045, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08377109690189143;  // std dev = 1.296, 61.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=3 */
%   | | else return -0.126552829701959;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06124250483474082;  // std dev = 1.442, 45.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48333142977697946;  // std dev = 0.464, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15098449488109927;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.1252024014101153;  // std dev = 0.083, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2978426431133043;  // std dev = 0.443, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07923043928807537;  // std dev = 1.164, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10123809545590398;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18507831638307506;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03663929374540383;  // std dev = 0.166, 41.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.011526292650588703;  // std dev = 0.479, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.2580112551514952;  // std dev = 0.805, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11674606937839857;  // std dev = 0.246, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21967962469999902;  // std dev = 0.883, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.101746564883097;  // std dev = 0.023, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43369952413862756;  // std dev = 0.225, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15750502779884837;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20448704960339417;  // std dev = 0.365, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, C) )
%   | | then return -0.09289256362224843;  // std dev = 9.85e-05, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08509893608688805;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.012364089532508083;  // std dev = 0.346, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.010926201412406578;  // std dev = 0.256, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.14702333196346762;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10443097077860487;  // std dev = 0.704, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning 9.755549430847168
Parameter learned model CLL:-0.127097 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.342, 2, 18], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.471, 2, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.319, 31, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.949, 9, 1], 'false,false,false,true': [0.044, 0, 2], 'false,false,false,false': [1.544, 10, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.988, 1, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.057, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.91, 28, 6], 'false,false,false,false': [1.438, 13, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.704, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 36, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true,true': [0.315, 0, 15], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.045, 0, 6], 'false,false,true,false': [1.296, 58, 3], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.442, 27, 18], 'false,true': [0.0, 0, 0], 'false,false,true': [0.464, 0, 7], 'false,false,false,true': [0.095, 5, 0], 'false,false,false,false': [0.083, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.443, 0, 21], 'true,false': [1.164, 51, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.0, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 35, 6], 'false,false,false,true': [0.479, 6, 3], 'false,false,false,false': [0.805, 2, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.246, 1, 16], 'false,true,true,true': [0.883, 1, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.023, 43, 0], 'false,false,true': [0.225, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.188, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.365, 0, 18], 'true,true,false': [0.0, 0, 0], 'true,false,true': [9.85e-05, 42, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.346, 4, 1], 'false,true': [0.256, 4, 2], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.704, 3, 3]}]
{'': [0.22611570247933835, 0.24489795918367352], 'false': [0.18750000000000003, 0.22222222222222213], 'true': [0.08999999999999968, 0.027755102040816385], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [2.3790493384824782e-17, 0.12244897959183677], 'true,false,false': [0.13888888888888892, 0.0], 'false,true,true': [0.0, nan]}
{'': [0.0, 0.13050829972044994], 'false': [0.10157617296852739, 0.16711625372789612], 'false,false': [0.08999999999999998, 0.19311915644022268], 'false,false,false': [0.0009658273954848973, 0.17023842389086116], 'false,true': [nan, 0.10157617296852739], 'false,false,true': [nan, 0.08999999999999998]}
{'': [0.06439495688749124, 0.11436832105108348], 'false': [nan, 0.11436832105108348], 'false,false': [nan, 0.11436832105108376], 'false,false,false': [0.10732909160674999, 0.12931431968814194], 'true': [0.06969688053490719, 0.017597455700606075], 'true,true': [0.06969688053490719, nan], 'true,false': [0.0, 0.0016221108115896943]}
{'': [0.019808510880462364, 3.5116191003033276e-05], 'false': [3.306248811604592e-05, 0.0], 'false,true': [nan, 3.306248811604592e-05], 'false,true,false': [3.500230022453662e-05, -2.7755575615628915e-18], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.006200639558132728, 0.062350257947669754], 'false': [nan, 0.06235025794766965], 'false,false': [0.06312197828441525, 0.0], 'false,false,true': [0.0003318625727438314, 0.027528681304003925], 'true': [0.006612281246824884, 0.0]}
{'': [0.046196748812762256, 0.0986947941463781], 'false': [nan, 0.0986947941463781], 'false,false': [0.030789393737195945, 0.0013910905614260326], 'true': [nan, 0.046196748812762256], 'true,false': [nan, 0.046196748812762256], 'false,false,false': [0.0018156944105156448, 0.0008700530235348121]}
{'': [0.04884225802207042, -2.7755575615628915e-18], 'true': [0.009359756894262198, 0.02462968035704516], 'false': [nan, -2.7755575615628915e-18], 'false,false': [nan, -2.7755575615628915e-18], 'false,false,false': [nan, -2.7755575615628915e-18]}
{'': [-9.25185853854297e-18, 0.043940747108332005], 'false': [nan, 0.04394074710833212], 'false,false': [0.027501469411956463, 0.07310560774650646], 'false,false,false': [0.02546954681336767, 0.10810679710277078], 'true': [-9.25185853854297e-18, nan]}
{'': [0.0604405912538705, 0.03875853773391876], 'false': [0.027035085531982302, 0.0740608092934725], 'false,false': [0.012608828344573747, 0.003200898255556725], 'false,true': [0.1300359988513146, 1.2073801483961928e-05], 'false,true,true': [0.1300359988513146, nan], 'false,false,false': [nan, 0.003200898255556725]}
{'': [0.0201781787256351, 0.04693566342232398], 'false': [0.010889073927580447, 0.07102592030489034], 'false,false': [0.0, 0.08260441522742422], 'false,false,false': [nan, 0.08260441522742422], 'true': [0.0074056621080868835, 0.0029171237257340217], 'true,true': [0.0074056621080868835, nan], 'true,false': [2.3120153146480437e-10, 0.01461696132448227], 'true,false,false': [0.0, 0.02395926020482844]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(A, F).;true;true
4;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;recursion_accounttype(E, B).;true;true
5;false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 3.6399013996124268
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(F, C) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6425503352878773;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6043699167634529;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0.3444674378357556;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09874200417741025;  // std dev = 1.508, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5041725610020245;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(E, A) )
%   | | then return 0.7937015540623363;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6570718219250907;  // std dev = 0.113, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(F, H) )
%   | | | then return -0.11753778274905731;  // std dev = 0.099, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.3008803841927975;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.24215298671977656;  // std dev = 0.160, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.45306473807383774;  // std dev = 0.025, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4900055352433322;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5463756323002589;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.1011207387348416;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.16965468999579575;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.10899301359653156;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.15971045041550633;  // std dev = 0.143, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3510212338270631;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.3051284189486769;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3626252433663028;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.09674583044694905;  // std dev = 0.100, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.15188585965055915;  // std dev = 0.636, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.14689165222351216;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2699724875224041;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.08450145239357879;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.02538138528876036;  // std dev = 0.320, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.30309722797513977;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3626893662017248;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.15239796878030054;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0982251021726005;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.1302760611317588;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.24015789802545934;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.10609894702393753;  // std dev = 0.339, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(D, F), follows(D, G) )
%   | | | then return 0.22790294574321593;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20945780135182832;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.22468212586253547;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08295292066333752;  // std dev = 0.095, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.01953478184904839;  // std dev = 0.189, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   else return -0.11543800008260134;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19370114890885623;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.05381725273210229;  // std dev = 0.355, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return -0.0814811612030956;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2167261604903883;  // std dev = 0.130, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.07763139346647231;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.03233072772364537;  // std dev = 0.336, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.08827648566598141;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.04728900728954478;  // std dev = 0.223, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then return 0.166945409259262;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.1566741835627794;  // std dev = 0.000355, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.202731907000991;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return -0.08276553379521112;  // std dev = 0.339, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return -0.06898574251018781;  // std dev = 0.005, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.10981937286554053;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.029345277966487924;  // std dev = 0.306, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.008111055923930353;  // std dev = 0.221, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.14318607576601405;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.0475475522283498;  // std dev = 0.754, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06448472541705444;  // std dev = 0.007, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0876159818645677;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.0857274005676688;  // std dev = 0.228, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.004471552597995451;  // std dev = 0.344, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1311648267028278;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.07925703239209017;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1639119068965775;  // std dev = 0.426, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
Inference time using transfer learning 26.653607606887817
Refined model CLL: -0.10805


******************************************
Best model found
******************************************
Results 

CLL : -0.101641 

AUC ROC : 0.994069 

AUC PR : 0.34998 

Precision : 0.336761 

Recall : 0.839744 

F1 : 0.480734 

Total Learning Time : 3.6399013996124268 

Total Inference Time : 4.994799613952637 

Total revision time: 12.089902400970459
Best scored revision CLL: -0.10805


Results 

CLL : -0.101641 

AUC ROC : 0.994069 

AUC PR : 0.34998 

Precision : 0.336761 

Recall : 0.839744 

F1 : 0.480734 

Total Learning Time : 12.116026163101196 

Total Inference Time : 4.994799613952637 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.498617172241211
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995117;  // std dev = 1.378, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.07518439823382113;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7294533872440251;  // std dev = 1.33e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05509302158647174;  // std dev = 0.239, 83.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00794298333209421;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7559661173136428;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1603786773914427;  // std dev = 2.086, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4910271567648287;  // std dev = 1.379, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.86796993115014;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5957964056724737;  // std dev = 0.121, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2318922691337754;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2318922691337754;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007952379699414208;  // std dev = 2.586, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.07047007171893072;  // std dev = 1.600, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5268595071439033;  // std dev = 1.201, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12121824787509172;  // std dev = 0.038, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.11230456862773447;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15682087856538446;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.301873002104646;  // std dev = 1.057, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0.35350548252785996;  // std dev = 0.102, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.1783978509170479;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.607772359934074;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0728453652374935;  // std dev = 1.703, 91.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=5 */
%   | | else return -0.11791774469121614;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025568810082926524;  // std dev = 2.042, 113.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.08743361777377082;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4960071381041072;  // std dev = 0.623, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11941749551132085;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.1216807655287149;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2944840484860905;  // std dev = 0.565, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.06795817548066234;  // std dev = 1.502, 101.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.060889738554549946;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1822139588360488;  // std dev = 1.015, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05177304590297008;  // std dev = 0.159, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.015201961453875657;  // std dev = 0.979, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.06517151511037154;  // std dev = 1.231, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15376760859107172;  // std dev = 0.175, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3528303870084047;  // std dev = 0.245, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09147029769583462;  // std dev = 0.031, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4454113766664476;  // std dev = 0.482, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11256297096549875;  // std dev = 0.073, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13484576080198954;  // std dev = 1.471, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else return 0.22507367372078957;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08353436947041896;  // std dev = 0.014, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08401115537322194;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03939469389921163;  // std dev = 0.380, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.030783277721707778;  // std dev = 0.661, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21401343639011505;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025413170705981106;  // std dev = 0.984, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning 9.542634963989258
Parameter learned model CLL:-0.112326 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.378, 2, 38], 'true,false,true': [6.99e-08, 71, 0], 'true,false,false,true': [0.966, 14, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,false': [0.481, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.33e-07, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.239, 76, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.935, 7, 1], 'false,false,false,true': [0.089, 0, 3], 'false,false,false,false': [2.086, 16, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.379, 3, 28], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.121, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.816, 1, 2], 'false,false,true,false': [0.816, 1, 2], 'false,false,false,true': [2.586, 69, 11], 'false,false,false,false': [1.6, 32, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.201, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.038, 59, 0], 'false,true,false,false': [5.27e-09, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.082, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.057, 1, 30], 'true,false': [0.102, 0, 2], 'false,true,true': [0.894, 1, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.09, 0, 9], 'false,false,true,false': [1.703, 86, 5], 'false,false,false': [1.32e-09, 3, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.042, 78, 35], 'false,true': [0.866, 1, 3], 'false,false,true': [0.623, 0, 12], 'false,false,false,true': [0.043, 11, 0], 'false,false,false,false': [0.074, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.565, 0, 42], 'true,false': [1.502, 95, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.823, 5, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.015, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 62, 7], 'false,false,false,true': [0.979, 19, 8], 'false,false,false,false': [1.231, 9, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.175, 1, 32], 'false,true,true,true': [0.245, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 86, 0], 'false,false,true': [0.482, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.073, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.471, 2, 36], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.014, 74, 0], 'true,false,false,true': [1.86e-09, 3, 0], 'true,false,false,false': [0.38, 7, 1], 'false,true': [0.661, 10, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.984, 10, 3]}]
{'': [0.21371882086167932, 0.2414266117969817], 'false': [0.24609375000000003, 0.2314049586776858], 'false,true': [-2.5376526277146434e-16, -9.25185853854297e-18], 'true': [0.04750000000000139, 0.011492698756084392], 'true,false': [6.880255363874209e-17, 0.06222222222222227], 'true,false,false': [0.06222222222222227, nan], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [5.730183352904034e-16, 0.10615751005966022], 'false': [0.056942324984160804, 0.18628722217298754], 'false,false': [0.10937499999999997, 0.19650703853902748], 'false,false,false': [0.0026634350514235607, 0.1813236669090802], 'false,false,true': [nan, 0.10937499999999997], 'false,true': [nan, 0.056942324984160804]}
{'': [0.059372777415663436, 0.09139285873412832], 'false': [nan, 0.09139285873412833], 'false,false': [0.22222222222222224, 0.08124394115156397], 'false,false,true': [0.22222222222222224, 0.22222222222222224], 'false,false,false': [0.08360159645775436, 0.07313608477884292], 'true': [0.061355061463377554, 0.01755892288354638], 'true,true': [0.061355061463377554, nan], 'true,false': [0.0, 0.004892290185326405]}
{'': [0.028268221615811575, 0.00031860299757602653], 'false': [3.30320620037187e-05, 0.00037415432522869274], 'false,false': [nan, 0.00037415432522869274], 'false,false,false': [nan, 0.00037415432522869274], 'false,true': [nan, 3.30320620037187e-05], 'false,true,false': [2.5039791412129575e-05, 1.734723475976807e-18]}
{'': [0.03431202998016914, 0.07141843683299944], 'false': [0.16, 0.06539235890041005], 'false,true': [0.16, nan], 'false,false': [0.06702483923418344, 2.3129646346357427e-18], 'false,false,true': [0.0009033619646996942, 0.03187268209350442], 'true': [0.03603012904009341, 0.0051771520036390795]}
{'': [0.03689354547135507, 0.1031690625313772], 'false': [0.18749999999999997, 0.09404578715019701], 'false,false': [0.03239595290677003, 0.0002942147810970086], 'true': [nan, 0.036893545471355066], 'true,false': [nan, 0.03689354547135507], 'false,false,false': [0.00017053876648653624, 0.0003891349404611587]}
{'': [0.04525105284224636, 0.09680640668573791], 'false': [nan, 0.09680640668573791], 'false,false': [nan, 0.09680640668573791], 'false,false,false': [nan, 0.09680640668573791], 'true': [0.0075925746663231845, 0.02232847308499036]}
{'': [0.03218547572775072, 0.04054744164271428], 'false': [nan, 0.04054744164271427], 'false,false': [0.025354212264500256, 0.062372201869794294], 'false,false,false': [0.03549729192590892, 0.11650387702495454], 'true': [0.03218547572775072, nan]}
{'': [0.030701280920889442, 0.03289880445019006], 'false': [0.01905407730305398, 0.07545596323578728], 'false,false': [0.0290282707567443, 0.000294993960228145], 'false,true': [0.005982268129829516, 1.1232360909013824e-05], 'false,true,true': [0.005982268129829516, nan], 'false,false,false': [nan, 0.000294993960228145]}
{'': [0.0291147509714129, 0.04644435806316546], 'false': [0.025714505004284613, 0.07158033090427819], 'false,false': [0.0, 0.07454579161774114], 'false,false,false': [nan, 0.07454579161774114], 'true': [0.05447007901820835, 0.0018697675104525618], 'true,true': [0.056929871468840446, 0.0], 'true,false': [2.6497710676828896e-06, 0.013540479882569319], 'true,false,false': [1.1564823173178713e-18, 0.01807526112004322]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.5668981075286865
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7303180776239525;  // std dev = 0.067, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return -0.08404262648680987;  // std dev = 1.200, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.6316903052501732;  // std dev = 0.849, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.13069648940795903;  // std dev = 0.051, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7520447295508923;  // std dev = 0.080, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.035120659044025296;  // std dev = 1.341, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.28004300806391125;  // std dev = 1.513, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5630319878993464;  // std dev = 0.045, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.3633777802668653;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.7521590807928689;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.36273843777166626;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.36119559845841637;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08743051782569312;  // std dev = 1.218, 63.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=2 */
%   | | | else return -0.0020190861904628207;  // std dev = 1.325, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2779410848158401;  // std dev = 1.309, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.005482996521244334;  // std dev = 1.520, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.3814030841494571;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.5245191192379112;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.5045022290028913;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.014323021699083657;  // std dev = 1.029, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.4712368284721793;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6479224788912986;  // std dev = 0.211, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7725641117172408;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.10926030102585524;  // std dev = 0.005, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.1804259706059288;  // std dev = 0.095, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3321627766929381;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.39499492917722884;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2124957421518734;  // std dev = 0.552, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4611612932098666;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3574574557770974;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5069554540279501;  // std dev = 0.228, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0692609071593299;  // std dev = 1.438, 80.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=5 */
%   | | else return -0.09414982533815043;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26951856541657415;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.048246939614081476;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.06222158002914208;  // std dev = 1.322, 74.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=6 */
%   | | | else return 0.010662435762142746;  // std dev = 0.366, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.1241680417180172;  // std dev = 0.133, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2801184496668093;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.36946448727527004;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5894811077177287;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1254246622717506;  // std dev = 0.031, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, A) )
%   | | | then return 0.21414807514145412;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24770194970196333;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.243634806029275;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36532274247784036;  // std dev = 0.281, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09416034167030919;  // std dev = 0.016, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.28861282750252004;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), follows(I, A) )
%   | | | then return -0.07889795851550309;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.14516413382315296;  // std dev = 0.527, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.07577902078682086;  // std dev = 0.315, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.18553960596792018;  // std dev = 0.013, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.018953294582142788;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.06680629426946777;  // std dev = 0.937, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return -0.07432810588274681;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.029829786779767508;  // std dev = 0.120, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2059611424330024;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11375679677048614;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07375238963660932;  // std dev = 0.419, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.16116758429224354;  // std dev = 0.797, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1642343861515715;  // std dev = 0.027, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.058991056343208094;  // std dev = 0.773, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.18097924065450835;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33207663089205686;  // std dev = 0.225, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07526976578110685;  // std dev = 0.052, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.21976886350140798;  // std dev = 0.089, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17387542544263498;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10039884035171477;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.17422742948232584;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13944629925992297;  // std dev = 0.174, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return 0.1377450785933516;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.06675842614774545;  // std dev = 0.033, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return -0.013358087808413521;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.09011620906093366;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.11020727307950468;  // std dev = 0.287, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.2708954533446682;  // std dev = 0.713, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09955307817796753;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.009438095545256032;  // std dev = 0.811, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning 17.658574104309082
Refined model CLL: -0.104596


******************************************
Best model found
******************************************
Results 

CLL : -0.10222 

AUC ROC : 0.995082 

AUC PR : 0.3947 

Precision : 0.345898 

Recall : 1.0 

F1 : 0.514003 

Total Learning Time : 7.5668981075286865 

Total Inference Time : 6.431209087371826 

Total revision time: 19.148457765579224
Best scored revision CLL: -0.104596


Results 

CLL : -0.10222 

AUC ROC : 0.995082 

AUC PR : 0.3947 

Precision : 0.345898 

Recall : 1.0 

F1 : 0.514003 

Total Learning Time : 19.17458152770996 

Total Inference Time : 6.431209087371826 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8737022876739502
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.809761838325319;  // std dev = 1.690, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7112163717738741;  // std dev = 0.997, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05313405701522257;  // std dev = 0.238, 130.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05960498480467935;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.75476265827241;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0925936065118672;  // std dev = 2.652, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5573693449845777;  // std dev = 1.040, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.7395001536749544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7929999690604541;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5942871701376576;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5693063864037581;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5693063864037582;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05165495248073992;  // std dev = 2.684, 130.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=11 */
%   | | | else return 0.02400220921916344;  // std dev = 2.266, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5028746777478198;  // std dev = 1.712, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1162363287293202;  // std dev = 0.082, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return -0.12266329693062362;  // std dev = 0.006, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14840625769859161;  // std dev = 0.147, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3150807443695111;  // std dev = 0.942, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.39121600873850604;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3114907148426163;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5664272791045433;  // std dev = 0.969, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.0795433453663583;  // std dev = 1.910, 153.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=6 */
%   | | else return -0.10723053588485729;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016205327374631536;  // std dev = 2.540, 176.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=52 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.14479678220759087;  // std dev = 0.952, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.538906426717069;  // std dev = 0.660, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1159184891779222;  // std dev = 0.085, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.1183363060905512;  // std dev = 0.110, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.284081955180794;  // std dev = 1.033, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return -0.06806859626072428;  // std dev = 1.683, 138.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015951392728625818;  // std dev = 0.507, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15912240759177837;  // std dev = 1.389, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.21260237334423238;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04830171411615798;  // std dev = 0.141, 120.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.026441926266890025;  // std dev = 1.283, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | | else return 0.05141091703323142;  // std dev = 1.486, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19259172862278187;  // std dev = 0.059, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28144312048609316;  // std dev = 0.543, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08922381920247095;  // std dev = 0.065, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46155160624978037;  // std dev = 0.473, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11109821818270223;  // std dev = 0.123, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16794847170176458;  // std dev = 1.197, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.1559377781604993;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08153508546279127;  // std dev = 0.019, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07983224313844318;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.012030025991110176;  // std dev = 0.424, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.016830631633140705;  // std dev = 0.728, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1970209089752698;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033198511099238784;  // std dev = 1.362, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning 10.01782512664795
Parameter learned model CLL:-0.110758 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.69, 3, 59], 'true,false,true': [6.66e-08, 115, 0], 'true,false,false,true': [0.975, 19, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.487, 11, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.997, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.238, 119, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.086, 0, 3], 'false,false,false,false': [2.652, 31, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.04, 1, 40], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.117, 0, 2], 'true,false,false': [0.117, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 7], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.684, 119, 11], 'false,false,false,false': [2.266, 34, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.712, 2, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.082, 102, 0], 'false,true,false,false': [0.006, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.147, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.942, 1, 42], 'true,false': [0.125, 0, 4], 'false,true,true': [2.11e-08, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.969, 1, 12], 'false,false,true,false': [1.91, 147, 6], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.54, 124, 52], 'false,true': [0.952, 1, 8], 'false,false,true': [0.66, 0, 15], 'false,false,false,true': [0.085, 18, 0], 'false,false,false,false': [0.11, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.033, 1, 63], 'true,false': [1.683, 130, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.507, 8, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.389, 2, 47], 'true,false,true': [0.022, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 109, 11], 'false,false,false,true': [1.283, 31, 8], 'false,false,false,false': [1.486, 17, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.059, 0, 46], 'false,true,true,true': [0.543, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.065, 124, 0], 'false,false,true': [0.473, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.123, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.197, 1, 54], 'true,true,false': [0.01, 0, 5], 'true,false,true': [0.019, 105, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.424, 5, 2], 'false,true': [0.728, 15, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.362, 11, 6]}]
{'': [0.21197500000000033, 0.22222222222222174], 'false': [0.20659722222222232, 0.23765432098765438], 'true': [0.04604578563995787, 0.01428271371560588], 'false,true': [-2.5376526277146434e-16, -3.2653618371328133e-18], 'true,false': [3.8616453030440226e-17, 0.07939508506616262], 'true,false,false': [0.04750000000000004, 0.22222222222222224], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.019895537658490524, 0.09415965329339232], 'false': [0.05656632760490432, 0.16287135521492196], 'false,false': [0.06632653061224486, 0.18375991097349936], 'false,false,false': [0.0024906617751719504, 0.16747652428036883], 'false,false,true': [nan, 0.06632653061224486], 'false,true': [nan, 0.05656632760490432]}
{'': [0.02647248395654672, 0.08938856536980302], 'false': [nan, 0.08938856536980291], 'false,false': [2.0185873175002846e-16, 0.07317536111576249], 'false,false,false': [0.055395561180270836, 0.12519875292365187], 'true': [0.026510413683503233, 0.014931027685922516], 'true,true': [0.026367208389812505, 0.0], 'true,false': [0.00682364440618366, 0.0045412392901223635], 'false,false,true': [1.2688263138573217e-16, 0.0]}
{'': [0.03808343767547281, 0.00032852152477925187], 'false': [5.9946149861848786e-05, 0.0008041687472794237], 'false,false': [nan, 0.0008041687472794237], 'false,false,false': [nan, 0.0008041687472794237], 'false,true': [nan, 5.994614986185403e-05], 'false,true,false': [6.610085406851665e-05, 1.6601231035373586e-06]}
{'': [0.01967449970885884, 0.05842782785684427], 'false': [4.0371746350005693e-17, 0.05508286756034071], 'false,false': [0.05775418446251651, -6.1679056923619804e-18], 'false,false,true': [0.07227255662422429, 0.023842195961093413], 'true': [0.02064684328642946, 0.003918553597567903], 'false,true': [4.0371746350005693e-17, nan]}
{'': [0.036662485147896294, 0.10021185819594627], 'false': [0.10072578420329184, 0.0994730768998102], 'false,false': [0.02905490581847149, 0.000551774851796294], 'true': [nan, 0.03666248514789628], 'true,false': [nan, 0.036662485147896294], 'false,false,false': [0.00040124997123452657, 0.0007081477058051631]}
{'': [0.04613892821761916, 0.021392329241978317], 'true': [0.01666797461121003, 0.020516316369668195], 'false': [nan, 0.021392329241978317], 'false,false': [nan, 0.021392329241978317], 'false,false,false': [nan, 0.021392329241978317]}
{'': [0.03793405028533231, 0.0352591967261623], 'true': [0.0393603247516424, 0.00024238017235675424], 'false': [nan, 0.03525919672616207], 'false,false': [0.019983104420541728, 0.06261611818849167], 'false,false,false': [0.042234324069407705, 0.09198444564491394], 'true,false': [0.00024238017235675424, nan]}
{'': [0.00344486304001478, 0.03156469632231157], 'false': [0.017315935757869, 0.08142522180606776], 'false,false': [0.020297589474012903, 0.0007192691755224629], 'false,true': [0.016393045158901227, 3.376541560844652e-05], 'false,true,true': [0.016393045158901227, nan], 'false,false,false': [nan, 0.0007192691755224629]}
{'': [0.021976725203811037, 0.06039724134085136], 'false': [0.024096325004764177, 0.10440825602712896], 'false,false': [0.0, 0.10905893047715778], 'false,false,false': [nan, 0.10905893047715778], 'true': [0.023875630999454868, 0.0019038309071623338], 'true,true': [0.026032280927587047, 2.0246427270664835e-05], 'true,false': [3.4293239046044917e-06, 0.01091818463160581], 'true,false,false': [-2.135044278125301e-18, 0.025709673514899643]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.727644205093384
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.24276431971489695;  // std dev = 0.487, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7223246208041497;  // std dev = 0.138, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.07034128739321677;  // std dev = 2.001, 92.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
%   | | | else return -0.09415137738989711;  // std dev = 0.829, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.10918263327750655;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14081736672249348;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.754967719201899;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10004367450619615;  // std dev = 2.636, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5332087035528424;  // std dev = 0.155, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.5947969362557473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6753484259775961;  // std dev = 0.260, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5546622641289289;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.35466226412892893;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7341102570980128;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12144099001070699;  // std dev = 0.117, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16162068575293695;  // std dev = 1.498, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.0907118378150241;  // std dev = 2.071, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, F), follows(F, E) )
%   | | | then return 0.433665111437123;  // std dev = 0.313, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2569085655107211;  // std dev = 0.602, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return -0.27242445308471874;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.48386229460726005;  // std dev = 0.175, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return 0.519028821996089;  // std dev = 0.217, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3671187483792442;  // std dev = 0.853, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6637803666718682;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7903704006248256;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11687813896031589;  // std dev = 0.026, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3236051775094875;  // std dev = 0.055, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.16898759316281745;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4785812114427594;  // std dev = 0.235, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1016831191863592;  // std dev = 0.964, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3172757257588862;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17701098331874238;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.06919756022205306;  // std dev = 1.402, 138.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=7 */
%   | | | else return 0.039799929703764766;  // std dev = 2.104, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return -0.1008646348506519;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.25522197801507923;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.00403091008409967;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2948054760618797;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, A), follows(I, G) )
%   | | | then return -0.06514682935843547;  // std dev = 0.930, 86.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=5 */
%   | | | else return 0.015593050992044678;  // std dev = 1.157, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | else return -0.08950376753822502;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.3133189043669753;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.5195381696140549;  // std dev = 0.105, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.14227727701038614;  // std dev = 0.038, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.19556148885480598;  // std dev = 0.147, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.3901719481312156;  // std dev = 0.301, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.08145927480645836;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08592895592323163;  // std dev = 0.031, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.33067073472891234;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1335926894342659;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.004189719058420146;  // std dev = 0.661, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.03935476814107819;  // std dev = 1.165, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else return 0.03623111323864673;  // std dev = 0.166, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.07501607509432877;  // std dev = 1.643, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | | else return 0.1797002579093292;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21571349512300256;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.23945332844393635;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.1685025553468744;  // std dev = 0.392, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.08008762671056581;  // std dev = 0.047, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.21004388142830802;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.015232366729028883;  // std dev = 0.871, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.04874944236524685;  // std dev = 1.238, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16682145700286205;  // std dev = 0.081, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -1.4930988725445627E-4;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.20534336349481003;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.10381176900708862;  // std dev = 0.927, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.34288845328164225;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.07422661910215722;  // std dev = 0.049, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3176944500043355;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4516714191473154;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.14238724746563622;  // std dev = 0.119, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16488807778027437;  // std dev = 0.046, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.19817087542269873;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06603078998783729;  // std dev = 0.034, 140.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18983368757905206;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10337359114381649;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.043506764194551316;  // std dev = 0.446, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.30735370998970557;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.04036709565022613;  // std dev = 0.539, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.002043083594852241;  // std dev = 0.890, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning 14.03475284576416
Refined model CLL: -0.107156


******************************************
Best model found
******************************************
Results 

CLL : -0.107889 

AUC ROC : 0.99409 

AUC PR : 0.364811 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 7.727644205093384 

Total Inference Time : 7.4757421016693115 

Total revision time: 22.345758199691772
Best scored revision CLL: -0.107156


Results 

CLL : -0.107889 

AUC ROC : 0.99409 

AUC PR : 0.364811 

Precision : 0.339168 

Recall : 0.99359 

F1 : 0.50571 

Total Learning Time : 22.37188196182251 

Total Inference Time : 7.4757421016693115 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.208728551864624
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8340525495573435;  // std dev = 1.397, 83.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10018439823382112;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.35814893509951234;  // std dev = 0.500, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7259362930920047;  // std dev = 0.108, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04425779387175164;  // std dev = 0.250, 157.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=15 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0675876055465522;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7417903431046245;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07562999474394466;  // std dev = 2.911, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5428754074304275;  // std dev = 1.213, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | else return 0.7330603139605791;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7923642379302728;  // std dev = 0.120, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5794370788969722;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4597163988190366;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5597163988190367;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05994641983043517;  // std dev = 3.039, 187.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=14 */
%   | | | else return 0.018280543877881066;  // std dev = 2.552, 49.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4872617022404782;  // std dev = 2.164, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11568385535773022;  // std dev = 0.076, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return -0.12289633596779624;  // std dev = 0.004, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16572752784181;  // std dev = 0.253, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2979708335203695;  // std dev = 1.436, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.0497685618891214;  // std dev = 1.185, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32157650765480966;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5891865075062367;  // std dev = 0.922, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.07794268238600206;  // std dev = 2.015, 172.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=7 */
%   | | else return -0.10494936663229738;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03618222820010601;  // std dev = 2.911, 206.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26456046389053883;  // std dev = 0.135, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4735171557176484;  // std dev = 1.290, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11420100020067972;  // std dev = 0.127, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11917857713322033;  // std dev = 0.200, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2830153968127959;  // std dev = 1.356, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | else return -0.07416039439228654;  // std dev = 1.825, 184.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014762911285033693;  // std dev = 0.561, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16671022073936104;  // std dev = 1.394, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else if ( follows(A, E) )
%   | | then return 0.23814298930291578;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.050283863312969954;  // std dev = 0.141, 165.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.005404034311197486;  // std dev = 1.256, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | | else return 0.04604377634996597;  // std dev = 1.569, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13762835514404892;  // std dev = 0.224, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27382252224665576;  // std dev = 0.631, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09001264777531273;  // std dev = 0.067, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4644514436629648;  // std dev = 0.481, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11911365955886821;  // std dev = 0.181, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15051446302415333;  // std dev = 1.897, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | else return 0.014032340332478452;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08289394718922294;  // std dev = 0.024, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08036663846667029;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.0578636183367189;  // std dev = 0.761, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.015216421888521481;  // std dev = 1.208, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26905242051849165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06406700139873309;  // std dev = 1.178, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning 9.742713689804077
Parameter learned model CLL:-0.109825 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 81], 'true,false,true': [0.0, 158, 0], 'true,false,false,true': [0.979, 23, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,false': [0.5, 8, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.108, 0, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.25, 142, 15], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.968, 15, 1], 'false,false,false,true': [0.077, 0, 4], 'false,false,false,false': [2.911, 37, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.213, 2, 55], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.12, 0, 2], 'true,false,false': [0.102, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.039, 173, 14], 'false,false,false,false': [2.552, 40, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.164, 3, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.076, 128, 0], 'false,true,false,false': [0.004, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.253, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.436, 2, 58], 'true,false': [1.185, 2, 4], 'false,true,true': [0.041, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.922, 1, 16], 'false,false,true,false': [2.015, 165, 7], 'false,false,false': [2.95e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.911, 135, 71], 'false,true': [0.135, 0, 11], 'false,false,true': [1.29, 1, 18], 'false,false,false,true': [0.127, 25, 0], 'false,false,false,false': [0.2, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.356, 1, 85], 'true,false': [1.825, 175, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.561, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.394, 2, 65], 'true,false,true': [0.045, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 150, 15], 'false,false,false,true': [1.256, 35, 10], 'false,false,false,false': [1.569, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.224, 4, 62], 'false,true,true,true': [0.631, 0, 25], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 167, 0], 'false,false,true': [0.481, 0, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.181, 33, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.897, 3, 74], 'true,true,false': [0.939, 1, 7], 'true,false,true': [0.024, 117, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.761, 7, 2], 'false,true': [1.208, 26, 9], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.178, 12, 7]}]
{'': [0.21378647805747444, 0.24271267102914884], 'false': [0.23040000000000005, 0.24999999999999997], 'false,true': [-2.9605947323337506e-16, -6.938893903907228e-18], 'true': [0.023515749745971405, 0.010693937180423503], 'true,false': [-1.4053456007913375e-16, 0.0685871056241427], 'true,false,false': [0.0399305555555556, 0.22222222222222224], 'false,true,true': [-2.9605947323337506e-16, nan]}
{'': [0.0001743436495370946, 0.09723491137277193], 'false': [0.06239767545551853, 0.1645252986949929], 'false,false': [0.05859374999999996, 0.1874368959398216], 'false,false,false': [0.001494136213538555, 0.1694404937751078], 'false,true': [nan, 0.06239767545551853], 'false,false,true': [nan, 0.05859374999999996]}
{'': [0.025793851959027836, 0.08454807799282597], 'false': [nan, 0.08454807799282607], 'false,false': [0.05859375000000014, 0.06773021473406594], 'false,false,false': [0.04938052897356275, 0.13290971488052147], 'false,false,true': [0.09000000000000008, -7.401486830834377e-17], 'true': [0.025970575987618812, 0.0142347619149615], 'true,true': [0.025802574288582087, 0.0], 'true,false': [0.007226252122687682, 0.002626358459767386]}
{'': [0.04546625870932768, 0.0007485456603946397], 'false': [4.514741847020309e-05, 0.0015605808479753876], 'false,false': [nan, 0.0015605808479753876], 'false,false,false': [nan, 0.0015605808479753876], 'false,true': [nan, 4.5147418470194606e-05], 'false,true,false': [4.5661056667520294e-05, 4.692161925533911e-07]}
{'': [0.05759512909665366, 0.06246171436660633], 'false': [0.00011334906535534669, 0.05885863231940377], 'false,false': [0.06241985007703781, 8.540177112501205e-18], 'false,false,true': [0.049994984039107536, 0.02361591534151161], 'true': [0.03436960018625931, 0.23384644761613202], 'false,true': [0.00011334906535534669, nan]}
{'': [0.041132929400221105, 0.0814004683024148], 'false': [0.0016547271765556713, 0.08548676976240674], 'false,false': [0.08752613112882024, 0.0009441769240328949], 'true': [nan, 0.04113292940022109], 'true,false': [nan, 0.041132929400221105], 'false,false,false': [0.0006449825310050627, 0.0011475637580506625]}
{'': [0.04683870463516009, 0.018496987357461345], 'true': [0.02137359183623968, 0.018106021585404867], 'false': [nan, 0.018496987357461345], 'false,false': [nan, 0.018496987357461345], 'false,false,false': [nan, 0.018496987357461345]}
{'': [0.028335096627845165, 0.03198475682535287], 'false': [nan, 0.0319847568253528], 'false,false': [0.019771275936222226, 0.05647156093079286], 'false,false,false': [0.0350351330109887, 0.09116669790152215], 'true': [0.029002635529922507, 0.0010178056046047448], 'true,false': [0.0010178056046047448, nan]}
{'': [0.0501948586287388, 0.029461636209986226], 'false': [0.017090982578949677, 0.07478503890009451], 'false,false': [0.017810585125891176, 0.0009876296882361483], 'false,true': [0.015938004324267032, 2.7121751462607587e-05], 'false,true,true': [0.015938004324267032, nan], 'false,false,false': [nan, 0.0009876296882361483]}
{'': [0.0336338713471609, 0.05433956467287187], 'false': [0.041668003787582106, 0.07141363955220378], 'false,false': [0.0, 0.07307130105762936], 'false,false,false': [nan, 0.07307130105762936], 'true': [0.05429585765170803, 0.004009169904284892], 'true,true': [0.04673658391256911, 0.11017966179432322], 'true,false': [4.769801268015285e-06, 0.02009236179462008], 'true,false,false': [-5.551115123125783e-18, 0.06439282300605778]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.083338260650635
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8432235619651843;  // std dev = 0.121, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12958112625018134;  // std dev = 0.110, 163.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7073103431748314;  // std dev = 0.134, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.6455528534068964;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.05296246184680192;  // std dev = 2.748, 129.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=11 */
%   | | | else return 0.08477064028426204;  // std dev = 0.733, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.05054019020716392;  // std dev = 0.245, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026796950357968773;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12679695035796873;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5422198280150733;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11582780966436149;  // std dev = 2.740, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.580558309786052;  // std dev = 0.057, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.7821271250074644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6980487959128515;  // std dev = 0.263, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5670913548925088;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.41918794141731797;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6364973956645672;  // std dev = 0.951, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1212486594989916;  // std dev = 0.060, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06150156801708654;  // std dev = 1.781, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.10609561471845196;  // std dev = 2.078, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.4200812475173226;  // std dev = 0.034, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.26960811718195365;  // std dev = 1.468, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( follows(A, E), follows(E, A) )
%   | | | then return 0.3522916908744812;  // std dev = 0.846, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5029633389921842;  // std dev = 0.465, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.49940068380469016;  // std dev = 0.203, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6774628589031889;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7495994075963489;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(I, A) )
%   | then return -0.10895608325310775;  // std dev = 0.003, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return -0.15272875221983911;  // std dev = 0.071, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.33895173106709914;  // std dev = 0.138, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3341630056250786;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16292678210196673;  // std dev = 0.959, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.18063392679844723;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.08851543712776055;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3056387309424705;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3352949360594472;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, J) )
%   | | then return -0.04315571154259827;  // std dev = 0.194, 220.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=23 */
%   | | else return -0.09224027892448386;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.22863896572246747;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.2835085763342727;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.18950318118450107;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.26729125890988703;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05384572159250363;  // std dev = 1.569, 110.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=8 */
%   | | | else return -0.06343319810052424;  // std dev = 0.782, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2737977256090036;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.5113371908627623;  // std dev = 0.133, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11558987935627164;  // std dev = 0.028, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.1762432661253471;  // std dev = 0.983, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.20833018418012958;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21660180671628654;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.35997486439711424;  // std dev = 0.128, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4090600693631018;  // std dev = 0.120, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09085783798398629;  // std dev = 0.033, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.20998783858863942;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0022242487919288513;  // std dev = 1.096, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0.05882908463780811;  // std dev = 1.363, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16319075355089044;  // std dev = 0.134, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.10018260493429947;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.2113925899106649;  // std dev = 0.096, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07279711109731221;  // std dev = 0.068, 109.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=2 */
%   | | else return -3.91455914754843E-4;  // std dev = 0.220, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30462143694272464;  // std dev = 0.396, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11123178693280876;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.045651226659924826;  // std dev = 0.712, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.0011639710370372036;  // std dev = 1.266, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16033650315120418;  // std dev = 0.014, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.05387879634525213;  // std dev = 1.124, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1646297038499834;  // std dev = 0.258, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19750381974491937;  // std dev = 0.054, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.1625876632048991;  // std dev = 0.280, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return -0.08004195068179368;  // std dev = 0.068, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.35297355213019016;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3246953358279844;  // std dev = 0.894, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.11958559202754783;  // std dev = 0.026, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.13969982909368808;  // std dev = 0.058, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return -0.0636683606165133;  // std dev = 1.508, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0.22395418140643852;  // std dev = 0.111, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06959385458189812;  // std dev = 0.042, 151.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return -0.0037031966207437253;  // std dev = 0.134, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03855403145620301;  // std dev = 0.166, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.26538410267398926;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.038191835188064446;  // std dev = 0.557, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0906510599217222;  // std dev = 0.920, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning 13.818607091903687
Refined model CLL: -0.105657


******************************************
Best model found
******************************************
Results 

CLL : -0.105524 

AUC ROC : 0.994545 

AUC PR : 0.345614 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 13.083338260650635 

Total Inference Time : 10.878759384155273 

Total revision time: 32.661864280700684
Best scored revision CLL: -0.105657


Results 

CLL : -0.105524 

AUC ROC : 0.994545 

AUC PR : 0.345614 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 32.68798804283142 

Total Inference Time : 10.878759384155273 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.4194552898406982
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6586014469746759;  // std dev = 2.310, 88.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03412031080523637;  // std dev = 0.268, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08483820624339021;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5662343968148907;  // std dev = 0.822, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09124372323845216;  // std dev = 3.287, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.564520004157451;  // std dev = 1.359, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7318979230069836;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.724682886006554;  // std dev = 0.218, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6305357751123222;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5772639205890396;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5772639205890396;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03735911721400372;  // std dev = 3.676, 199.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=21 */
%   | | | else return 0.013414863540559143;  // std dev = 2.863, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49765377138473693;  // std dev = 2.567, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11978188623288898;  // std dev = 0.244, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12315519252831968;  // std dev = 0.001, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14909358416002555;  // std dev = 0.144, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31420453367858914;  // std dev = 1.410, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.3823847179747367;  // std dev = 0.168, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3179158770955324;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6368478822948801;  // std dev = 0.198, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08733063321715702;  // std dev = 2.375, 253.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=9 */
%   | | else return -0.10523623875050857;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023606386237171484;  // std dev = 3.534, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2499796331094909;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5443187406229876;  // std dev = 0.767, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11502041820653504;  // std dev = 0.218, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.11636114981042658;  // std dev = 0.141, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27923376825599283;  // std dev = 1.694, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07540100474926666;  // std dev = 2.052, 248.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021178041183442717;  // std dev = 0.666, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1658998674638254;  // std dev = 1.699, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.16807012041750224;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.049370199517092116;  // std dev = 0.158, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 2.3797345375025026E-4;  // std dev = 1.382, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.15713948709467904;  // std dev = 1.536, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16214054032229816;  // std dev = 0.169, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25132515500901964;  // std dev = 1.285, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09049735143319983;  // std dev = 0.130, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43866583626823613;  // std dev = 0.607, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11534896491686138;  // std dev = 0.163, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17578592201970059;  // std dev = 1.556, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14696504437199964;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08289457594118405;  // std dev = 0.018, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0808368478843958;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.041621316665470594;  // std dev = 0.499, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02431261312777974;  // std dev = 0.979, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2255693982976794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08016230774884921;  // std dev = 1.267, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning 10.284576177597046
Parameter learned model CLL:-0.111585 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 180, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.31, 6, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 178, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.822, 1, 4], 'false,false,false,false': [3.287, 49, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.359, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.218, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.676, 178, 21], 'false,false,false,false': [2.863, 55, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.567, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.244, 169, 0], 'false,true,false,false': [0.001, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.41, 2, 73], 'true,false': [0.168, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.198, 0, 23], 'false,false,true,false': [2.375, 244, 9], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.534, 189, 91], 'false,true': [0.041, 0, 13], 'false,false,true': [0.767, 0, 22], 'false,false,false,true': [0.218, 42, 0], 'false,false,false,false': [0.141, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.694, 2, 107], 'true,false': [2.052, 237, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.666, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.699, 3, 80], 'true,false,true': [0.046, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 184, 22], 'false,false,false,true': [1.382, 46, 13], 'false,false,false,false': [1.536, 12, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.169, 3, 77], 'false,true,true,true': [1.285, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.13, 223, 0], 'false,false,true': [0.607, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.556, 2, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.018, 171, 0], 'true,false,false,true': [3.73e-09, 15, 0], 'true,false,false,false': [0.499, 8, 2], 'false,true': [0.979, 24, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.267, 13, 8]}]
{'': [0.22398543184183364, 0.2049164946519049], 'true': [0.027500889996442155, 0.009707804690503483], 'false': [0.19834710743801603, 0.2140309155766945], 'false,true': [-1.4802973661668753e-16, 2.7755575615628914e-17], 'true,false': [-1.9984014443252818e-16, 0.07638888888888894], 'true,false,false': [0.041587901701323295, 0.0], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.06061155861493555, 0.0999716035814597], 'false': [0.07158092983860255, 0.1528800654616726], 'false,false': [0.04338842975206607, 0.17642124165069545], 'false,false,false': [0.1352232937593326, 0.16365383774683637], 'false,true': [nan, 0.07158092983860255], 'false,false,true': [nan, 0.04338842975206607]}
{'': [0.025325748984563655, 0.09796285802947026], 'false': [nan, 0.09796285802947033], 'false,false': [-2.0898315757650005e-16, 0.08240185536534826], 'false,false,false': [0.06791155926985346, 0.12415636367866886], 'true': [0.02567194493719792, 0.012755644760162518], 'true,true': [0.0256447275674663, 0.0], 'true,false': [0.02382088364585566, 0.004268465820739031], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.05067379561915064, 0.0004283555211506123], 'false': [0.0002822019426883011, 0.0005172690472327712], 'false,false': [nan, 0.0005172690472327712], 'false,false,false': [nan, 0.0005172690472327712], 'false,true': [nan, 0.0002822019426883053], 'false,true,false': [0.00035331713572708665, 2.638778697065676e-08]}
{'': [0.025740969686973945, 0.06080002917544718], 'false': [-2.6122894697062506e-17, 0.05763157951416662], 'false,false': [0.06063699765435457, -8.673617379884035e-18], 'false,false,true': [0.0017005952261978144, 0.02229197555978237], 'true': [0.02650126453713631, 0.007072272704665178], 'false,true': [-2.6122894697062506e-17, nan]}
{'': [0.04460260199817321, 0.07443516273822841], 'false': [0.00012940337669651816, 0.07783491890407829], 'false,false': [0.026755400218353976, 0.0008027315054307775], 'true': [nan, 0.04460260199817307], 'true,false': [nan, 0.04460260199817321], 'false,false,false': [0.0011344461719405973, 0.0004701180583041454]}
{'': [0.04651169324226928, 0.020147764150179583], 'true': [0.02634016024829276, 0.016978318762082178], 'false': [nan, 0.020147764150179583], 'false,false': [nan, 0.020147764150179583], 'false,false,false': [nan, 0.020147764150179583]}
{'': [0.03396874150235197, 0.03595807084844006], 'false': [nan, 0.035958070848440535], 'false,false': [0.0250393611896215, 0.05813597872660755], 'false,false,false': [0.03236592527565139, 0.11238171979494428], 'true': [0.03476204983280694, 0.0010418466140674244], 'true,false': [0.0010418466140674244, nan]}
{'': [0.0284853119437772, 0.030482035954425255], 'false': [0.01964126797807337, 0.0719543235062067], 'false,false': [0.021702968038370997, 0.0006828533827431324], 'false,true': [0.05007543186458606, 7.581288088662395e-05], 'false,true,true': [0.05007543186458606, nan], 'false,false,false': [nan, 0.0006828533827431324]}
{'': [0.023595158752391515, 0.045448654826767146], 'false': [0.026618228481756462, 0.07384068242008081], 'false,false': [0.0, 0.0763958498478349], 'false,false,false': [nan, 0.0763958498478349], 'true': [0.0231171307295132, 0.0013550762962078976], 'true,true': [0.02521173335226567, 1.5257735535857532e-05], 'true,false': [1.927013388183033e-06, 0.010335929075117583], 'true,false,false': [9.251858538542971e-19, 0.024917107954524422]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.128695726394653
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1318008136442069;  // std dev = 0.100, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.14386322081379807;  // std dev = 0.452, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6970755584389081;  // std dev = 0.161, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else return 0.6107587663793699;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.321869877490481;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7369445115620774;  // std dev = 0.151, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.12655139123619458;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11596051882570742;  // std dev = 1.428, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5329399232423669;  // std dev = 1.394, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.41654114885212934;  // std dev = 0.932, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5918390690825199;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5122611465404816;  // std dev = 0.406, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5732316286786543;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09828658015740367;  // std dev = 1.314, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | | else return -0.003481768709251899;  // std dev = 2.146, 74.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08551556697376868;  // std dev = 1.584, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.10367304388324904;  // std dev = 2.367, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.43380955271687033;  // std dev = 0.245, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(E, A), follows(F, A) )
%   | | | then return 0.674843131845512;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5218869733919251;  // std dev = 0.325, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6730951391366238;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.794476726434444;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10648350095762804;  // std dev = 0.056, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.10890549364696012;  // std dev = 0.028, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.14217470106063304;  // std dev = 0.190, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3026835592349658;  // std dev = 0.174, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.3625460081533105;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.022246810338012568;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17787750784418865;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.31987996514738626;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.22872063072643212;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.43466935422273606;  // std dev = 0.171, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08047112285370497;  // std dev = 2.120, 241.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=9 */
%   | | else return -0.09422355813635717;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.24775452165579562;  // std dev = 0.990, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.1391937367905733;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return -0.06689185779166214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2652813196775154;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.04512856908953604;  // std dev = 0.143, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.22360866542643706;  // std dev = 0.265, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18394755648331815;  // std dev = 1.171, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.5996278750536106;  // std dev = 0.227, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10519420650075936;  // std dev = 0.024, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.18070805958881894;  // std dev = 0.202, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.275015273111818;  // std dev = 0.067, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.08549005823038154;  // std dev = 0.004, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.21841870460783722;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1097053966798251;  // std dev = 1.578, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else return 0.2912521275766209;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.03208757631086379;  // std dev = 0.142, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.006362156810218666;  // std dev = 1.107, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return -0.0011628001667900471;  // std dev = 1.513, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1814710156863322;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.30398229880143474;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.07446836308229099;  // std dev = 0.935, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.30771897863081915;  // std dev = 0.218, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08032721901040546;  // std dev = 0.004, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), recursion_accounttype(I, B) )
%   | | | then return 0.1370994692303095;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.07430346346684506;  // std dev = 0.898, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.027535982319171665;  // std dev = 0.841, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.034964434753291765;  // std dev = 1.337, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1414457300644199;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.16955573005464458;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1906917578462792;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.226016595657667;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20479451995695674;  // std dev = 0.051, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07448146287431281;  // std dev = 0.004, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25687222208695243;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3625798239835261;  // std dev = 0.914, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.10392709393338621;  // std dev = 0.028, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12882459806212251;  // std dev = 0.174, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14230436372669128;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06563176385725114;  // std dev = 0.033, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1568425474203848;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0035256696585675993;  // std dev = 0.515, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return -0.012303248989945137;  // std dev = 0.705, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2486598369660159;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.016601363557969012;  // std dev = 0.450, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.038838851554821585;  // std dev = 1.054, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning 37.762269258499146
Refined model CLL: -0.101005


******************************************
Best model found
******************************************
Results 

CLL : -0.097268 

AUC ROC : 0.994962 

AUC PR : 0.401213 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 13.128695726394653 

Total Inference Time : 30.348950624465942 

Total revision time: 53.97484374046326
Best scored revision CLL: -0.101005


Results 

CLL : -0.097268 

AUC ROC : 0.994962 

AUC PR : 0.401213 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 54.000967502593994 

Total Inference Time : 30.348950624465942 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1974163055419922
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6688771746317699;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029793538444691847;  // std dev = 0.268, 53.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00474205985134197;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15463364510731817;  // std dev = 1.911, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5888394226726958;  // std dev = 0.208, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.3268696226333606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.625993349524405;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5678228445102314;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.046433960532482395;  // std dev = 1.787, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   | | | else return 0.14701365920235732;  // std dev = 1.892, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5496657309866684;  // std dev = 0.839, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11775434464782858;  // std dev = 0.006, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.14008837980937758;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1626329974352867;  // std dev = 0.151, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3162372377334569;  // std dev = 0.215, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.04756334460985731;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4006673653801084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.615870989763467;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10582510028581787;  // std dev = 0.824, 52.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=1 */
%   | | else return -0.026681849938136007;  // std dev = 0.248, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10985351815639248;  // std dev = 1.246, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2923765091727899;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5149832869458142;  // std dev = 0.415, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12563581730847592;  // std dev = 0.147, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.13080006580132142;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2817121301791959;  // std dev = 0.452, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0967403666914225;  // std dev = 0.788, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04766824584810592;  // std dev = 1.173, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1849815105042238;  // std dev = 0.110, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E) )
%   | | then return 0.20142026947120728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.026285665559292404;  // std dev = 0.163, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.09131325141983943;  // std dev = 0.918, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.1637883439261457;  // std dev = 1.000, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16501190451454117;  // std dev = 0.051, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.296378784902735;  // std dev = 0.267, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09847772707784015;  // std dev = 0.072, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37778990971489246;  // std dev = 0.321, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1291770572902645;  // std dev = 0.172, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17803632123205557;  // std dev = 0.328, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.20947979273298928;  // std dev = 0.154, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08877042729897877;  // std dev = 0.030, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07357529790591559;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.03354054191442834;  // std dev = 0.204, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.007193139791509528;  // std dev = 0.362, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0531275699380583;  // std dev = 0.804, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning 8.988504886627197
Parameter learned model CLL:-0.111017 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [8.43e-08, 0, 23], 'true,false,true': [1.49e-08, 24, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.462, 9, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.981, 1, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 47, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.782, 6, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.911, 13, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.208, 0, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.082, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.787, 45, 5], 'false,false,false,false': [1.892, 13, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.839, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.006, 36, 0], 'false,true,false,false': [0.003, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.151, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.215, 0, 16], 'true,false': [0.0, 0, 0], 'false,true,true': [0.863, 1, 3], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.128, 0, 8], 'false,false,true,false': [0.824, 51, 1], 'false,false,false': [0.248, 14, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.246, 17, 19], 'false,true': [0.022, 0, 4], 'false,false,true': [0.415, 0, 8], 'false,false,false,true': [0.147, 26, 0], 'false,false,false,false': [0.101, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.452, 0, 25], 'true,false': [0.788, 51, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.173, 15, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.11, 0, 16], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 30, 6], 'false,false,false,true': [0.918, 15, 3], 'false,false,false,false': [1.0, 5, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.051, 0, 16], 'false,true,true,true': [0.267, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.072, 34, 0], 'false,false,true': [0.321, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.172, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.328, 0, 19], 'true,true,false': [0.154, 0, 4], 'true,false,true': [0.03, 37, 0], 'true,false,false,true': [0.011, 9, 0], 'true,false,false,false': [0.204, 2, 1], 'false,true': [0.362, 8, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.804, 6, 4]}]
{'': [0.24376731301939183, 0.2169421487603307], 'true': [3.089316242435218e-16, 0.028546712802768187], 'false': [0.2222222222222221, 0.21301775147928975], 'false,true': [1.4802973661668753e-16, -6.938893903907228e-18], 'true,false': [9.25185853854297e-18, 0.09000000000000005], 'true,false,false': [-6.938893903907228e-18, 0.25], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [0.05343828332462013, 0.11284714786200138], 'false': [0.07166820808657172, 0.17585529487408888], 'false,false': [0.08741467499573585, 0.19768348250148118], 'false,false,false': [0.0, 0.19213567819226407], 'false,false,true': [nan, 0.08741467499573585], 'false,true': [nan, 0.07166820808657172]}
{'': [0.04880659154125212, 0.11802971135533111], 'false': [nan, 0.1180297113553312], 'false,false': [0.0025378557402029878, 0.10564614208164655], 'false,false,false': [0.06386369282694884, 0.18848257795249757], 'true': [0.0028710276247834324, 0.19458511611743118], 'true,false': [0.0, 0.0], 'true,true': [0.0028710276247834324, nan], 'false,false,true': [0.0033838076536039097, 0.0]}
{'': [0.022708069495903583, 0.0008036283374812913], 'false': [5.4516122487540826e-05, 0.0011449023072415577], 'false,false': [nan, 0.0011449023072415577], 'false,false,false': [nan, 0.0011449023072415577], 'false,true': [nan, 5.4516122487540826e-05], 'false,true,false': [9.527789639088599e-07, 2.1934505526177704e-06]}
{'': [0.0028871567910848384, 0.07674113884299408], 'false': [0.16876252293802854, 0.06962163290223118], 'false,true': [0.18601666377571208, 0.0], 'false,false': [0.07177269027529798, 0.061324779357455235], 'false,false,true': [0.0020369447551233377, 0.01305523365684764], 'true': [0.0028871567910848384, nan]}
{'': [0.04313590363999437, 0.06652741059058484], 'false': [0.00011895714120330192, 0.06481723053405425], 'false,false': [0.021537680339771936, 0.0008661176250640677], 'true': [nan, 0.043135903639994345], 'true,false': [nan, 0.04313590363999437], 'false,false,false': [0.0008360044972375196, 0.0009185534056422407]}
{'': [0.041763100519804155, 0.0723829186833903], 'false': [nan, 0.07238291868339031], 'false,false': [nan, 0.0723829186833903], 'false,false,false': [nan, 0.0723829186833903], 'true': [0.008163968648050881, 0.011705884684376553]}
{'': [0.000729999648300966, 0.050418370712463655], 'false': [nan, 0.05041837071246357], 'false,false': [0.02651697856267918, 0.08076613472866474], 'false,false,false': [0.04685013625523218, 0.09997983087137188], 'true': [0.0007597285794742059, 0.0], 'true,false': [0.0, nan]}
{'': [0.002611897261388517, 0.03697915097454684], 'false': [0.027576088107013813, 0.05371109924103588], 'false,false': [0.01714607218941801, 0.001645565182973146], 'false,true': [0.007892626476534067, 0.00015374210471222663], 'false,true,true': [0.007892626476534067, nan], 'false,false,false': [nan, 0.001645565182973146]}
{'': [0.01798721670033216, 0.03793149163581847], 'false': [0.011886424689323044, 0.06467513821767455], 'false,false': [nan, 0.06467513821767455], 'false,false,false': [nan, 0.06467513821767455], 'true': [0.00585515937130234, 0.0010617685849380757], 'true,true': [0.005668696624478752, 0.005924111936080875], 'true,false': [2.476854515912739e-05, 0.0037795200461977377], 'true,false,false': [1.2405708980197908e-05, 0.013878776792376929]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.0857908725738525
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995121;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.6465039578023695;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.7489901331023447;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.019829882185973147;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0.009126415925080575;  // std dev = 0.778, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.022200659238064507;  // std dev = 2.072, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5842789900483636;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6516011094030643;  // std dev = 0.146, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6192082092838879;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12046449870195186;  // std dev = 0.065, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.01783866737310798;  // std dev = 0.773, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.0972201202274113;  // std dev = 1.841, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.4504615678933352;  // std dev = 0.099, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.23592212995397363;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.448341779016324;  // std dev = 0.199, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.7102373038120614;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.42467879232095346;  // std dev = 0.795, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10579758152617526;  // std dev = 0.051, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.13107222379935;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, K) )
%   | | then return -0.1150550322676687;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.21482430924547452;  // std dev = 0.083, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.34260280478535937;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3923443785476027;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1346736670679361;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return 0.34502016906142224;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5065624673136452;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45353347902355345;  // std dev = 0.441, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09400355215064755;  // std dev = 0.734, 57.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10834641066992684;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.1337509040535713;  // std dev = 0.922, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.26789992262346984;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08412613790613997;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2884538792078138;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.041708253808881435;  // std dev = 0.172, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.299667842740437;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.017329156658945365;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.6013643104422025;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10792226515468903;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.12211919864757655;  // std dev = 0.138, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.22051404051045723;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2696361404238127;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.02390573881489766;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.24364019585899166;  // std dev = 0.173, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08079436212222095;  // std dev = 0.030, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.08790187328776014;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4394710619127404;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11412421193554159;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1438180932979782;  // std dev = 0.798, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.10615987308446147;  // std dev = 0.272, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.2131464284303795;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2592990240705739;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.0750176643068993;  // std dev = 0.043, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.23783694306472333;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08470275595096383;  // std dev = 0.100, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(A, K), follows(J, K) )
%   | | | then return 0.0023720916973469647;  // std dev = 0.498, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06513771211197802;  // std dev = 0.679, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return -0.06020174656966291;  // std dev = 0.600, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16658014224396028;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.05212158580366033;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.20690522107213172;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.15971222186351666;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2788501905986667;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07135201965917498;  // std dev = 0.032, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.33868179123590997;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08233895341071884;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.17928566002568963;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.14545863182821184;  // std dev = 0.025, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1511473657608993;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2150231669175825;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.06398755328634649;  // std dev = 0.021, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(H, C), follows(H, A) )
%   | | | then return -0.0722750243824269;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.013726397819294597;  // std dev = 0.212, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | then return 0.24426011786901444;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0910183847355533;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.031318406864857117;  // std dev = 0.486, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
Inference time using transfer learning 20.398595571517944
Refined model CLL: -0.094731


******************************************
Best model found
******************************************
Results 

CLL : -0.099111 

AUC ROC : 0.99421 

AUC PR : 0.480907 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 4.0857908725738525 

Total Inference Time : 5.465115785598755 

Total revision time: 13.352159976959229
Best scored revision CLL: -0.094731


Results 

CLL : -0.099111 

AUC ROC : 0.99421 

AUC PR : 0.480907 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 13.37026834487915 

Total Inference Time : 5.465115785598755 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5895323753356934
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8164822684328454;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.09148226843284571;  // std dev = 0.423, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.730258243648594;  // std dev = 0.080, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011374162536206553;  // std dev = 0.316, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09131462685648327;  // std dev = 0.836, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7512660412474383;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.044320034809389015;  // std dev = 2.765, 56.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5509190144298544;  // std dev = 1.050, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.27445344967517815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5912697210979831;  // std dev = 0.152, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5989034122924007;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5629786086866599;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018884414395029775;  // std dev = 2.849, 103.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=13 */
%   | | | else return 0.09097380685720462;  // std dev = 2.356, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5506862522791853;  // std dev = 1.223, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12588081111135924;  // std dev = 0.128, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.13613483630377124;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1529484378649111;  // std dev = 0.131, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2683141310049349;  // std dev = 1.340, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.18448811902471332;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.39221838476432835;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5660561383743187;  // std dev = 1.035, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.10431084471826373;  // std dev = 1.217, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   | | else return -0.05958335735731897;  // std dev = 0.204, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03421232603315791;  // std dev = 2.464, 100.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2635048135956132;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.502359127473682;  // std dev = 0.700, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1154044269935802;  // std dev = 0.095, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.10971383332133991;  // std dev = 0.109, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2790683048093998;  // std dev = 1.335, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | else return -0.08985411709080118;  // std dev = 1.109, 125.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030696640919114282;  // std dev = 1.035, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19585029849757565;  // std dev = 0.052, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, E) )
%   | | then return 0.20216972064265926;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.02809877851689152;  // std dev = 0.185, 80.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03334149697767019;  // std dev = 0.808, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
%   | | | else return 0.043284781197959074;  // std dev = 1.630, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18356297625223778;  // std dev = 0.060, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2565843822953199;  // std dev = 0.907, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09395466682512334;  // std dev = 0.081, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4154748696439476;  // std dev = 0.508, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1044158159958762;  // std dev = 0.133, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20263044590263113;  // std dev = 0.545, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.0632812374639965;  // std dev = 1.009, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08759531861481379;  // std dev = 0.020, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08288064843639513;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.06920784953112705;  // std dev = 0.226, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return -0.0034968351555109056;  // std dev = 0.594, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18826955161660164;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014862149539250339;  // std dev = 1.245, 33.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
Inference time using transfer learning 9.051055431365967
Parameter learned model CLL:-0.105715 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.384, 2, 46], 'true,false,true': [6.83e-08, 68, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.423, 23, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.08, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.316, 67, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.836, 24, 1], 'false,false,false,true': [0.11, 0, 4], 'false,false,false,false': [2.765, 45, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.05, 1, 28], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.152, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.088, 0, 3], 'false,false,true,false': [1.49e-08, 0, 6], 'false,false,false,true': [2.849, 90, 13], 'false,false,false,false': [2.356, 25, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.223, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.128, 57, 0], 'false,true,false,false': [0.011, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.131, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.34, 2, 32], 'true,false': [0.0, 0, 0], 'false,true,true': [0.941, 1, 8], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.035, 1, 17], 'false,false,true,false': [1.217, 96, 2], 'false,false,false': [0.204, 26, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.464, 63, 37], 'false,true': [0.043, 0, 9], 'false,false,true': [0.7, 0, 16], 'false,false,false,true': [0.095, 22, 0], 'false,false,false,false': [0.109, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.335, 2, 51], 'true,false': [1.109, 122, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.035, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.052, 0, 32], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.185, 67, 13], 'false,false,false,true': [0.808, 36, 8], 'false,false,false,false': [1.63, 20, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.06, 0, 32], 'false,true,true,true': [0.907, 1, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 87, 0], 'false,false,true': [0.508, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.133, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.545, 0, 38], 'true,true,false': [1.009, 1, 8], 'true,false,true': [0.02, 52, 0], 'true,false,false,true': [0.021, 14, 0], 'true,false,false,false': [0.226, 14, 1], 'false,true': [0.594, 18, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.245, 27, 6]}]
{'': [0.22537162342160022, 0.18140589569160945], 'true': [0.03993055555555639, 0.011109708370155357], 'false': [0.1836547291092747, 0.17888888888888904], 'false,true': [-2.220446049250313e-16, 1.3322676295501878e-17], 'true,false': [6.857259857978908e-17, 0.045351473922902535], 'true,false,false': [0.0, 0.25], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.0001924863861939507, 0.11411469811164049], 'false': [0.09985566895955497, 0.1271990507201067], 'false,false': [0.027956584721390076, 0.1587257181500685], 'false,false,false': [0.0030323137831543834, 0.1365284985369348], 'false,true': [nan, 0.09985566895955497], 'false,false,true': [nan, 0.027956584721390076]}
{'': [0.05291966517392483, 0.11517241118328994], 'false': [nan, 0.11517241118328933], 'false,false': [0.0011471924569877385, 0.10275095321568113], 'false,false,false': [0.07883027899984754, 0.16827208855511475], 'true': [0.058667582545036075, 0.005746693702627759], 'true,true': [0.03798261248270217, 0.0], 'true,false': [nan, 0.005746693702627759], 'false,false,true': [0.0025811830282221524, 3.700743415417188e-17]}
{'': [0.02410647857092359, 0.00047281855139114093], 'false': [0.00025422136575665175, 0.00046432677263457485], 'false,false': [nan, 0.00046432677263457485], 'false,false,false': [nan, 0.00046432677263457485], 'false,true': [nan, 0.00025422136575665175], 'false,true,false': [0.00028725305244479217, 1.046191397554667e-05]}
{'': [0.05284127096359986, 0.07792691815022812], 'false': [0.09245010329649628, 0.07385840659622328], 'false,true': [0.09840715066568188, 0.0], 'false,false': [0.0809316973959463, 0.04172252523921405], 'false,false,true': [0.059568436989340036, 0.0151223369283675], 'true': [0.05284127096359986, nan]}
{'': [0.06072728086449117, 0.07161429966801881], 'false': [0.00020878206147538028, 0.07465840384290866], 'false,false': [0.030646104867649127, 0.0004018347950544282], 'true': [nan, 0.06072728086449119], 'true,false': [nan, 0.06072728086449117], 'false,false,false': [0.00040618018083262, 0.0003853090325206872]}
{'': [0.045378613634556066, 0.04282321915911235], 'true': [0.033611624986052496, 0.009842541938501283], 'false': [nan, 0.04282321915911238], 'false,false': [nan, 0.04282321915911235], 'false,false,false': [nan, 0.04282321915911235]}
{'': [8.19361998929873e-05, 0.040591107672714385], 'false': [nan, 0.04059110767271458], 'false,false': [0.034206152428102723, 0.04736812540157418], 'false,false,false': [0.014839180887478714, 0.09489684645513097], 'true': [8.328655170788957e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.0035496732696783384, 0.03502256482586087], 'false': [0.026417237357711107, 0.05267606151336745], 'false,false': [0.023425013229367773, 0.0004669482850037128], 'false,true': [0.041093920575982226, 7.550682656058603e-05], 'false,true,true': [0.041093920575982226, nan], 'false,false,false': [nan, 0.0004669482850037128]}
{'': [0.027432749238899053, 0.032365088727035675], 'false': [0.013555945405934642, 0.04673595804034394], 'false,false': [0.0, 0.046938596604420714], 'false,false,false': [nan, 0.046938596604420735], 'true': [0.03096857898314915, 0.0006885247918679728], 'true,true': [0.007807284479033701, 0.11306088852717774], 'true,false': [7.834545746677916e-06, 0.0018198839395543597], 'true,false,false': [3.277055565791395e-05, 0.0033976069133063985]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 5.014843225479126
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7232611099571609;  // std dev = 0.123, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.010832466429567618;  // std dev = 1.730, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   | | | else return 0.1186228193488582;  // std dev = 1.813, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5111153644775154;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.5544309282104058;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5733650869320169;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.1126727717705397;  // std dev = 0.027, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05682294021647971;  // std dev = 1.669, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.1996092940637388;  // std dev = 1.650, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then return 0.4227996770205425;  // std dev = 0.034, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, G), recursion_accounttype(D, B) )
%   | | | then return 0.44311076156781853;  // std dev = 0.169, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1441687894902278;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6907257613876407;  // std dev = 0.156, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.1019513469942292;  // std dev = 0.025, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.10156380445536285;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.1496509990891267;  // std dev = 0.102, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.32857525336438437;  // std dev = 0.002, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.3196496199489607;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31998301694181197;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4880308136941347;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.32589755571649287;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09311710973391017;  // std dev = 0.033, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.041159882006583416;  // std dev = 1.748, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.043010167089476026;  // std dev = 0.778, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.17706478875798812;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.2603981220913215;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2573572921288146;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05102034791752425;  // std dev = 0.146, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
%   | | else return -0.04753596511616555;  // std dev = 0.106, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2675065500252415;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.25537418130093126;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5040631341868925;  // std dev = 0.291, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.12069465695803903;  // std dev = 0.028, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.22776665045191402;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.02223334954808598;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21344248169599767;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21449550790292762;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.28221912015639644;  // std dev = 0.077, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.086018518032893;  // std dev = 0.011, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( tweets(A, I) )
%   | | then return -0.11665392712642804;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return -0.10381411528507652;  // std dev = 0.736, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.006629409682002585;  // std dev = 1.199, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18506065945414754;  // std dev = 0.018, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.2654329980511083;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(A, F) )
%   | | | then return -0.029160475998393377;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2300790952442883;  // std dev = 0.971, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.08647558666798136;  // std dev = 0.021, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0699843060212969;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0014256735013668115;  // std dev = 0.249, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.09077526926905301;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07586156104713115;  // std dev = 0.691, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16193539327856027;  // std dev = 0.015, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(E, A) )
%   | | then return -0.024990061875938597;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.14679016041724044;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.16479501521990966;  // std dev = 0.082, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21247967520468133;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06846339010070823;  // std dev = 0.002, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2974166563957405;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.40209669960609157;  // std dev = 0.244, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10919297101652226;  // std dev = 0.017, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.09298869727700328;  // std dev = 0.973, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.14230522069764798;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.16607781220600035;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.06132478133088524;  // std dev = 0.027, 89.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12082778365970348;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.035149923602239966;  // std dev = 0.221, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1550190571633222;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.08293507167574063;  // std dev = 0.885, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.04355591947809881;  // std dev = 0.641, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning 17.46087336540222
Refined model CLL: -0.094685


******************************************
Best model found
******************************************
Results 

CLL : -0.097011 

AUC ROC : 0.993522 

AUC PR : 0.378402 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 5.014843225479126 

Total Inference Time : 7.969053745269775 

Total revision time: 18.98761510848999
Best scored revision CLL: -0.094685


Results 

CLL : -0.097011 

AUC ROC : 0.993522 

AUC PR : 0.378402 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 19.005723476409912 

Total Inference Time : 7.969053745269775 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.2075717449188232
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8282981888308559;  // std dev = 1.393, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.1996123497336587;  // std dev = 0.474, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7277510624504143;  // std dev = 0.107, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02844211283056937;  // std dev = 0.328, 94.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06871775763528427;  // std dev = 1.163, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7570064606846474;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.06895652218685878;  // std dev = 3.756, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5556956295667006;  // std dev = 0.899, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.2991159300937653;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.4469648317803365;  // std dev = 0.989, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5972605308586895;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4356870182864401;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 9.913524151754904E-4;  // std dev = 3.636, 145.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=22 */
%   | | | else return 0.03677333140694998;  // std dev = 3.238, 70.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5285560700674835;  // std dev = 2.460, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12760763864278776;  // std dev = 0.063, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return -0.13007729284748715;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15787660636603273;  // std dev = 0.198, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3237898184866132;  // std dev = 0.373, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.4470786144411195;  // std dev = 0.070, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31696741102510756;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4390422522244629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6306737961951752;  // std dev = 0.292, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10347286596359198;  // std dev = 1.383, 145.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=3 */
%   | | else return 0.025282234087123986;  // std dev = 0.306, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0404798252068931;  // std dev = 2.508, 144.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=53 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1769858064606047;  // std dev = 0.960, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5193670312975681;  // std dev = 0.815, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12308507361997667;  // std dev = 0.153, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.11881094788448701;  // std dev = 0.154, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2567280743663392;  // std dev = 2.032, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return -0.09329125733882791;  // std dev = 1.238, 155.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04222895000638523;  // std dev = 1.625, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19288759495722974;  // std dev = 0.094, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E) )
%   | | then return -0.2826563798704549;  // std dev = 0.748, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.028519740227040284;  // std dev = 0.168, 109.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.022475445998686783;  // std dev = 1.354, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0.08222535810665496;  // std dev = 1.856, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1746940053658494;  // std dev = 0.048, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3068752288351528;  // std dev = 0.538, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0981129139415239;  // std dev = 0.056, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.407922885149336;  // std dev = 0.582, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10941368453702204;  // std dev = 0.193, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17125048740449106;  // std dev = 1.191, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.10135894260973888;  // std dev = 1.048, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08981247638137713;  // std dev = 0.011, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09100615860825222;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.06624618002154943;  // std dev = 0.324, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.02633916116983607;  // std dev = 0.895, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1840802801619713;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031185097459687106;  // std dev = 1.480, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
Inference time using transfer learning 8.938554286956787
Parameter learned model CLL:-0.111859 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.393, 2, 65], 'true,false,true': [8.94e-08, 100, 0], 'true,false,false,true': [2.79e-08, 31, 0], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 11], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.474, 27, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.107, 0, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.328, 77, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.163, 28, 2], 'false,false,false,true': [0.13, 0, 6], 'false,false,false,false': [3.756, 69, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.899, 1, 40], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.989, 1, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.127, 0, 4], 'false,false,true,false': [0.935, 1, 7], 'false,false,false,true': [3.636, 123, 22], 'false,false,false,false': [3.238, 56, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.46, 3, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.063, 109, 0], 'false,true,false,false': [0.021, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.373, 0, 46], 'true,false': [0.07, 2, 0], 'false,true,true': [0.05, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.292, 0, 26], 'false,false,true,false': [1.383, 142, 3], 'false,false,false': [0.306, 30, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.508, 91, 53], 'false,true': [0.96, 1, 11], 'false,false,true': [0.815, 0, 29], 'false,false,false,true': [0.153, 49, 0], 'false,false,false,false': [0.154, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.032, 3, 75], 'true,false': [1.238, 151, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.625, 31, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.094, 0, 46], 'true,false,true': [0.748, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 92, 17], 'false,false,false,true': [1.354, 59, 14], 'false,false,false,false': [1.856, 27, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.048, 0, 46], 'false,true,true,true': [0.538, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 138, 0], 'false,false,true': [0.582, 0, 21], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.193, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.191, 1, 54], 'true,true,false': [1.048, 1, 11], 'true,false,true': [0.011, 96, 0], 'true,false,false,true': [0.012, 19, 0], 'true,false,false,false': [0.324, 15, 1], 'false,true': [0.895, 22, 13], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.48, 26, 12]}]
{'': [0.2205390955669416, 0.2222222222222235], 'false': [0.21937499999999951, 0.2248661511005349], 'true': [0.02895967921586013, 0.007406994876364406], 'false,true': [-2.7328566760003855e-16, 2.05596856412066e-17], 'true,false': [7.993605777301127e-17, 0.02854671280276823], 'true,false,false': [2.5069552168955147e-17, 0.22222222222222224], 'false,true,true': [-1.6148698540002277e-16, 0.0]}
{'': [0.00024175296846744624, 0.1320888051761226], 'false': [0.10726159898668916, 0.14990988615652936], 'false,false': [0.045051146222050566, 0.17490578447551705], 'false,false,false': [0.0028174594554571573, 0.1567900446101782], 'false,true': [nan, 0.10726159898668916], 'false,false,true': [nan, 0.045051146222050566]}
{'': [0.051951723004268285, 0.1203117256593815], 'false': [nan, 0.12031172565938118], 'false,false': [0.0800556218140801, 0.1105354765165703], 'false,false,false': [0.09115544629989815, 0.14981633294819763], 'false,false,true': [0.004012865465617466, 0.109375], 'true': [0.019691575643682305, 0.18314593423963707], 'true,false': [0.0, 0.13973007622618375], 'true,true': [0.019691575643682305, nan]}
{'': [0.06304655941891602, 0.0004244748514160915], 'false': [3.474221122726712e-05, 0.0006223951862711523], 'false,false': [nan, 0.0006223951862711523], 'false,false,false': [nan, 0.0006223951862711523], 'false,true': [nan, 3.4742211227270565e-05], 'false,true,false': [3.6162935921823356e-05, 2.1845680896975804e-05]}
{'': [0.026726559731841498, 0.08410996300412764], 'false': [0.0014593138942316961, 0.08343778103247029], 'false,false': [0.08116734855615837, 0.0936896088708347], 'false,false,true': [0.003277058001284143, 0.01318502750473944], 'true': [0.003023014643111504, 0.0024298784250251226], 'false,true': [0.0002504937514868688, 0.0]}
{'': [0.04366789500386567, 0.07802073191612593], 'false': [0.07683759388455967, 0.07608380101198928], 'false,false': [0.022888527924385914, 0.00046760362983957863], 'true': [nan, 0.04366789500386572], 'true,false': [nan, 0.04366789500386567], 'false,false,false': [0.0004807985666134387, 0.00044662866098442157]}
{'': [0.05158095942903236, 0.05870837314186953], 'false': [nan, 0.058708373141869545], 'false,false': [nan, 0.05870837314186953], 'false,false,false': [nan, 0.05870837314186953], 'true': [0.052944606302552315, 0.009881623224729972]}
{'': [0.020877652504424523, 0.03900912437140041], 'false': [nan, 0.03900912437140036], 'false,false': [0.02805872276048869, 0.048433978333611266], 'false,false,false': [0.02510435866824357, 0.08202442820871439], 'true': [0.00019234719039944834, 0.2799201890652095], 'true,false': [0.2799201890652095, nan]}
{'': [0.0023119017856218817, 0.03611421982354824], 'false': [0.023667236451317266, 0.06051669334922153], 'false,false': [0.01614399179034291, 0.0007269772414878995], 'false,true': [0.011151228531998928, 2.2884103956201123e-05], 'false,true,true': [0.011151228531998928, nan], 'false,false,false': [nan, 0.0007269772414878995]}
{'': [0.027057411956149562, 0.04053659436817852], 'false': [0.022895130247517863, 0.05590006732006345], 'false,false': [0.0, 0.05767332928170423], 'false,false,false': [nan, 0.0576733292817043], 'true': [0.038283680505119495, 0.0008647454067764668], 'true,true': [0.02578259575483442, 0.09157038548334638], 'true,false': [1.2425946214316326e-06, 0.003158081858319684], 'true,false,false': [7.186361604875828e-06, 0.006566968139163778]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.377339601516724
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.13427530732473028;  // std dev = 0.087, 132.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.07243464938522651;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.6908264441767439;  // std dev = 0.184, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.7721386890096255;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.730755940678147;  // std dev = 0.087, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.11632810486983901;  // std dev = 0.841, 85.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=1 */
%   | | | else return 0.07440868201845334;  // std dev = 2.764, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.08578487415644526;  // std dev = 2.195, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.16346162425577646;  // std dev = 2.505, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5721530607944209;  // std dev = 0.164, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.44744989432106974;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.2192453453704253;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5500156467542882;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5923566639479632;  // std dev = 0.190, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10468344737461463;  // std dev = 0.852, 92.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
%   | | | else return 0.10497621028460871;  // std dev = 2.653, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.011312831308906581;  // std dev = 2.011, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | | else return 0.09920292264217861;  // std dev = 2.749, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4362785461623177;  // std dev = 0.197, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return -0.06657594848782347;  // std dev = 1.034, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4802167739390624;  // std dev = 0.194, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.692573071333524;  // std dev = 0.080, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.43270100797836586;  // std dev = 0.107, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6377458805213724;  // std dev = 1.028, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.11806337332212491;  // std dev = 0.199, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.12211924472265685;  // std dev = 0.120, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.15381265675591502;  // std dev = 0.129, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33349730549231416;  // std dev = 0.031, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.11301658932511179;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15392597599740357;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.50390970788462;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3418792107143933;  // std dev = 0.066, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08466848701676416;  // std dev = 0.704, 82.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=1 */
%   | | | else return -0.002374132094396449;  // std dev = 2.187, 70.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=14 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return -0.001372084587604603;  // std dev = 1.575, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0.10700997540291943;  // std dev = 2.103, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2641385435205142;  // std dev = 0.027, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.11183759338250414;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5278277975495236;  // std dev = 0.112, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10096048745206299;  // std dev = 0.211, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.06964074664753284;  // std dev = 0.162, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2708459159782796;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.06253894286236623;  // std dev = 1.274, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.5307888684373353;  // std dev = 0.287, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.13113915573918256;  // std dev = 0.029, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23726867389280779;  // std dev = 0.051, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.4117880352500104;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08885369671239081;  // std dev = 0.170, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3646493810298445;  // std dev = 0.318, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1031095071383883;  // std dev = 0.303, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.30587000854601837;  // std dev = 0.991, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.11850934574642773;  // std dev = 0.076, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02440676260835278;  // std dev = 1.042, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0.05638276801751343;  // std dev = 1.244, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.17666545312345558;  // std dev = 0.022, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.20930790307895117;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2915616990605241;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.22301590114423353;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2928247772383046;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07437167195100747;  // std dev = 0.708, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   | | | else return 0.0035442109174400388;  // std dev = 1.418, 53.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.0013572279397332202;  // std dev = 1.489, 62.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=16 */
%   | | | else return 0.18843760939640233;  // std dev = 0.952, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.15764402023010804;  // std dev = 0.020, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.2364494268692209;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.17147379038647034;  // std dev = 0.120, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3316794115087569;  // std dev = 0.203, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08409193044355369;  // std dev = 0.021, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.24036143782171418;  // std dev = 0.943, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.399107160546596;  // std dev = 0.201, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.10840127441249306;  // std dev = 0.092, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.17332408007863778;  // std dev = 0.090, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.09603603487333377;  // std dev = 0.196, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | else return 0.24247786420666725;  // std dev = 0.058, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.07681148829805443;  // std dev = 0.032, 134.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2039531546081454;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.0032093957246031412;  // std dev = 0.875, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | | else return -0.03697122787344759;  // std dev = 0.459, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18220169585697155;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.02449518456567654;  // std dev = 1.160, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return -0.06696849014300223;  // std dev = 0.875, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
Inference time using transfer learning 14.357805252075195
Refined model CLL: -0.106381


******************************************
Best model found
******************************************
Results 

CLL : -0.105748 

AUC ROC : 0.993945 

AUC PR : 0.4296 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 8.377339601516724 

Total Inference Time : 10.709597110748291 

Total revision time: 27.350088119506836
Best scored revision CLL: -0.106381


Results 

CLL : -0.105748 

AUC ROC : 0.993945 

AUC PR : 0.4296 

Precision : 0.339674 

Recall : 0.992063 

F1 : 0.506073 

Total Learning Time : 27.368196487426758 

Total Inference Time : 10.709597110748291 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.440452814102173
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8348931211460237;  // std dev = 1.398, 86.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.25814893509951203;  // std dev = 0.490, 50.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7102733943327357;  // std dev = 0.997, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.015718787525505373;  // std dev = 0.287, 138.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09076758710326088;  // std dev = 1.177, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6279951040625747;  // std dev = 0.875, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1169255289075458;  // std dev = 4.529, 115.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5759739948417436;  // std dev = 0.315, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5633658264223875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6326670401845802;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5857229383387228;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5633658264223875;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.017528108517392917;  // std dev = 4.248, 220.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=29 */
%   | | | else return 0.04968483283152971;  // std dev = 3.807, 91.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=20 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5444160061348702;  // std dev = 2.255, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12172336114648002;  // std dev = 0.155, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.12801685925039535;  // std dev = 0.019, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1684124717064713;  // std dev = 0.283, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26948537324049726;  // std dev = 1.578, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29757122191697066;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4016580583188767;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6001611919168605;  // std dev = 1.036, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return -0.10418710269317204;  // std dev = 1.544, 186.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=4 */
%   | | else return 0.024657550748515535;  // std dev = 0.316, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028453024376512343;  // std dev = 2.910, 196.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24383626409333606;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4771247053075699;  // std dev = 1.624, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12914753821858854;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.12151924325878533;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24897593858283554;  // std dev = 2.543, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else return -0.09490317154221763;  // std dev = 1.374, 226.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04754361608397391;  // std dev = 2.006, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19308884039972424;  // std dev = 0.070, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.21534013410216846;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04268763967531375;  // std dev = 0.171, 145.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.01169095699388183;  // std dev = 1.637, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | | else return 0.0699835624328952;  // std dev = 2.308, 57.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11559490001479629;  // std dev = 0.245, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2596807393801838;  // std dev = 1.144, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0929418685641872;  // std dev = 0.106, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3680216159741164;  // std dev = 1.296, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12055896475087877;  // std dev = 0.258, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1692912606564737;  // std dev = 1.616, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | else return 0.12140536115736851;  // std dev = 0.808, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.08378245106620207;  // std dev = 0.021, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0890586591944774;  // std dev = 0.029, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.06674539425945829;  // std dev = 0.230, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04721613074599659;  // std dev = 1.143, 46.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1908662106078427;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0071508992824335415;  // std dev = 1.874, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
Inference time using transfer learning 8.068739414215088
Parameter learned model CLL:-0.112279 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.398, 2, 84], 'true,false,true': [0.0, 125, 0], 'true,false,false,true': [3.16e-08, 33, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.97, 1, 16], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [4.08e-08, 39, 0], 'false,false': [0.49, 30, 20]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.997, 1, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.287, 120, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.177, 47, 2], 'false,false,false,true': [0.875, 1, 6], 'false,false,false,false': [4.529, 82, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.315, 0, 52], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.141, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.1, 0, 5], 'false,false,true,false': [2.11e-08, 0, 11], 'false,false,false,true': [4.248, 191, 29], 'false,false,false,false': [3.807, 71, 20]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.255, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.155, 146, 0], 'false,true,false,false': [0.019, 41, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.283, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.578, 3, 59], 'true,false': [0.0, 0, 0], 'false,true,true': [0.008, 0, 15], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.036, 1, 34], 'false,false,true,false': [1.544, 182, 4], 'false,false,false': [0.316, 44, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.91, 130, 66], 'false,true': [0.069, 0, 17], 'false,false,true': [1.624, 2, 41], 'false,false,false,true': [0.221, 58, 0], 'false,false,false,false': [0.221, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.543, 5, 97], 'true,false': [1.374, 221, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.006, 43, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.07, 0, 64], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.171, 127, 18], 'false,false,false,true': [1.637, 57, 20], 'false,false,false,false': [2.308, 36, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.245, 4, 59], 'false,true,true,true': [1.144, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 186, 0], 'false,false,true': [1.296, 1, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.258, 69, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.616, 2, 69], 'true,true,false': [0.808, 1, 15], 'true,false,true': [0.021, 135, 0], 'true,false,false,true': [0.029, 16, 0], 'true,false,false,false': [0.23, 14, 1], 'false,true': [1.143, 27, 19], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.874, 44, 18]}]
{'': [0.2261385418732244, 0.22977863816177227], 'false': [0.21832806664751458, 0.23999999999999966], 'true': [0.022714981070848902, 0.006210937499999866], 'false,true': [0.047499999999999785, 4.2700885562506023e-17], 'false,true,true': [0.055363321799307655, 1.4802973661668753e-16], 'true,false': [-1.4210854715202004e-17, 0.027755102040816385], 'true,false,false': [3.027880976250427e-17, 0.25]}
{'': [0.015067582550826112, 0.12421388172004603], 'false': [0.08227192134880403, 0.15411133073740885], 'false,false': [0.02825870054521683, 0.18856120883674243], 'false,false,false': [0.10943733845150476, 0.17839101184717934], 'false,true': [nan, 0.08227192134880403], 'false,false,true': [nan, 0.02825870054521683]}
{'': [0.0023146092926936757, 0.11545566752925261], 'false': [nan, 0.11545566752925253], 'false,false': [0.0007321881639250627, 0.1055600744623192], 'false,false,false': [0.08202802021375812, 0.1592550396720769], 'true': [0.0019075909306899201, 0.0034083812338713748], 'true,false': [0.0, 0.0032903507401480514], 'true,true': [0.0019075909306899201, nan], 'false,false,true': [0.0019993618129582557, 4.0371746350005693e-17]}
{'': [0.04034740136260431, 0.0008241113100606001], 'false': [0.0001366490160009106, 0.001055943657524664], 'false,false': [nan, 0.001055943657524664], 'false,false,false': [nan, 0.001055943657524664], 'false,true': [nan, 0.0001366490160009106], 'false,true,false': [0.00016397298910658285, 8.425028733644441e-06]}
{'': [0.040164367425185185, 0.0852878424377611], 'false': [0.0006387954124545681, 0.08548234836165385], 'false,false': [0.08176758542637022, 0.1001693953945627], 'false,false,true': [0.030665643508260336, 0.012814636337550263], 'true': [0.040164367425185185, nan], 'false,true': [4.25242877507929e-06, 0.0]}
{'': [0.04319830920199859, 0.08398067208679276], 'false': [0.00027842109870930147, 0.08882145175665362], 'false,false': [0.06131813613263945, 0.0008587999757429406], 'true': [nan, 0.04319830920199835], 'true,false': [nan, 0.04319830920199859], 'false,false,false': [0.0008455338527943771, 0.0008429706566945611]}
{'': [0.05081826400286853, 0.061886734383266855], 'false': [nan, 0.061886734383266924], 'false,false': [nan, 0.061886734383266855], 'false,false,false': [nan, 0.061886734383266855], 'true': [0.0634190863959576, 0.00835741740595332]}
{'': [8.339132133800766e-05, 0.045829071100565666], 'false': [nan, 0.04582907110056591], 'false,false': [0.029192016848819575, 0.06057396151387912], 'false,false,false': [0.03479091383979958, 0.09345109449011242], 'true': [7.707707886573517e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.060174978376579716, 0.0386337211385424], 'false': [0.02193532272133425, 0.06972774897096909], 'false,false': [0.04936986658680072, 0.000961368778216572], 'false,true': [0.03962607889848279, 6.0068393386870606e-05], 'false,true,true': [0.03962607889848279, nan], 'false,false,false': [nan, 0.000961368778216572]}
{'': [0.026605278047037856, 0.044701245459736375], 'false': [0.028403917212291165, 0.05592227100079026], 'false,false': [0.0, 0.05667148661364127], 'false,false,false': [nan, 0.05667148661364121], 'true': [0.0378739209060525, 0.00035454776183156526], 'true,true': [0.03679150244294205, 0.04080580553346697], 'true,false': [3.3018436465160197e-06, 0.0018593821529851013], 'true,false,false': [5.3585470005300395e-05, 0.0035285940339818706]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.867122173309326
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8278459047964823;  // std dev = 0.171, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.1359687119593117;  // std dev = 0.076, 170.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.32873717039362993;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.6699930908279145;  // std dev = 0.229, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | else return 0.7361457856066521;  // std dev = 0.143, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.329447906050426;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.7311911912464264;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.12609140449198042;  // std dev = 9.88e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6824363751739173;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.3754007584944419;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1918538006642645;  // std dev = 2.246, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5512480580516337;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.6926213663281389;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A) )
%   | | then return 0.57497070711703;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.4216352612766907;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5840206841923695;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5669660767782165;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11283943407277529;  // std dev = 9.66e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07311068545774727;  // std dev = 2.579, 73.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=20 */
%   | | | else return 0.1397810020376511;  // std dev = 2.681, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then return 0.4360396998095135;  // std dev = 0.025, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(A, D), follows(E, A) )
%   | | | then return 0.13736106105781623;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.4084112259067145;  // std dev = 0.887, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5301209974788706;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4561481814808421;  // std dev = 0.953, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.4670194383033646;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7487926243584814;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(K, A) )
%   | then return -0.10202727177195213;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.14492671983420835;  // std dev = 0.420, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.30719400165634686;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.34678425318346384;  // std dev = 0.100, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4283394375281927;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.33351238214893786;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15565296965180253;  // std dev = 0.476, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33837160044712344;  // std dev = 0.047, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then return -0.05896926946067836;  // std dev = 0.118, 196.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03702948126649576;  // std dev = 1.894, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.11082931287929718;  // std dev = 2.180, 45.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.22006692157025948;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2719984297018482;  // std dev = 0.088, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.12806080711279305;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return -0.04087811652116162;  // std dev = 1.488, 120.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=13 */
%   | | | else return -0.08819337460042526;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06546304440325935;  // std dev = 0.096, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2677283549915151;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.42681393004512724;  // std dev = 0.090, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return -0.13413871828074278;  // std dev = 0.057, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22307416456546686;  // std dev = 0.022, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.34438061112085727;  // std dev = 0.118, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2893272932433408;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, D) )
%   | | | then return -0.08314363444063926;  // std dev = 0.036, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | | else return -0.15730222661250254;  // std dev = 0.355, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3082591518132276;  // std dev = 0.322, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10700496050129348;  // std dev = 0.114, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04635596145685611;  // std dev = 1.097, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | | | else return 6.991088414787933E-4;  // std dev = 1.566, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.160008169579699;  // std dev = 0.990, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.18041893951164875;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1812336393539231;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.32224082077917415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.044624589154320826;  // std dev = 0.117, 192.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=20 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2480209920113751;  // std dev = 0.279, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10117682478452887;  // std dev = 0.137, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.023031444550331657;  // std dev = 1.347, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.057499019871070235;  // std dev = 1.283, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1712500793025015;  // std dev = 0.023, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.11501000672987556;  // std dev = 0.154, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.00425304395075624;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.2932289202579457;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.11248541940739515;  // std dev = 0.935, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.07375286823116356;  // std dev = 0.036, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.19306554291480385;  // std dev = 1.275, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.39722318274447865;  // std dev = 0.219, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12558080633476834;  // std dev = 0.058, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.11477637672270372;  // std dev = 0.983, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.2028411789583537;  // std dev = 0.217, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.14841352137187602;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.04110535555668322;  // std dev = 1.250, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return -0.07449110651536094;  // std dev = 0.056, 171.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=1 */
%   else if ( tweets(A, H) )
%   | then return 0.004369103715684767;  // std dev = 0.124, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.07595780162030956;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.002549217093642371;  // std dev = 0.955, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0.007512435447539562;  // std dev = 1.257, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning 14.312395811080933
Refined model CLL: -0.101885


******************************************
Best model found
******************************************
Results 

CLL : -0.105664 

AUC ROC : 0.99287 

AUC PR : 0.342515 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 17.867122173309326 

Total Inference Time : 13.18551754951477 

Total revision time: 42.43902230262756
Best scored revision CLL: -0.101885


Results 

CLL : -0.105664 

AUC ROC : 0.99287 

AUC PR : 0.342515 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 42.457130670547485 

Total Inference Time : 13.18551754951477 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.6900384426116943
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.106136779186202;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240225075698182;  // std dev = 0.156, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.046880002441727284;  // std dev = 0.252, 197.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05823059964162004;  // std dev = 1.784, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5539832884105479;  // std dev = 1.239, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.12984387708454545;  // std dev = 4.926, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5546916427031626;  // std dev = 1.073, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7137840754018686;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6326869120779266;  // std dev = 0.181, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4353314319919724;  // std dev = 0.959, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5565945248005055;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012829311096049133;  // std dev = 4.559, 254.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=34 */
%   | | | else return 0.10508671314551321;  // std dev = 3.959, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5529366125418328;  // std dev = 1.974, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12097744581889495;  // std dev = 0.128, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.13227255911887972;  // std dev = 0.005, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17311942798458604;  // std dev = 0.305, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30206686730033905;  // std dev = 1.166, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.40559025455454123;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2512314895814701;  // std dev = 0.983, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.4740800512504457;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6226243245510631;  // std dev = 0.328, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10446571382937365;  // std dev = 1.787, 271.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=5 */
%   | | else return 0.017695643382469782;  // std dev = 0.316, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015155565670208012;  // std dev = 3.291, 253.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2544801234857655;  // std dev = 0.138, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49082064089542077;  // std dev = 1.504, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12812658275677224;  // std dev = 0.225, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.12733701196047703;  // std dev = 0.184, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2809137473792648;  // std dev = 1.430, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08728523518708603;  // std dev = 1.677, 261.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008135883783178225;  // std dev = 2.419, 97.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17611394770594596;  // std dev = 0.988, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2287754440296783;  // std dev = 0.026, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051007394556682635;  // std dev = 0.155, 184.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.012403483786226832;  // std dev = 2.328, 117.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=28 */
%   | | | else return 0.0850887717392607;  // std dev = 2.307, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15468681565903392;  // std dev = 0.143, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2861723388420616;  // std dev = 0.856, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0906273847769237;  // std dev = 0.116, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3804522344257033;  // std dev = 0.781, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1199742774344282;  // std dev = 0.320, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16881777161273434;  // std dev = 1.257, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16281098916190173;  // std dev = 0.350, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08356454485071294;  // std dev = 0.375, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08979092754221984;  // std dev = 0.033, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.032688878575463313;  // std dev = 0.985, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.0071608253725958535;  // std dev = 1.315, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1922779138611166;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028515207809233847;  // std dev = 1.896, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
Inference time using transfer learning 7.961920261383057
Parameter learned model CLL:-0.11204 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 170, 0], 'true,false,false,true': [1.389, 54, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [6.32e-08, 63, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.156, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 178, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.784, 48, 4], 'false,false,false,true': [1.239, 2, 8], 'false,false,false,false': [4.926, 94, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.073, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [0.181, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.959, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.559, 220, 34], 'false,false,false,false': [3.959, 62, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.974, 0, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.128, 180, 0], 'false,true,false,false': [0.005, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.305, 99, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.166, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.983, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.328, 0, 39], 'false,false,true,false': [1.787, 266, 5], 'false,false,false': [0.316, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.291, 171, 82], 'false,true': [0.138, 0, 22], 'false,false,true': [1.504, 1, 52], 'false,false,false,true': [0.225, 83, 0], 'false,false,false,false': [0.184, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.43, 1, 121], 'true,false': [1.677, 254, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.419, 69, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.988, 1, 83], 'true,false,true': [0.026, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 165, 19], 'false,false,false,true': [2.328, 89, 28], 'false,false,false,false': [2.307, 38, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.143, 2, 78], 'false,true,true,true': [0.856, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.116, 210, 0], 'false,false,true': [0.781, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.32, 105, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.257, 1, 85], 'true,true,false': [0.35, 0, 19], 'true,false,true': [0.375, 166, 0], 'true,false,false,true': [0.033, 28, 0], 'true,false,false,false': [0.985, 24, 4], 'false,true': [1.315, 57, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.896, 41, 21]}]
{'': [0.21777069446768257, 0.2107511569953729], 'true': [0.009433106575965852, 0.016944114149821537], 'false': [0.20338326446281096, 0.2190041658401121], 'false,true': [7.105427357601002e-16, 6.344131569286608e-17], 'true,false': [-1.750233944703188e-16, 0.060353798126950985], 'true,false,false': [0.03443877551020404, 0.22222222222222224], 'false,true,true': [0.0, 0.0]}
{'': [0.0002872511788243561, 0.11993255310320199], 'false': [0.06346890250379347, 0.16563511362157032], 'false,false': [0.06123550740984463, 0.1907810324846444], 'false,false,false': [0.1535762066425015, 0.1810648564528825], 'false,true': [nan, 0.06346890250379347], 'false,false,true': [nan, 0.06123550740984463]}
{'': [0.01702134347208307, 0.12057300017094806], 'false': [nan, 0.1205730001709462], 'false,false': [0.04500442662212777, 0.11016394975900982], 'false,false,false': [0.08183196859196737, 0.1844086880814721], 'false,false,true': [0.13141652616216518, -1.1842378929335003e-16], 'true': [0.016931530084075358, 0.008949549987059607], 'true,true': [0.016931530084075358, nan], 'true,false': [0.017128647902317457, 0.00408872920542247]}
{'': [0.024973041396628457, 0.0009259295912153419], 'false': [9.322714029571863e-05, 0.0009392658817913027], 'false,false': [nan, 0.0009392658817913027], 'false,false,false': [nan, 0.0009392658817913027], 'false,true': [nan, 9.322714029572504e-05], 'false,true,false': [9.043695436466129e-05, 7.586402244344878e-07]}
{'': [0.01735397832938305, 0.07652251704475468], 'false': [0.04611606638403778, 0.07429539855020673], 'false,false': [0.06878566583305683, 0.09979403173754865], 'false,false,true': [0.0027552139983914804, 0.011779374044632258], 'false,true': [0.04605472947982196, 0.0], 'true': [0.01744080584232557, 0.0]}
{'': [0.042816365876429306, 0.08468220616384116], 'false': [0.0008639106976586864, 0.08996276072646099], 'false,false': [0.04269654062282413, 0.0006248646066732119], 'true': [nan, 0.04281636587642936], 'true,false': [nan, 0.042816365876429306], 'false,false,false': [0.000609099355518395, 0.0006496450838319776]}
{'': [0.04210633002422407, 0.06030393212145795], 'false': [nan, 0.060303932121458], 'false,false': [nan, 0.06030393212145795], 'false,false,false': [nan, 0.06030393212145795], 'true': [0.016756193439577675, 0.010771485283490492]}
{'': [0.011416133116702499, 0.04409605562859656], 'false': [nan, 0.04409605562859657], 'false,false': [0.023931866805149853, 0.06216855133673492], 'false,false,false': [0.04632103656664895, 0.08586174999292244], 'true': [0.011615311442701977, 0.00034190402490331256], 'true,false': [0.00034190402490331256, nan]}
{'': [0.0203930099528961, 0.03440020477360338], 'false': [0.021431786756558845, 0.054941492592155104], 'false,false': [0.015254578815029651, 0.0009770910199273955], 'false,true': [0.01929423177737448, 6.388401084992443e-05], 'false,true,true': [0.01929423177737448, nan], 'false,false,false': [nan, 0.0009770910199273955]}
{'': [0.021974289091400475, 0.036998422627600745], 'false': [0.021096115902369192, 0.056979672756119384], 'false,false': [0.0, 0.05797965721932442], 'false,false,false': [nan, 0.05797965721932435], 'true': [0.016232826752298757, 0.005311158526909322], 'true,true': [0.018387184149825014, 0.006451972433940426], 'true,false': [0.0008458324820367133, 0.018174991007170717], 'true,false,false': [3.9774827381176825e-05, 0.03467988518885934]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 20.148053407669067
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7076407356905915;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return 0.7362876829835238;  // std dev = 0.193, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.7369077757117586;  // std dev = 0.193, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3899324023572592;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12754732286356651;  // std dev = 0.053, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.11334225078315123;  // std dev = 0.854, 57.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.02312832377055175;  // std dev = 1.684, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.13254696023109572;  // std dev = 2.626, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5676750657873071;  // std dev = 0.272, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5629340184628077;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.22215109261388247;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5905048604552885;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5558734969953579;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4697843540203924;  // std dev = 1.383, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.11364924511218569;  // std dev = 0.044, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06044235664913494;  // std dev = 2.795, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.14742534125439236;  // std dev = 3.053, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.41246751729877096;  // std dev = 0.998, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   | | | else return 0.2900878737989563;  // std dev = 0.540, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4173647806353236;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5870896840120001;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, I) )
%   | | | then return 0.3009515876977352;  // std dev = 0.736, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5417324026233531;  // std dev = 0.251, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5427508072051085;  // std dev = 0.933, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7951389442062458;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11477957046163871;  // std dev = 0.025, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33055754684333366;  // std dev = 0.181, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.5061815205528206;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3237725310712755;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5004743867100947;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0893752682577907;  // std dev = 0.433, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   | | | else return -0.019574912737773138;  // std dev = 1.657, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.010763949824285145;  // std dev = 2.334, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.07378981881856339;  // std dev = 2.487, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.21621102617925314;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2569846430923774;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.03554195725392322;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2586722864343396;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.047067229095913994;  // std dev = 0.137, 140.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=14 */
%   | | else return -0.07103662469118878;  // std dev = 0.083, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26939466924076344;  // std dev = 0.036, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4387436976271028;  // std dev = 0.113, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.11481470778101723;  // std dev = 0.029, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2210793877498057;  // std dev = 0.022, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.10310784774877539;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.2129205473876712;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3194064498788427;  // std dev = 0.064, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.0825975845215626;  // std dev = 0.062, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.2709671322607088;  // std dev = 0.238, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10112330878761634;  // std dev = 0.794, 74.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17941457273757822;  // std dev = 0.922, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.07766561666867243;  // std dev = 1.652, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.14305383503701366;  // std dev = 1.398, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.18574871115011138;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.10178034627477141;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.13010043347525269;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.08087547301839393;  // std dev = 0.866, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.049662853410280726;  // std dev = 0.108, 257.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 8.076646529076638E-4;  // std dev = 0.193, 99.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=33 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.08249567375913548;  // std dev = 0.996, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.020965614209918725;  // std dev = 1.708, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16698358403522603;  // std dev = 0.019, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.05794570925859087;  // std dev = 0.304, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.15970349408595358;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16713462728090484;  // std dev = 0.129, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.23962716313017815;  // std dev = 0.960, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07296613759978073;  // std dev = 0.035, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25294611904852476;  // std dev = 0.281, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.44088572859222536;  // std dev = 0.235, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1257513676664827;  // std dev = 0.044, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1588133457493372;  // std dev = 0.038, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else return -0.062208585636600665;  // std dev = 0.045, 218.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1969830540735446;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08019885225027928;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.012136168882829907;  // std dev = 0.504, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.0044031681813533645;  // std dev = 0.659, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14902288164530064;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.0017944119152729608;  // std dev = 1.055, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return -0.08609379471876233;  // std dev = 1.579, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
Inference time using transfer learning 10.758893728256226
Refined model CLL: -0.101248


******************************************
Best model found
******************************************
Results 

CLL : -0.102738 

AUC ROC : 0.992486 

AUC PR : 0.33423 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 20.148053407669067 

Total Inference Time : 12.930186986923218 

Total revision time: 45.37660884857178
Best scored revision CLL: -0.101248


Results 

CLL : -0.102738 

AUC ROC : 0.992486 

AUC PR : 0.33423 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 45.3947172164917 

Total Inference Time : 12.930186986923218 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.167569875717163
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.19148226843284552;  // std dev = 0.471, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6781643902400936;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06589052024221803;  // std dev = 0.217, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3280334348081361;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.445108530119613;  // std dev = 1.207, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.7410090742905392;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5761931036449264;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5761931036449264;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07354171686769159;  // std dev = 1.407, 50.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   | | | else return -0.01789458216845276;  // std dev = 1.241, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49294542841534533;  // std dev = 0.873, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1102119893202141;  // std dev = 0.012, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.11653745563638045;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1949997927450507;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3473089818775524;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.45444303500734495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3182179304921018;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6180844234175442;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07851793709288313;  // std dev = 1.122, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | else return -0.09525898341342576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03197217163222213;  // std dev = 1.575, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25346977366260093;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3842168750916094;  // std dev = 0.802, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13342886637424192;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.11831015781916168;  // std dev = 0.098, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.289611213319415;  // std dev = 0.325, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06970816857854831;  // std dev = 1.006, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06508915709479907;  // std dev = 0.351, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20690491153615861;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, E) )
%   | | then return 0.197534610773481;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05376487372430475;  // std dev = 0.129, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05641789201515462;  // std dev = 0.327, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.12695305468624876;  // std dev = 0.888, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18962997602724457;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22389477816867714;  // std dev = 0.342, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08641788123847609;  // std dev = 0.017, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.49288190772245316;  // std dev = 0.284, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1162477098571945;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12795359247230328;  // std dev = 1.049, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.13829187212848637;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08036198913527576;  // std dev = 0.010, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07294107759588284;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07219768393976111;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return -0.05509007381250477;  // std dev = 0.249, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011215419155126756;  // std dev = 0.778, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
Inference time using transfer learning 9.901389360427856
Parameter learned model CLL:-0.109663 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.978, 1, 22], 'true,false,true': [3.94e-08, 38, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.0, 3, 0], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.471, 4, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.975, 1, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.217, 40, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.149, 3, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.207, 2, 12], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [1.05e-08, 0, 3], 'false,false,false,true': [1.407, 47, 3], 'false,false,false,false': [1.241, 11, 2]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.873, 1, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.012, 40, 0], 'false,true,false,false': [0.0, 5, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.082, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 12], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.085, 0, 3], 'false,false,true,false': [1.122, 49, 2], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.575, 33, 18], 'false,true': [0.0, 0, 4], 'false,false,true': [0.802, 1, 3], 'false,false,false,true': [0.092, 8, 0], 'false,false,false,false': [0.098, 9, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.325, 0, 20], 'true,false': [1.006, 45, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.351, 3, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.053, 0, 18], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.129, 34, 3], 'false,false,false,true': [0.327, 8, 1], 'false,false,false,false': [0.888, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.028, 0, 13], 'false,true,true,true': [0.342, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.017, 39, 0], 'false,false,true': [0.284, 0, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.076, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.049, 1, 19], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.01, 43, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.011, 2, 0], 'false,true': [0.249, 7, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.778, 6, 2]}]
{'': [0.21718126444024455, 0.20999999999999988], 'true': [0.04158790170132359, 4.102998134484274e-17], 'false': [0.18750000000000003, 0.22222222222222224], 'false,true': [0.0, 0.0], 'true,false': [4.0902953538821554e-17, -6.938893903907228e-18], 'false,true,true': [0.0, nan], 'true,false,false': [-2.7755575615628915e-18, 0.0]}
{'': [0.04749999999999943, 0.0769519271904215], 'false': [0.04728924006458037, 0.1613907814850431], 'false,false': [-2.3129646346357427e-18, 0.21996038147158173], 'false,false,false': [nan, 0.21996038147158173], 'false,true': [nan, 0.04728924006458037], 'false,false,true': [nan, -2.3129646346357427e-18]}
{'': [0.10257920246432335, 0.0874074372394605], 'true': [0.10257920246432335, nan], 'true,true': [0.10406914621858883, 0.0], 'false': [nan, 0.08740743723946046], 'false,false': [6.344131569286608e-17, 0.056382803148257575], 'false,false,false': [0.03958110218308731, 0.11854710803242542], 'false,false,true': [0.0, 3.700743415417188e-17]}
{'': [0.029295343867116852, 0.0011138927516404834], 'false': [7.1536531983366436e-06, 0.0007556858899427859], 'false,false': [nan, 0.0007556858899427859], 'false,false,false': [nan, 0.0007556858899427859], 'false,true': [nan, 7.1536531983366436e-06], 'false,true,false': [3.6021349462192487e-06, 0.0]}
{'': [0.0008149849945573611, 0.05339977938254452], 'false': [0.0, 0.04574312036784387], 'false,false': [0.04891951867792666, 0.0], 'false,false,true': [0.002424409044928281, 0.024695922423109796], 'true': [-1.1102230246251565e-16, 0.0], 'false,true': [0.0, nan]}
{'': [0.04861211661156869, 0.07078062486601716], 'false': [0.0, 0.07155504624553607], 'false,false': [0.16066347882388157, 0.0011150834574842306], 'true': [nan, 0.048612116611568695], 'true,false': [nan, 0.04861211661156869], 'false,false,false': [0.0010509335545719027, 0.001064540723583492]}
{'': [0.04370191745756764, 0.020582272489939248], 'true': [0.005277645824534849, 0.021512247998431856], 'false': [nan, 0.020582272489939248], 'false,false': [nan, 0.020582272489939248], 'false,false,false': [nan, 0.020582272489939248]}
{'': [0.00015323888147094884, 0.03239160185790767], 'false': [nan, 0.03239160185790774], 'false,false': [0.016595949551726736, 0.06779805977821766], 'false,false,false': [0.011875502946170397, 0.1315069525697872], 'true': [0.00015713096653835468, 0.0], 'true,false': [0.0, nan]}
{'': [0.0008067960868535357, 0.030371767671523397], 'false': [0.017119288830224275, 0.08655781149447725], 'false,false': [0.02689817040446607, 0.0008145618006636617], 'false,true': [0.013033337650359978, 7.08565564846641e-06], 'false,true,true': [0.013033337650359978, nan], 'false,false,false': [nan, 0.0008145618006636617]}
{'': [0.024482512850395197, 0.04275349090547198], 'false': [0.007722795268625912, 0.07558597734347773], 'false,false': [nan, 0.07558597734347773], 'false,false,false': [nan, 0.07558597734347773], 'true': [0.04787786305427363, 1.137997543076641e-05], 'true,true': [0.05504560163942562, 0.0], 'true,false': [2.2519505805351004e-06, 1.734214913012249e-05], 'true,false,false': [0.0, 6.0302783292591304e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, E).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.559471845626831
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(G, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.7392070123615109;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7670719622367216;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.055034800966779235;  // std dev = 0.234, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.01982988218597316;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.036976401070639243;  // std dev = 0.763, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.49040032115077253;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5750887498568714;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7234582324775121;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6046262796882593;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.09370973569107109;  // std dev = 0.838, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | | else return 0.09382849110402676;  // std dev = 0.735, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.18395134088031964;  // std dev = 0.476, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.2862798584223446;  // std dev = 0.349, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.19731666216014265;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4551590058271044;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.708266354988206;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.11185403972019745;  // std dev = 0.040, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.12201696139590763;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11350881499848683;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.15175227205594852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3638426242392038;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3499478055449285;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6071956417719204;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.34637626930311444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.54871444069834;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08619088068743032;  // std dev = 0.948, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else return -0.10953651101337354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.2779322447986616;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3599502326611134;  // std dev = 0.155, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09376028807778028;  // std dev = 0.005, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.32057528101688615;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06308550780339073;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2682562314478333;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.25798236831510307;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.12524967503564846;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.17401102406918423;  // std dev = 0.211, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.22815249871152005;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21817278087660807;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.09569733970551203;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A), tweets(F, C) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return -0.08429556142078182;  // std dev = 0.007, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.08935243618251974;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.10804089006385163;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), follows(H, A) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2567580520771764;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.023854322088702154;  // std dev = 0.298, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.4004393398422657;  // std dev = 0.236, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19121432741953612;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18049632439446867;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.169019957703286;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.262699833165022;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then if ( tweets(A, I), follows(H, A) )
%   | | | then return -0.06237762686266776;  // std dev = 0.420, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return -0.08487796503658383;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(G, J), follows(J, A) )
%   | | | then return -0.07810450417333224;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -2.4736550988211124E-4;  // std dev = 0.506, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.016147458604088363;  // std dev = 0.231, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1633751556554658;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.19460587329495352;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.23667380141553615;  // std dev = 0.193, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15226929395259645;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07683012200032151;  // std dev = 0.008, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3662155141505008;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.09758538461298362;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.29410287468223784;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13747412178955462;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.28367677433045363;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14057084480308457;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07103585288594162;  // std dev = 0.007, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06765265890420642;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08308184404872247;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return -0.011859780266605412;  // std dev = 0.273, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.08669677705364992;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.04959999118132844;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning 24.37038803100586
Refined model CLL: -0.111495


******************************************
Best model found
******************************************
Results 

CLL : -0.108057 

AUC ROC : 0.995556 

AUC PR : 0.450396 

Precision : 0.364303 

Recall : 0.955128 

F1 : 0.527434 

Total Learning Time : 4.559471845626831 

Total Inference Time : 4.742976665496826 

Total revision time: 12.69540023803711
Best scored revision CLL: -0.109663


Results 

CLL : -0.108057 

AUC ROC : 0.995556 

AUC PR : 0.450396 

Precision : 0.364303 

Recall : 0.955128 

F1 : 0.527434 

Total Learning Time : 12.713508605957031 

Total Inference Time : 4.742976665496826 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.4537603855133057
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.07518439823382113;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.6081489350995122;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6882234122109547;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.00754909656476188;  // std dev = 0.293, 86.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021831872220983102;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10292553942681144;  // std dev = 1.886, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.46365624990399495;  // std dev = 1.668, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else return 0.7209945296496134;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8695534534888735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5630691875243455;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5630691875243455;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02435688469157426;  // std dev = 2.493, 82.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=10 */
%   | | | else return 0.040633978688093084;  // std dev = 1.775, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5405552413240948;  // std dev = 0.929, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12310588797252751;  // std dev = 0.019, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.1296200080728317;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1804591666339527;  // std dev = 0.263, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30645935111823036;  // std dev = 1.067, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.42259013047653915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29943353380070614;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5162612047660898;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09168087036310545;  // std dev = 1.468, 104.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=4 */
%   | | else return -0.11461143305942258;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03665950459229613;  // std dev = 2.290, 108.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=37 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24059315464658249;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5696053098879202;  // std dev = 0.216, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10568738033041407;  // std dev = 8.82e-05, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.12441449694738116;  // std dev = 0.166, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2703595959530169;  // std dev = 1.385, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else return -0.0851363169705607;  // std dev = 1.214, 88.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0899406379970289;  // std dev = 0.400, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.10770964910307758;  // std dev = 1.643, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | else if ( follows(A, E) )
%   | | then return 0.18901097939722245;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0419283459306;  // std dev = 0.218, 72.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.018834187546943538;  // std dev = 0.804, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.03318727860781512;  // std dev = 1.026, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13538934209712547;  // std dev = 0.268, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28862764145083614;  // std dev = 0.517, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09455562247792244;  // std dev = 0.022, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43010308948002623;  // std dev = 0.286, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12774540728753483;  // std dev = 0.235, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.21444192956209582;  // std dev = 0.501, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.1328142810620404;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0860844650450761;  // std dev = 0.017, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09054865700932488;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0036672278268159663;  // std dev = 0.357, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.02203901422249612;  // std dev = 0.506, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.6600921856894012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00707950801974978;  // std dev = 0.855, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning 9.850138664245605
Parameter learned model CLL:-0.116563 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.31e-07, 0, 43], 'true,false,true': [7.74e-08, 81, 0], 'true,false,false,true': [0.966, 14, 1], 'true,false,false,false': [0.0, 2, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,false': [0.433, 1, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.984, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.293, 74, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.943, 8, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.886, 14, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.668, 3, 24], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.493, 72, 10], 'false,false,false,false': [1.775, 18, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.929, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 57, 0], 'false,true,false,false': [0.006, 12, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.263, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.067, 1, 25], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.951, 1, 11], 'false,false,true,false': [1.468, 100, 4], 'false,false,false': [1.86e-09, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.29, 71, 37], 'false,true': [0.0, 0, 6], 'false,false,true': [0.216, 0, 7], 'false,false,false,true': [8.82e-05, 10, 0], 'false,false,false,false': [0.166, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.385, 2, 41], 'true,false': [1.214, 84, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.4, 3, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.643, 3, 30], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.218, 60, 12], 'false,false,false,true': [0.804, 19, 4], 'false,false,false,false': [1.026, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.268, 2, 26], 'false,true,true,true': [0.517, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.022, 81, 0], 'false,false,true': [0.286, 0, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.235, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.501, 0, 38], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.017, 86, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.357, 4, 1], 'false,true': [0.506, 7, 3], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.855, 8, 3]}]
{'': [0.21467733011418044, 0.2283737024221454], 'false': [0.17751479289940816, 0.18750000000000006], 'true': [1.2393187251629655e-15, 0.010099958350687223], 'false,true': [1.4802973661668753e-16, -1.1102230246251566e-17], 'true,false': [7.401486830834377e-17, 0.055363321799308], 'true,false,false': [0.06222222222222227, 0.0], 'false,true,true': [1.4802973661668753e-16, nan]}
{'': [0.0302734374999995, 0.10457504705271435], 'false': [0.08571271269187088, 0.15666103761994382], 'false,false': [0.0987654320987654, 0.17788372542000816], 'false,false,false': [nan, 0.17788372542000816], 'false,false,true': [nan, 0.0987654320987654], 'false,true': [nan, 0.08571271269187088]}
{'': [0.10340858165766723, 0.10671630557300026], 'false': [nan, 0.10671630557300028], 'false,false': [-9.868649107779169e-17, 0.08992551606390721], 'true': [0.10167498365390136, 0.0], 'true,true': [0.1030756169955726, 0.0], 'false,false,false': [0.07578331348124297, 0.13704694637275736], 'true,false': [0.0, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.01727234351515257, 0.0013324188479531187], 'false': [1.2015940244793137e-05, 0.003649264982845422], 'false,false': [nan, 0.003649264982845422], 'false,false,false': [nan, 0.003649264982845422], 'false,true': [nan, 1.2015940244796356e-05], 'false,true,false': [6.585769033420263e-06, 2.755277283927419e-06]}
{'': [0.042658571568995336, 0.060712109150333385], 'false': [0.0, 0.057588941187320976], 'false,false': [0.06064497449055981, 3.96508223080413e-18], 'false,false,true': [0.07532435629930352, 0.020717382420364725], 'true': [0.043799791122541364, 0.0], 'false,true': [0.0, nan]}
{'': [0.048571055385575386, 0.07452416778601033], 'false': [0.0, 0.08115195704583544], 'false,false': [0.0066752753986103796, 0.0011420437482609325], 'true': [nan, 0.04857105538557516], 'true,false': [nan, 0.048571055385575386], 'false,false,false': [7.771015608781795e-10, 0.0017209341064718872]}
{'': [0.05375922638907514, 0.019970383339792234], 'true': [0.0446241820436961, 0.01674030157148384], 'false': [nan, 0.019970383339792234], 'false,false': [nan, 0.019970383339792234], 'false,false,false': [nan, 0.019970383339792234]}
{'': [0.07962055392334823, 0.04929151062205244], 'true': [0.08183888897258454, 0.0], 'false': [nan, 0.049291510622052406], 'false,false': [0.04755682671844987, 0.052040872480221614], 'false,false,false': [0.02809423220724889, 0.1052319827553169], 'true,false': [0.0, nan]}
{'': [0.07180349948722195, 0.03149610163448702], 'false': [0.024550902555827637, 0.0543570342305599], 'false,false': [0.01359181638600134, 0.0023093496225340382], 'false,true': [0.014869846743759426, 5.9912454615394126e-06], 'false,true,true': [0.014869846743759426, nan], 'false,false,false': [nan, 0.0023093496225340382]}
{'': [0.020762026680722356, 0.06434498266218555], 'false': [0.02559833241106622, 0.09346190137489772], 'false,false': [0.0, 0.06642297476375073], 'false,false,false': [nan, 0.06642297476375073], 'true': [0.006518297084645218, 0.0016654558557401625], 'true,true': [0.00660119182348573, 0.0], 'true,false': [3.3032133287071324e-06, 0.014599046068144878], 'true,false,false': [-1.3877787807814458e-18, 0.025423900767892103]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.160109996795654
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(G, C) )
%   | | | then return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.678922518009587;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.7413127617845985;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12764065237571234;  // std dev = 0.043, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.011929214074827907;  // std dev = 1.097, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.16050697383317056;  // std dev = 1.582, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5299550850403649;  // std dev = 0.974, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.22529345256088185;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.549967232677441;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7482738427811289;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11335965019800973;  // std dev = 0.034, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.021910780325722523;  // std dev = 1.316, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.4140618877299135;  // std dev = 1.084, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3559916751213359;  // std dev = 1.347, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.18878092485875855;  // std dev = 1.488, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.4293401024325028;  // std dev = 0.161, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.7199098208103766;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.10316657050270392;  // std dev = 0.033, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.10130104657533491;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, I) )
%   | | then return -0.1370519584559155;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.2583591007218092;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.30632186138512163;  // std dev = 0.971, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.34305305140991466;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.46154864628288966;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3145852484697844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then return 0.32888689350927114;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3181408534387194;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.039938394801847125;  // std dev = 1.281, 76.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=9 */
%   | | | else return 0.057311289679849976;  // std dev = 1.488, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return -0.10202660513213312;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.23788455480916598;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.25402703797458664;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2992586033465626;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2607584844067646;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04191438768852538;  // std dev = 1.182, 70.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=7 */
%   | | | else return -0.042923534970729975;  // std dev = 0.555, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2534171330352484;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.51689658369704;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13860213138578867;  // std dev = 0.047, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.23143337695165697;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.11862295370598079;  // std dev = 0.837, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( tweets(E, F), follows(E, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3638586786990979;  // std dev = 0.186, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08750521979616921;  // std dev = 0.049, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.07213078322893317;  // std dev = 0.128, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.29058383928809545;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08572284932619875;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.08340837620693643;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0790723069232045;  // std dev = 1.192, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.15063441255760548;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.20175032269775856;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17489591755547118;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1703134181607141;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.26833648119075676;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.07898350708366146;  // std dev = 0.008, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.0985128234944062;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06867431972154651;  // std dev = 0.460, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.04539282856146062;  // std dev = 0.298, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18005973488485794;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.040976010170798195;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.21878383978259522;  // std dev = 0.164, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.01738118733999831;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.07337371045117623;  // std dev = 0.008, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.02728082669446515;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.42663262093500154;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10886999285760128;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.1844209577632958;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08262377084731042;  // std dev = 1.345, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.18405971924087736;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.15150636060022327;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0739055754404206;  // std dev = 0.081, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.04040379350537459;  // std dev = 0.470, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.01035290130641791;  // std dev = 0.338, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14547543755840714;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0865706978243852;  // std dev = 0.626, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
Inference time using transfer learning 16.723994731903076
Refined model CLL: -0.10797


******************************************
Best model found
******************************************
Results 

CLL : -0.105796 

AUC ROC : 0.993639 

AUC PR : 0.327472 

Precision : 0.322148 

Recall : 0.923077 

F1 : 0.477612 

Total Learning Time : 7.160109996795654 

Total Inference Time : 6.334184408187866 

Total revision time: 18.804304599761963
Best scored revision CLL: -0.10797


Results 

CLL : -0.105796 

AUC ROC : 0.993639 

AUC PR : 0.327472 

Precision : 0.322148 

Recall : 0.923077 

F1 : 0.477612 

Total Learning Time : 18.822412967681885 

Total Inference Time : 6.334184408187866 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0012073516845703
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8119950889456665;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.07042249347191636;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.17064893509951234;  // std dev = 0.464, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.651770597943398;  // std dev = 1.922, 52.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03458252544436842;  // std dev = 0.265, 130.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07793728853160803;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7777770669954418;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10847483971119237;  // std dev = 2.456, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5910806723077681;  // std dev = 0.210, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.7354762942145938;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8752676825733344;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3142403892588072;  // std dev = 0.760, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5832755035560472;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5832755035560473;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03455039912730244;  // std dev = 3.094, 141.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=15 */
%   | | | else return 0.0019303148577486749;  // std dev = 2.121, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47017080710650844;  // std dev = 2.616, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11869562773101047;  // std dev = 0.034, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return -0.12190601262831985;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14906013844425112;  // std dev = 0.130, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.34266822477821984;  // std dev = 0.382, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.4855734251253164;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3280072152674371;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6366031437020034;  // std dev = 0.131, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08515507042711368;  // std dev = 1.761, 154.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=5 */
%   | | else return -0.10894084302080084;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03982237738842669;  // std dev = 2.696, 154.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2601441993971471;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46055302347712396;  // std dev = 1.281, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11252376634103164;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.12321028868043046;  // std dev = 0.125, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28984117850778296;  // std dev = 1.169, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return -0.07834451470887246;  // std dev = 1.602, 158.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02764572023202079;  // std dev = 0.529, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17661181218419245;  // std dev = 1.032, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( follows(A, E) )
%   | | then return 0.20183210708046273;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048170310905789694;  // std dev = 0.144, 142.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013451467972923058;  // std dev = 1.140, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
%   | | | else return 0.13879514634556156;  // std dev = 1.233, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16591793447646816;  // std dev = 0.160, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29415503708806073;  // std dev = 0.575, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09152049944178334;  // std dev = 0.031, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4480707672139778;  // std dev = 0.509, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10972365914512501;  // std dev = 0.103, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14279477636076487;  // std dev = 1.790, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | else return 0.14139203845288484;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.08430356665147504;  // std dev = 0.011, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08233144303619855;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.09111418069406653;  // std dev = 0.660, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.028646265168321673;  // std dev = 0.770, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2487421320826554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044842979538268775;  // std dev = 1.046, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning 10.22556209564209
Parameter learned model CLL:-0.111463 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.692, 3, 62], 'true,false,true': [8.16e-08, 109, 0], 'true,false,false,true': [0.964, 13, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,false': [0.464, 11, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.922, 4, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 116, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.972, 17, 1], 'false,false,false,true': [0.082, 0, 2], 'false,false,false,false': [2.456, 26, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.21, 0, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.76, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [2.11e-08, 0, 5], 'false,false,false,true': [3.094, 126, 15], 'false,false,false,false': [2.121, 32, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.616, 5, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 93, 0], 'false,true,false,false': [7.45e-09, 18, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.13, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.382, 0, 41], 'true,false': [0.044, 0, 2], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.131, 0, 16], 'false,false,true,false': [1.761, 149, 5], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.696, 99, 55], 'false,true': [0.0, 0, 7], 'false,false,true': [1.281, 1, 13], 'false,false,false,true': [0.058, 17, 0], 'false,false,false,false': [0.125, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.169, 1, 64], 'true,false': [1.602, 152, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.529, 8, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.032, 1, 47], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 128, 14], 'false,false,false,true': [1.14, 36, 8], 'false,false,false,false': [1.233, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.16, 1, 43], 'false,true,true,true': [0.575, 0, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.031, 134, 0], 'false,false,true': [0.509, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.103, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.79, 3, 57], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.011, 95, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.66, 8, 1], 'false,true': [0.77, 14, 7], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.046, 10, 4]}]
{'': [0.22281009506564073, 0.21606648199445933], 'true': [0.044023668639052445, 0.008063983078855145], 'false': [0.2169421487603307, 0.2148437499999998], 'false,true': [-2.5376526277146434e-16, -1.4802973661668754e-17], 'true,false': [6.111319401606367e-17, 0.06632653061224494], 'true,false,false': [0.06632653061224494, nan], 'false,true,true': [-2.5376526277146434e-16, nan]}
{'': [0.07100591715976293, 0.0969899083345414], 'false': [0.07047490140087245, 0.15053420608703358], 'false,false': [0.05246913580246913, 0.18119633625185375], 'false,false,false': [0.0033993161612285716, 0.16749681840291825], 'false,true': [nan, 0.07047490140087245], 'false,false,true': [nan, 0.05246913580246913]}
{'': [0.021565831580912572, 0.09455318061840716], 'false': [nan, 0.09455318061840666], 'false,false': [1.2111523905001707e-16, 0.07881533035213047], 'false,false,false': [0.06787394579057662, 0.11836530842803936], 'true': [0.0016070774719721737, 0.20328594043452847], 'true,false': [0.0, 0.19236001461841515], 'true,true': [0.0011270321959916995, 0.0], 'false,false,true': [7.401486830834377e-17, 8.881784197001253e-17]}
{'': [0.08552947075940094, 0.0002877909448091615], 'false': [1.1595736828864068e-05, 0.00046685453572371035], 'false,false': [nan, 0.00046685453572371035], 'false,false,false': [nan, 0.00046685453572371035], 'false,true': [nan, 1.1595736828864068e-05], 'false,true,false': [1.2168737120831493e-05, 3.0839528461809902e-18]}
{'': [0.00434153795937737, 0.06292558183967308], 'false': [-6.055761952500853e-17, 0.05970285393637383], 'false,false': [0.06274746336244919, 0.0], 'false,false,true': [0.0010662567945154966, 0.020126731499023765], 'true': [0.0035559463930031053, 0.0009741244250264514], 'false,true': [-6.055761952500853e-17, nan]}
{'': [0.04718788439878368, 0.08253437691109583], 'false': [-3.9650822308041306e-17, 0.08558266772501347], 'false,false': [0.11714365038004093, 0.0004217217368653117], 'true': [nan, 0.04718788439878378], 'true,false': [nan, 0.04718788439878368], 'false,false,false': [0.00019625779620584832, 0.0005049167961466634]}
{'': [0.045636006696606744, 0.021533782486800414], 'true': [0.02101995415348054, 0.016249653868434324], 'false': [nan, 0.021533782486800414], 'false,false': [nan, 0.021533782486800414], 'false,false,false': [nan, 0.021533782486800414]}
{'': [0.02175029917720762, 0.0310466963041385], 'false': [nan, 0.031046696304138248], 'false,false': [0.020623130583088026, 0.05357323943110111], 'false,false,false': [0.029552524782823667, 0.1169815340046705], 'true': [0.022190449526909906, 0.0], 'true,false': [0.0, nan]}
{'': [0.02553948472192212, 0.031485202330156906], 'false': [0.02014369122658101, 0.08108095976199049], 'false,false': [0.025940734513910747, 0.0005949103484027814], 'false,true': [0.015023471827553835, 7.377925659920144e-06], 'false,true,true': [0.015023471827553835, nan], 'false,false,false': [nan, 0.0005949103484027814]}
{'': [0.032869966851797106, 0.04817097231577947], 'false': [0.02823718412675739, 0.07556060036103758], 'false,false': [0.0, 0.07818612847389043], 'false,false,false': [nan, 0.07818612847389043], 'true': [0.049280336742946455, 0.003959301565305872], 'true,true': [0.05338688011201471, -2.7755575615628915e-18], 'true,false': [1.1912783344587913e-06, 0.029017942519292864], 'true,false,false': [1.1564823173178713e-18, 0.04833238293984803]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.8418965339660645
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.16584124279182003;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6872153476948255;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0.7194734122109542;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.7299063203120915;  // std dev = 0.130, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12673086292150662;  // std dev = 0.053, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14443085832463678;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5613502012920002;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.552788725609108;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.739867130161806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.12053418460469445;  // std dev = 1.145, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5678197874245222;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1125458533241692;  // std dev = 0.025, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06671036797191082;  // std dev = 1.456, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.15641191329696702;  // std dev = 1.579, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.42130353991844754;  // std dev = 0.003, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, E), follows(E, D) )
%   | | | then return 0.42587034537743107;  // std dev = 0.157, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.46985005061228485;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5305376420018881;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7987040959103545;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.10244627779909103;  // std dev = 0.004, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11914147925080794;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.12888159548078504;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.20349202629813987;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.26416999305201566;  // std dev = 1.375, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.17874781951929095;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.37375940212812797;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4733093829204363;  // std dev = 0.234, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3198867451139447;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.30633610346136547;  // std dev = 1.083, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.07552413666269939;  // std dev = 1.425, 133.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=5 */
%   | | else return -0.09249251775049186;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2411840330765184;  // std dev = 0.969, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.10396840128653945;  // std dev = 1.330, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return -0.08634531112872228;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.27143576818951765;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.052169572846801744;  // std dev = 0.104, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2546091534896022;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3550328251783006;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6146043704259525;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1140660752730453;  // std dev = 0.031, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.22598251503745964;  // std dev = 0.005, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, D), tweets(C, D) )
%   | | then return 0.21010351433311417;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13217741525197144;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07090666204685854;  // std dev = 0.052, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   | | else return -0.0023643438044004474;  // std dev = 0.143, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.13980728697082373;  // std dev = 0.989, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09344502130973369;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11248366526586312;  // std dev = 0.419, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.12387324104926517;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.15333103369831355;  // std dev = 0.983, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.18454109232030783;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18626999466408012;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.22909340391362187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.05031054634344911;  // std dev = 0.136, 132.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2627022975690461;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09157393256288897;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.054742423195828706;  // std dev = 0.444, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03786425679407643;  // std dev = 1.089, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.12917905024543788;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.1632430740798959;  // std dev = 0.025, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.014532869730875503;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.27361797682971073;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2109942393145098;  // std dev = 0.055, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.07368720598801679;  // std dev = 0.004, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2234036201480143;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4329817316919359;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11596477463755983;  // std dev = 0.041, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.12345415100348164;  // std dev = 1.380, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.16722757455831241;  // std dev = 0.139, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1260707714327547;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0663933186089106;  // std dev = 0.029, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.017528771417176195;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return -0.0031555697787141617;  // std dev = 0.156, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.27832616374131247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.02301915443907193;  // std dev = 0.295, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03481568225602184;  // std dev = 0.700, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning 19.504908323287964
Refined model CLL: -0.101574


******************************************
Best model found
******************************************
Results 

CLL : -0.09898 

AUC ROC : 0.995144 

AUC PR : 0.426356 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 6.8418965339660645 

Total Inference Time : 10.48659062385559 

Total revision time: 24.70401120185852
Best scored revision CLL: -0.101574


Results 

CLL : -0.09898 

AUC ROC : 0.995144 

AUC PR : 0.426356 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 24.722119569778442 

Total Inference Time : 10.48659062385559 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.2695000171661377
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8343394112899883;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.14386322081379807;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7109544894171869;  // std dev = 1.000, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04047480300930974;  // std dev = 0.255, 170.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09998972139490539;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7595551847189356;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12013338685693675;  // std dev = 2.837, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5758477259417164;  // std dev = 0.325, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.7322631584241233;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7955367686347805;  // std dev = 0.120, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6003809572260613;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5633344913431239;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5633344913431239;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.045379675190537476;  // std dev = 3.104, 161.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=15 */
%   | | | else return 0.05576489543123169;  // std dev = 2.630, 49.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5088279232905708;  // std dev = 1.720, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11736080608236457;  // std dev = 0.105, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return -0.12713171729597011;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1586807164683456;  // std dev = 0.134, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2744619288810152;  // std dev = 1.667, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return 0.3929507752111115;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3063038801616385;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6341317228712665;  // std dev = 0.188, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0864313807011205;  // std dev = 1.928, 180.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=6 */
%   | | else return -0.10329823775686478;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03351367428491477;  // std dev = 2.924, 205.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17337324533032883;  // std dev = 0.968, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.471906209783005;  // std dev = 1.270, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1146326619522229;  // std dev = 0.094, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.12229877539798907;  // std dev = 0.159, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2724414582106637;  // std dev = 1.572, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | else return -0.07651014423545492;  // std dev = 1.747, 182.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.017967620541582262;  // std dev = 1.012, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18235015398560217;  // std dev = 0.997, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.20830575563144282;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03986488761783091;  // std dev = 0.152, 145.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005080039660442227;  // std dev = 1.123, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | | else return 0.0971048409130966;  // std dev = 1.520, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14744632860140244;  // std dev = 0.187, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2772575366716052;  // std dev = 0.601, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09023529673255735;  // std dev = 0.063, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3677203827533564;  // std dev = 1.165, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11178682523141337;  // std dev = 0.145, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15026559727235603;  // std dev = 1.806, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | else return 0.15041830048925542;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08474037301894247;  // std dev = 0.042, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07585937342027727;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.026505053828446517;  // std dev = 0.446, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.007771127993919134;  // std dev = 0.843, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22347569249208676;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06277011366147646;  // std dev = 1.268, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning 9.919367551803589
Parameter learned model CLL:-0.109702 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 82], 'true,false,true': [0.0, 138, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.452, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.0, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 153, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.985, 32, 1], 'false,false,false,true': [0.098, 0, 3], 'false,false,false,false': [2.837, 33, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.325, 0, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.12, 0, 2], 'true,false,false': [0.135, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 8], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.104, 146, 15], 'false,false,false,false': [2.63, 39, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.72, 1, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.105, 139, 0], 'false,true,false,false': [1.49e-08, 19, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.134, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.667, 3, 56], 'true,false': [0.132, 0, 4], 'false,true,true': [2.11e-08, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.188, 0, 19], 'false,false,true,false': [1.928, 174, 6], 'false,false,false': [1.32e-09, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.924, 134, 71], 'false,true': [0.968, 1, 12], 'false,false,true': [1.27, 1, 17], 'false,false,false,true': [0.094, 24, 0], 'false,false,false,false': [0.159, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.572, 2, 85], 'true,false': [1.747, 174, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.012, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.997, 1, 64], 'true,false,true': [0.021, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.152, 128, 17], 'false,false,false,true': [1.123, 35, 9], 'false,false,false,false': [1.52, 15, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.187, 3, 60], 'false,true,true,true': [0.601, 0, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.063, 167, 0], 'false,false,true': [1.165, 1, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.806, 3, 74], 'true,true,false': [0.007, 0, 8], 'true,false,true': [0.042, 173, 0], 'true,false,false,true': [5.27e-09, 14, 0], 'true,false,false,false': [0.446, 5, 2], 'false,true': [0.843, 26, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.268, 14, 7]}]
{'': [0.22398543184183212, 0.20850480109739317], 'true': [0.023242630385487066, 0.012046400951814234], 'false': [0.21301775147929003, 0.2040816326530613], 'false,true': [-2.220446049250313e-16, -3.0839528461809902e-18], 'true,false': [-7.079683055580708e-17, 0.07100591715976336], 'true,false,false': [0.041587901701323295, 0.22222222222222224], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.014925675169331031, 0.09148820804027172], 'false': [0.0649788565332571, 0.14030494771649688], 'false,false': [0.02938475665748387, 0.18795368591176156], 'false,false,false': [0.003213096974763019, 0.17496972586897144], 'false,true': [nan, 0.0649788565332571], 'false,false,true': [nan, 0.02938475665748387]}
{'': [0.004226795803649234, 0.09657166934106097], 'false': [nan, 0.096571669341061], 'false,false': [1.1842378929335003e-16, 0.08064577105539687], 'false,false,false': [0.05983489159920002, 0.1411812031220996], 'true': [0.002358421038162494, 0.015657727883876316], 'true,false': [0.0072400150164994015, 0.006035220171489201], 'true,true': [0.001957263001492801, 0.0], 'false,false,true': [1.1102230246251565e-16, 1.2688263138573217e-16]}
{'': [0.029287707595928667, 0.00036631375255929635], 'false': [8.049110253583183e-05, 0.0006624990652756876], 'false,false': [nan, 0.0006624990652756876], 'false,false,false': [nan, 0.0006624990652756876], 'false,true': [nan, 8.049110253582903e-05], 'false,true,false': [8.001282894574918e-05, 1.1686558153949016e-17]}
{'': [0.0452210115148692, 0.06410507986694408], 'false': [2.960594732333751e-17, 0.06151445887655203], 'false,false': [0.06370379309561154, 1.734723475976807e-18], 'false,false,true': [0.0018553752406103136, 0.020659309874048588], 'true': [0.04710223013322381, 0.004324833789795646], 'false,true': [2.960594732333751e-17, nan]}
{'': [0.041709105896572805, 0.08521934958489032], 'false': [0.07207018158785096, 0.08399687845280149], 'false,false': [0.08967316130855091, 0.0005911062533329726], 'true': [nan, 0.041709105896572944], 'true,false': [nan, 0.041709105896572805], 'false,false,false': [0.0003655320527775711, 0.0007218795510962383]}
{'': [0.047179376892936976, 0.04879349090218339], 'false': [nan, 0.04879349090218339], 'false,false': [nan, 0.04879349090218339], 'false,false,false': [nan, 0.04879349090218339], 'true': [0.028421216828050475, 0.01676422605066782]}
{'': [0.014855691046888077, 0.034482056516951784], 'false': [nan, 0.03448205651695183], 'false,false': [0.02314896412348358, 0.055670565811904285], 'false,false,false': [0.0286565700441365, 0.10049224570011776], 'true': [0.015285604898931798, 0.00022990784514060475], 'true,false': [0.00022990784514060475, nan]}
{'': [0.034987075463803294, 0.030127796246695975], 'false': [0.01806059238571728, 0.07393502954099553], 'false,false': [0.09700898911699993, 0.0005822175365982648], 'false,true': [0.013364325563696518, 2.411374675589058e-05], 'false,true,true': [0.013364325563696518, nan], 'false,false,false': [nan, 0.0005822175365982648]}
{'': [0.023957024209325092, 0.0432661964388454], 'false': [0.020895067337026695, 0.07416047020773009], 'false,false': [0.0, 0.07651799921239925], 'false,false,false': [nan, 0.07651799921239925], 'true': [0.03839390808585445, 0.0014638439322998246], 'true,true': [0.042382227665117636, 6.311011834871788e-06], 'true,false': [1.0149605167683867e-05, 0.01179047588912231], 'true,false,false': [1.982541115402065e-18, 0.02838577702339411]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.733758687973022
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8282981888308559;  // std dev = 0.170, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.1315417865499728;  // std dev = 0.101, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7102435998552072;  // std dev = 0.134, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.6421252415348817;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4867693913352939;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7527978218386614;  // std dev = 0.176, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12658002586023087;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7340533457129585;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01902001997033394;  // std dev = 1.119, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.2002888995982391;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5731342597974817;  // std dev = 0.141, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.637389862822499;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6957544459137963;  // std dev = 0.213, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5691601254839289;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.564994718596611;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09739825115241987;  // std dev = 1.274, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   | | | else return -0.014180687027197086;  // std dev = 1.826, 60.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11424256304285627;  // std dev = 1.469, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.008603717419865825;  // std dev = 2.085, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.4028454879174084;  // std dev = 0.992, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.10607646772641192;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.4239073109660892;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.47760814456551637;  // std dev = 0.169, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(H, A) )
%   | | | then return 0.6347107608770801;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5264417261443293;  // std dev = 0.224, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.7491992967040703;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(J, A) )
%   | then return -0.10636704296553905;  // std dev = 0.004, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return -0.13888111882819373;  // std dev = 0.033, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.31454806871989344;  // std dev = 0.935, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.20376221402898978;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.44169698578109623;  // std dev = 0.145, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08143096548392081;  // std dev = 0.926, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32661823639715654;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3779073674093347;  // std dev = 0.928, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08594896770634892;  // std dev = 1.772, 204.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=6 */
%   | | else return -0.09432902796870496;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.21054104991502715;  // std dev = 1.333, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return -0.01833110605932738;  // std dev = 0.764, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2863525544045954;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05765597447626215;  // std dev = 0.147, 124.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=12 */
%   | | else return -0.05179436471665915;  // std dev = 0.121, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27044112963727235;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.31756443292715075;  // std dev = 0.096, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.6022862893322378;  // std dev = 0.188, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10431726621214224;  // std dev = 0.025, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2227150211344017;  // std dev = 0.010, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( tweets(A, E), follows(D, C) )
%   | | | then return -0.04045029374794627;  // std dev = 1.734, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.22239752530880832;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2377742350902281;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then return -0.04485944089034952;  // std dev = 0.123, 189.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=18 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.24702339096852594;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09260787619194799;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11854151391559822;  // std dev = 0.587, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07528014304720426;  // std dev = 1.119, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.14517316777715797;  // std dev = 1.331, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return 0.19242614554990317;  // std dev = 0.087, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1968584458328006;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.25743132986077893;  // std dev = 0.044, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03793677204095566;  // std dev = 0.141, 164.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2567325977822544;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09534200631132178;  // std dev = 0.047, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03782847657805001;  // std dev = 0.376, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.04458975886321417;  // std dev = 1.130, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.17136978752758306;  // std dev = 0.018, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.296933830821448;  // std dev = 0.071, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.024998856434413397;  // std dev = 0.789, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16892181569668244;  // std dev = 0.129, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.37739489053640324;  // std dev = 0.087, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.0783440374896625;  // std dev = 0.003, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18634856686786483;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4324553731821436;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09996142235019705;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12508188683135094;  // std dev = 1.253, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.24558235031577338;  // std dev = 0.301, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13243780130255187;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06969778327767678;  // std dev = 0.032, 201.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.008383063807210125;  // std dev = 0.099, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else return 0.01027169053225685;  // std dev = 0.158, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.271599388130654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.0058661496732244035;  // std dev = 0.360, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.00962891756668166;  // std dev = 0.879, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning 14.461717367172241
Refined model CLL: -0.101465


******************************************
Best model found
******************************************
Results 

CLL : -0.099368 

AUC ROC : 0.995419 

AUC PR : 0.418508 

Precision : 0.344371 

Recall : 1.0 

F1 : 0.512315 

Total Learning Time : 10.733758687973022 

Total Inference Time : 9.94784951210022 

Total revision time: 29.835708618164062
Best scored revision CLL: -0.101465


Results 

CLL : -0.099368 

AUC ROC : 0.995419 

AUC PR : 0.418508 

Precision : 0.344371 

Recall : 1.0 

F1 : 0.512315 

Total Learning Time : 29.853816986083984 

Total Inference Time : 9.94784951210022 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.6889567375183105
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048843;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.11154803459745743;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7008005551900351;  // std dev = 1.403, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029688641300282797;  // std dev = 0.269, 195.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07880703838621701;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1811643684002666;  // std dev = 3.059, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5644809913878188;  // std dev = 1.078, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.22920391447287145;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7961567484239653;  // std dev = 0.118, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3006742071750216;  // std dev = 1.007, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5646604138722761;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5646604138722761;  // std dev = 4.21e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04450660340157715;  // std dev = 3.635, 218.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=21 */
%   | | | else return 0.031346794505906356;  // std dev = 2.785, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4853580392781569;  // std dev = 2.663, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11799477884401477;  // std dev = 0.098, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | | else return -0.12551265078626836;  // std dev = 0.003, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15963017509571126;  // std dev = 0.172, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29454046973136316;  // std dev = 1.724, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4646887736748051;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2069226196764171;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6310403880842828;  // std dev = 0.195, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08713668855754086;  // std dev = 2.303, 256.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=9 */
%   | | else return -0.10406459969986212;  // std dev = 1.86e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03005604336763198;  // std dev = 3.465, 269.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2720465177437286;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5358385999795321;  // std dev = 0.711, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12246539452901072;  // std dev = 0.156, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.1221218235996826;  // std dev = 0.175, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27131867141113314;  // std dev = 1.875, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.0798500607520526;  // std dev = 2.021, 265.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.026848471921454863;  // std dev = 1.060, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1550047561310214;  // std dev = 1.959, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.20758846415982396;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04877453107281594;  // std dev = 0.154, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.024370406082107055;  // std dev = 1.783, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | | | else return 0.027432969113401057;  // std dev = 1.945, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16119898752524858;  // std dev = 0.190, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24343155293946653;  // std dev = 1.381, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08966849373059815;  // std dev = 0.070, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4420645610990411;  // std dev = 0.626, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10689393838476437;  // std dev = 0.136, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17626017037139693;  // std dev = 1.663, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.16321559538238542;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08337282816220928;  // std dev = 0.027, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07447275263289475;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.0441202422713512;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03550879886439392;  // std dev = 0.951, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2684418933228756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.041096657324045216;  // std dev = 1.364, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning 9.761094808578491
Parameter learned model CLL:-0.109814 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 210, 0], 'true,false,false,true': [0.985, 32, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 29, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.403, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 173, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.102, 0, 4], 'false,false,false,false': [3.059, 31, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.078, 1, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.118, 0, 2], 'true,false,false': [1.007, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [4.21e-08, 0, 9], 'false,false,true,false': [4.21e-08, 0, 8], 'false,false,false,true': [3.635, 197, 21], 'false,false,false,false': [2.785, 50, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.663, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.098, 176, 0], 'false,true,false,false': [0.003, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.172, 48, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.724, 3, 73], 'true,false': [0.172, 0, 4], 'false,true,true': [1.338, 2, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.195, 0, 23], 'false,false,true,false': [2.303, 247, 9], 'false,false,false': [1.86e-09, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.465, 178, 91], 'false,true': [0.031, 0, 13], 'false,false,true': [0.711, 0, 22], 'false,false,false,true': [0.156, 45, 0], 'false,false,false,false': [0.175, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.875, 3, 107], 'true,false': [2.021, 254, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.06, 22, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.959, 4, 80], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 189, 22], 'false,false,false,true': [1.783, 44, 13], 'false,false,false,false': [1.945, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.19, 3, 77], 'false,true,true,true': [1.381, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.07, 196, 0], 'false,false,true': [0.626, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 46, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.663, 2, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.027, 186, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.487, 16, 2], 'false,true': [0.951, 20, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.364, 19, 8]}]
{'': [0.20965738914457038, 0.20829200555445368], 'true': [0.01868480725623786, 0.008063983078855058], 'false': [0.20701963117192096, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 2.2970131543968756e-17], 'true,false': [-2.3684757858670006e-16, 0.05246913580246913], 'true,false,false': [0.029384756657483992, 0.22222222222222224], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023447018019995186, 0.10645457436796554], 'false': [0.07210334108594757, 0.17833570713661392], 'false,false': [0.04750000000000003, 0.20304424711159788], 'false,false,false': [0.002624629381482446, 0.1949384936648704], 'false,true': [nan, 0.07210334108594757], 'false,false,true': [nan, 0.04750000000000003]}
{'': [0.0419766897016333, 0.09077857790531704], 'false': [nan, 0.09077857790531704], 'false,false': [1.5673736818237505e-16, 0.07614225399393643], 'false,false,false': [0.0606089490829407, 0.12715896847286295], 'true': [0.025768589603731077, 0.1744683791353936], 'true,false': [0.006992964853517636, 0.1689177800587244], 'true,true': [0.016372466139113535, 0.25000000000000006], 'false,false,true': [1.9737298215558337e-16, 2.220446049250313e-16]}
{'': [0.05413410179708857, 0.00040285588200496763], 'false': [5.3424800224649676e-05, 0.0006180528855261094], 'false,false': [nan, 0.0006180528855261094], 'false,false,false': [nan, 0.0006180528855261094], 'false,true': [nan, 5.3424800224649676e-05], 'false,true,false': [5.470993471863962e-05, 2.2098583926346808e-07]}
{'': [0.03889226319780463, 0.06023202141316628], 'false': [0.09418282548476456, 0.05463461656409296], 'false,true': [0.09418282548476456, nan], 'false,false': [0.05816337396110352, 1.3877787807814458e-18], 'false,false,true': [0.001645456265249633, 0.02072179645877741], 'true': [0.039100574406907375, 0.007431427156762427]}
{'': [0.04463586474287641, 0.07625775263050033], 'false': [7.403883335311577e-05, 0.07876552809951551], 'false,false': [0.02295008954654384, 0.0006867548051514155], 'true': [nan, 0.04463586474287646], 'true,false': [nan, 0.04463586474287641], 'false,false,false': [0.0005416953740776566, 0.0008731933899073515]}
{'': [0.045830573583204776, 0.03746174000136178], 'true': [0.03196407015525441, 0.01541276698810231], 'false': [nan, 0.03746174000136178], 'false,false': [nan, 0.03746174000136178], 'false,false,false': [nan, 0.03746174000136178]}
{'': [0.04468448052534938, 0.040691686215599335], 'true': [0.04568296740579453, 4.7288600083968124e-05], 'false': [nan, 0.04069168621559938], 'false,false': [0.023692499343937017, 0.08065464037008441], 'false,false,false': [0.05579690478707167, 0.12612612404845402], 'true,false': [4.7288600083968124e-05, nan]}
{'': [0.03594280500955316, 0.03278631822601515], 'false': [0.022286509135233307, 0.06588372493310504], 'false,false': [0.02302747361344573, 0.00040377174254077245], 'false,true': [0.05606259855075414, 2.525333523799102e-05], 'false,true,true': [0.05606259855075414, nan], 'false,false,false': [nan, 0.00040377174254077245]}
{'': [0.023674247012503986, 0.04695028442643313], 'false': [0.02828085402176943, 0.06818656782259155], 'false,false': [0.0, 0.06886607282005947], 'false,false,false': [nan, 0.06886607282005947], 'true': [0.02636256513374541, 0.0012152308407499088], 'true,true': [0.02881897165025202, 5.319910838402158e-06], 'true,false': [4.031321334915585e-06, 0.007879403431747214], 'true,false,false': [-1.0675221390626506e-18, 0.013183742607098793]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 27.040594816207886
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8340525495573435;  // std dev = 0.153, 83.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13259180564122913;  // std dev = 0.096, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.7005014784015786;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.7243110022111022;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7292851693420322;  // std dev = 0.147, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.6884025972867786;  // std dev = 0.965, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.4520156916761411;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.12646398386099827;  // std dev = 1.63e-07, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.541671265114001;  // std dev = 0.924, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05724034541525108;  // std dev = 2.116, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.0950794352377543;  // std dev = 2.408, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5381501214446855;  // std dev = 0.174, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | else if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.06066185777390061;  // std dev = 0.996, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5106580904616621;  // std dev = 0.811, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.6611098708971985;  // std dev = 0.172, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.55889095770834;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.511220580920037;  // std dev = 0.983, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.1131405373217725;  // std dev = 2.11e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1461996200513902;  // std dev = 2.051, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return 0.07912859203109789;  // std dev = 2.296, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), follows(D, E) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.3799930578946889;  // std dev = 1.698, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | | | else return 0.43307634926332195;  // std dev = 0.956, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.13801105384757825;  // std dev = 0.869, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.4997618421444119;  // std dev = 0.930, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6683145818594615;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6911459383827948;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.76964714774394;  // std dev = 0.191, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(L, A) )
%   | then return -0.10227520150458383;  // std dev = 1.32e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.16454753132223987;  // std dev = 0.134, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.3380822864588661;  // std dev = 0.052, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.38169634897809135;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.3798834410890395;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5086545072321887;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3401916933944809;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3272068735224672;  // std dev = 0.023, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.38119582537012797;  // std dev = 0.961, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.0748293926715533;  // std dev = 2.066, 240.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=9 */
%   | | else return -0.09325940214393615;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.24926668782918857;  // std dev = 0.988, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.2809187651957151;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3119708270544516;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05770992001949925;  // std dev = 0.117, 154.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=15 */
%   | | else return -0.04509819089561767;  // std dev = 0.118, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2718209145925635;  // std dev = 0.042, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32957203764159837;  // std dev = 0.951, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5796468601552032;  // std dev = 0.344, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11341750198242637;  // std dev = 0.027, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.2221497887852545;  // std dev = 0.013, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.21618340894181143;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.26306506935849794;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.26485298030232296;  // std dev = 0.126, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.13683098048008227;  // std dev = 0.905, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.08225085293060984;  // std dev = 0.026, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.19817092214593704;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0025034200724676184;  // std dev = 1.195, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.03580257232420648;  // std dev = 1.547, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1742461928975305;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.254238248103746;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07993224234882432;  // std dev = 0.095, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   | | else if ( follows(A, E), tweets(E, G) )
%   | | | then return 0.010058611823333006;  // std dev = 1.121, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return -0.05570626995512532;  // std dev = 0.374, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2528890230173088;  // std dev = 0.969, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11220775451791502;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12539719431794003;  // std dev = 0.561, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.11497529103306155;  // std dev = 1.189, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1380831281013717;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.07271174461068977;  // std dev = 0.954, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.1688578796060429;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.19529902842218527;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.15517862822688033;  // std dev = 0.957, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.22582668948927562;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07228870752823216;  // std dev = 0.050, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37460867774847395;  // std dev = 0.079, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12659547413202332;  // std dev = 0.030, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14669772888544685;  // std dev = 0.102, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.04403298525597051;  // std dev = 0.272, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06526014763788347;  // std dev = 0.029, 237.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11137082554572963;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.004317108586440186;  // std dev = 0.655, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.040351489713264445;  // std dev = 0.523, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1404204557476918;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0731284062524844;  // std dev = 0.433, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.024163143520822696;  // std dev = 1.027, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning 16.547786235809326
Refined model CLL: -0.103131


******************************************
Best model found
******************************************
Results 

CLL : -0.102807 

AUC ROC : 0.993776 

AUC PR : 0.318228 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 27.040594816207886 

Total Inference Time : 13.730280876159668 

Total revision time: 51.85905933380127
Best scored revision CLL: -0.103131


Results 

CLL : -0.102807 

AUC ROC : 0.993776 

AUC PR : 0.318228 

Precision : 0.336207 

Recall : 1.0 

F1 : 0.503226 

Total Learning Time : 51.87716770172119 

Total Inference Time : 13.730280876159668 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.3637402057647705
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.27920156667845974;  // std dev = 0.494, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.028882575586751866;  // std dev = 0.269, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14482988218597315;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7532009494300844;  // std dev = 0.083, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17171936486272668;  // std dev = 2.333, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5723563634463802;  // std dev = 0.161, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5923490861694576;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05751823682034192;  // std dev = 1.824, 54.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=5 */
%   | | | else return 0.10746337245234949;  // std dev = 2.148, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4959453270951081;  // std dev = 1.726, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12686787798876545;  // std dev = 0.261, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.13247660772858483;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19690692861919754;  // std dev = 0.187, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3213059743606386;  // std dev = 0.199, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.17356377901593567;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.30387049392632937;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6481468852279897;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10771772487247797;  // std dev = 0.826, 46.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=1 */
%   | | else return 0.0703867799592224;  // std dev = 0.356, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01362108814326206;  // std dev = 1.282, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2926185672806662;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4925774846507327;  // std dev = 0.527, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12867758341349603;  // std dev = 0.129, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.11963797758258335;  // std dev = 0.131, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2986959197832575;  // std dev = 0.481, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.09343513695302177;  // std dev = 0.706, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06715320770063053;  // std dev = 1.151, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20219673934204008;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.15134135905917834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04662918512485585;  // std dev = 0.136, 43.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06435267451174687;  // std dev = 0.715, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return 0.17511690397151775;  // std dev = 1.041, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.09430529605399518;  // std dev = 0.264, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.19447797923694377;  // std dev = 0.698, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09340105549947689;  // std dev = 0.178, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3804191423691808;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12685723397305135;  // std dev = 0.206, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14428812229321414;  // std dev = 0.918, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.16906367938307099;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.07950713205453872;  // std dev = 0.029, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08234386524549808;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.026226624089613577;  // std dev = 0.121, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.007159465508072659;  // std dev = 0.489, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1541131529382661;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01739256780608103;  // std dev = 1.077, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning 8.791463375091553
Parameter learned model CLL:-0.110745 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 5, 0], 'false,false': [0.494, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [5.96e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 31, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.145, 8, 0], 'false,false,false,true': [0.083, 0, 3], 'false,false,false,false': [2.333, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.161, 0, 10], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.111, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.913, 1, 5], 'false,false,false,true': [1.824, 49, 5], 'false,false,false,false': [2.148, 18, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.726, 2, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.261, 29, 0], 'false,true,false,false': [0.012, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.199, 0, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.913, 1, 5], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.095, 0, 8], 'false,false,true,false': [0.826, 45, 1], 'false,false,false': [0.356, 8, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.282, 34, 13], 'false,true': [0.054, 0, 6], 'false,false,true': [0.527, 0, 12], 'false,false,false,true': [0.129, 15, 0], 'false,false,false,false': [0.131, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.481, 0, 22], 'true,false': [0.706, 57, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.151, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.084, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.136, 39, 4], 'false,false,false,true': [0.715, 29, 4], 'false,false,false,false': [1.041, 6, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.264, 1, 13], 'false,true,true,true': [0.698, 1, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.178, 40, 0], 'false,false,true': [0.323, 0, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.206, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.918, 1, 13], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.029, 35, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.121, 1, 1], 'false,true': [0.489, 9, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.077, 15, 7]}]
{'': [0.21063240110859105, 0.24489795918367302], 'false': [0.2469135802469134, 0.24376731301939059], 'false,true': [0.0, -2.7755575615628915e-18], 'true': [-2.9605947323337506e-16, 0.02172839506172844], 'true,false': [2.7755575615628914e-17, 0.07100591715976336], 'true,false,false': [-1.1564823173178714e-17, 0.0], 'false,true,true': [1.4802973661668753e-16, 0.0]}
{'': [2.3684757858670006e-16, 0.14415811739050066], 'false': [0.07226279799647506, 0.19653841647102696], 'false,false': [0.002630513701646707, 0.21934813617858612], 'false,false,false': [0.0022750935337354505, 0.2094170084878787], 'false,true': [nan, 0.07226279799647506], 'false,false,true': [nan, 0.002630513701646707]}
{'': [0.0030175562591709263, 0.1207363648994518], 'false': [nan, 0.12073636489945186], 'false,false': [0.12244897959183665, 0.10637526413985497], 'false,false,true': [0.0, 0.13888888888888884], 'false,false,false': [0.06157866704734713, 0.18453056834697343], 'true': [0.002597918483471506, 0.004108880412619327], 'true,false': [nan, 0.004108880412619327], 'true,true': [0.002597918483471506, nan]}
{'': [0.09030110050369902, 0.002902600809305711], 'false': [0.0019009557209702193, 0.001590965611559212], 'false,true': [nan, 0.0019009557209702284], 'false,true,false': [0.0023487564659427935, 2.044016081897772e-05], 'false,false': [nan, 0.001590965611559212], 'false,false,false': [nan, 0.001590965611559212]}
{'': [0.0030540532485837913, 0.09808380847102877], 'false': [0.12112678312321967, 0.09256578817641924], 'false,true': [0.13888888888888887, 0.0], 'false,false': [0.08491509707580319, 0.12649122292164477], 'false,false,true': [0.0011198921343306134, 0.014846500817936197], 'true': [0.0030540532485837913, nan]}
{'': [0.0349813027640464, 0.07998216818784795], 'false': [0.000479703755485561, 0.08375196736751929], 'false,false': [0.023153481243258667, 0.0011119849137989715], 'true': [nan, 0.034981302764046394], 'true,false': [nan, 0.0349813027640464], 'false,false,false': [0.0011060813407413846, 0.0010779802521316394]}
{'': [0.0397783831018576, 0.0696698731245246], 'false': [nan, 0.06966987312452459], 'false,false': [nan, 0.0696698731245246], 'false,false,false': [nan, 0.0696698731245246], 'true': [0.010507912500695321, 0.008595114843144722]}
{'': [0.0006295086098807505, 0.03354962443631733], 'false': [nan, 0.03354962443631731], 'false,false': [0.018529389463814157, 0.04591850175462917], 'false,false,false': [0.015495133660304194, 0.07736673915210932], 'true': [0.0005020555303388931, 0.0], 'true,false': [0.0, nan]}
{'': [0.06994176409638317, 0.03805810110941544], 'false': [0.023627660384121167, 0.06014780679451199], 'false,false': [0.011622620445614807, 0.002123316584131138], 'false,true': [0.0486717280949962, 0.0007917757282477165], 'false,true,true': [0.0486717280949962, nan], 'false,false,false': [nan, 0.002123316584131138]}
{'': [0.026033063742144102, 0.039708440209202125], 'false': [0.018376964733997428, 0.051659827125705875], 'false,false': [0.0, 0.052729122292572254], 'false,false,false': [nan, 0.05272912229257227], 'true': [0.04450122554788401, 0.0009227477666295586], 'true,true': [0.06023298664191063, 0.0], 'true,false': [2.3540481279187603e-05, 0.005775490286618795], 'true,false,false': [0.0, 0.007366195023867631]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.904824256896973
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.11482403787346067;  // std dev = 0.162, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7296125270017576;  // std dev = 0.147, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7580193346218546;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12843986592699463;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.12843986592699455;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12843986592699458;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11367245461938617;  // std dev = 2.266, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5570549123252759;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.7658835531074469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5528613541107791;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11473479787126659;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.022187180376438683;  // std dev = 1.146, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.05501288907752333;  // std dev = 0.792, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.2892548227355805;  // std dev = 1.790, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.27178285575156846;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5001601256043375;  // std dev = 0.232, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.1656581954977628;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.158971817080814;  // std dev = 0.629, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4792647031913866;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6395089462359355;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7195911055811457;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.10754471472197268;  // std dev = 0.006, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.1927652482456236;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then return 0.3422107003216836;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.31290503327823266;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.35990847956820027;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3766938227081382;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4451760613219956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4861958381103153;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09636049082030398;  // std dev = 0.742, 54.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09518637033840704;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.16852255146151038;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2642681001454417;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.35885504144872393;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08936792545987997;  // std dev = 0.020, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.09153039187213131;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.30085288936112803;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.34033937112183377;  // std dev = 0.143, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5326128968827258;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10415647671395724;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.1279523646818519;  // std dev = 0.255, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then return 0.2268795189531895;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.19280910500417425;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.22105865879205544;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(G, F), follows(H, G) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return -0.08072713032560404;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.04834420336851469;  // std dev = 0.491, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return 0.06011447145141483;  // std dev = 0.398, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.23484542732546823;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0488486834942392;  // std dev = 0.571, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.07189210839262894;  // std dev = 0.998, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18122533120842232;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19529015725506624;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.26379731410133556;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2594111996013132;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07671539289279153;  // std dev = 0.032, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18489030489075986;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.0431842837482172;  // std dev = 0.435, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.05209535210229151;  // std dev = 1.218, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.15468968206383785;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.15928824967933547;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.22947760839387038;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1664102600682878;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07349545041546655;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.283150037069018;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3814856800553571;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, L), follows(A, M) )
%   | | | then return -0.0854640827189801;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.17469486106157153;  // std dev = 0.164, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1497693904113273;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.14458796321156184;  // std dev = 0.000906, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06673976485036164;  // std dev = 0.005, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06370057836288978;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.015057953853026388;  // std dev = 0.226, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.04016544381188027;  // std dev = 0.155, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13850789652309337;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0819766092825368;  // std dev = 0.568, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.052188072248371686;  // std dev = 0.596, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning 16.354893445968628
Refined model CLL: -0.103819


******************************************
Best model found
******************************************
Results 

CLL : -0.102677 

AUC ROC : 0.991764 

AUC PR : 0.308714 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 8.904824256896973 

Total Inference Time : 4.8452136516571045 

Total revision time: 17.710452556610107
Best scored revision CLL: -0.103819


Results 

CLL : -0.102677 

AUC ROC : 0.991764 

AUC PR : 0.308714 

Precision : 0.344353 

Recall : 0.992063 

F1 : 0.511247 

Total Learning Time : 17.7285795211792 

Total Inference Time : 4.8452136516571045 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.6330924034118652
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8081489350995117;  // std dev = 1.378, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2510060779566552;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7363701941765266;  // std dev = 0.142, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.00886763501397103;  // std dev = 0.293, 66.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=9 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021106846512133577;  // std dev = 1.239, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4957971530132772;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1751905779823507;  // std dev = 3.190, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5387476724441121;  // std dev = 0.699, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6343587131611028;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6535965030189909;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6343587131611028;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5635250670319313;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.015336248284963619;  // std dev = 3.280, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return 0.09478409484588671;  // std dev = 2.636, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5600429165504113;  // std dev = 1.663, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12798657340714736;  // std dev = 0.069, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.13566889728530365;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18180106206482805;  // std dev = 0.206, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3152718277447633;  // std dev = 0.227, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.4201265067186629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29383572809761016;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4201265067186629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6045284256987461;  // std dev = 0.206, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11164812522956274;  // std dev = 1.237, 109.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=2 */
%   | | else return 0.11850788437638102;  // std dev = 0.376, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.013787451552971288;  // std dev = 1.905, 98.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=28 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25098805847977024;  // std dev = 0.113, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.40452497068959725;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14252306395280806;  // std dev = 0.168, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.140715285016438;  // std dev = 0.154, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26493791670744465;  // std dev = 1.494, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return -0.09560457032172538;  // std dev = 1.116, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022806006628126544;  // std dev = 1.598, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1540420239111686;  // std dev = 0.992, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( follows(A, E) )
%   | | then return 0.2212655437752422;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.027630898442195725;  // std dev = 0.167, 63.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01454013688775043;  // std dev = 1.431, 58.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=12 */
%   | | | else return 0.0035601917159134005;  // std dev = 1.993, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17628933731562968;  // std dev = 0.038, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3100787331271658;  // std dev = 0.689, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09717630521750921;  // std dev = 0.091, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38785499540472834;  // std dev = 0.511, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1327259664897072;  // std dev = 0.198, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19544434511663147;  // std dev = 0.453, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.16391099292166528;  // std dev = 0.253, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.08542804671044245;  // std dev = 0.016, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10594611781611944;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.04758638635253888;  // std dev = 0.758, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.010107354362145647;  // std dev = 0.774, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2099831649685847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05027741109391942;  // std dev = 1.317, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
Inference time using transfer learning 7.871429443359375
Parameter learned model CLL:-0.114802 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.378, 2, 38], 'true,false,true': [7.3e-08, 74, 0], 'true,false,false,true': [0.977, 21, 1], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 16, 0], 'false,false': [0.488, 17, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.142, 0, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.293, 57, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.239, 15, 2], 'false,false,false,true': [0.901, 1, 3], 'false,false,false,false': [3.19, 33, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.699, 1, 20], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.1, 0, 2], 'true,false,false': [0.108, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.1, 0, 2], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.28, 87, 18], 'false,false,false,false': [2.636, 25, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.663, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.069, 70, 0], 'false,true,false,false': [0.005, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.206, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.227, 0, 24], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 8], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.206, 0, 19], 'false,false,true,false': [1.237, 107, 2], 'false,false,false': [0.376, 13, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.905, 70, 28], 'false,true': [0.113, 0, 11], 'false,false,true': [1.833, 2, 23], 'false,false,false,true': [0.168, 34, 0], 'false,false,false,false': [0.154, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.494, 2, 46], 'true,false': [1.116, 106, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.598, 30, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.992, 1, 28], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.167, 54, 9], 'false,false,false,true': [1.431, 46, 12], 'false,false,false,false': [1.993, 24, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.038, 0, 25], 'false,true,true,true': [0.689, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.091, 88, 0], 'false,false,true': [0.511, 0, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.453, 0, 30], 'true,true,false': [0.253, 0, 8], 'true,false,true': [0.016, 61, 0], 'true,false,false,true': [0.008, 11, 0], 'true,false,false,false': [0.758, 6, 3], 'false,true': [0.774, 21, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.317, 17, 10]}]
{'': [0.20536599880976117, 0.2376543209876543], 'false': [0.23668639053254442, 0.23852040816326484], 'false,true': [-8.881784197001253e-17, -6.938893903907228e-18], 'true': [0.04750000000000139, 0.02854671280276817], 'true,false': [7.201446646217232e-17, 0.0956632653061223], 'true,false,false': [0.04338842975206616, 0.22222222222222224], 'false,true,true': [-2.220446049250313e-16, 0.0]}
{'': [0.0006697910539818015, 0.14524932253711706], 'false': [0.08607125240654108, 0.1879281935937535], 'false,false': [0.09035585035453558, 0.20669917840278162], 'false,false,false': [0.20274068839064494, 0.19953411541106872], 'false,false,true': [nan, 0.09035585035453558], 'false,true': [nan, 0.08607125240654108]}
{'': [0.02142215180285678, 0.13686937073449396], 'false': [nan, 0.1368693707344944], 'false,false': [0.0019821848588454432, 0.12766091371927793], 'false,false,false': [0.10247368937951021, 0.1984886164962047], 'true': [0.02326507812571066, 0.004408003948911343], 'true,true': [0.02326507812571066, nan], 'true,false': [0.0050174054239526256, 0.0038536992754373647], 'false,false,true': [0.0050174054239526256, -1.9032394707859825e-16]}
{'': [0.04392168340362339, 0.0009621739366553663], 'false': [6.415443260516589e-05, 0.0012183050599634728], 'false,false': [nan, 0.0012183050599634728], 'false,false,false': [nan, 0.0012183050599634728], 'false,true': [nan, 6.415443260516589e-05], 'false,true,false': [6.745201159550986e-05, 1.6895360128027503e-06]}
{'': [0.002491923743573956, 0.08741717107649408], 'false': [0.0015957827192198343, 0.08759742124729701], 'false,false': [0.07712081889759832, 0.14138197765837007], 'false,false,true': [0.0022323422275394066, 0.014039865812977354], 'true': [0.0021559737514474375, 0.0], 'false,true': [2.3104363043202625e-05, 0.0]}
{'': [0.0370416546729949, 0.09662968369455754], 'false': [0.0011662039690205123, 0.10299700264796482], 'false,false': [0.1343919564891885, 0.0008773737817290615], 'true': [nan, 0.03704165467299489], 'true,false': [nan, 0.0370416546729949], 'false,false,false': [0.0008271671484209434, 0.0009437715115160184]}
{'': [0.049990805072634883, 0.058023000603416336], 'false': [nan, 0.058023000603416315], 'false,false': [nan, 0.058023000603416336], 'false,false,false': [nan, 0.058023000603416336], 'true': [0.046529597519551706, 0.011531924170462761]}
{'': [0.03204636898366662, 0.05001752337744333], 'false': [nan, 0.05001752337744349], 'false,false': [0.027942569856693, 0.06481155342206456], 'false,false,false': [0.03528258574302117, 0.11354094795747825], 'true': [0.03396491490453228, 0.0], 'true,false': [0.0, nan]}
{'': [0.0014290060765214684, 0.04196589163742145], 'false': [0.028730474073276654, 0.06513424758330931], 'false,false': [0.01453351746286908, 0.00105842477571051], 'false,true': [0.024957742417801704, 9.385740735389578e-05], 'false,true,true': [0.024957742417801704, nan], 'false,false,false': [nan, 0.00105842477571051]}
{'': [0.023363440184649045, 0.040493913728044166], 'false': [0.01934783037501407, 0.06279994264783308], 'false,false': [0.0, 0.06421494045600917], 'false,false,false': [nan, 0.06421494045600913], 'true': [0.007237609442789243, 0.0089683984728324], 'true,false': [4.1222104697871645e-06, 0.034532762581355514], 'true,false,false': [6.343015051743506e-06, 0.0637669934190956], 'true,true': [0.006827746965357499, 0.007989578758959573]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.720493316650391
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7243614636353608;  // std dev = 0.100, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.05280674554428788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.7268054893475637;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.13338261696475634;  // std dev = 0.246, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6528067455442876;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.29701438684128156;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.36429669134119064;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.5655237258367704;  // std dev = 0.174, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.36484218613078756;  // std dev = 0.717, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.6019032330330905;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5541590835830125;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5631087402286937;  // std dev = 0.091, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11460453907707849;  // std dev = 0.146, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.13742781439981522;  // std dev = 1.961, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | | else return 0.07172955373647576;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.41423494077385425;  // std dev = 0.011, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.43798480851517174;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.5225587123937859;  // std dev = 0.089, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29371858633395315;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7012947829193616;  // std dev = 0.107, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then return -0.10713637851775303;  // std dev = 0.020, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.12676520352892243;  // std dev = 2.11e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.17416120244659575;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.2734021822715623;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.318153830416148;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.38389361674127814;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07205445694169693;  // std dev = 0.646, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31933556512948247;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3759035464914323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37114793948805136;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09056212651143676;  // std dev = 0.939, 98.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.050934662619682346;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.14253835887284044;  // std dev = 1.334, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2596510292113846;  // std dev = 0.027, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, E) )
%   | | then return -0.0417273508294884;  // std dev = 0.109, 61.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=8 */
%   | | else return -0.08412803408710903;  // std dev = 4.56e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.2985142828534982;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25535744772791347;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3155172199702743;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4949071190877523;  // std dev = 0.288, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.1089026529041088;  // std dev = 0.073, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.14653923193146487;  // std dev = 0.288, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.20804122723358234;  // std dev = 0.005, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.12583543144560658;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2305727112961707;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.2649092694209745;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25321801110298475;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08438851596186032;  // std dev = 0.014, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.27236135429835495;  // std dev = 0.310, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10923410698708953;  // std dev = 0.179, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.1837745425510369;  // std dev = 0.286, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1753586654807105;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21108752695152097;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17376281015834913;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.23966568266769106;  // std dev = 0.062, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.1952633699764024;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.20623982666575041;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07620758884857241;  // std dev = 0.092, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.018189561545003275;  // std dev = 0.968, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | | else return -0.031069524871232983;  // std dev = 1.132, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1543373092343933;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.008924056013501125;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.15473423775563266;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.163928836374044;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07260539669749433;  // std dev = 0.013, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2098049192561868;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3688824162944496;  // std dev = 0.169, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.08935273645000116;  // std dev = 0.042, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.21560878365790606;  // std dev = 0.104, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14113444911305134;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.06493359565949709;  // std dev = 0.006, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.050624927575115636;  // std dev = 0.093, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.166836868375899;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10591569976934195;  // std dev = 0.519, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.09750423942431576;  // std dev = 0.291, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.12784747420368725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.007508044099234894;  // std dev = 0.653, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.004506460193403478;  // std dev = 0.782, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
Inference time using transfer learning 9.8792564868927
Refined model CLL: -0.099495


******************************************
Best model found
******************************************
Results 

CLL : -0.100676 

AUC ROC : 0.993791 

AUC PR : 0.406955 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 6.720493316650391 

Total Inference Time : 5.223276853561401 

Total revision time: 18.05570149421692
Best scored revision CLL: -0.099495


Results 

CLL : -0.100676 

AUC ROC : 0.993791 

AUC PR : 0.406955 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 18.07382845878601 

Total Inference Time : 5.223276853561401 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.1683101654052734
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8402917922423695;  // std dev = 0.991, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.05851773156715447;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.2534977723088147;  // std dev = 0.489, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.703444071204908;  // std dev = 0.995, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02513859616483692;  // std dev = 0.277, 100.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=12 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05257656472189407;  // std dev = 1.591, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7761617568391903;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13967507652474725;  // std dev = 4.189, 93.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5786587272385783;  // std dev = 0.271, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6913414663289471;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.616736743072513;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5888666918753064;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5637177130761132;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.004855959000604011;  // std dev = 3.933, 157.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=25 */
%   | | | else return 0.1135211612208522;  // std dev = 3.163, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5649022622480381;  // std dev = 1.757, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1272728038253649;  // std dev = 0.169, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return -0.13649394994694375;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17873568629210101;  // std dev = 0.292, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.25443537994980897;  // std dev = 1.602, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | else return -0.18691459276208322;  // std dev = 0.738, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29381873576884576;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.35846594030109535;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5918036346623087;  // std dev = 0.846, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.10492933530803111;  // std dev = 1.595, 165.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=4 */
%   | | else return 0.04730843764027883;  // std dev = 0.333, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02245113218990483;  // std dev = 2.350, 130.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=42 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24891526070080233;  // std dev = 0.142, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.515489531935581;  // std dev = 0.778, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13733019248053616;  // std dev = 0.198, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.13495338079068864;  // std dev = 0.209, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2861291617047331;  // std dev = 1.290, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return -0.0875675620894228;  // std dev = 1.511, 161.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013792894401690152;  // std dev = 1.820, 59.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18899250910975943;  // std dev = 0.063, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, E) )
%   | | then return 0.22433804512562672;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05260791175022934;  // std dev = 0.154, 114.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.021726206649274986;  // std dev = 1.782, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
%   | | | else return 0.02635230643479955;  // std dev = 1.918, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13806129288415422;  // std dev = 0.210, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2905010703700261;  // std dev = 0.719, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09781235624696101;  // std dev = 0.151, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3727053888348698;  // std dev = 0.588, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12822875188508953;  // std dev = 0.226, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19116548051835422;  // std dev = 0.536, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.15369943584132398;  // std dev = 0.248, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08377045672063088;  // std dev = 0.033, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09773352182744108;  // std dev = 0.035, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.014784881270338968;  // std dev = 0.905, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.022374081162138796;  // std dev = 1.106, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16358855215653656;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026871608582947536;  // std dev = 1.603, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
Inference time using transfer learning 8.225788116455078
Parameter learned model CLL:-0.114557 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.991, 1, 55], 'true,false,true': [8.69e-08, 103, 0], 'true,false,false,true': [1.354, 22, 2], 'true,false,false,false': [0.816, 1, 2], 'false,true,true,true': [1.323, 2, 14], 'false,true,true,false': [2.11e-08, 0, 3], 'false,true,false': [3.16e-08, 33, 0], 'false,false': [0.489, 26, 17]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.995, 1, 44], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.277, 88, 12], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.591, 30, 3], 'false,false,false,true': [0.088, 0, 5], 'false,false,false,false': [4.189, 64, 29]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.271, 0, 33], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [0.122, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.062, 0, 3], 'false,false,true,false': [0.0, 0, 9], 'false,false,false,true': [3.933, 132, 25], 'false,false,false,false': [3.163, 38, 15]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.757, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.169, 95, 0], 'false,true,false,false': [0.009, 13, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.292, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.602, 3, 40], 'true,false': [0.738, 1, 1], 'false,true,true': [0.007, 0, 11], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.846, 1, 27], 'false,false,true,false': [1.595, 161, 4], 'false,false,false': [0.333, 28, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.35, 88, 42], 'false,true': [0.142, 0, 14], 'false,false,true': [0.778, 0, 37], 'false,false,false,true': [0.198, 43, 0], 'false,false,false,false': [0.209, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.29, 1, 69], 'true,false': [1.511, 155, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.82, 41, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.063, 0, 42], 'true,false,true': [0.054, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 102, 12], 'false,false,false,true': [1.782, 52, 20], 'false,false,false,false': [1.918, 36, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 2, 41], 'false,true,true,true': [0.719, 0, 23], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.151, 121, 0], 'false,false,true': [0.588, 0, 29], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.226, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.536, 0, 44], 'true,true,false': [0.248, 0, 11], 'true,false,true': [0.033, 128, 0], 'true,false,false,true': [0.035, 15, 0], 'true,false,false,false': [0.905, 13, 4], 'false,true': [1.106, 33, 17], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.603, 25, 15]}]
{'': [0.21658573245461932, 0.22980609418282694], 'false': [0.22004437869822432, 0.2390481341265544], 'false,true': [0.09418282548476423, 3.027880976250427e-17], 'true': [0.017538265306122267, 0.0298224852071005], 'false,true,true': [0.10937499999999967, 1.4802973661668753e-16], 'true,false': [7.329627735389383e-17, 0.12620027434842235], 'true,false,false': [0.07638888888888894, 0.22222222222222224]}
{'': [0.021989746060874102, 0.13867630703374953], 'false': [0.07656409890104712, 0.1775230678506376], 'false,false': [0.07674927371427413, 0.19873534147293345], 'false,false,false': [0.0015517980935972453, 0.18866745958184636], 'false,false,true': [nan, 0.07674927371427413], 'false,true': [nan, 0.07656409890104712]}
{'': [0.004352110525927682, 0.131644179642476], 'false': [nan, 0.13164417964247568], 'false,false': [0.0004348239050663653, 0.12351228578466222], 'false,false,false': [0.09851632632604046, 0.1887289403633226], 'true': [0.002232339042030321, 0.009584295910040785], 'true,false': [0.01711282920756026, 0.0029799766569657215], 'true,true': [0.002232339042030321, nan], 'false,false,true': [0.0012649422692845302, 0.0]}
{'': [0.03284981262031435, 0.001261547801799398], 'false': [0.000273724658114462, 0.0013364930015674764], 'false,false': [nan, 0.0013364930015674764], 'false,false,false': [nan, 0.0013364930015674764], 'false,true': [nan, 0.00027372465811445994], 'false,true,false': [0.0003001516505650854, 5.809829588064692e-06]}
{'': [0.07740127272175366, 0.08287194261900074], 'false': [0.0003229375292763126, 0.08286866904492006], 'false,false': [0.07709611901791143, 0.11078347195674469], 'true': [0.05966200281778855, 0.272663101618117], 'false,false,true': [0.025545661086712506, 0.015418006704843577], 'false,true': [4.023731997007926e-06, 0.0]}
{'': [0.042463909134684556, 0.08800329794063323], 'false': [0.0014359577704360518, 0.09397991564471574], 'false,false': [0.016350509382891197, 0.0009414522842296113], 'true': [nan, 0.042463909134684556], 'true,false': [nan, 0.042463909134684556], 'false,false,false': [0.0009108162670484083, 0.0009679662795814547]}
{'': [0.04658479472824543, 0.05614648799707878], 'false': [nan, 0.05614648799707881], 'false,false': [nan, 0.05614648799707878], 'false,false,false': [nan, 0.05614648799707878], 'true': [0.023765298779526222, 0.014188362774286502]}
{'': [0.00021167929144294046, 0.04144264204379905], 'false': [nan, 0.04144264204379888], 'false,false': [0.023720953396947707, 0.05482827040752452], 'false,false,false': [0.04409258437527529, 0.06940027174192423], 'true': [9.535439788364654e-05, 0.001461981817950285], 'true,false': [0.001461981817950285, nan]}
{'': [0.04393114617693432, 0.03983138216985617], 'false': [0.023982150961003854, 0.0633209037800817], 'false,false': [0.011908509806372687, 0.0010247076414596657], 'false,true': [0.022457822967703885, 0.00018781385660094897], 'false,true,true': [0.022457822967703885, nan], 'false,false,false': [nan, 0.0010247076414596657]}
{'': [0.018918136195042668, 0.041650384459888674], 'false': [0.024483935239437416, 0.06202077867357907], 'false,false': [0.0, 0.06423174509963407], 'false,false,false': [nan, 0.06423174509963402], 'true': [0.0065635351369076065, 0.006100015764110315], 'true,true': [0.00652326833118881, 0.005601638756789792], 'true,false': [8.748634819942536e-06, 0.02878606813795013], 'true,false,false': [8.114558556646298e-05, 0.0481793826803162]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.07302737236023
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8402917922423695;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.3196873966379738;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7273417425881593;  // std dev = 0.130, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7230633796527978;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.031165969841592697;  // std dev = 2.400, 81.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.10290164994505359;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.08503949480547762;  // std dev = 0.828, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2017791528460113;  // std dev = 3.704, 75.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5579275467026764;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(E, A) )
%   | | then return 0.680892342020647;  // std dev = 0.172, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5997327332346253;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5578316358744954;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.12429005783875295;  // std dev = 0.195, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return 0.022698115536626796;  // std dev = 2.627, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06625673379349414;  // std dev = 3.014, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.25248431926974674;  // std dev = 2.223, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then if ( tweets(F, E), follows(A, F) )
%   | | | then return 0.41911656392941493;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.5032803560549274;  // std dev = 0.206, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23383750173193513;  // std dev = 0.918, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.42791127931813816;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.7323496140443904;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.639079375254708;  // std dev = 0.941, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(J, A) )
%   | then return -0.11824090754494565;  // std dev = 0.024, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.15791617917429646;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.232024104533785;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3270192117392024;  // std dev = 0.026, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.08335695253920011;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.21065234889938406;  // std dev = 0.372, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.23524446274264174;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.4359589033559965;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.48851558595891964;  // std dev = 0.925, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.10931634052767172;  // std dev = 0.279, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08583081448503047;  // std dev = 2.219, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | | | else return 0.04759589944543599;  // std dev = 1.998, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25526214059216834;  // std dev = 0.043, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3226882342829719;  // std dev = 1.075, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09412681708721131;  // std dev = 0.061, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.08693829931301418;  // std dev = 0.025, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2822279813098538;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3135919950535602;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5004656516760166;  // std dev = 0.248, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.15474995134628108;  // std dev = 0.059, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.13754950584225603;  // std dev = 0.466, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21133298828968813;  // std dev = 0.033, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.27857140694438726;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.34008121977915173;  // std dev = 0.184, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.036934004492292526;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08762518960965184;  // std dev = 0.017, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.2931419466312324;  // std dev = 0.991, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.1300348689628305;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.15535052695637822;  // std dev = 0.611, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.02586613258833344;  // std dev = 1.369, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.17876959623484232;  // std dev = 0.032, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.09483610328124847;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.24227655461962733;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2817528595396562;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08281731233204771;  // std dev = 0.020, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23215853314243576;  // std dev = 0.985, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.13333134330909271;  // std dev = 0.649, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14089729907569828;  // std dev = 0.637, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.035100752512606456;  // std dev = 1.280, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.15615416273087182;  // std dev = 0.034, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, D), tweets(A, E) )
%   | | | then return -0.13833326807233973;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1967754458491507;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.0012254289095686155;  // std dev = 0.769, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20187216102907482;  // std dev = 0.047, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07602073044818783;  // std dev = 0.018, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2014688967256151;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.3694699372367074;  // std dev = 0.257, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11848613094232015;  // std dev = 0.035, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1347251096019451;  // std dev = 0.121, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return -0.06807888260704517;  // std dev = 0.070, 136.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.19875131146751804;  // std dev = 0.114, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09258247282193134;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.04126064100626196;  // std dev = 0.424, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.012713466856339959;  // std dev = 0.487, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14150138031257886;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.011537054970439033;  // std dev = 0.928, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0.07967334480934563;  // std dev = 0.875, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
Inference time using transfer learning 12.506028652191162
Refined model CLL: -0.106711


******************************************
Best model found
******************************************
Results 

CLL : -0.109803 

AUC ROC : 0.992205 

AUC PR : 0.314466 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 9.07302737236023 

Total Inference Time : 9.07774806022644 

Total revision time: 26.8788058757782
Best scored revision CLL: -0.106711


Results 

CLL : -0.109803 

AUC ROC : 0.992205 

AUC PR : 0.314466 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 26.89693284034729 

Total Inference Time : 9.07774806022644 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.414207935333252
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8093684472946342;  // std dev = 1.951, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.0862955093449322;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.20360348055405775;  // std dev = 0.476, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7163402987904931;  // std dev = 1.004, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02166482519044027;  // std dev = 0.279, 140.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=17 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06014542843560594;  // std dev = 1.593, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6523625291485133;  // std dev = 0.880, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15060806461491272;  // std dev = 4.472, 105.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5271388530077548;  // std dev = 1.746, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7128696697404235;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6180281536034153;  // std dev = 0.166, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6105656874870012;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.568146096701886;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016475620475891038;  // std dev = 4.397, 234.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=31 */
%   | | | else return 0.013125264227285353;  // std dev = 3.647, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.537252719623004;  // std dev = 2.583, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12361965436515626;  // std dev = 0.148, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return -0.12522132078888176;  // std dev = 0.005, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16338029934892648;  // std dev = 0.187, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3359553385838596;  // std dev = 0.532, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.39541375752589825;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3021409289167024;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4201134612332027;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6361601999363476;  // std dev = 0.314, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10559432538585395;  // std dev = 1.605, 205.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=4 */
%   | | else return 0.009561969746514961;  // std dev = 0.292, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03646342640585646;  // std dev = 2.806, 174.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=62 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24910767362227684;  // std dev = 0.103, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48933302780489074;  // std dev = 1.270, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12949867691691735;  // std dev = 0.179, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.12986868346113808;  // std dev = 0.202, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2799145945820698;  // std dev = 1.687, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else return -0.09084986737871889;  // std dev = 1.657, 207.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010109611200131315;  // std dev = 2.095, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1751025565682923;  // std dev = 0.995, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, E) )
%   | | then return 0.212518192072558;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04415885535630036;  // std dev = 0.159, 145.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.012364478596212593;  // std dev = 1.954, 97.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=26 */
%   | | | else return 0.029350935895984292;  // std dev = 2.142, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10010116060132068;  // std dev = 0.272, 67.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23442738238603408;  // std dev = 1.544, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09299534739989594;  // std dev = 0.094, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.36376842562941175;  // std dev = 1.064, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11592983773870666;  // std dev = 0.209, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19950629527819183;  // std dev = 0.659, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.11571687135318859;  // std dev = 0.754, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08340941591677441;  // std dev = 0.008, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09368150389958665;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.041020829489029936;  // std dev = 0.990, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.028664906770774923;  // std dev = 1.239, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.1457021562498103;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02338270944205825;  // std dev = 1.747, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
Inference time using transfer learning 8.491858720779419
Parameter learned model CLL:-0.110566 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.951, 4, 78], 'true,false,true': [0.0, 122, 0], 'true,false,false,true': [1.374, 34, 2], 'true,false,false,false': [1.095, 3, 2], 'false,true,true,true': [0.975, 1, 19], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.476, 36, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.004, 1, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.279, 123, 17], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.593, 37, 3], 'false,false,false,true': [0.88, 1, 8], 'false,false,false,false': [4.472, 71, 34]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.746, 3, 50], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [0.166, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.104, 0, 3], 'false,false,true,false': [0.0, 0, 12], 'false,false,false,true': [4.397, 203, 31], 'false,false,false,false': [3.647, 75, 17]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.583, 5, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.148, 158, 0], 'false,true,false,false': [0.005, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.187, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.532, 0, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.012, 0, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.314, 0, 34], 'false,false,true,false': [1.605, 201, 4], 'false,false,false': [0.292, 48, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.806, 112, 62], 'false,true': [0.103, 0, 17], 'false,false,true': [1.27, 1, 45], 'false,false,false,true': [0.179, 57, 0], 'false,false,false,false': [0.202, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.687, 2, 96], 'true,false': [1.657, 201, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.095, 55, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 60], 'true,false,true': [0.009, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 128, 17], 'false,false,false,true': [1.954, 71, 26], 'false,false,false,false': [2.142, 48, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.272, 6, 61], 'false,true,true,true': [1.544, 2, 29], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.094, 171, 0], 'false,false,true': [1.064, 1, 34], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.209, 76, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.659, 0, 64], 'true,true,false': [0.754, 1, 14], 'true,false,true': [0.008, 125, 0], 'true,false,false,true': [0.008, 29, 0], 'true,false,false,false': [0.99, 35, 4], 'false,true': [1.239, 38, 23], 'false,false,true': [0.824, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.747, 39, 17]}]
{'': [0.22267388588088352, 0.2213404426808865], 'true': [0.04640095181439567, 0.023937671722684233], 'false': [0.2173996913580257, 0.22611570247933835], 'false,true': [0.039930555555556024, 5.3198186596622086e-17], 'false,true,true': [0.047499999999999785, 0.0], 'true,false': [0.0, 0.08804283164782852], 'true,false,false': [0.05246913580246913, 0.24000000000000005]}
{'': [0.015990944558610175, 0.13519280591466748], 'false': [0.07792592398497421, 0.17698389267212686], 'false,false': [0.06341246596136788, 0.20055222321267957], 'false,false,false': [0.0859600748778787, 0.1904988118809723], 'false,true': [nan, 0.07792592398497421], 'false,false,true': [nan, 0.06341246596136788]}
{'': [0.051040208266041054, 0.11027212889317188], 'false': [nan, 0.11027212889317034], 'false,false': [0.001007676142130798, 0.1002585091002083], 'false,false,false': [0.08260352403513047, 0.1445346420920372], 'true': [0.05750064804263489, 0.008623825760534746], 'true,true': [0.05750064804263489, nan], 'true,false': [0.01585166680881467, 0.0034602272265661926], 'false,false,true': [0.0035988433647532827, -7.401486830834377e-17]}
{'': [0.05170579312050229, 0.000505809237745621], 'false': [0.00011780809065517409, 0.0006583449643202216], 'false,false': [nan, 0.0006583449643202216], 'false,false,false': [nan, 0.0006583449643202216], 'false,true': [nan, 0.00011780809065518596], 'false,true,false': [0.0001388816231410788, 8.261697031440058e-07]}
{'': [0.004700296500751029, 0.08024296017779205], 'false': [0.0008750112177504803, 0.07968483725194572], 'false,false': [0.07832220699877152, 0.08522511363577646], 'false,false,true': [0.0028921296913946813, 0.012561463466228462], 'true': [0.004720678979319478, 0.0], 'false,true': [9.677460273820643e-06, 0.0]}
{'': [0.045255299533436856, 0.08302213631107963], 'false': [0.0006280372416192601, 0.08760936920773671], 'false,false': [0.035052918947523055, 0.0006175095645268086], 'true': [nan, 0.045255299533436835], 'true,false': [nan, 0.045255299533436856], 'false,false,false': [0.0005642996016419118, 0.0006671642175172007]}
{'': [0.048312940224026546, 0.05700160810677095], 'false': [nan, 0.05700160810677102], 'false,false': [nan, 0.05700160810677095], 'false,false,false': [nan, 0.05700160810677095], 'true': [0.029039515672261148, 0.013268061423400148]}
{'': [0.015752708498636362, 0.040040056480664714], 'false': [nan, 0.0400400564806647], 'false,false': [0.025148950789035618, 0.05131602591270359], 'false,false,false': [0.039360163775636385, 0.06845459846101218], 'true': [0.016223366657487682, 4.214708872721934e-05], 'true,false': [4.214708872721934e-05, nan]}
{'': [0.07411133669656068, 0.03940834489246068], 'false': [0.025779929385038532, 0.060275769190786845], 'false,false': [0.032356714382983015, 0.0005758877791940573], 'false,true': [0.07694585425131316, 5.188409949954839e-05], 'false,true,true': [0.07694585425131316, nan], 'false,false,false': [nan, 0.0005758877791940573]}
{'': [0.021767530930379593, 0.04461380682074857], 'false': [0.025156570374245072, 0.06463268172057902], 'false,false': [0.22624275905473942, 0.05452128586356924], 'false,false,false': [nan, 0.05452128586356917], 'true': [0.013774581377056736, 0.005407814227258431], 'true,true': [0.00679086878686138, 0.03788412567816297], 'true,false': [5.476228442296005e-07, 0.015090376251800453], 'true,false,false': [2.13177491395393e-06, 0.025127174619295662]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.80010175704956
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.03658790700575091;  // std dev = 0.307, 38.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13592671287729013;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.6639178566553986;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.8148542475543068;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.733780537512457;  // std dev = 0.192, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.128632662840502;  // std dev = 0.068, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7234567037352759;  // std dev = 0.129, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12633646226265743;  // std dev = 0.033, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.29701438684128156;  // std dev = 1.195, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.22539942050620632;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.49713925330778935;  // std dev = 1.376, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.5560341315714462;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6850451199633328;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4115254658852235;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.10348339466393319;  // std dev = 0.912, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5691857532106587;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then return -0.061214782610531225;  // std dev = 0.188, 173.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=14 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0943277498983282;  // std dev = 2.597, 71.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=22 */
%   | | | else return 0.19391275351934278;  // std dev = 2.356, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.40063779448882864;  // std dev = 0.983, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.46217237474908424;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4524348866006362;  // std dev = 0.145, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.017909594088794514;  // std dev = 1.033, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.4160910316807246;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5808563948669843;  // std dev = 0.188, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.5384678578352672;  // std dev = 0.182, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.7028215409629862;  // std dev = 0.247, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12187770112686182;  // std dev = 0.030, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33254870717799007;  // std dev = 0.065, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.24509115130959053;  // std dev = 0.340, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.07508033462230934;  // std dev = 0.772, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3190312405747772;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.06497164797570053;  // std dev = 0.635, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4785332165523474;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.05697255032011416;  // std dev = 0.143, 185.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.024178917130819797;  // std dev = 1.855, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
%   | | | else return 0.07996308935995763;  // std dev = 2.098, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26393348175920506;  // std dev = 0.047, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.10631174469116095;  // std dev = 0.486, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.34564957754057724;  // std dev = 1.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09025307713347058;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return -0.09025307713347061;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27962636457673784;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3730307506429658;  // std dev = 0.261, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.512365382214525;  // std dev = 0.382, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12274437895836349;  // std dev = 0.034, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.22278761161423866;  // std dev = 0.170, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.11509527779721399;  // std dev = 0.318, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.39002498601054997;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.34037687315934084;  // std dev = 0.142, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.07785357914846229;  // std dev = 0.055, 152.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3031617756543995;  // std dev = 0.139, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1047951270723427;  // std dev = 0.061, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.21225535924269737;  // std dev = 0.064, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.04118077171466013;  // std dev = 1.638, 56.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.15310450147233695;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.18491859618162387;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17699061863428434;  // std dev = 0.058, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.28189029361336543;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.2374840274556878;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.30333117242831475;  // std dev = 0.261, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07918683496266057;  // std dev = 0.040, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.016402300582636947;  // std dev = 1.291, 67.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=22 */
%   | | | else return -0.012890675555847064;  // std dev = 1.632, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1686168754544403;  // std dev = 0.216, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.20073522261715787;  // std dev = 0.343, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.1058070900614801;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07328872351570137;  // std dev = 0.034, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.24100419206441956;  // std dev = 0.126, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.422394305227158;  // std dev = 0.263, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1086342952649748;  // std dev = 0.248, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.13432689722563823;  // std dev = 0.128, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1376155596528973;  // std dev = 0.103, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.44045890584857217;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.06412183489069637;  // std dev = 0.063, 188.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, H) )
%   | | then return 0.023115842101168814;  // std dev = 0.134, 75.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=30 */
%   | | else return 0.08824134523556597;  // std dev = 0.362, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.23925563955682083;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13775379772464064;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.05129196576897579;  // std dev = 0.275, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
Inference time using transfer learning 17.934672832489014
Refined model CLL: -0.100209


******************************************
Best model found
******************************************
Results 

CLL : -0.100398 

AUC ROC : 0.99313 

AUC PR : 0.355598 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 11.80010175704956 

Total Inference Time : 17.152242422103882 

Total revision time: 39.88675260543823
Best scored revision CLL: -0.100209


Results 

CLL : -0.100398 

AUC ROC : 0.99313 

AUC PR : 0.355598 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 39.904879570007324 

Total Inference Time : 17.152242422103882 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.835559368133545
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10018439823382107;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.20663378358436005;  // std dev = 0.476, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7028045806455554;  // std dev = 1.410, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0262259585011882;  // std dev = 0.274, 161.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06269293859247418;  // std dev = 1.791, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7473773539535709;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1775381145446376;  // std dev = 4.720, 115.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5763892496836424;  // std dev = 0.354, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.472181589128635;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3307418713645337;  // std dev = 1.402, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5887899720353903;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.564123538350749;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00994763123461073;  // std dev = 4.523, 240.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=34 */
%   | | | else return 0.05435552123920363;  // std dev = 4.068, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5352806068219853;  // std dev = 2.552, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12397879733274869;  // std dev = 0.153, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | | else return -0.12868841026122935;  // std dev = 0.002, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1750156941191646;  // std dev = 0.318, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30020216589173976;  // std dev = 1.434, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4745846617640975;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2523719856003118;  // std dev = 0.975, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.4456265153544683;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5937814237166685;  // std dev = 1.102, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10477917600356527;  // std dev = 1.779, 263.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=5 */
%   | | else return 0.01743736619265097;  // std dev = 0.306, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.011633909312264552;  // std dev = 3.165, 277.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2594277012001857;  // std dev = 0.135, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49943421886283207;  // std dev = 1.371, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13409777875230766;  // std dev = 0.238, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.1315587072593367;  // std dev = 0.270, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28590962527666874;  // std dev = 1.446, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09184371318587056;  // std dev = 1.774, 267.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.034099403405952966;  // std dev = 2.222, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19061860988528928;  // std dev = 0.074, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.23776131104391773;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.056342439418785514;  // std dev = 0.159, 196.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.009802296520762931;  // std dev = 2.169, 120.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=28 */
%   | | | else return 0.05214469587810738;  // std dev = 2.383, 75.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13241600190768504;  // std dev = 0.219, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.264260954119717;  // std dev = 1.256, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09022068993085167;  // std dev = 0.091, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3801168059893977;  // std dev = 0.779, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12106768226143677;  // std dev = 0.292, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.150820625104641;  // std dev = 1.925, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.1274506813978596;  // std dev = 0.810, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08106603922330592;  // std dev = 0.017, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09348968502139315;  // std dev = 0.011, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -9.039863677717158E-4;  // std dev = 0.993, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.017520793448107766;  // std dev = 1.492, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21582906055430073;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011331988194456147;  // std dev = 1.956, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning 8.723117351531982
Parameter learned model CLL:-0.11195 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 187, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 50, 0], 'false,false': [0.476, 43, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.41, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.274, 142, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 51, 4], 'false,false,false,true': [0.137, 0, 8], 'false,false,false,false': [4.72, 75, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.354, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.879, 1, 3], 'true,false,false': [1.402, 3, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.135, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.523, 206, 34], 'false,false,false,false': [4.068, 79, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.552, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.153, 149, 0], 'false,true,false,false': [0.002, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.318, 116, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.434, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.975, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.102, 1, 39], 'false,false,true,false': [1.779, 258, 5], 'false,false,false': [0.306, 55, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.165, 195, 82], 'false,true': [0.135, 0, 22], 'false,false,true': [1.371, 1, 52], 'false,false,false,true': [0.238, 88, 0], 'false,false,false,false': [0.27, 83, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.446, 1, 121], 'true,false': [1.774, 260, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.222, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 83], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 177, 19], 'false,false,false,true': [2.169, 92, 28], 'false,false,false,false': [2.383, 51, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 4, 78], 'false,true,true,true': [1.256, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.091, 212, 0], 'false,false,true': [0.779, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.292, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.925, 3, 85], 'true,true,false': [0.81, 1, 19], 'true,false,true': [0.017, 174, 0], 'true,false,false,true': [0.011, 25, 0], 'true,false,false,false': [0.993, 18, 4], 'false,true': [1.492, 40, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.956, 50, 21]}]
{'': [0.2143693577722616, 0.22453598913535608], 'false': [0.22222222222222338, 0.2270431588613417], 'false,true': [7.105427357601002e-16, 5.773159728050814e-17], 'true': [0.01851192595229848, 0.016322033022847297], 'true,false': [-2.1610758340297165e-16, 0.06858710562414251], 'true,false,false': [0.03993055555555552, 0.22222222222222224], 'false,true,true': [0.0, 0.0]}
{'': [0.022847703199704826, 0.13277964170241607], 'false': [0.07530326370571222, 0.17333507513140162], 'false,false': [0.05830202886617054, 0.2010139034799837], 'false,false,false': [0.002335889894326204, 0.19371519349764], 'false,true': [nan, 0.07530326370571222], 'false,false,true': [nan, 0.05830202886617054]}
{'': [0.04208390264925737, 0.1200409757409923], 'false': [nan, 0.12004097574099053], 'false,false': [0.0009933599195405104, 0.10908281311329178], 'false,false,false': [0.08524609996480555, 0.16226751599694672], 'true': [0.0018655511638224018, 0.18639976726699362], 'true,false': [0.19306872104625358, 0.17863997482912755], 'true,true': [0.0018655511638224018, nan], 'false,false,true': [0.00304216475359409, -1.7763568394002506e-16]}
{'': [0.04096260877604139, 0.00099532415207156], 'false': [0.00012698761648548818, 0.0008696312479915841], 'false,false': [nan, 0.0008696312479915841], 'false,false,false': [nan, 0.0008696312479915841], 'false,true': [nan, 0.00012698761648549051], 'false,true,false': [0.0001578892381661324, 5.735817800088329e-08]}
{'': [0.026086556759755554, 0.07684943713338219], 'false': [0.04480328028026347, 0.0747225203342438], 'false,false': [0.07037301953775338, 0.09336847501308176], 'false,false,true': [0.030360687941296094, 0.012037830868849781], 'false,true': [0.04523916466875977, 0.0], 'true': [0.02603665065315956, 0.0]}
{'': [0.03616386866272013, 0.0787893075667885], 'false': [0.0008327648993504184, 0.08117856724885339], 'false,false': [0.03544494268707325, 0.0007571270629607189], 'true': [nan, 0.036163868662720505], 'true,false': [nan, 0.03616386866272013], 'false,false,false': [0.0006422336692756749, 0.0008756240507080401]}
{'': [0.04418734953615564, 0.05739963814421714], 'false': [nan, 0.05739963814421695], 'false,false': [nan, 0.05739963814421714], 'false,false,false': [nan, 0.05739963814421714], 'true': [0.01714613583896752, 0.011789775760943064]}
{'': [0.00011658084110314934, 0.04086978558777338], 'false': [nan, 0.0408697855877733], 'false,false': [0.025186912967219963, 0.05415107094307056], 'false,false,false': [0.0392083080185744, 0.0756979963193317], 'true': [6.557826866913702e-05, 6.30458957011637e-05], 'true,false': [6.30458957011637e-05, nan]}
{'': [0.048023478072148275, 0.03583135287092001], 'false': [0.02280965192755002, 0.0574960354259846], 'false,false': [0.015157665975740798, 0.0008972680365861712], 'false,true': [0.04045550629652375, 3.904951817108425e-05], 'false,true,true': [0.04045550629652375, nan], 'false,false,false': [nan, 0.0008972680365861712]}
{'': [0.027466940970657876, 0.04443943060026072], 'false': [0.03423999714919086, 0.053520956094752575], 'false,false': [0.0, 0.05388286119220617], 'false,false,false': [nan, 0.05388286119220612], 'true': [0.040482896088842424, 0.005075560946050516], 'true,true': [0.04212988968302283, 0.03279110968500857], 'true,false': [1.7138025649796019e-06, 0.023107141993971847], 'true,false,false': [4.460463761007949e-06, 0.04480055536017024]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.150247812271118
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.12280344585286923;  // std dev = 0.137, 210.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7132424497647872;  // std dev = 0.122, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.6732177940786428;  // std dev = 0.200, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6784859984588479;  // std dev = 0.828, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12754927171255426;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.10324027150103547;  // std dev = 0.142, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return -0.022286113817817088;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return -0.09134437778050516;  // std dev = 1.177, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7262849042285142;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11550619507892121;  // std dev = 4.735, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5456822782800079;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.3586124375672322;  // std dev = 0.336, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return 0.6217788780143676;  // std dev = 0.110, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.22035048258657;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.578980515739561;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11061608423466018;  // std dev = 0.683, 147.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=1 */
%   | | | else return -0.005906047716844189;  // std dev = 2.749, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.08337684186551354;  // std dev = 2.805, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.15189406592678045;  // std dev = 3.626, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(A, F), tweets(A, E) )
%   | | | then return 0.4005900919685228;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.42598917627245503;  // std dev = 0.021, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.5130688453714287;  // std dev = 0.246, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5323840116703583;  // std dev = 0.282, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4327830151792539;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.5857161001769035;  // std dev = 0.167, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.6653224903494711;  // std dev = 1.320, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   else if ( follows(J, A) )
%   | then return -0.11023433987659433;  // std dev = 0.009, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.16680323439319103;  // std dev = 0.260, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3133284501625697;  // std dev = 0.990, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.4082894794759149;  // std dev = 0.306, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21827813908202637;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5186696343780838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3355137675998249;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.48010067456727995;  // std dev = 0.417, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09824342544728608;  // std dev = 0.086, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.057713099680467735;  // std dev = 2.164, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return 0.11811412466503055;  // std dev = 2.837, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.26452763720903105;  // std dev = 0.021, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return -0.10017149154647957;  // std dev = 0.846, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1682564264727458;  // std dev = 1.518, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return -0.08816425183763377;  // std dev = 0.045, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.07619656209035326;  // std dev = 0.098, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.271095560152875;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.1458180692202329;  // std dev = 1.221, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4672941152937816;  // std dev = 1.119, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return -0.13930302098765399;  // std dev = 0.036, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20365718831090973;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return -0.025863432383174307;  // std dev = 0.932, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07912103270083672;  // std dev = 0.075, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.32560611164387765;  // std dev = 0.527, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.08804227439401023;  // std dev = 0.026, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.20266651464177063;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.508570027883798;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03835936743185343;  // std dev = 2.089, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | | | else return 0.0721929845397337;  // std dev = 1.932, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.169681331594754;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.11582532218795766;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.3602162352631491;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.10446653926366148;  // std dev = 1.493, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.2720446917007338;  // std dev = 0.411, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07591356036003297;  // std dev = 0.060, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18484745610223322;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0010233170458591606;  // std dev = 2.245, 93.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=25 */
%   | | | else return 0.02117065211462493;  // std dev = 1.988, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.16452198847602778;  // std dev = 0.017, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return -0.2770167147421435;  // std dev = 0.987, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.17002126020257327;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1659397080880153;  // std dev = 0.145, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.22393757332198602;  // std dev = 0.378, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0710265146215484;  // std dev = 0.055, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3723917832246494;  // std dev = 0.102, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.43623456953482154;  // std dev = 0.271, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.14468415314329616;  // std dev = 0.027, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1293060411425878;  // std dev = 0.128, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.0603106204041074;  // std dev = 0.067, 224.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2518426340440286;  // std dev = 0.368, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10922233503144578;  // std dev = 1.05e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.09444771362809609;  // std dev = 0.828, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.0028257152394603954;  // std dev = 0.616, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.11078912594719696;  // std dev = 0.656, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.006256530903048169;  // std dev = 1.292, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return -0.019139418721198377;  // std dev = 1.256, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning 16.735512733459473
Refined model CLL: -0.10543


******************************************
Best model found
******************************************
Results 

CLL : -0.102672 

AUC ROC : 0.993762 

AUC PR : 0.393474 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 15.150247812271118 

Total Inference Time : 21.859771013259888 

Total revision time: 49.76172971725464
Best scored revision CLL: -0.10543


Results 

CLL : -0.102672 

AUC ROC : 0.993762 

AUC PR : 0.393474 

Precision : 0.34153 

Recall : 0.992063 

F1 : 0.50813 

Total Learning Time : 49.77985668182373 

Total Inference Time : 21.859771013259888 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.1555089950561523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3581489350995122;  // std dev = 0.500, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6528067455442876;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03271961295904381;  // std dev = 0.270, 53.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.04572767502343271;  // std dev = 1.636, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5067057998214464;  // std dev = 0.984, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.7260295928136413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5717621504054302;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.035322581692717236;  // std dev = 1.782, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   | | | else return 0.033377906029898013;  // std dev = 1.434, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4886032314564707;  // std dev = 1.336, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11745075386547435;  // std dev = 0.013, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.12333257335160804;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1555420563924544;  // std dev = 0.106, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2689527246783821;  // std dev = 0.987, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.440271035783694;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3161934032228333;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6346909870229241;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08312529449867434;  // std dev = 1.074, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | else return -0.09796270342824773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024359162491246894;  // std dev = 1.568, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2520866095913006;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5228790513293278;  // std dev = 0.362, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11335288324427202;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.09819125720112347;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3106320260057471;  // std dev = 0.428, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.07568050541221598;  // std dev = 0.914, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08194394765464144;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20381394747475653;  // std dev = 0.068, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05074645956814611;  // std dev = 0.170, 49.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | | else if ( tweets(A, F) )
%   | | | then return -8.304197143719851E-5;  // std dev = 0.657, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.037118769460599374;  // std dev = 0.782, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19624917577892567;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2894639707260301;  // std dev = 0.332, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08941448983111187;  // std dev = 0.035, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4367572472700076;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12950630961627077;  // std dev = 0.104, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1481583869355694;  // std dev = 1.027, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, C) )
%   | | then return -0.08448355897641531;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06993654532516608;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, G) )
%   | then return 0.07928923215673189;  // std dev = 0.443, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038266311206522276;  // std dev = 0.622, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning 10.11138916015625
Parameter learned model CLL:-0.107881 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.5, 2, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.966, 1, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 47, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 5, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.636, 14, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.984, 1, 12], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.782, 44, 5], 'false,false,false,false': [1.434, 13, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.336, 2, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.013, 26, 0], 'false,true,false,false': [0.012, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.106, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.987, 1, 13], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.08, 0, 6], 'false,false,true,false': [1.074, 53, 2], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.568, 44, 18], 'false,true': [0.0, 0, 2], 'false,false,true': [0.362, 0, 5], 'false,false,false,true': [0.06, 6, 0], 'false,false,false,false': [0.01, 3, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.428, 0, 23], 'true,false': [0.914, 46, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.068, 0, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 43, 6], 'false,false,false,true': [0.657, 11, 3], 'false,false,false,false': [0.782, 5, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.054, 0, 14], 'false,true,true,true': [0.332, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 36, 0], 'false,false,true': [0.277, 0, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.104, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.027, 1, 20], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.014, 37, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.443, 3, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.622, 4, 2]}]
{'': [0.22776238842720795, 0.24793388429752045], 'false': [0.24489795918367335, 0.25], 'false,true': [1.4802973661668753e-16, 0.0], 'true': [-8.881784197001253e-17, 3.900783600034334e-17], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [3.489272363107635e-17, 0.0], 'true,false,false': [0.0, nan]}
{'': [0.06222222222222236, 0.09363694233296317], 'false': [0.07267319200632509, 0.13647586691994412], 'false,false': [0.0, 0.16349535253429123], 'false,false,false': [0.0, 0.14868720039201377], 'false,true': [nan, 0.07267319200632509], 'false,false,true': [nan, 0.0]}
{'': [0.0676307495644494, 0.09246844486291515], 'false': [nan, 0.09246844486291511], 'false,false': [3.700743415417188e-17, 0.0813698149144314], 'false,false,false': [0.06480742938971099, 0.128534149912304], 'true': [0.07238894092104577, 0.0], 'true,true': [0.07452139769386093, 0.0], 'false,false,true': [3.700743415417188e-17, nan], 'true,false': [nan, 0.0]}
{'': [0.06610842335673374, 0.0004751297846463768], 'false': [1.5489730567232385e-05, 0.0013969761822736175], 'false,false': [nan, 0.0013969761822736175], 'false,false,false': [nan, 0.0013969761822736175], 'false,true': [nan, 1.5489730567232385e-05], 'false,true,false': [6.1750288245339295e-06, 1.6699131444934832e-05]}
{'': [0.06680928692666392, 0.06563200159876909], 'true': [0.06962471460199868, 0.0], 'false': [0.0, 0.06377878938108446], 'false,false': [0.06470659516402412, 0.0], 'false,false,true': [0.0010664924140815213, 0.020967819301343345], 'false,true': [0.0, nan]}
{'': [0.0396744604428909, 0.09047206671280655], 'false': [0.0, 0.10111970774843126], 'false,false': [0.026205111671237003, 0.0004583054884050509], 'true': [nan, 0.039674460442891], 'true,false': [nan, 0.0396744604428909], 'false,false,false': [0.0005925546142006369, 3.6557300632363475e-05]}
{'': [0.047043700700886336, 0.0], 'true': [0.007980511176060062, 0.017416978248629613], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}
{'': [0.0003260489015374076, 0.03613525442510992], 'false': [nan, 0.03613525442510993], 'false,false': [0.029009371062508636, 0.049978366047262884], 'false,false,false': [0.030851333612195192, 0.0873097810681817], 'true': [0.0003260489015374076, nan]}
{'': [0.0029140681312155464, 0.03388807048383276], 'false': [0.02215634001285842, 0.06285274415573792], 'false,false': [0.019223691827235934, 0.0008289701002997572], 'false,true': [0.015751396454680204, 3.3322097306680444e-05], 'false,true,true': [0.015751396454680204, nan], 'false,false,false': [nan, 0.0008289701002997572]}
{'': [0.028604121599441937, 0.049058833243858374], 'false': [0.032710123670885854, 0.06456610279518733], 'false,false': [nan, 0.06456610279518733], 'false,false,false': [nan, 0.06456610279518733], 'true': [0.05021277237149339, 2.662910274944411e-05], 'true,true': [0.05021277237149339, nan], 'true,false': [5.035296080206979e-06, 0.0], 'true,false,false': [0.0, nan]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true


Refining candidate
***************************
Model training time 4.117255449295044
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.0435389716194778;  // std dev = 0.338, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11338005963087347;  // std dev = 1.568, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7106025138079604;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.17383339963777547;  // std dev = 0.874, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.013100580898362581;  // std dev = 1.412, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.21412348204878656;  // std dev = 1.020, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.534767620607495;  // std dev = 0.213, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21812470546845666;  // std dev = 0.488, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6775724175904663;  // std dev = 0.326, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return -0.11026414402508146;  // std dev = 0.069, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.1260377363694793;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12977338767269003;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, I) )
%   | | then return -0.14648920781723668;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1857584312007206;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24365239748990766;  // std dev = 0.256, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.4140960197721788;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3506413553964703;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.49239999389576794;  // std dev = 0.296, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07853662034023837;  // std dev = 0.978, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.09065612520544901;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.26780704196444477;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.27009221516076176;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.23469480691680591;  // std dev = 1.037, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05393871320684504;  // std dev = 0.599, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | | else return -0.014011667780871734;  // std dev = 0.524, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28869000974339476;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.48414233724066447;  // std dev = 0.363, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11942775715851814;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.12347643250838727;  // std dev = 0.086, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return -0.017225283640893225;  // std dev = 1.428, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.29210468368176556;  // std dev = 0.236, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.08705567894777745;  // std dev = 0.052, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.10794538586974235;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.27495327661352337;  // std dev = 0.230, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1174190183695591;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02154856119098119;  // std dev = 0.454, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10876603972840511;  // std dev = 0.597, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07448294575907088;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.2174734907598429;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.20686767632973965;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17830217759399816;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.22031658929150197;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2705027206769234;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08213600453511684;  // std dev = 0.069, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.01660177919330617;  // std dev = 0.516, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.16586820047021614;  // std dev = 0.640, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1745305102707816;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.04961585187220704;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15368388727088297;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22172397388453957;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.07386405510231608;  // std dev = 0.043, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.09132071336665028;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37749002704616363;  // std dev = 0.203, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10387601489764832;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.15792879237840965;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15712812760389208;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14439587910169896;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22422508277954223;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06883849157686903;  // std dev = 0.040, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.08402033652527997;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.08583589116933546;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06779586729474521;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, J), follows(J, K) )
%   | then return 0.05122692979598018;  // std dev = 0.370, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.1945052221843918;  // std dev = 0.404, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
Inference time using transfer learning 31.595746278762817
Refined model CLL: -0.106298


******************************************
Best model found
******************************************
Results 

CLL : -0.107783 

AUC ROC : 0.994488 

AUC PR : 0.350454 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 4.117255449295044 

Total Inference Time : 6.05223822593689 

Total revision time: 13.502954244613647
Best scored revision CLL: -0.106298


Results 

CLL : -0.107783 

AUC ROC : 0.994488 

AUC PR : 0.350454 

Precision : 0.345291 

Recall : 0.987179 

F1 : 0.511628 

Total Learning Time : 13.52108120918274 

Total Inference Time : 6.05223822593689 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5526371002197266
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6965063377299744;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.008788210736171979;  // std dev = 0.311, 70.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.169156338889341;  // std dev = 1.968, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5902859120966922;  // std dev = 0.252, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.7270237761241615;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.2800461240670408;  // std dev = 0.674, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.405783871861225;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2391172051945584;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03579608901034951;  // std dev = 2.377, 80.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=9 */
%   | | | else return -0.002987699387614118;  // std dev = 1.920, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5373667967062797;  // std dev = 0.966, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12040645348960291;  // std dev = 0.049, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.12520341512158112;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15248780741627824;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3222334788449589;  // std dev = 0.264, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.3923769053542263;  // std dev = 0.052, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.35368708170990837;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5218200624392009;  // std dev = 1.010, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.08602997594308251;  // std dev = 1.514, 108.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=4 */
%   | | else return -0.09766009557854513;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014453766949478778;  // std dev = 2.359, 114.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.11825982731201479;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.44752081582572767;  // std dev = 0.892, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11075997811703095;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.10798546156627477;  // std dev = 0.111, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2984622056191524;  // std dev = 0.653, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.07852412883374006;  // std dev = 1.330, 105.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.015787760201346833;  // std dev = 0.459, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16290894026348324;  // std dev = 1.001, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.033335948180691154;  // std dev = 0.161, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.020116778524071975;  // std dev = 0.948, 35.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | | | else return 0.09263585340077976;  // std dev = 1.056, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14913696510923696;  // std dev = 0.190, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.30729541038219493;  // std dev = 0.422, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09226303957877915;  // std dev = 0.046, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4671181756515697;  // std dev = 0.386, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11060314508522018;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15147671565267504;  // std dev = 1.280, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0.1960777736426913;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08625441916839234;  // std dev = 0.006, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07193683316544254;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11443966177581065;  // std dev = 0.298, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then return 0.0441018978296966;  // std dev = 0.670, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014137826884230733;  // std dev = 0.906, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
Inference time using transfer learning 9.944573163986206
Parameter learned model CLL:-0.109761 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.381, 2, 41], 'true,false,true': [7.74e-08, 82, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false': [0.421, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.984, 1, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.311, 59, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 16, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.968, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.252, 0, 26], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.674, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [0.816, 1, 2], 'false,false,false,true': [2.377, 71, 9], 'false,false,false,false': [1.92, 28, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.966, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.049, 76, 0], 'false,true,false,false': [0.014, 16, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.057, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.264, 0, 27], 'true,false': [0.052, 0, 2], 'false,true,true': [0.046, 0, 7], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.01, 1, 10], 'false,false,true,false': [1.514, 104, 4], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.359, 78, 36], 'false,true': [0.895, 1, 5], 'false,false,true': [0.892, 1, 9], 'false,false,false,true': [0.05, 10, 0], 'false,false,false,false': [0.111, 23, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.653, 0, 44], 'true,false': [1.33, 101, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.459, 9, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [1.001, 1, 30], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 70, 11], 'false,false,false,true': [0.948, 29, 6], 'false,false,false,false': [1.056, 7, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.19, 1, 29], 'false,true,true,true': [0.422, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.046, 71, 0], 'false,false,true': [0.386, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.065, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.28, 2, 39], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.006, 60, 0], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.298, 7, 0], 'false,true': [0.67, 9, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.906, 10, 3]}]
{'': [0.20883217811384283, 0.23818525519848777], 'false': [0.23999999999999994, 0.17751479289940816], 'false,true': [-1.4802973661668753e-16, 0.0], 'true': [0.044348296376420925, 7.713128381606351e-17], 'true,false': [7.311224796312007e-17, -1.2810265668751807e-17], 'true,false,false': [-1.0092936587501423e-17, 0.0], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.031217481789803065, 0.11387555714211318], 'false': [0.09664445558902736, 0.14185737963768108], 'false,false': [3.469446951953614e-18, 0.19242788075466621], 'false,false,false': [0.0, 0.18441966026763829], 'false,true': [nan, 0.09664445558902736], 'false,false,true': [nan, 3.469446951953614e-18]}
{'': [0.040227699025548576, 0.09918573930728977], 'false': [nan, 0.0991857393072898], 'false,false': [0.17283950617283958, 0.0828655321694742], 'false,false,true': [0.13888888888888892, 0.2222222222222222], 'false,false,false': [0.0706403174914254, 0.11174036991560439], 'true': [0.0030152887405367375, 0.1425672243319891], 'true,false': [0.0, 0.151602549147593], 'true,true': [0.002438770885929578, 0.0]}
{'': [0.018655327732558968, 0.00015927776365231913], 'false': [3.1883354140693285e-05, 0.0002722463690720868], 'false,false': [nan, 0.0002722463690720868], 'false,false,false': [nan, 0.0002722463690720868], 'false,true': [nan, 3.1883354140688454e-05], 'false,true,false': [3.215399407442187e-05, 1.1588858930391965e-05]}
{'': [0.002810489185824816, 0.05996524270719298], 'false': [0.0003019038557495587, 0.055397589720608924], 'false,false': [0.0588320794640026, -3.469446951953614e-18], 'false,false,true': [0.09276937196283869, 0.021221735638554964], 'true': [0.0025785152255254637, 0.0013613546282640054], 'false,true': [0.0003019038557495587, nan]}
{'': [0.04879657233458798, 0.08240730026277761], 'false': [0.13352219522824924, 0.07410610608367164], 'false,false': [0.07962568995272785, 0.00045163772564837105], 'true': [nan, 0.048796572334587854], 'true,false': [nan, 0.04879657233458798], 'false,false,false': [0.00024947321881648165, 0.0005372026275900475]}
{'': [0.04430806251242406, 0.01912346172534544], 'true': [0.009700560798745513, 0.016842316525344497], 'false': [nan, 0.01912346172534544], 'false,false': [nan, 0.01912346172534544], 'false,false,false': [nan, 0.01912346172534544]}
{'': [0.03230059982740364, 0.033852179530105046], 'false': [nan, 0.033852179530105046], 'false,false': [0.0260339546497261, 0.04698319901060942], 'false,false,false': [0.02569883103777937, 0.11159047668864037], 'true': [0.03230059982740364, nan]}
{'': [0.03605326286020302, 0.037822555684185015], 'false': [0.024085108358230828, 0.08574298494032129], 'false,false': [0.02133956216689684, 0.0003467286965543904], 'false,true': [0.01272833322130026, 2.96798921733047e-05], 'false,true,true': [0.01272833322130026, nan], 'false,false,false': [nan, 0.0003467286965543904]}
{'': [0.0277793402959275, 0.045577788619998574], 'false': [0.029894480792037475, 0.06319292435064919], 'false,false': [nan, 0.06319292435064919], 'false,false,false': [nan, 0.06319292435064919], 'true': [0.038161479733032355, 0.0012539725702394263], 'true,true': [0.0399304918705178, 0.0], 'true,false': [6.874462741178015e-07, 0.005669434293532446], 'true,false,false': [1.3877787807814458e-18, 0.012705984706211041]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.046339273452759
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.6476226193100386;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( follows(G, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.19148226843284558;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.74780344477063;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.7194734122109544;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7295912809822671;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06509334918986671;  // std dev = 1.821, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | | | else return -0.06509334918986669;  // std dev = 1.151, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.0788596245859783;  // std dev = 2.101, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5397105131533763;  // std dev = 0.967, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.32850817635205365;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5528666062415171;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5782501878455991;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6074217405474717;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.11865512905358694;  // std dev = 0.050, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10497096644938475;  // std dev = 1.416, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.02014897748005171;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.46639307046838263;  // std dev = 0.067, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4300617749724867;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(D, G), follows(A, D) )
%   | | | then return 0.42349788061402277;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4131968132663222;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4526970764272035;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6376744276479019;  // std dev = 0.222, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5673010414705844;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(K, A) )
%   | then return -0.10594034980148653;  // std dev = 0.002, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return -0.16190203970417305;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.35463625128563986;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.33790182697547877;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3286086934923336;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.031611907954920304;  // std dev = 0.687, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3129457001326649;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.04681179592251498;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.04850065492915797;  // std dev = 1.357, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | | | else return 0.19204370390556255;  // std dev = 1.521, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else return -0.0917967600820141;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2687658622511332;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.05503273764047818;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.10943535842329108;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04732967594273276;  // std dev = 1.168, 60.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=5 */
%   | | | else return -0.04732967594273277;  // std dev = 0.739, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2982761674699084;  // std dev = 0.129, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.419485512032638;  // std dev = 0.251, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6828292650196893;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14611866367537768;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2282893664542418;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.20079192820716285;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), follows(C, F) )
%   | | then return 0.2335476011773799;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28359135078250614;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2544329262239183;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08792352125937825;  // std dev = 0.029, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.04988999522404074;  // std dev = 1.267, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.017653519877970623;  // std dev = 0.868, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.05435297102078338;  // std dev = 1.007, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, C), tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.09859723537385562;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.1913874251408506;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1855149616850322;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.028463998914579975;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then return -0.03350213689004209;  // std dev = 0.149, 98.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=11 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.32166367761016285;  // std dev = 0.309, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13696044753051656;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12195924185213142;  // std dev = 0.523, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.060178947095642275;  // std dev = 0.785, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11159683932833125;  // std dev = 0.965, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.21682907572123053;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.1859483052211568;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04328618102643698;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.11693395723213414;  // std dev = 0.591, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.31721615969691913;  // std dev = 0.145, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.08230221912114635;  // std dev = 0.012, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3946242483585002;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1359113496535796;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11539380040915338;  // std dev = 1.028, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.32240806277459416;  // std dev = 0.269, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1651576120128444;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07627281651612587;  // std dev = 0.004, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.06664353703424733;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.21639107463865687;  // std dev = 0.170, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10994360377690765;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, I) )
%   | | then return 0.025540696779970264;  // std dev = 0.447, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.029549332042774365;  // std dev = 0.643, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
Inference time using transfer learning 12.967479467391968
Refined model CLL: -0.107714


******************************************
Best model found
******************************************
Results 

CLL : -0.105952 

AUC ROC : 0.994388 

AUC PR : 0.369877 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 6.046339273452759 

Total Inference Time : 4.761075258255005 

Total revision time: 16.375346899032593
Best scored revision CLL: -0.107714


Results 

CLL : -0.105952 

AUC ROC : 0.994388 

AUC PR : 0.369877 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 16.393473863601685 

Total Inference Time : 4.761075258255005 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8279435634613037
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8425239350995126;  // std dev = 0.992, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.09344305274657114;  // std dev = 0.424, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7226161868005125;  // std dev = 1.88e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02396727481382145;  // std dev = 0.275, 117.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7617786651384234;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16195092477439987;  // std dev = 2.212, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5338665557633391;  // std dev = 1.333, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | else return 0.7273945125930859;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6032858432509176;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.39177989423598764;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5584465609026543;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.032995490582451076;  // std dev = 2.843, 117.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=13 */
%   | | | else return -0.014430552065032482;  // std dev = 1.931, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48353788359653777;  // std dev = 1.830, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11755241719853916;  // std dev = 0.046, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return -0.12129230838489256;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15368709027154537;  // std dev = 0.073, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28633109206311935;  // std dev = 1.446, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.12068914751287416;  // std dev = 0.972, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3314032379465151;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6268469919316062;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08549722667036375;  // std dev = 1.685, 141.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=5 */
%   | | else return -0.09815953162821597;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022149271899982115;  // std dev = 2.783, 180.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=57 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.11341316029396323;  // std dev = 0.941, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.37132691741023455;  // std dev = 1.461, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1182008471522853;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10719784846742154;  // std dev = 0.108, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2876955780999623;  // std dev = 1.089, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return -0.07774647276238347;  // std dev = 1.597, 141.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0014298873648280778;  // std dev = 0.449, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20320592238992927;  // std dev = 0.040, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.03913470051281941;  // std dev = 0.170, 109.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=14 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.007896423978697146;  // std dev = 1.212, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | | else return 0.059618469672480176;  // std dev = 1.196, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15196848299805688;  // std dev = 0.207, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.301502482080842;  // std dev = 0.468, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09068779031067975;  // std dev = 0.041, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.35295867013314786;  // std dev = 1.225, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10891963526942364;  // std dev = 0.083, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1499978283703479;  // std dev = 1.588, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | else return -0.10296893740199498;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08429659329905617;  // std dev = 0.004, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07444345945834627;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07229739687729048;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, G) )
%   | then return 0.006323512663400849;  // std dev = 1.221, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3169331226952248;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07674474241037668;  // std dev = 0.951, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning 9.727007150650024
Parameter learned model CLL:-0.107959 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 63], 'true,false,true': [5.16e-08, 118, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 19, 0], 'false,false': [0.424, 13, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.88e-07, 0, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 103, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 16, 0], 'false,false,false,true': [0.104, 0, 3], 'false,false,false,false': [2.212, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.333, 2, 45], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.143, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.843, 104, 13], 'false,false,false,false': [1.931, 32, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.83, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 98, 0], 'false,true,false,false': [0.0, 30, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.073, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.446, 2, 46], 'true,false': [0.972, 1, 3], 'false,true,true': [0.05, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.143, 0, 13], 'false,false,true,false': [1.685, 136, 5], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.783, 123, 57], 'false,true': [0.941, 1, 6], 'false,false,true': [1.461, 2, 12], 'false,false,false,true': [0.051, 15, 0], 'false,false,false,false': [0.108, 25, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.089, 1, 66], 'true,false': [1.597, 135, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.449, 8, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.04, 0, 49], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.17, 95, 14], 'false,false,false,true': [1.212, 32, 8], 'false,false,false,false': [1.196, 11, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.207, 2, 49], 'false,true,true,true': [0.468, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 126, 0], 'false,false,true': [1.225, 1, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.083, 28, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.588, 3, 60], 'true,true,false': [0.866, 1, 3], 'true,false,true': [0.004, 108, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.02, 9, 0], 'false,true': [1.221, 16, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.951, 7, 3]}]
{'': [0.21635817277341504, 0.19834710743801603], 'true': [0.015380859374999223, -5.921189464667501e-17], 'false': [0.2085048010973938, 0.1799307958477507], 'false,true': [-2.220446049250313e-16, 0.0], 'true,false': [2.258080728051166e-17, -3.2653618371328133e-18], 'true,false,false': [-6.938893903907228e-18, 0.0], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [7.250436079184696e-16, 0.10131846815570024], 'false': [0.07576132147751997, 0.15509379049612707], 'false,false': [3.469446951953614e-18, 0.19583771032506114], 'false,false,false': [0.003579468850514411, 0.18122040534454534], 'false,true': [nan, 0.07576132147751997], 'false,false,true': [nan, 3.469446951953614e-18]}
{'': [0.03618873230895386, 0.08978241359862478], 'false': [nan, 0.08978241359862482], 'false,false': [0.09876543209876552, 0.07675390513796342], 'false,false,true': [0.13888888888888887, -3.700743415417188e-17], 'false,false,false': [0.06906896042119134, 0.10079309678489383], 'true': [0.037772867575584367, 0.00681854989850043], 'true,true': [0.03779627331588466, 0.0], 'true,false': [nan, 0.00681854989850043]}
{'': [0.04293468956934723, 0.00019824365239548932], 'false': [1.9152496664759378e-05, 0.0002692822624189434], 'false,false': [nan, 0.0002692822624189434], 'false,false,false': [nan, 0.0002692822624189434], 'false,true': [nan, 1.9152496664754173e-05], 'false,true,false': [2.173735285893721e-05, -5.551115123125783e-18]}
{'': [0.06029527684143675, 0.05695482964332579], 'true': [0.04354568101508713, 0.23596373094742887], 'false': [0.0003146368365412183, 0.05366316977702418], 'false,false': [0.0577806689594402, -2.135044278125301e-18], 'false,false,true': [0.0015626354507446512, 0.020128530120794262], 'false,true': [0.0003146368365412183, nan]}
{'': [0.04303716677462095, 0.09040792683216717], 'false': [0.1266069268916136, 0.08457696092423203], 'false,false': [0.15256145643482752, 0.000387455128022883], 'true': [nan, 0.043037166774621126], 'true,false': [nan, 0.04303716677462095], 'false,false,false': [0.00017650284447470372, 0.0004686267556296264]}
{'': [0.047114083292746765, 0.018304510379463942], 'true': [0.017689599000667446, 0.018078099669022765], 'false': [nan, 0.018304510379463942], 'false,false': [nan, 0.018304510379463942], 'false,false,false': [nan, 0.018304510379463942]}
{'': [3.3345490082827876e-05, 0.03767809451241275], 'false': [nan, 0.03767809451241292], 'false,false': [0.0287922853751654, 0.05364965369664457], 'false,false,false': [0.03673722497742291, 0.09543436480385638], 'true': [3.3345490082827876e-05, nan]}
{'': [0.04285934560292425, 0.03149994987228776], 'false': [0.017654258145318513, 0.08106433425508018], 'false,false': [0.15016095306067098, 0.0002470838165849813], 'false,true': [0.012875415761139264, 1.3536119186764574e-05], 'false,true,true': [0.012875415761139264, nan], 'false,false,false': [nan, 0.0002470838165849813]}
{'': [0.028695298920889605, 0.07178179298071011], 'false': [0.062147189393232605, 0.08696644777495058], 'false,false': [0.0, 0.09041850545936761], 'false,false,false': [nan, 0.09041850545936761], 'true': [0.05242757269292321, 1.8773206965064584e-05], 'true,true': [0.04003111663184832, 0.1875], 'true,false': [1.4910430850083673e-07, 2.0584301135502525e-05], 'true,false,false': [-1.261617073437678e-18, 4.320981988123859e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.26882266998291
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.06252520921801469;  // std dev = 2.151, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | | | else return -0.07263726035718229;  // std dev = 1.157, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7601352631207009;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05531815127071017;  // std dev = 2.397, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5587569518077715;  // std dev = 0.067, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.45943505482006897;  // std dev = 0.954, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.596052617484131;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.21855769912482542;  // std dev = 1.066, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462843;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.09083281846840413;  // std dev = 1.674, 124.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=4 */
%   | | | else return 0.10809137684114335;  // std dev = 1.626, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0716389273971922;  // std dev = 1.807, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.023896224543817825;  // std dev = 1.563, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4168160755626765;  // std dev = 0.000297, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.4363120245428765;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.4607723360831102;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.549214631602342;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7113641755807468;  // std dev = 0.080, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7930632893998536;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.11114853168807182;  // std dev = 0.006, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else if ( tweets(A, J) )
%   | | then return -0.14004768283754784;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.16763400564370637;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.3201254436787177;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3377427808483293;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.35028827504841803;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20090216067862357;  // std dev = 0.762, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.31917044337734335;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3208638224232473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.565905408657612;  // std dev = 0.172, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08400319094929767;  // std dev = 1.556, 155.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=5 */
%   | | else return -0.11201193661064203;  // std dev = 3.23e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2590885271516578;  // std dev = 0.008, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.40537328084076274;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09288227243709307;  // std dev = 0.039, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.039908496228109214;  // std dev = 0.150, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25482168090209056;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.39337505590292793;  // std dev = 0.215, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5898863846350614;  // std dev = 0.210, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10753701428914401;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.11080970207729735;  // std dev = 0.075, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.211381083541946;  // std dev = 0.007, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(C, A) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.05255622489183137;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.030777108441501944;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2677805490010959;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08660571411269957;  // std dev = 0.122, 77.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=3 */
%   | | else return -6.730549007359593E-4;  // std dev = 0.180, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2095104109552118;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08635769426950671;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.049840022343608154;  // std dev = 1.349, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.18148493969100787;  // std dev = 0.063, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.051416788597001016;  // std dev = 1.332, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return -0.0497393693902925;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.19221834643901678;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07312731069552071;  // std dev = 0.050, 81.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=1 */
%   | | else return 9.316912803210301E-4;  // std dev = 0.160, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.21121670511596347;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.04084326905223504;  // std dev = 1.079, 47.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | | | else return 0.05017202630832807;  // std dev = 1.100, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.11468483576929063;  // std dev = 0.966, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.17321095227287242;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14790131506378812;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19122837412999052;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1642946120834361;  // std dev = 0.083, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3584334757807954;  // std dev = 0.148, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07773856012772987;  // std dev = 0.007, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3989478422906734;  // std dev = 0.096, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11649963922268333;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.08059031365311517;  // std dev = 1.321, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.16517514292730767;  // std dev = 0.112, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2351665528276739;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.07339603464433204;  // std dev = 0.008, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.006506107742372805;  // std dev = 0.138, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else return -0.004922211492881437;  // std dev = 0.170, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21085190709759294;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.009405583955914648;  // std dev = 0.433, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.018749382574851994;  // std dev = 0.730, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning 15.624003887176514
Refined model CLL: -0.102694


******************************************
Best model found
******************************************
Results 

CLL : -0.103606 

AUC ROC : 0.994283 

AUC PR : 0.375183 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 6.26882266998291 

Total Inference Time : 8.118809461593628 

Total revision time: 21.419949531555176
Best scored revision CLL: -0.102694


Results 

CLL : -0.103606 

AUC ROC : 0.994283 

AUC PR : 0.375183 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 21.438076496124268 

Total Inference Time : 8.118809461593628 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.1403615474700928
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970732;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.08921948595311938;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.724369677324643;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.020986210933855755;  // std dev = 0.281, 145.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09685073014582325;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7561377795328413;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1870002332454547;  // std dev = 2.959, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5573502894383531;  // std dev = 1.068, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.728539957901768;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8793267646359902;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5960128144318156;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5601748317458616;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5601748317458616;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04150464774025095;  // std dev = 3.360, 175.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=18 */
%   | | | else return 0.05835793967520117;  // std dev = 2.613, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4850478085508744;  // std dev = 2.505, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11896768894349415;  // std dev = 0.042, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | | else return -0.12960234137725157;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17284162309829934;  // std dev = 0.174, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3310054668936323;  // std dev = 0.497, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.39005522581771573;  // std dev = 0.123, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3093091623003494;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5290888788438886;  // std dev = 1.425, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.08349543146057026;  // std dev = 2.273, 202.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=9 */
%   | | else return -0.1046547507536402;  // std dev = 4.17e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028819012125430588;  // std dev = 3.040, 211.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24737528313298224;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5431275350719005;  // std dev = 0.674, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12203628622806914;  // std dev = 0.108, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.1208490528354918;  // std dev = 0.175, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25980679952824853;  // std dev = 1.998, 87.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | else return -0.07325952232838806;  // std dev = 1.931, 176.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=10 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011191987091496627;  // std dev = 0.579, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1779340870009092;  // std dev = 0.993, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( follows(A, E) )
%   | | then return 0.19761212469501566;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.02939511817778826;  // std dev = 0.185, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.004987900630333997;  // std dev = 1.311, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return 0.11818516282312568;  // std dev = 1.531, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10111848233760733;  // std dev = 0.280, 66.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=60 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2659032357706128;  // std dev = 1.073, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09325776722248567;  // std dev = 0.059, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4366616425653218;  // std dev = 0.507, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12352781812160454;  // std dev = 0.170, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20012876307325547;  // std dev = 0.755, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.14002711658212863;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08750838565812674;  // std dev = 0.080, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07877562274411419;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.04413719611967496;  // std dev = 0.415, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.00446503695283772;  // std dev = 1.232, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20840374194608413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07305828100234013;  // std dev = 1.218, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
Inference time using transfer learning 11.049686193466187
Parameter learned model CLL:-0.114247 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.0, 136, 0], 'true,false,false,true': [0.973, 18, 1], 'true,false,false,false': [0.0, 3, 0], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.281, 127, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.09, 0, 3], 'false,false,false,false': [2.959, 28, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.068, 1, 55], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.122, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [2.11e-08, 0, 6], 'false,false,false,true': [3.36, 157, 18], 'false,false,false,false': [2.613, 36, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.505, 4, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.042, 124, 0], 'false,true,false,false': [1.05e-08, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.174, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.497, 0, 57], 'true,false': [0.123, 0, 3], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.425, 2, 19], 'false,false,true,false': [2.273, 193, 9], 'false,false,false': [4.17e-09, 26, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.04, 140, 71], 'false,true': [0.0, 0, 9], 'false,false,true': [0.674, 0, 20], 'false,false,false,true': [0.108, 23, 0], 'false,false,false,false': [0.175, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.998, 3, 84], 'true,false': [1.931, 166, 10], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.579, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.993, 1, 61], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.185, 104, 18], 'false,false,false,true': [1.311, 43, 11], 'false,false,false,false': [1.531, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.28, 6, 60], 'false,true,true,true': [1.073, 1, 24], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.059, 159, 0], 'false,false,true': [0.507, 0, 16], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.755, 0, 74], 'true,true,false': [3.73e-09, 0, 6], 'true,false,true': [0.08, 134, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.415, 11, 1], 'false,true': [1.232, 19, 10], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.218, 12, 8]}]
{'': [0.2235937500000005, 0.22611570247933835], 'false': [0.2222222222222223, 0.23040000000000005], 'true': [0.023795359904817976, 0.00628905624098687], 'false,true': [-8.881784197001253e-17, 2.7755575615628915e-18], 'true,false': [-6.204187490552346e-17, 0.04338842975206616], 'true,false,false': [0.04986149584487539, 0.0], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [-1.6044513388131294e-15, 0.1115946005727243], 'false': [0.07889446742475494, 0.16419493067397845], 'false,false': [0.03329369797859687, 0.20584639267809932], 'false,false,false': [0.0026885516622283667, 0.19902247557598438], 'false,true': [nan, 0.07889446742475494], 'false,false,true': [nan, 0.03329369797859687]}
{'': [0.021106464127954406, 0.09579560708368438], 'false': [nan, 0.09579560708368429], 'false,false': [7.401486830834377e-17, 0.08361842951318339], 'false,false,false': [0.06449326557944297, 0.1484804005339072], 'true': [0.020527703022392006, 0.01875776492214265], 'true,true': [0.020380130505886513, 0.0], 'true,false': [0.0, 0.004943654634450197], 'false,false,true': [7.401486830834377e-17, 7.401486830834377e-17]}
{'': [0.06032082435326988, 0.0005612264442429651], 'false': [2.6912914708203613e-05, 0.0010766290457899033], 'false,false': [nan, 0.0010766290457899033], 'false,false,false': [nan, 0.0010766290457899033], 'false,true': [nan, 2.691291470820059e-05], 'false,true,false': [1.4209560015492554e-05, 4.827056628805028e-18]}
{'': [0.004524831082036496, 0.06064857316536724], 'false': [-5.551115123125783e-17, 0.0581511935086917], 'false,false': [0.06428201043123101, 1.708035422500241e-17], 'false,false,true': [0.09666996485651833, 0.02557660379116705], 'true': [0.004324780039266071, 0.005013270567131652], 'false,true': [-5.551115123125783e-17, nan]}
{'': [0.043793749492153165, 0.08650993857367012], 'false': [-2.4671622769447922e-17, 0.0929608125809845], 'false,false': [0.022696979173436292, 0.0007714422026528814], 'true': [nan, 0.04379374949215283], 'true,false': [nan, 0.043793749492153165], 'false,false,false': [0.0005081198383989349, 0.0009601157150157646]}
{'': [0.053920251195360654, 0.018632713635953868], 'true': [0.045896782585472154, 0.021189872121143264], 'false': [nan, 0.018632713635953868], 'false,false': [nan, 0.018632713635953868], 'false,false,false': [nan, 0.018632713635953868]}
{'': [0.015651751887417326, 0.04359741079612555], 'false': [nan, 0.043597410796125495], 'false,false': [0.03411669108456386, 0.05659364964741227], 'false,false,false': [0.03182608382752774, 0.10660694216829757], 'true': [0.015898053067274695, 0.0], 'true,false': [0.0, nan]}
{'': [0.07837214339394405, 0.03486392370290098], 'false': [0.021418910169571037, 0.07824768321771078], 'false,false': [0.016036635674508914, 0.0009933373524848577], 'false,true': [0.046034948282070595, 2.1748426689011847e-05], 'false,true,true': [0.046034948282070595, nan], 'false,false,false': [nan, 0.0009933373524848577]}
{'': [0.020711456264881786, 0.06174313891715249], 'false': [0.05231204612465768, 0.0715011989727139], 'false,false': [0.0, 0.07420395445477462], 'false,false,false': [nan, 0.07420395445477462], 'true': [0.00738158873355973, 0.0012633941136994], 'true,true': [0.0077091803348518645, 2.3129646346357427e-18], 'true,false': [4.745027927741243e-05, 0.007476802891653704], 'true,false,false': [-2.3129646346357427e-18, 0.014353695483799077]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 6.6580188274383545
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8422759192264967;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.13518439823382128;  // std dev = 0.081, 150.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7226658968615449;  // std dev = 2.53e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7364108785345558;  // std dev = 0.152, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.1261778552223542;  // std dev = 2.98e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.23666309750275685;  // std dev = 1.106, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.16066757255144135;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5610144744223712;  // std dev = 0.059, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return 0.5862046248861461;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7683065276188439;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6528459704526068;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5584954593759931;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5511801653220939;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11290931370920634;  // std dev = 3.94e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0840183539421182;  // std dev = 1.706, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.14762731592350267;  // std dev = 2.137, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.42445791286746465;  // std dev = 0.186, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.31410671445248045;  // std dev = 1.343, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.07866857031136651;  // std dev = 1.205, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.41712706574919917;  // std dev = 0.013, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5491938729064526;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7306676054655918;  // std dev = 0.176, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then return -0.1020848205483911;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else if ( tweets(A, I) )
%   | | then return -0.1251270915525208;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.21185938700615148;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3259813209297884;  // std dev = 0.010, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.02946711774647041;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.4135356892168926;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.16223146884566841;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.07685636530455245;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.20664356009961687;  // std dev = 0.989, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3228807502047908;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, J) )
%   | | then return -0.0415763698379912;  // std dev = 0.171, 249.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=28 */
%   | | else return -0.09310013665025964;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then return 0.03508668717570083;  // std dev = 0.191, 203.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=71 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.07483346207359431;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.394862107440253;  // std dev = 0.186, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5841325738308074;  // std dev = 0.216, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.09939977269772511;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.11978000547354123;  // std dev = 0.210, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.21529719080431448;  // std dev = 0.985, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.25181955120652005;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2593304657035313;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3116717466584954;  // std dev = 0.059, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07883444743506032;  // std dev = 0.071, 110.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=4 */
%   | | else return -0.022828045969282427;  // std dev = 0.153, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.24263656082962015;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.07798427721721204;  // std dev = 0.011, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.05710961445004433;  // std dev = 1.667, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.19177542726155597;  // std dev = 0.136, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else return 0.14185825977904806;  // std dev = 0.286, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.25431990603764243;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A), tweets(G, F) )
%   | | then return -0.050834821636391775;  // std dev = 0.129, 144.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=14 */
%   | | else if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.2097667711537584;  // std dev = 0.946, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09961275244039194;  // std dev = 0.026, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(I, A) )
%   | | then return -0.029792897648106647;  // std dev = 0.138, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.043538765603482035;  // std dev = 0.627, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10232512292221894;  // std dev = 1.186, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1818045697962352;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10363759051287143;  // std dev = 0.966, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.2151683492124734;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2178328550645149;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2630331745307576;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then return -0.04424610498625181;  // std dev = 0.111, 214.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=24 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.170638919921747;  // std dev = 0.953, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.37286456769843757;  // std dev = 0.281, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11763194302448816;  // std dev = 0.038, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1353768003191101;  // std dev = 1.394, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.3075279079756554;  // std dev = 0.219, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.17822139729071063;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07685493912091347;  // std dev = 0.023, 161.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20077221489734534;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08244995164032398;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.07841540383161034;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.3114954433258488;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.010310848210200965;  // std dev = 0.276, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning 10.753909587860107
Refined model CLL: -0.108882


******************************************
Best model found
******************************************
Results 

CLL : -0.107698 

AUC ROC : 0.993874 

AUC PR : 0.334227 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 6.6580188274383545 

Total Inference Time : 8.259023189544678 

Total revision time: 23.539779663085938
Best scored revision CLL: -0.108882


Results 

CLL : -0.107698 

AUC ROC : 0.993874 

AUC PR : 0.334227 

Precision : 0.340611 

Recall : 1.0 

F1 : 0.508143 

Total Learning Time : 23.55790662765503 

Total Inference Time : 8.259023189544678 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.5327751636505127
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.14847151574467365;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6908392909336573;  // std dev = 1.705, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.027741079049125476;  // std dev = 0.273, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08289781350284589;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.749379439769521;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08853668780390397;  // std dev = 3.284, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5572788475755092;  // std dev = 1.360, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7306443185160538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.779002518584131;  // std dev = 0.141, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5888251648271636;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.569377950704988;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.569377950704988;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.048909885099070176;  // std dev = 3.688, 233.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=21 */
%   | | | else return 0.04501586795802537;  // std dev = 2.797, 57.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48483948829508794;  // std dev = 2.668, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11753718880241217;  // std dev = 0.080, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return -0.12731079959477812;  // std dev = 0.001, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15176549781919926;  // std dev = 0.159, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2982969877259641;  // std dev = 1.720, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.3926257438068861;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25986372091226795;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5586529995998962;  // std dev = 1.389, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08206496855029752;  // std dev = 2.338, 247.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=9 */
%   | | else return -0.10472984361716081;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023891163766643495;  // std dev = 3.442, 293.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2641431552953692;  // std dev = 0.025, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49205551149267945;  // std dev = 1.508, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1136040552144644;  // std dev = 0.115, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11071835856306175;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2603284513302189;  // std dev = 2.425, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07684938724893123;  // std dev = 2.095, 257.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013995827958513318;  // std dev = 0.694, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1476594578293004;  // std dev = 2.168, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2020484142346271;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04956746180359179;  // std dev = 0.168, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.00898225175695505;  // std dev = 1.437, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.1080124829185028;  // std dev = 1.680, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17494212817795934;  // std dev = 0.165, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.302086437388961;  // std dev = 0.724, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09075660861259796;  // std dev = 0.102, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4021937133036424;  // std dev = 1.285, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1109671825397832;  // std dev = 0.169, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19010956336974164;  // std dev = 1.312, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.04763095200870465;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08383459384406537;  // std dev = 0.034, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0809902363548062;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.02386186370968382;  // std dev = 0.465, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.003836413983334403;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.4535140446260347;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06177926646662044;  // std dev = 1.401, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning 9.628997802734375
Parameter learned model CLL:-0.110282 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 181, 0], 'true,false,false,true': [0.977, 21, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.454, 22, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.705, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 168, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.104, 0, 4], 'false,false,false,false': [3.284, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.36, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.141, 0, 2], 'true,false,false': [0.142, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.688, 212, 21], 'false,false,false,false': [2.797, 46, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.668, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.08, 183, 0], 'false,true,false,false': [0.001, 52, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.159, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.72, 3, 73], 'true,false': [0.131, 0, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.389, 2, 23], 'false,false,true,false': [2.338, 238, 9], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.442, 202, 91], 'false,true': [0.025, 0, 13], 'false,false,true': [1.508, 1, 22], 'false,false,false,true': [0.115, 31, 0], 'false,false,false,false': [0.144, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.425, 5, 107], 'true,false': [2.095, 246, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.694, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.168, 5, 80], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.168, 182, 22], 'false,false,false,true': [1.437, 43, 13], 'false,false,false,false': [1.68, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.165, 2, 77], 'false,true,true,true': [0.724, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 236, 0], 'false,false,true': [1.285, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.169, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.312, 1, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.034, 151, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.465, 10, 2], 'false,true': [1.38, 30, 12], 'false,false,true': [0.827, 2, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.401, 17, 8]}]
{'': [0.2236329235636543, 0.21694214876033072], 'true': [0.027500889996442155, 0.009660916121356168], 'false': [0.2253061224489791, 0.2060353798126952], 'false,true': [-1.4802973661668753e-16, 9.654113257610057e-18], 'true,false': [-2.011895867829013e-16, 0.07638888888888894], 'true,false,false': [0.04338842975206616, 0.25], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03419909969560865, 0.10222609389610947], 'false': [0.07434648078328558, 0.1516422488172443], 'false,false': [0.04535147392290249, 0.17286052828032106], 'false,false,false': [0.0026831114530012634, 0.15860912329619825], 'false,true': [nan, 0.07434648078328558], 'false,false,true': [nan, 0.04535147392290249]}
{'': [0.025496427942733157, 0.0899157943192994], 'false': [nan, 0.0899157943192995], 'false,false': [0.0, 0.07526338963886767], 'false,false,false': [0.05836199244920061, 0.13726349857648404], 'true': [0.02573450771078293, 0.014682455263685945], 'true,true': [0.02568021106577678, 0.0], 'true,false': [0.009920837073432276, 0.005007455731478427], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.05392126983430148, 0.00025855050624610696], 'false': [4.391496370869131e-05, 0.0006133141110293703], 'false,false': [nan, 0.0006133141110293703], 'false,false,false': [nan, 0.0006133141110293703], 'false,true': [nan, 4.391496370869131e-05], 'false,true,false': [3.5244295585955984e-05, 4.2685630592142175e-08]}
{'': [0.03762982013974303, 0.062266984821755036], 'false': [0.05246913580246921, 0.05802434442829853], 'false,false': [0.06145136266167289, -1.3877787807814457e-17], 'false,false,true': [0.07715939193702369, 0.022129908112825412], 'false,true': [0.05246913580246921, nan], 'true': [0.03893821803841089, 0.004317241552468404]}
{'': [0.04042684427348266, 0.08282709084533177], 'false': [4.715348119084421e-05, 0.08699634716961123], 'false,false': [0.09888627334957484, 0.0004352319257412404], 'true': [nan, 0.040426844273482795], 'true,false': [nan, 0.04042684427348266], 'false,false,false': [0.0004233282061745332, 0.0004397737690877725]}
{'': [0.05186453268775653, 0.020070578388068756], 'true': [0.05249767299784264, 0.017081413188315065], 'false': [nan, 0.020070578388068756], 'false,false': [nan, 0.020070578388068756], 'false,false,false': [nan, 0.020070578388068756]}
{'': [0.05408727037865955, 0.039432138543568473], 'true': [0.055290028487395976, 7.989582399226675e-05], 'false': [nan, 0.03943213854356818], 'false,false': [0.028158345052616045, 0.06170799105227509], 'false,false,false': [0.036871174136198205, 0.10850521932002982], 'true,false': [7.989582399226675e-05, nan]}
{'': [0.02728083404701907, 0.030670102449850994], 'false': [0.018223143523632544, 0.07595911193577161], 'false,false': [0.09173569576468903, 0.0005734551336717209], 'false,true': [0.01639805796934911, 4.366841798483648e-05], 'false,true,true': [0.01639805796934911, nan], 'false,false,false': [nan, 0.0005734551336717209]}
{'': [0.026080537937130877, 0.07517798526336358], 'false': [0.0453341541237928, 0.11987876503158838], 'false,false': [0.2277144860106307, 0.07848913603658562], 'false,false,false': [nan, 0.07848913603658562], 'true': [0.026747319413868372, 0.0014406161043619909], 'true,true': [0.018129808003648558, 0.09024687118181278], 'true,false': [7.718530425469745e-06, 0.008538031878009278], 'true,false,false': [-5.204170427930421e-18, 0.018057130975690238]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 12.692909002304077
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.13311744044633997;  // std dev = 0.093, 229.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6673244229450265;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else return 0.7257291180030234;  // std dev = 0.151, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11045190646218814;  // std dev = 0.120, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6900423029552192;  // std dev = 0.973, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.12640592794034355;  // std dev = 3.94e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10498755712779385;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.3691881999386513;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.49539886202296163;  // std dev = 2.155, 69.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=64 */
%   | | | else return 0.42805885778326297;  // std dev = 0.932, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.07993965994009564;  // std dev = 0.740, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.6626101105745444;  // std dev = 0.263, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5557810149105181;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4456498329418316;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.06899088226688939;  // std dev = 0.176, 240.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1196805220589644;  // std dev = 1.706, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.19388148272716088;  // std dev = 1.931, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.4109299259454207;  // std dev = 1.387, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.1030698440713419;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.44707294562420463;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.48992537917630874;  // std dev = 0.215, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25825221091689454;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5794187794516857;  // std dev = 0.360, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6826199137010421;  // std dev = 0.149, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(I, A) )
%   | then return -0.10735330553696507;  // std dev = 0.000726, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.1799561119119282;  // std dev = 0.063, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.32880114120676807;  // std dev = 0.989, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.18982348079283654;  // std dev = 0.840, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.3339870620017198;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3648303874440128;  // std dev = 0.136, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4261392082377744;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3282412786284257;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05801931220939722;  // std dev = 2.198, 213.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=15 */
%   | | | else return 0.030283435091526433;  // std dev = 2.173, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | else return -0.09797644557998784;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.23412100780482187;  // std dev = 1.384, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.01177781352753604;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.274918013169816;  // std dev = 0.019, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, F) )
%   | | then return -0.03722190363794445;  // std dev = 0.167, 161.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=17 */
%   | | else return -0.0674472704590951;  // std dev = 0.195, 53.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27505546515446533;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.04110750876589405;  // std dev = 1.174, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.44986547178479974;  // std dev = 0.369, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1179613952646572;  // std dev = 0.044, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.1877193085016575;  // std dev = 0.217, 63.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   | | else return 0.3558538150044984;  // std dev = 0.155, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.0884494868642533;  // std dev = 0.035, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.1326261416868903;  // std dev = 0.917, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2658021766997833;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10149751190741985;  // std dev = 0.017, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2531297494937728;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.2013621747790478;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.026380489611868715;  // std dev = 1.746, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.15810840898248205;  // std dev = 1.384, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18881689802714618;  // std dev = 0.078, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.03610907321342847;  // std dev = 1.324, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.07505574374436243;  // std dev = 0.955, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.24055840390019045;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.03722405200806907;  // std dev = 0.140, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.05937291802637726;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.05934862433219095;  // std dev = 0.439, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.016575434022757088;  // std dev = 1.316, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17845572997204137;  // std dev = 0.112, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.2629692284435687;  // std dev = 0.064, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15143935470127695;  // std dev = 0.052, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.44682192349485944;  // std dev = 0.312, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07928883609614007;  // std dev = 0.040, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2221560560602204;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4288230684808714;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.1060064423580332;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.1902280761032219;  // std dev = 0.253, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.13211669955751532;  // std dev = 0.159, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | else return 0.20523988363129506;  // std dev = 0.188, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.07058789919048421;  // std dev = 0.034, 212.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.18391267921015733;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18408258926884355;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08569354935398248;  // std dev = 0.001, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2875318993542375;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11326348343886088;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -3.837142796145626E-4;  // std dev = 0.258, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning 34.954158306121826
Refined model CLL: -0.104597


******************************************
Best model found
******************************************
Results 

CLL : -0.101827 

AUC ROC : 0.995388 

AUC PR : 0.433894 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 12.692909002304077 

Total Inference Time : 25.928517818450928 

Total revision time: 49.19545769691467
Best scored revision CLL: -0.104597


Results 

CLL : -0.101827 

AUC ROC : 0.995388 

AUC PR : 0.433894 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 49.213584661483765 

Total Inference Time : 25.928517818450928 

