Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.108615 

AUC ROC : 0.994562 

AUC PR : 0.387839 

Precision : 0.342169 

Recall : 0.910256 

F1 : 0.497373 

Total Learning Time : 4.261139392852783 

Total Inference Time : 10.113685369491577 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.110932 

AUC ROC : 0.993157 

AUC PR : 0.386987 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 4.296485662460327 

Total Inference Time : 8.852187156677246 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.112095 

AUC ROC : 0.995037 

AUC PR : 0.427504 

Precision : 0.343182 

Recall : 0.967949 

F1 : 0.506711 

Total Learning Time : 2.6497795581817627 

Total Inference Time : 9.960185766220093 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.11071 

AUC ROC : 0.993176 

AUC PR : 0.395457 

Precision : 0.336111 

Recall : 0.960317 

F1 : 0.497942 

Total Learning Time : 2.937403678894043 

Total Inference Time : 8.9556303024292 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.156125 

AUC ROC : 0.993657 

AUC PR : 0.326478 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 2.6746304035186768 

Total Inference Time : 5.5363078117370605 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.150107 

AUC ROC : 0.992997 

AUC PR : 0.359195 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 2.909558057785034 

Total Inference Time : 4.377736568450928 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.160542 

AUC ROC : 0.993936 

AUC PR : 0.345766 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 2.5707147121429443 

Total Inference Time : 5.56757664680481 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.15224 

AUC ROC : 0.992454 

AUC PR : 0.34049 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 2.7530388832092285 

Total Inference Time : 4.782596111297607 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.110012 

AUC ROC : 0.994694 

AUC PR : 0.379719 

Precision : 0.343182 

Recall : 0.967949 

F1 : 0.506711 

Total Learning Time : 2.460333824157715 

Total Inference Time : 10.242944717407227 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.109072 

AUC ROC : 0.99327 

AUC PR : 0.389594 

Precision : 0.338983 

Recall : 0.952381 

F1 : 0.5 

Total Learning Time : 2.786484479904175 

Total Inference Time : 8.223555088043213 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

Results 

CLL : -0.109562 

AUC ROC : 0.994765 

AUC PR : 0.398941 

Precision : 0.342169 

Recall : 0.910256 

F1 : 0.497373 

Total Learning Time : 2.625349283218384 

Total Inference Time : 9.971099615097046 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

Results 

CLL : -0.109507 

AUC ROC : 0.993054 

AUC PR : 0.380048 

Precision : 0.337047 

Recall : 0.960317 

F1 : 0.498969 

Total Learning Time : 2.782536268234253 

Total Inference Time : 8.149226427078247 

Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.3948419094085693
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10018439823382112;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.10814893509951237;  // std dev = 0.433, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7163238515979713;  // std dev = 1.002, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02934716222775711;  // std dev = 0.275, 189.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05865903411798077;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7507219186171548;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.167542187680733;  // std dev = 3.096, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5515230542358007;  // std dev = 1.468, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7327424360996746;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.80131377375149;  // std dev = 0.106, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5905599388213819;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5653515952784794;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5653515952784794;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04778031744945216;  // std dev = 3.663, 225.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=21 */
%   | | | else return 0.01850106124778315;  // std dev = 2.843, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5091243364326334;  // std dev = 2.018, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11839453765360186;  // std dev = 0.094, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | | else return -0.12428829550458913;  // std dev = 0.001, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15787934445118207;  // std dev = 0.123, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2912341369177925;  // std dev = 1.720, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.40168189436323487;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30755698880734983;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5975919436290117;  // std dev = 0.835, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08275521327195293;  // std dev = 2.301, 237.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=9 */
%   | | else return -0.10668885102272307;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023450295255001623;  // std dev = 3.571, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25214143339527784;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47493107519718963;  // std dev = 1.498, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11622035152264452;  // std dev = 0.099, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.1184522219045964;  // std dev = 0.154, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27474135060101545;  // std dev = 1.746, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.0730784478956779;  // std dev = 2.056, 220.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02322072873998041;  // std dev = 0.644, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17390396570608355;  // std dev = 1.396, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2077295765111276;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.045314154805279366;  // std dev = 0.155, 204.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.014167021602377317;  // std dev = 1.433, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
%   | | | else return 0.12419310606950514;  // std dev = 1.627, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1783637767448538;  // std dev = 0.128, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2520693733579684;  // std dev = 1.316, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09075473515136101;  // std dev = 0.047, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45047737040394503;  // std dev = 0.605, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11650059688506513;  // std dev = 0.145, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1604113795698214;  // std dev = 1.980, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14070751421765848;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08362722528539934;  // std dev = 0.025, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08077522450537379;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.03645656587033165;  // std dev = 0.479, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03146025748956686;  // std dev = 0.968, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22017505449620667;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04606783270708044;  // std dev = 1.363, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning 10.086371421813965
Parameter learned model CLL:-0.111339 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false,true': [0.979, 23, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.433, 27, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.002, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 167, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.964, 13, 1], 'false,false,false,true': [0.108, 0, 4], 'false,false,false,false': [3.096, 34, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.468, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.106, 0, 2], 'true,false,false': [0.149, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.663, 204, 21], 'false,false,false,false': [2.843, 54, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.018, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.094, 171, 0], 'false,true,false,false': [0.001, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.123, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.72, 3, 73], 'true,false': [0.136, 0, 4], 'false,true,true': [2.58e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.835, 1, 23], 'false,false,true,false': [2.301, 228, 9], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.571, 185, 91], 'false,true': [0.075, 0, 13], 'false,false,true': [1.498, 1, 22], 'false,false,false,true': [0.099, 34, 0], 'false,false,false,false': [0.154, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.746, 3, 107], 'true,false': [2.056, 209, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.644, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 80], 'true,false,true': [0.018, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 182, 22], 'false,false,false,true': [1.433, 52, 13], 'false,false,false,false': [1.627, 15, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.128, 1, 77], 'false,true,true,true': [1.316, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.047, 210, 0], 'false,false,true': [0.605, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.98, 3, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.025, 178, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.479, 13, 2], 'false,true': [0.968, 21, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.363, 18, 8]}]
{'': [0.2267992631902132, 0.20659722222222243], 'true': [0.03598567560485849, 0.010151216305062298], 'false': [0.22222222222222174, 0.1875000000000001], 'false,true': [-1.4802973661668753e-16, 9.25185853854297e-18], 'true,false': [-1.6753066000331702e-16, 0.06632653061224494], 'true,false,false': [0.0399305555555556, 0.18750000000000003], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.01210151698965679, 0.11102889224690944], 'false': [0.07580263971840961, 0.18250030756736024], 'false,false': [0.06632653061224485, 0.19743194575179282], 'false,false,false': [0.002929407457854971, 0.18795260326172167], 'false,true': [nan, 0.07580263971840961], 'false,false,true': [nan, 0.06632653061224485]}
{'': [0.029653113974922932, 0.08947624637683102], 'false': [nan, 0.08947624637683103], 'false,false': [-5.224578939412501e-17, 0.07490096372014221], 'false,false,false': [0.05964272260959857, 0.12430941851953849], 'true': [0.029955346590721826, 0.015434881004107837], 'true,true': [0.029921523696311167, 0.0], 'true,false': [0.0056391023807300655, 0.005527044003214299], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.03182430112246126, 0.000270136351942389], 'false': [4.618768748009658e-05, 0.00044274974850035364], 'false,false': [nan, 0.00044274974850035364], 'false,false,false': [nan, 0.00044274974850035364], 'false,true': [nan, 4.618768748009658e-05], 'false,true,false': [5.138307073954227e-05, 3.7990416344694696e-08]}
{'': [0.037780720054833614, 0.06216249175733796], 'false': [3.918434204559376e-17, 0.05959706024557893], 'false,false': [0.06160441114225055, 0.0], 'false,false,true': [0.029021714039093816, 0.02234095889679103], 'true': [0.03891721558328815, 0.004598533245707026], 'false,true': [3.918434204559376e-17, nan]}
{'': [0.04621329926712189, 0.07933619026147179], 'false': [0.0004273114545734459, 0.08298195053410687], 'false,false': [0.0975502123528881, 0.0004196381850808395], 'true': [nan, 0.046213299267122414], 'true,false': [nan, 0.04621329926712189], 'false,false,false': [0.00028564597595480656, 0.0005165588755738938]}
{'': [0.048926505743995236, 0.019760517936579607], 'true': [0.027717074176122028, 0.019205017452505108], 'false': [nan, 0.019760517936579607], 'false,false': [nan, 0.019760517936579607], 'false,false,false': [nan, 0.019760517936579607]}
{'': [0.023238100544789808, 0.03482583467630734], 'false': [nan, 0.034825834676307524], 'false,false': [0.023903102536818394, 0.056599281186068176], 'false,false,false': [0.03160263038361806, 0.11031731770401842], 'true': [0.023773740408728063, 0.0001599363661852482], 'true,false': [0.0001599363661852482, nan]}
{'': [0.016396015732992656, 0.03255089266767663], 'false': [0.02093086035153417, 0.07487630827650153], 'false,false': [0.021540661164044426, 0.0005378897081445011], 'false,true': [0.052491441739825236, 1.0697664429415972e-05], 'false,true,true': [0.052491441739825236, nan], 'false,false,false': [nan, 0.0005378897081445011]}
{'': [0.026264621842707492, 0.047169118294716414], 'false': [0.0283793789382104, 0.06989051017337705], 'false,false': [0.0, 0.07145589098965036], 'false,false,false': [nan, 0.07145589098965036], 'true': [0.03702539576268794, 0.0012727884843471273], 'true,true': [0.04042646757168891, 1.4121258895876614e-05], 'true,false': [3.412792818913282e-06, 0.008985884910084051], 'true,false,false': [0.0, 0.015301640170058218]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.72175908088684
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else return 0.7748156017661786;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else return -0.1312690543184777;  // std dev = 0.102, 189.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7070310064206291;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.769508635914042;  // std dev = 0.155, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7359812264346159;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12661018153114073;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18179828901318912;  // std dev = 1.906, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.12068750864209947;  // std dev = 2.360, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5465235048136294;  // std dev = 0.119, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.5635730028650647;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6910801145670815;  // std dev = 0.140, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5574133069145056;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4473256308875052;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5718010450134161;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11325864617326455;  // std dev = 1.52e-07, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09859372825676425;  // std dev = 1.965, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.19393392069085422;  // std dev = 2.186, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.40391310239313244;  // std dev = 1.404, 93.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | | | else return 0.08664840231848014;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.4657917597266198;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3244090588314851;  // std dev = 1.051, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6561538263175954;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7357680110811315;  // std dev = 0.167, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10237242351621287;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.10237242351621277;  // std dev = 2.47e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.18193422856608757;  // std dev = 0.206, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.33110926035047256;  // std dev = 0.103, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.22918356352209537;  // std dev = 1.678, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.018562729781593717;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07770577756897773;  // std dev = 1.139, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.32487073723567067;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35721059749778084;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06304705726768359;  // std dev = 1.598, 212.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=15 */
%   | | | else return 0.04930068103296887;  // std dev = 2.396, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | | else return -0.09334071693342622;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2427552799503749;  // std dev = 0.144, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.27874607191433615;  // std dev = 0.022, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.26806898528667145;  // std dev = 0.985, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08814021276712924;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else return -0.03256122249418611;  // std dev = 0.139, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2967178619549648;  // std dev = 0.062, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.21079863805531515;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4963708539885117;  // std dev = 0.360, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.13537355919392768;  // std dev = 0.038, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(C, E), follows(E, D) )
%   | | | then return 0.20231494914418116;  // std dev = 0.987, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.07449924849171723;  // std dev = 1.200, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.34258772261638554;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(C, F) )
%   | | then return -0.398866390750392;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3078410448552631;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.04202248452525109;  // std dev = 0.115, 184.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2561123827798611;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09768032040971547;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.012497525595449166;  // std dev = 0.218, 81.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1727852398436588;  // std dev = 0.874, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return -0.0393479625465674;  // std dev = 1.244, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.2007456862869568;  // std dev = 0.028, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.309854820076115;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.07058000183817188;  // std dev = 0.053, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | else return 0.007377944973870964;  // std dev = 0.158, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2181006437615809;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 9.04151049542347E-4;  // std dev = 1.193, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.08921601440836104;  // std dev = 1.386, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.12622369473381545;  // std dev = 1.302, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return -0.22250940703498817;  // std dev = 1.060, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.20481982117817077;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2375239063188743;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.2751420906366187;  // std dev = 0.164, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17332508741994448;  // std dev = 0.691, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.0749134820908885;  // std dev = 0.003, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.39278208563991684;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14845291356235887;  // std dev = 0.027, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17239267788250098;  // std dev = 0.046, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.14503282872981116;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0665663693197651;  // std dev = 0.037, 196.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23092359611069843;  // std dev = 0.196, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1101203429226198;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.004977070849609355;  // std dev = 0.181, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17746317261994526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.02269758618743878;  // std dev = 0.575, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.004537809317444826;  // std dev = 1.032, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning 15.711437940597534
Refined model CLL: -0.104979


******************************************
Best model found
******************************************
Results 

CLL : -0.103913 

AUC ROC : 0.995017 

AUC PR : 0.381295 

Precision : 0.336245 

Recall : 0.987179 

F1 : 0.501629 

Total Learning Time : 15.72175908088684 

Total Inference Time : 14.9272780418396 

Total revision time: 40.88509917259216
Best scored revision CLL: -0.104979


Results 

CLL : -0.103913 

AUC ROC : 0.995017 

AUC PR : 0.381295 

Precision : 0.336245 

Recall : 0.987179 

F1 : 0.501629 

Total Learning Time : 42.457175493240356 

Total Inference Time : 14.9272780418396 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.780360698699951
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10736830627979806;  // std dev = 1.390, 58.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.2291166770349954;  // std dev = 0.483, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7080532112088556;  // std dev = 1.409, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04068010373364577;  // std dev = 0.258, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05496021156432184;  // std dev = 1.788, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7465824332784066;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13579267060061936;  // std dev = 4.922, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5819383788175388;  // std dev = 0.360, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.46508992306882724;  // std dev = 0.906, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5852841074604818;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5930618040150668;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5694651743487731;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0184346771651918;  // std dev = 4.624, 264.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=34 */
%   | | | else return 0.06083370839324484;  // std dev = 4.067, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5260680748695584;  // std dev = 2.929, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12020965056816135;  // std dev = 0.091, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | | else return -0.12822196984058118;  // std dev = 0.006, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17321593746321803;  // std dev = 0.298, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.301711179032106;  // std dev = 1.313, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4773421591175234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.305393875150292;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4455504443704572;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6315094299594844;  // std dev = 0.317, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10394310206091227;  // std dev = 1.816, 258.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=5 */
%   | | else return -0.0068363199849107055;  // std dev = 0.297, 81.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0317202610051453;  // std dev = 3.173, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2554649726413915;  // std dev = 0.144, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.41999286741393155;  // std dev = 2.657, 57.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1256972106820814;  // std dev = 0.226, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.12479395331952359;  // std dev = 0.231, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2651757356531963;  // std dev = 2.229, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09434715861135991;  // std dev = 2.003, 243.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01995498081516924;  // std dev = 2.487, 94.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1813017217823635;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.24302385982505065;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.053825482286595214;  // std dev = 0.162, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007897639351373435;  // std dev = 2.344, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0.09480804225764906;  // std dev = 2.384, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16046782719066924;  // std dev = 0.152, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29099994962492554;  // std dev = 0.924, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09024702273524599;  // std dev = 0.093, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40635484879942974;  // std dev = 0.813, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1247743413894792;  // std dev = 0.353, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15124972970747885;  // std dev = 1.920, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.11267918868246016;  // std dev = 1.082, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08176091596140089;  // std dev = 0.027, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08911528623616462;  // std dev = 0.031, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.0026197899728723005;  // std dev = 1.008, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.028229122584634992;  // std dev = 1.367, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.15522358438536552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038431504104401645;  // std dev = 1.934, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
Inference time using transfer learning 8.848995685577393
Parameter learned model CLL:-0.112273 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 155, 0], 'true,false,false,true': [1.39, 56, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.483, 39, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.409, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.788, 46, 4], 'false,false,false,true': [0.133, 0, 8], 'false,false,false,false': [4.922, 89, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.36, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.906, 1, 3], 'true,false,false': [0.179, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.129, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.624, 230, 34], 'false,false,false,false': [4.067, 76, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.929, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.091, 188, 0], 'false,true,false,false': [0.006, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.298, 90, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.313, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.01, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.317, 0, 39], 'false,false,true,false': [1.816, 253, 5], 'false,false,false': [0.297, 68, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.173, 154, 82], 'false,true': [0.144, 0, 22], 'false,false,true': [2.657, 5, 52], 'false,false,false,true': [0.226, 84, 0], 'false,false,false,false': [0.231, 79, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.229, 4, 121], 'true,false': [2.003, 236, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.487, 66, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.013, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 169, 19], 'false,false,false,true': [2.344, 102, 28], 'false,false,false,false': [2.384, 38, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.152, 2, 78], 'false,true,true,true': [0.924, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.093, 211, 0], 'false,false,true': [0.813, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.353, 104, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.92, 3, 85], 'true,true,false': [1.082, 1, 19], 'true,false,true': [0.027, 172, 0], 'true,false,false,true': [0.031, 29, 0], 'true,false,false,false': [1.008, 18, 4], 'false,true': [1.367, 46, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.934, 39, 21]}]
{'': [0.2208506841165995, 0.23140495867768657], 'false': [0.22959183673469508, 0.23335067637877316], 'false,true': [0.03698224852071082, 4.794144879063176e-17], 'true': [0.04376735964986345, 0.017931235795750608], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-1.3179421711679277e-16, 0.0585937499999999], 'true,false,false': [0.03329369797859685, 0.22222222222222224]}
{'': [0.022816143098838056, 0.12489986670333827], 'false': [0.06676319340582751, 0.17182560316035506], 'false,false': [0.06391774763150603, 0.19750060925884075], 'false,false,false': [0.002204697069706718, 0.18782721669805091], 'false,true': [nan, 0.06676319340582751], 'false,false,true': [nan, 0.06391774763150603]}
{'': [0.013104466040119712, 0.1169714966044456], 'false': [nan, 0.11697149660444461], 'false,false': [0.0009090627454830168, 0.1057289126525045], 'false,false,false': [0.08100010395861562, 0.1671026010853904], 'true': [0.0019292022885234543, 0.07435620650299708], 'true,false': [0.20539072973763617, 0.0040233975651524645], 'true,true': [0.0019292022885234543, nan], 'false,false,true': [0.002784004658041036, 1.7763568394002506e-16]}
{'': [0.053272329487656644, 0.0008697861221168311], 'false': [4.583500068636057e-05, 0.0009855769733870712], 'false,false': [nan, 0.0009855769733870712], 'false,false,false': [nan, 0.0009855769733870712], 'false,true': [nan, 4.583500068636861e-05], 'false,true,false': [4.4128815039591625e-05, 9.43844707901993e-07]}
{'': [0.021924966770699883, 0.07743688713296377], 'false': [0.000895331632542544, 0.076322519645898], 'false,false': [0.07313850472429108, 0.0879970184758971], 'false,false,true': [0.0025707779610505154, 0.012779703587360032], 'true': [0.021816919981073362, 0.0], 'false,true': [4.676123904601148e-06, 0.0]}
{'': [0.04266886565964958, 0.0863032605517057], 'false': [0.0009413213826861808, 0.08962686770410236], 'false,false': [0.12382012647658466, 0.0006419694213137844], 'true': [nan, 0.0426688656596496], 'true,false': [nan, 0.04266886565964958], 'false,false,false': [0.0006097811341730507, 0.0006757744914835939]}
{'': [0.05339523574805366, 0.06581444495250682], 'false': [nan, 0.06581444495250685], 'false,false': [nan, 0.06581444495250682], 'false,false,false': [nan, 0.06581444495250682], 'true': [0.039747088452597154, 0.01651075466654867]}
{'': [0.011622283188498884, 0.045096775941594336], 'false': [nan, 0.04509677594159442], 'false,false': [0.026174269299892736, 0.06053011995960094], 'false,false,false': [0.042272906829759475, 0.09166918884573806], 'true': [0.011808546158932306, 7.821197374726502e-05], 'true,false': [7.821197374726502e-05, nan]}
{'': [0.022966151283164038, 0.03753984924477997], 'false': [0.0222611982253016, 0.062054667186102815], 'false,false': [0.016538662926835035, 0.0012002069285679646], 'false,true': [0.022472710325870848, 4.1292145308136546e-05], 'false,true,true': [0.022472710325870848, nan], 'false,false,false': [nan, 0.0012002069285679646]}
{'': [0.028757488658558514, 0.04764029606764303], 'false': [0.02632575097788674, 0.07166094045075727], 'false,false': [0.2222222222222222, 0.062347052871804094], 'false,false,false': [nan, 0.06234705287180402], 'true': [0.04520430181699885, 0.005214713160179154], 'true,true': [0.041887343306025095, 0.058586730155313925], 'true,false': [4.3909807842097725e-06, 0.02198618933732823], 'true,false,false': [3.3067606813443014e-05, 0.04613921090178079]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 49.485174894332886
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 0.165, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.1241519498562406;  // std dev = 0.132, 226.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7285679320379301;  // std dev = 0.206, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6250972625672137;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.1273992849272786;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.09582533872377862;  // std dev = 0.161, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.054418896890903484;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.07056618176097888;  // std dev = 1.165, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.6314311054334261;  // std dev = 0.805, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12775715428132012;  // std dev = 4.713, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.4988145541853941;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return 0.5600390439813122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.4450917301338719;  // std dev = 0.768, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6251298771852514;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5699294834799596;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5355557757628349;  // std dev = 1.240, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.11717380453575708;  // std dev = 0.083, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09881830252842473;  // std dev = 3.146, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return 0.15203826554083996;  // std dev = 3.371, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.4396413757998471;  // std dev = 0.114, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.38413244661337603;  // std dev = 1.308, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return 0.662158044787722;  // std dev = 0.299, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.43030881180297514;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0877079224338105;  // std dev = 0.905, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7015323918443206;  // std dev = 0.319, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.10580476943262906;  // std dev = 0.082, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else return -0.10588207012870807;  // std dev = 0.005, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.1670176091486251;  // std dev = 0.226, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.28602289032736006;  // std dev = 1.581, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.3672643322172636;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.25975186201583805;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1045494686087892;  // std dev = 0.532, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.05116967411548057;  // std dev = 0.859, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3311491265697843;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.06502131061257574;  // std dev = 0.134, 246.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04387445401739764;  // std dev = 3.025, 102.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=29 */
%   | | | else return 0.1515764747642318;  // std dev = 2.030, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2749294305843725;  // std dev = 0.009, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3542703264327738;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08789989650641289;  // std dev = 5.37e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.07097248510761753;  // std dev = 0.110, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.33826133286706944;  // std dev = 0.366, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25728123842715617;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.20512964338366846;  // std dev = 1.070, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4826885785972422;  // std dev = 0.753, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.13071140843252277;  // std dev = 0.032, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.20589991892299978;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.2983550707881986;  // std dev = 0.320, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.08116323314289921;  // std dev = 0.069, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return -0.030621340717575923;  // std dev = 1.504, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | | else return 0.04227010330868301;  // std dev = 1.189, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3417079431277637;  // std dev = 0.550, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12834136520008632;  // std dev = 0.110, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.042439511170645115;  // std dev = 0.867, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.09562298011768243;  // std dev = 1.389, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17227065223494117;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.3765210748463463;  // std dev = 0.164, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07541384609298041;  // std dev = 0.076, 119.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2869564521944915;  // std dev = 1.152, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08328625058492131;  // std dev = 0.046, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2593059801689747;  // std dev = 0.400, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.11179967825991347;  // std dev = 0.024, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.16894440973765945;  // std dev = 0.341, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.02774275366924861;  // std dev = 1.829, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.1466308310579379;  // std dev = 0.126, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | else return 0.23122312119081176;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0.0505806652808517;  // std dev = 0.929, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.1463562261779042;  // std dev = 0.104, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.1388960456056273;  // std dev = 1.448, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.25664905260961046;  // std dev = 0.333, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07321053454435464;  // std dev = 0.005, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3094207240853768;  // std dev = 0.090, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12388236590941039;  // std dev = 0.040, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14019897488145514;  // std dev = 0.147, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.060233919422675614;  // std dev = 0.061, 211.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.09532342969459698;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.23538167477972602;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.5154055070385701;  // std dev = 0.743, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2069133267699096;  // std dev = 0.229, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.09424425158302784;  // std dev = 0.101, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09079650144438504;  // std dev = 0.620, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.01613994613452128;  // std dev = 1.233, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
Inference time using transfer learning 17.225186347961426
Refined model CLL: -0.10051


******************************************
Best model found
******************************************
Results 

CLL : -0.098544 

AUC ROC : 0.993805 

AUC PR : 0.390256 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 49.485174894332886 

Total Inference Time : 19.708078145980835 

Total revision time: 81.80732560157776
Best scored revision CLL: -0.10051


Results 

CLL : -0.098544 

AUC ROC : 0.993805 

AUC PR : 0.390256 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 83.37940192222595 

Total Inference Time : 19.708078145980835 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.613983631134033
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10481402786345073;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7158934142238734;  // std dev = 0.998, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04059025174488323;  // std dev = 0.255, 221.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08194554334845734;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.747906431966103;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10150698248377296;  // std dev = 3.252, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5656951983906421;  // std dev = 1.083, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7349384116574754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7766587373026008;  // std dev = 0.145, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5869481484606751;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5654573633198571;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45434625220874597;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.043206737023833486;  // std dev = 3.681, 218.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=21 */
%   | | | else return 0.021538304603789932;  // std dev = 2.847, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4910767066687348;  // std dev = 2.617, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11700791872346368;  // std dev = 0.084, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.12335739885652533;  // std dev = 0.000460, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15653788265752777;  // std dev = 0.176, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2817747230855762;  // std dev = 1.937, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.38865024822418215;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32292499293808996;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5975597307752261;  // std dev = 1.011, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08153278893230219;  // std dev = 2.320, 241.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=9 */
%   | | else return -0.11489306909148499;  // std dev = 0.049, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03281833705718911;  // std dev = 3.327, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26257159786089473;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46067577840601076;  // std dev = 1.529, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1087080994437214;  // std dev = 0.082, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.1107988564425691;  // std dev = 0.151, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2573767430704366;  // std dev = 2.327, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.0794945403149192;  // std dev = 2.194, 258.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.025123117459691046;  // std dev = 1.059, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19137399707239144;  // std dev = 0.998, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.193379920911043;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.041670834324976085;  // std dev = 0.169, 185.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01786443724014528;  // std dev = 1.497, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
%   | | | else return 0.09609385012314989;  // std dev = 1.693, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16712484557353988;  // std dev = 0.171, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27052453118836883;  // std dev = 1.052, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0906262070103013;  // std dev = 0.091, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4687434988117434;  // std dev = 0.590, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10942399919861322;  // std dev = 0.172, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18487529542719716;  // std dev = 1.292, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1530925515590801;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0839857573737021;  // std dev = 0.026, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07541910564618783;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.035030405329025696;  // std dev = 0.506, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03270216358683062;  // std dev = 1.015, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22261987396021798;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08360959782492937;  // std dev = 1.389, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
Inference time using transfer learning 10.099052906036377
Parameter learned model CLL:-0.111027 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 188, 0], 'true,false,false,true': [0.981, 26, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [3.33e-08, 34, 0], 'false,false': [0.471, 18, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.998, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 199, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.976, 20, 1], 'false,false,false,true': [0.098, 0, 4], 'false,false,false,false': [3.252, 46, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.083, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.145, 0, 2], 'true,false,false': [0.134, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.681, 197, 21], 'false,false,false,false': [2.847, 50, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.617, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.084, 160, 0], 'false,true,false,false': [0.00046, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.176, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.937, 4, 73], 'true,false': [0.129, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.011, 1, 23], 'false,false,true,false': [2.32, 232, 9], 'false,false,false': [0.049, 24, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.327, 185, 91], 'false,true': [0.041, 0, 13], 'false,false,true': [1.529, 2, 22], 'false,false,false,true': [0.082, 27, 0], 'false,false,false,false': [0.151, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.327, 5, 107], 'true,false': [2.194, 247, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.059, 21, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 80], 'true,false,true': [0.005, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.169, 163, 22], 'false,false,false,true': [1.497, 63, 13], 'false,false,false,false': [1.693, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.171, 2, 77], 'false,true,true,true': [1.052, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.091, 210, 0], 'false,false,true': [0.59, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.172, 47, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.292, 1, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.026, 190, 0], 'true,false,false,true': [5.27e-09, 14, 0], 'true,false,false,false': [0.506, 11, 2], 'false,true': [1.015, 23, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.389, 12, 8]}]
{'': [0.21905006858710765, 0.2049164946519049], 'true': [0.03598567560485849, 0.009131644333071254], 'false': [0.19281663516067998, 0.2222222222222223], 'false,true': [-1.4802973661668753e-16, 3.2653618371328135e-17], 'true,false': [-2.1732025162875404e-16, 0.06420927467300835], 'true,false,false': [0.03566529492455423, 0.25], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012006394071429163, 0.09487382983498298], 'false': [0.06512968746930056, 0.1579089380551552], 'false,false': [0.04535147392290251, 0.1814225752115142], 'false,false,false': [0.002425309837189915, 0.16784227209636896], 'false,true': [nan, 0.06512968746930056], 'false,false,true': [nan, 0.04535147392290251]}
{'': [0.016986433207075144, 0.09329188199139637], 'false': [nan, 0.09329188199139646], 'false,false': [0.052469135802469244, 0.07832135658612213], 'false,false,false': [0.06213946387577409, 0.13287631990625273], 'false,false,true': [9.868649107779169e-17, 0.0987654320987655], 'true': [0.016674783061531598, 0.014498373152209107], 'true,true': [0.016511816032699765, 0.0], 'true,false': [0.010555745241017989, 0.004472984601554653]}
{'': [0.05267550049937925, 0.0003814752201993514], 'false': [4.1569161806964625e-05, 0.0006891581869541469], 'false,false': [nan, 0.0006891581869541469], 'false,false,false': [nan, 0.0006891581869541469], 'false,true': [nan, 4.1569161806962395e-05], 'false,true,false': [4.379921548127164e-05, 5.431326169440645e-09]}
{'': [0.047076921956623115, 0.0611334452266582], 'false': [0.00014727303079802433, 0.05788288016123771], 'false,false': [0.06215770541175122, 0.0024300169714383396], 'false,false,true': [0.04262720690375906, 0.022336615065618425], 'true': [0.04874303392577297, 0.004145956719980387], 'false,true': [0.00014727303079802433, nan]}
{'': [0.04009612921094941, 0.08300589124821442], 'false': [0.00012664664578797814, 0.08852275142148316], 'false,false': [0.09742207665964257, 0.00043351986456880527], 'true': [nan, 0.040096129210949405], 'true,false': [nan, 0.04009612921094941], 'false,false,false': [0.00024613879098256614, 0.0005551815076604348]}
{'': [0.0515986946263987, 0.03869347911497803], 'true': [0.04834872790390311, 0.018658145607566245], 'false': [nan, 0.03869347911497803], 'false,false': [nan, 0.03869347911497803], 'false,false,false': [nan, 0.03869347911497803]}
{'': [0.012011751205514449, 0.037573926682229586], 'false': [nan, 0.03757392668222959], 'false,false': [0.02845526609875442, 0.05210118455061802], 'false,false,false': [0.029471382367970575, 0.10621762159583831], 'true': [0.012307949142676492, 1.1807977365496658e-05], 'true,false': [1.1807977365496658e-05, nan]}
{'': [0.029163096830744025, 0.03178614354348897], 'false': [0.01989604400995638, 0.07111352502461031], 'false,false': [0.020505565960453817, 0.0006260291845548615], 'false,true': [0.033536917197569224, 3.978177004895434e-05], 'false,true,true': [0.033536917197569224, nan], 'false,false,false': [nan, 0.0006260291845548615]}
{'': [0.021219474404035876, 0.05395378506095907], 'false': [0.02942766021560954, 0.09276231454377591], 'false,false': [0.0, 0.09648024661043092], 'false,false,false': [nan, 0.09648024661043092], 'true': [0.0161194555547086, 0.0013176684038978923], 'true,true': [0.0175586546604755, 5.182835013621699e-06], 'true,false': [3.6852564759720943e-06, 0.009877124208073287], 'true,false,false': [1.982541115402065e-18, 0.019668195364852113]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.89344072341919
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 1.05e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.6872153476948253;  // std dev = 0.177, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else return 0.5631660001050113;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7194734122109548;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1254446385283913;  // std dev = 5.16e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.031564855112908484;  // std dev = 0.266, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09618420052504666;  // std dev = 0.160, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5394880778239605;  // std dev = 0.921, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.0826268530502988;  // std dev = 3.182, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5667983768095929;  // std dev = 0.172, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7257998392685386;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5130491160450148;  // std dev = 0.380, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10323218985389064;  // std dev = 1.199, 158.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=3 */
%   | | | else return -0.013596794229480826;  // std dev = 2.305, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0812818648325828;  // std dev = 2.040, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.14209967632257975;  // std dev = 2.281, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.4235047388062409;  // std dev = 0.055, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.5337916689001154;  // std dev = 0.200, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.425130522653304;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1977046668255184;  // std dev = 1.080, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5642137338745399;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5730055290010786;  // std dev = 0.381, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6596221628843494;  // std dev = 0.922, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.11401821821120234;  // std dev = 0.020, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2852804841035484;  // std dev = 1.387, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.15026137438385273;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(D, G), recursion_accounttype(D, B) )
%   | | | then return 0.32575627314766464;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.44197368145321403;  // std dev = 0.183, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.43259717168563344;  // std dev = 0.251, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31490744299561496;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05637021034028469;  // std dev = 2.151, 193.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=15 */
%   | | | else return 0.01982389443583699;  // std dev = 2.591, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
%   | | else return -0.09489450771349447;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.26760377152951587;  // std dev = 0.022, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return -0.1892301237502928;  // std dev = 1.070, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.08011059292837126;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.051831722352760866;  // std dev = 1.762, 168.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=12 */
%   | | | else return -0.05048061285480611;  // std dev = 1.196, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2587586359764354;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.33858003924366925;  // std dev = 0.232, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.557246641180473;  // std dev = 0.242, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1277364446559372;  // std dev = 0.038, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20273902847297107;  // std dev = 0.111, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return -0.09719625797806897;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.26268700245086657;  // std dev = 0.128, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.46979624253502233;  // std dev = 0.328, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.0866722872348986;  // std dev = 0.006, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3349354064826859;  // std dev = 0.284, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11921624472976791;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0387376849616823;  // std dev = 1.113, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0021166940588350476;  // std dev = 1.407, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16492911422940387;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.11916886814404748;  // std dev = 0.946, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.11610781215088334;  // std dev = 0.230, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return -0.09338267791147341;  // std dev = 0.859, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.07751059366371056;  // std dev = 0.103, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   | | else return -0.004187395136723044;  // std dev = 0.194, 92.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20476292985032246;  // std dev = 0.197, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.014441175042312494;  // std dev = 1.145, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.03439115713743726;  // std dev = 1.416, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.11416326570525757;  // std dev = 1.382, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.15899170826782102;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.038914114795502365;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.19293045995181693;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.22004881111670746;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18902513847428754;  // std dev = 0.283, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | else return -0.07605913176780407;  // std dev = 0.007, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37736515198876136;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1395076663521845;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.0890104397379023;  // std dev = 2.089, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.2725023703193398;  // std dev = 0.495, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.06241040747667233;  // std dev = 0.226, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06844325753869503;  // std dev = 0.033, 207.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.009581204509017225;  // std dev = 0.134, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.015245148384364327;  // std dev = 0.186, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.281897685530588;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.015571187264179004;  // std dev = 0.492, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.0034762457590208516;  // std dev = 1.083, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning 15.65855073928833
Refined model CLL: -0.105405


******************************************
Best model found
******************************************
Results 

CLL : -0.103537 

AUC ROC : 0.994391 

AUC PR : 0.346235 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 9.89344072341919 

Total Inference Time : 13.916295528411865 

Total revision time: 34.46403098106384
Best scored revision CLL: -0.105405


Results 

CLL : -0.103537 

AUC ROC : 0.994391 

AUC PR : 0.346235 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 34.47559642791748 

Total Inference Time : 13.916295528411865 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.7933719158172607
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.09929787341112603;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0.1456489350995117;  // std dev = 0.453, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240225075698182;  // std dev = 0.156, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.034024818154778806;  // std dev = 0.263, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0652202582176327;  // std dev = 1.792, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6598380739474182;  // std dev = 0.879, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13013280928678647;  // std dev = 4.994, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5545050978661877;  // std dev = 1.071, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7137894955294066;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6259020647937664;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5817875831905502;  // std dev = 0.138, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5565945248005055;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01517756518540136;  // std dev = 4.646, 257.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=34 */
%   | | | else return 0.07004240001062895;  // std dev = 4.078, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5554371746248905;  // std dev = 2.046, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12297264822395554;  // std dev = 0.175, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | | else return -0.12971743942240466;  // std dev = 0.004, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16167723236078566;  // std dev = 0.251, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27575075078083955;  // std dev = 1.816, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.40498623854234905;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29091327182591276;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.43715178222762063;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6331569768682559;  // std dev = 0.327, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10295256807905584;  // std dev = 1.803, 268.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=5 */
%   | | else return 0.03618685548124136;  // std dev = 0.319, 64.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04218223384214548;  // std dev = 2.963, 218.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1981032048044139;  // std dev = 0.992, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48850828484557557;  // std dev = 1.791, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12791459921934167;  // std dev = 0.198, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.12450767606079045;  // std dev = 0.185, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2813344957893325;  // std dev = 1.456, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.0910421061228019;  // std dev = 1.712, 266.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025662684175487543;  // std dev = 2.539, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18618033806720838;  // std dev = 0.086, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.22818998387712025;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04225788689535633;  // std dev = 0.159, 153.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.007601435462980217;  // std dev = 2.070, 111.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=28 */
%   | | | else return 0.04765488045449718;  // std dev = 2.517, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14852875544920371;  // std dev = 0.169, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27726857862438264;  // std dev = 0.849, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09304462305837302;  // std dev = 0.099, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3787097583492591;  // std dev = 1.169, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11624362816500179;  // std dev = 0.218, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16568134102099183;  // std dev = 1.240, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16097075569491823;  // std dev = 0.354, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0836824053136007;  // std dev = 0.024, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0936516791629758;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.02696423644478158;  // std dev = 0.975, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.018195097602171643;  // std dev = 1.810, 94.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19331638150228958;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014638108919132765;  // std dev = 2.006, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
Inference time using transfer learning 8.69530701637268
Parameter learned model CLL:-0.112061 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 161, 0], 'true,false,false,true': [1.384, 45, 2], 'true,false,false,false': [1.155, 4, 2], 'false,true,true,true': [1.351, 2, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.96e-08, 57, 0], 'false,false': [0.453, 57, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.156, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.792, 53, 4], 'false,false,false,true': [0.879, 1, 8], 'false,false,false,false': [4.994, 97, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.071, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [0.17, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.138, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.646, 223, 34], 'false,false,false,false': [4.078, 76, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.046, 0, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.175, 199, 0], 'false,true,false,false': [0.004, 48, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.251, 99, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.816, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.01, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.327, 0, 39], 'false,false,true,false': [1.803, 263, 5], 'false,false,false': [0.319, 51, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.963, 136, 82], 'false,true': [0.992, 1, 22], 'false,false,true': [1.791, 2, 52], 'false,false,false,true': [0.198, 83, 0], 'false,false,false,false': [0.185, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.456, 1, 121], 'true,false': [1.712, 259, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.539, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.086, 0, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 134, 19], 'false,false,false,true': [2.07, 83, 28], 'false,false,false,false': [2.517, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.169, 2, 78], 'false,true,true,true': [0.849, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.099, 217, 0], 'false,false,true': [1.169, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.218, 85, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.24, 1, 85], 'true,true,false': [0.354, 0, 19], 'true,false,true': [0.024, 176, 0], 'true,false,false,true': [0.035, 30, 0], 'true,false,false,false': [0.975, 25, 4], 'false,true': [1.81, 69, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.006, 53, 21]}]
{'': [0.22393647861165122, 0.2062809917355381], 'true': [0.009433106575965852, 0.018342213293737343], 'false': [0.20761245674740594, 0.20484375000000096], 'false,true': [0.09566326530612335, 6.232831015439475e-17], 'false,true,true': [0.07939508506616269, 0.15999999999999986], 'true,false': [-1.5170749404815803e-16, 0.06977572089711626], 'true,false,false': [0.04074241738343139, 0.22222222222222224]}
{'': [0.00028725117882427253, 0.12463500267328079], 'false': [0.06906003255113292, 0.16462982147960245], 'false,false': [0.05631210053744128, 0.19232096905006574], 'false,false,false': [0.08588486852296034, 0.18201662159366538], 'false,true': [nan, 0.06906003255113292], 'false,false,true': [nan, 0.05631210053744128]}
{'': [0.01683733261515156, 0.11901536207945362], 'false': [nan, 0.11901536207945318], 'false,false': [0.001036228883337209, 0.10880013567924803], 'false,false,false': [0.08399300120827873, 0.1679556237993308], 'true': [0.01686629593171715, 0.008829916002311028], 'true,true': [0.01686629593171715, nan], 'true,false': [0.017130417315646202, 0.003610627878543382], 'false,false,true': [0.0031734509552211834, -1.1842378929335003e-16]}
{'': [0.02683659466638889, 0.000561534013755216], 'false': [0.00013055325887148764, 0.0006386005435340997], 'false,false': [nan, 0.0006386005435340997], 'false,false,false': [nan, 0.0006386005435340997], 'false,true': [nan, 0.00013055325887148045], 'false,true,false': [0.00015313717805680492, 2.724766934835328e-07]}
{'': [0.04091382690120767, 0.07714190394626284], 'false': [0.0009746703302724102, 0.07664960921378702], 'false,false': [0.07103362498730045, 0.10186607866286594], 'false,false,true': [0.00274651891752971, 0.012135640360562246], 'true': [0.0412190545362758, 0.0], 'false,true': [5.037088475978724e-06, 0.0]}
{'': [0.04028117573509168, 0.08633341060625627], 'false': [0.042756753491405855, 0.0884471144064131], 'false,false': [0.059415887701770045, 0.00048107005009238456], 'true': [nan, 0.0402811757350916], 'true,false': [nan, 0.04028117573509168], 'false,false,false': [0.00047298180402074574, 0.0004842695352996798]}
{'': [0.042911576179221304, 0.07493091124437183], 'false': [nan, 0.07493091124437175], 'false,false': [nan, 0.07493091124437183], 'false,false,false': [nan, 0.07493091124437183], 'true': [0.017375573046103945, 0.011022936622661576]}
{'': [0.00012912240013487604, 0.04392186498536858], 'false': [nan, 0.04392186498536886], 'false,false': [0.02529844886598942, 0.05719081587877109], 'false,false,false': [0.038614633184216714, 0.08336954731267714], 'true': [8.884784763358347e-05, 7.723093706633183e-05], 'true,false': [7.723093706633183e-05, nan]}
{'': [0.02850433673053072, 0.03656230747620463], 'false': [0.020254318061582257, 0.0649920464002884], 'false,false': [0.033312451812402104, 0.0005574503766261105], 'false,true': [0.018960621374399533, 4.552693135281339e-05], 'false,true,true': [0.018960621374399533, nan], 'false,false,false': [nan, 0.0005574503766261105]}
{'': [0.0205316095649188, 0.04365730448342523], 'false': [0.03483843679208465, 0.05378581463241865], 'false,false': [0.0, 0.054399329374651834], 'false,false,false': [nan, 0.05439932937465176], 'true': [0.015830588907372333, 0.00442863501449365], 'true,true': [0.017868759585844506, 0.00658701043315362], 'true,false': [3.329877106607189e-06, 0.017239900613073362], 'true,false,false': [4.071898658205564e-05, 0.03277086169706827]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.862396240234375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 0.136, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J) )
%   | | | then return 0.10814893509951237;  // std dev = 3.240, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7262025659745676;  // std dev = 0.174, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7341192389139846;  // std dev = 0.169, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12712174595811168;  // std dev = 0.096, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7507219186171548;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1342042381122423;  // std dev = 3.864, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
%   | | | else return 0.3384504706789169;  // std dev = 2.523, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5610400293445573;  // std dev = 0.170, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.44498243168044627;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5000316941091217;  // std dev = 0.327, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5869289147710419;  // std dev = 0.156, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5583618687831963;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5103971789411281;  // std dev = 0.996, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11377960665191321;  // std dev = 0.087, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.13280742844632018;  // std dev = 2.623, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | | else return 0.09641680221789903;  // std dev = 4.099, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then return 0.421846665988323;  // std dev = 0.068, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else return 0.5494770566128797;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.42338263707266144;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.607828113051662;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6470654842100807;  // std dev = 0.097, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7925852957688745;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(K, A) )
%   | then return -0.10298850774276783;  // std dev = 0.006, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( tweets(A, L) )
%   | | then return -0.16326879352552276;  // std dev = 0.069, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.21039793147438782;  // std dev = 0.023, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3053034981985347;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.17852803032970507;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.36701702025966865;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.0046842956084325316;  // std dev = 0.639, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32464062009156663;  // std dev = 0.027, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.0891784051612399;  // std dev = 0.421, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   | | | else return -0.029244798061630346;  // std dev = 1.723, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.006851613300180415;  // std dev = 2.429, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | | | else return 0.05925402250563759;  // std dev = 3.146, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25838416259808344;  // std dev = 0.009, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.045614431989461315;  // std dev = 0.139, 167.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=18 */
%   | | else return -0.09432346679642224;  // std dev = 0.142, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.3023565220506595;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2535554062220315;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.11380982043572278;  // std dev = 1.273, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5246268632403575;  // std dev = 1.117, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14395725923407948;  // std dev = 0.174, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.13353021728646605;  // std dev = 0.438, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.21186190823909007;  // std dev = 0.017, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.28007566651087246;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.0594421467983395;  // std dev = 1.233, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.32891221145926003;  // std dev = 0.135, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.34872290497821284;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08291583657192485;  // std dev = 0.035, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.21133041005489606;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05972176048561146;  // std dev = 0.611, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   | | | else return 0.036297839963675575;  // std dev = 3.096, 125.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14751986845383747;  // std dev = 1.394, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return -0.03015828781954033;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.17383174813364827;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.32475223137779985;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.27829787353127844;  // std dev = 0.033, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07710027338429264;  // std dev = 0.071, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20843410070756024;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010547130178215555;  // std dev = 1.845, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.03075947120440156;  // std dev = 2.487, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), follows(E, A) )
%   | | | then return 0.15823232259588924;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.06931469217746036;  // std dev = 1.368, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.1355387473030741;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.1981427371746977;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.10794332721592034;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.18005035605438938;  // std dev = 0.808, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07148168723474443;  // std dev = 0.061, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.41968644609182304;  // std dev = 0.065, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.14770127491469873;  // std dev = 0.026, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.10867041228086265;  // std dev = 0.205, 90.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=86 */
%   | | else return 0.15019007781099894;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06691784951317313;  // std dev = 0.074, 233.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13013512724141973;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0019345931023779163;  // std dev = 1.191, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return -0.0047936795060390565;  // std dev = 0.747, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20846383352799858;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.01854165713571408;  // std dev = 1.678, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return -0.021219423732972677;  // std dev = 1.127, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning 10.717948198318481
Refined model CLL: -0.109872


******************************************
Best model found
******************************************
Results 

CLL : -0.105406 

AUC ROC : 0.993327 

AUC PR : 0.400339 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 9.862396240234375 

Total Inference Time : 11.366969585418701 

Total revision time: 34.31237459182739
Best scored revision CLL: -0.109872


Results 

CLL : -0.105406 

AUC ROC : 0.993327 

AUC PR : 0.400339 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 34.32394003868103 

Total Inference Time : 11.366969585418701 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.469878911972046
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.8470378239884007;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=89 */
%   | | | else return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0.35814893509951234;  // std dev = 0.500, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17119141265913287;  // std dev = 7.770, 359.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.11920353298965079;  // std dev = 7.480, 370.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=118 */
%   | | | else return 0.16180802953776902;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6668269561285132;  // std dev = 0.250, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1664764689950495;  // std dev = 0.327, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08296567930087716;  // std dev = 5.271, 272.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=97 */
%   | | else return 0.10143864575996865;  // std dev = 0.319, 76.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4628858723684443;  // std dev = 1.690, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15542720006712002;  // std dev = 0.309, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0282806837232162;  // std dev = 4.204, 298.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022603261869283502;  // std dev = 2.234, 93.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.028635246877315966;  // std dev = 4.473, 351.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=118 */
%   | | | else return 0.06026841901643711;  // std dev = 1.485, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.31383062818656327;  // std dev = 2.422, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | | else if ( tweets(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14270337648205914;  // std dev = 0.291, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then return 0.02627491122480494;  // std dev = 3.528, 324.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=118 */
%   | else if ( tweets(A, E), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, A), tweets(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05876385137545067;  // std dev = 1.495, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
Inference time using transfer learning 5.55983567237854
Parameter learned model CLL:-0.156615 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), tweets(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [0.994, 1, 89], 'false,true,true,false': [0.983, 1, 29], 'false,true,false': [0.0, 246, 0], 'false,false': [0.5, 8, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.77, 233, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.48, 252, 118], 'false,false,false,false': [2.225, 13, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'tweets(E, A), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, A)'}, {'true': [0.25, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.327, 235, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'tweets(E, F), recursion_accounttype(F, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.271, 175, 97], 'false,false,false': [0.319, 47, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.69, 3, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.309, 257, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.204, 201, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.234, 64, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.473, 233, 118], 'false,false,false,false': [1.485, 12, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.422, 6, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.291, 241, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A), tweets(F, F)'}, {'true': [0.0, 0, 0], 'false,true': [3.528, 206, 118], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.495, 22, 8]}]
{'': [nan, 0.22104657218826504], 'false': [0.218459792767777, 0.24999999999999997], 'false,true': [0.016388888888892457, -1.408087738548979e-16], 'false,true,true': [0.010987654320987871, 0.03222222222222335]}
{'': [nan, 0.16819003847687264], 'false': [nan, 0.16819003847687666], 'false,false': [nan, 0.16819003847687264], 'false,false,false': [nan, 0.16819003847687666]}
{'': [nan, 0.15587055901021293], 'false': [nan, 0.1558705590102114], 'false,false': [nan, 0.1558705590102114], 'false,false,false': [0.15123496452318752, 0.23582766439909322]}
{'': [0.0004951331557639004, 0.00045408814390776586], 'false': [nan, 0.00045408814390776586], 'false,false': [nan, 0.00045408814390776586], 'false,false,false': [nan, 0.00045408814390776586]}
{'': [nan, 0.1021300472017889], 'false': [nan, 0.10213004720178671], 'false,false': [0.10212926672028752, 0.10186611598324212], 'false,false,true': [nan, 0.10212926672028752]}
{'': [nan, 0.09271672752464614], 'false': [nan, 0.09271672752464614], 'false,false': [0.022145452213554594, 0.00037249714992313717], 'false,false,false': [nan, 0.00037249714992303005]}
{'': [0.05929672881013646, 0.053653924930909945], 'true': [nan, 0.05929672881013646], 'false': [nan, 0.053653924930909945], 'false,false': [nan, 0.053653924930909945], 'false,false,false': [nan, 0.053653924930909945]}
{'': [nan, 0.05992423531591267], 'false': [nan, 0.05992423531591267], 'false,false': [nan, 0.05992423531591267], 'false,false,false': [0.05699996460438301, 0.1102984725285034]}
{'': [nan, 0.06360618278077929], 'false': [nan, 0.06360618278077931], 'false,false': [0.04443006515615673, 0.0003509058390817142], 'false,false,false': [nan, 0.0003509058390817142]}
{'': [nan, 0.04204234294427349], 'false': [0.03841989451069378, 0.07454604158951948], 'false,false': [nan, 0.07454604158951948], 'false,false,false': [nan, 0.07454604158951948]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, D).;true;true
0;true;follows(E, D), recursion_accounttype(E, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true


Refining candidate
***************************
Model training time 21.216052293777466
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7672398441904207;  // std dev = 1.651, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7045742861487716;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.624569680751852;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.7327299667445831;  // std dev = 3.65e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.10695402499761492;  // std dev = 0.125, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   | | else if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.6855513149641299;  // std dev = 0.972, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.12544463852839113;  // std dev = 6.83e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.7329563477336118;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1282305704617008;  // std dev = 2.032, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.057321348283710855;  // std dev = 2.268, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5639655152299495;  // std dev = 0.066, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.49437863477380567;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.5765262173444864;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6158350661545582;  // std dev = 0.277, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11361526491466735;  // std dev = 0.012, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11144408145188153;  // std dev = 2.161, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.1447584834528583;  // std dev = 1.931, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.38321776357342224;  // std dev = 1.390, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.43604959574269;  // std dev = 0.032, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.2268286945364532;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.49653454142078723;  // std dev = 0.273, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4291406222150347;  // std dev = 0.035, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.6838188071462369;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.11157578757596827;  // std dev = 0.307, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33321246196044624;  // std dev = 0.105, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return -0.07736681325445222;  // std dev = 1.026, 113.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=3 */
%   | | | else return -0.09329960954438697;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.3297217207587241;  // std dev = 0.041, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0938294782823767;  // std dev = 0.714, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16826875958281975;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.021730089260617095;  // std dev = 1.763, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.13279845125058456;  // std dev = 1.393, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.23038292524961548;  // std dev = 1.206, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.29904363045283294;  // std dev = 0.434, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.17136290492722636;  // std dev = 1.337, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.2539194204258981;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13408238505710862;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5035788566826513;  // std dev = 0.120, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09527337000169915;  // std dev = 0.346, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.21494384716350667;  // std dev = 1.084, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | | | else return 0.3583346376437706;  // std dev = 0.126, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.011810308910181422;  // std dev = 0.785, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.08551601832274605;  // std dev = 0.273, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3737669841331222;  // std dev = 0.182, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.34731339660638855;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12549457984270285;  // std dev = 0.097, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.25595572773193215;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07852423876701307;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.1626383397591814;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.14917820454371675;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.0234194884733465;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.19184664445007868;  // std dev = 0.101, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2071371622634497;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.21956354775132284;  // std dev = 0.348, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0727145860447281;  // std dev = 0.015, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.028149342773032653;  // std dev = 1.241, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.018002574950471854;  // std dev = 1.041, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(D, F) )
%   | | | then return 0.15114381064001067;  // std dev = 0.788, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.17277873175584743;  // std dev = 0.334, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.06910287071334892;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.20266889126252624;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.301142865455388;  // std dev = 0.094, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07700060844269527;  // std dev = 0.319, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.14638376784539084;  // std dev = 0.081, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.09815754614728947;  // std dev = 0.214, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( tweets(A, E) )
%   | | then return 0.14356821259776437;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.00161895090950762;  // std dev = 0.344, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.04691575319512232;  // std dev = 0.104, 204.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23830695685888925;  // std dev = 0.133, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10751231425065264;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.03268616867164005;  // std dev = 0.507, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.03991901292501156;  // std dev = 0.799, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
Inference time using transfer learning 14.918625116348267
Refined model CLL: -0.096796


******************************************
Best model found
******************************************
Results 

CLL : -0.098883 

AUC ROC : 0.995438 

AUC PR : 0.466229 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 21.216052293777466 

Total Inference Time : 12.45282769203186 

Total revision time: 41.04357576370239
Best scored revision CLL: -0.096796


Results 

CLL : -0.098883 

AUC ROC : 0.995438 

AUC PR : 0.466229 

Precision : 0.347722 

Recall : 0.929487 

F1 : 0.506108 

Total Learning Time : 41.07948851585388 

Total Inference Time : 12.45282769203186 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.683481216430664
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.7908412427918189;  // std dev = 2.555, 104.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=97 */
%   | | | else return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.14185106490048827;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0.22656998773109;  // std dev = 0.482, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16240929718803365;  // std dev = 8.992, 463.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.13394890378255353;  // std dev = 7.794, 385.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=128 */
%   | | | else return 0.1675632509182132;  // std dev = 4.221, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.655916592581042;  // std dev = 2.261, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17279560943967753;  // std dev = 0.402, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08333214265244918;  // std dev = 6.032, 334.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=115 */
%   | | else return 0.06748619677483339;  // std dev = 0.333, 124.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48426557342087967;  // std dev = 2.238, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16129111314055275;  // std dev = 0.395, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02582431823525455;  // std dev = 4.901, 364.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02766851181641601;  // std dev = 2.988, 126.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.029725199364358634;  // std dev = 4.744, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   | | | else return 0.012506677026236479;  // std dev = 3.086, 95.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.36454405360231695;  // std dev = 1.874, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | | else if ( tweets(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14739559985329279;  // std dev = 0.374, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then return 0.009435590233864652;  // std dev = 3.953, 377.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=128 */
%   | else if ( tweets(A, E), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, A), tweets(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007640009429237606;  // std dev = 2.531, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
Inference time using transfer learning 4.866181135177612
Parameter learned model CLL:-0.153677 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), tweets(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [2.555, 7, 97], 'false,true,true,false': [2.06e-07, 0, 31], 'false,true,false': [0.0, 248, 0], 'false,false': [0.482, 48, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.992, 307, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.794, 257, 128], 'false,false,false,false': [4.221, 49, 28]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'tweets(E, A), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, A)'}, {'true': [2.261, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.402, 286, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'tweets(E, F), recursion_accounttype(F, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.032, 219, 115], 'false,false,false': [0.333, 83, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.238, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.395, 285, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.901, 249, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.988, 85, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.744, 255, 128], 'false,false,false,false': [3.086, 67, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.874, 3, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.374, 316, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A), tweets(F, F)'}, {'true': [0.0, 0, 0], 'false,true': [3.953, 249, 128], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.531, 64, 28]}]
{'': [nan, 0.2243581528471986], 'false': [0.2225115721015236, 0.23268698060941967], 'false,true': [0.04916323731138984, -1.360918546314708e-16], 'false,true,true': [0.06277736686390703, 1.375244004696968e-15]}
{'': [nan, 0.1746273392430919], 'false': [nan, 0.17462733924309373], 'false,false': [nan, 0.1746273392430919], 'false,false,false': [nan, 0.17462733924309373]}
{'': [nan, 0.17019787976649187], 'false': [nan, 0.17019787976649275], 'false,false': [nan, 0.17019787976649275], 'false,false,false': [0.15776814326202765, 0.23140495867768585]}
{'': [0.03174454791881333, 0.0005653388178634575], 'false': [nan, 0.0005653388178634575], 'false,false': [nan, 0.0005653388178634575], 'false,false,false': [nan, 0.0005653388178634575]}
{'': [nan, 0.1095179749470003], 'false': [nan, 0.10951797494700062], 'false,false': [0.1089538054844678, 0.11085448047396182], 'false,false,true': [nan, 0.1089538054844678]}
{'': [nan, 0.10771221521604687], 'false': [nan, 0.10771221521604687], 'false,false': [0.031106691560631543, 0.000548842473845577], 'false,false,false': [nan, 0.0005488424738456581]}
{'': [0.065976032757292, 0.07083695805806986], 'false': [nan, 0.07083695805806986], 'false,false': [nan, 0.07083695805806986], 'false,false,false': [nan, 0.07083695805806986], 'true': [nan, 0.065976032757292]}
{'': [nan, 0.06704813569410349], 'false': [nan, 0.06704813569410349], 'false,false': [nan, 0.06704813569410349], 'false,false,false': [0.05875767352600392, 0.1002342342782582]}
{'': [nan, 0.06604760101547241], 'false': [nan, 0.0660476010154725], 'false,false': [0.022079811180210705, 0.0004420635694575292], 'false,false,false': [nan, 0.0004420635694575292]}
{'': [nan, 0.04697627514661066], 'false': [0.04144320477509537, 0.06964724359364545], 'false,false': [nan, 0.06964724359364544], 'false,false,false': [nan, 0.06964724359364545]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, D).;true;true
0;true;follows(E, D), recursion_accounttype(E, B).;true;true
0;true,true;tweets(E, F), tweets(A, F).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true


Refining candidate
***************************
Model training time 22.302377223968506
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.752885777204776;  // std dev = 2.675, 76.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=68 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8268989350995116;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7184728706324356;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.3999713812921242;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.728927162640533;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7458722419989587;  // std dev = 0.133, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.1265103568335478;  // std dev = 0.091, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7221307657406086;  // std dev = 0.018, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1254446385283911;  // std dev = 3.65e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.21252258176734698;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.16392541507397906;  // std dev = 2.875, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.5814287602192619;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3851756382087639;  // std dev = 1.799, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else return 0.579943360901335;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5369042522388223;  // std dev = 0.158, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04457751133869176;  // std dev = 0.216, 222.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5646222275878544;  // std dev = 1.134, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.13328375797371875;  // std dev = 0.248, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.09322189713472198;  // std dev = 2.331, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0.12186961202972914;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(E, F) )
%   | | | then return 0.44792955914426796;  // std dev = 0.217, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.2538695423532576;  // std dev = 0.770, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.35646784177248075;  // std dev = 0.972, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.07901984210268359;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.5813113331777452;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.11481837089833052;  // std dev = 1.634, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.5082593960385785;  // std dev = 0.841, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.7491041186825611;  // std dev = 0.135, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.1168948457476622;  // std dev = 0.468, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.34553010969579523;  // std dev = 0.258, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.2747309462414843;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.42827840574212733;  // std dev = 0.143, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.39657681597520705;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4662797030383688;  // std dev = 0.114, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09812052868159717;  // std dev = 0.081, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0015729510575023947;  // std dev = 1.535, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.06169705603884996;  // std dev = 2.740, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.2788100301862482;  // std dev = 0.285, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.1605255211196069;  // std dev = 1.223, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return -0.3282672597282235;  // std dev = 0.714, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.17783199582308884;  // std dev = 1.201, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.33521992288932634;  // std dev = 0.168, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.34236538275223055;  // std dev = 0.266, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5238416748912854;  // std dev = 0.388, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(L, A) )
%   | then return -0.08927393808668413;  // std dev = 0.053, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.1267524680718388;  // std dev = 0.041, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(A, D), tweets(E, C) )
%   | | | then return 0.19190504249942003;  // std dev = 1.367, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.22283740267665286;  // std dev = 1.024, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.2731049971242573;  // std dev = 0.057, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.08498603259427977;  // std dev = 0.216, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.21119554441763816;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -0.10217057722359191;  // std dev = 0.477, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.037013921450296125;  // std dev = 0.493, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.027193981303876538;  // std dev = 1.344, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.055927340702083723;  // std dev = 1.559, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.1692502647401565;  // std dev = 0.129, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.19306312504435366;  // std dev = 0.022, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.0797519452644196;  // std dev = 0.088, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return -0.03128881045940926;  // std dev = 1.246, 73.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=12 */
%   | | | else return 0.023165162758735307;  // std dev = 0.815, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.19384935430114003;  // std dev = 1.457, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.0892824171240072;  // std dev = 0.141, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.12773275800157227;  // std dev = 0.280, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.022451088566571263;  // std dev = 1.828, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.07311074543156329;  // std dev = 1.929, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | | else return 0.12473005916615924;  // std dev = 0.988, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else return 0.15649208955970964;  // std dev = 0.058, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, I) )
%   | | | then return 0.24691680863666415;  // std dev = 0.103, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13840461336620397;  // std dev = 1.289, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27953128908214764;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.43627812479933;  // std dev = 0.170, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(L, A) )
%   | then return -0.0725753036936786;  // std dev = 0.080, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.10385174584710243;  // std dev = 0.043, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.15220178340629023;  // std dev = 0.018, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.13485206028949176;  // std dev = 0.044, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.13388152271027995;  // std dev = 0.944, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.20026961001304636;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.06742161990665041;  // std dev = 0.049, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.08932308540854239;  // std dev = 0.887, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.5784589675325394;  // std dev = 0.122, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.003049256522886463;  // std dev = 1.113, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.029539081936366535;  // std dev = 1.433, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
Inference time using transfer learning 12.63884449005127
Refined model CLL: -0.097001


******************************************
Best model found
******************************************
Results 

CLL : -0.095984 

AUC ROC : 0.994524 

AUC PR : 0.454985 

Precision : 0.348189 

Recall : 0.992063 

F1 : 0.515464 

Total Learning Time : 22.302377223968506 

Total Inference Time : 16.255440950393677 

Total revision time: 46.816558599472046
Best scored revision CLL: -0.097001


Results 

CLL : -0.095984 

AUC ROC : 0.994524 

AUC PR : 0.454985 

Precision : 0.348189 

Recall : 0.992063 

F1 : 0.515464 

Total Learning Time : 46.852471351623535 

Total Inference Time : 16.255440950393677 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.5248875617980957
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.8361709131214897;  // std dev = 1.399, 91.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=89 */
%   | | | else return 0.7936328060672537;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return 0.2391013160518933;  // std dev = 0.486, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13647965493059888;  // std dev = 8.067, 406.000 (wgt'ed) examples reached here.  /* #neg=280 #pos=126 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.15208711445016646;  // std dev = 7.367, 336.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=118 */
%   | | | else return 0.22708287771221833;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6344581446264035;  // std dev = 2.155, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16313308040026808;  // std dev = 0.210, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08267363087417211;  // std dev = 5.411, 277.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=97 */
%   | | else return 0.11224025290507213;  // std dev = 0.321, 76.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.45527021665050815;  // std dev = 2.309, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15487456445823403;  // std dev = 0.235, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03555399490115517;  // std dev = 4.368, 289.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=97 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009093850283693718;  // std dev = 2.360, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.04384657302847273;  // std dev = 4.521, 327.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=118 */
%   | | | else return 0.012148780265033576;  // std dev = 1.690, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3547267658195274;  // std dev = 1.452, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | | else if ( tweets(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14449049720680587;  // std dev = 0.215, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then return 0.008230345605882042;  // std dev = 3.735, 357.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=118 */
%   | else if ( tweets(A, E), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, A), tweets(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03458303352209666;  // std dev = 1.319, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning 5.6335132122039795
Parameter learned model CLL:-0.156312 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), tweets(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [1.399, 2, 89], 'false,true,true,false': [1.368, 2, 29], 'false,true,false': [0.0, 236, 0], 'false,false': [0.486, 13, 8]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.067, 280, 126]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.367, 218, 118], 'false,false,false,false': [2.152, 11, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'tweets(E, A), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, A)'}, {'true': [2.155, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.21, 260, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'tweets(E, F), recursion_accounttype(F, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.411, 180, 97], 'false,false,false': [0.321, 47, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.309, 6, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.235, 221, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.368, 192, 97], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.36, 75, 29]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.521, 209, 118], 'false,false,false,false': [1.69, 17, 8]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.452, 2, 126], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.215, 226, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A), tweets(F, F)'}, {'true': [0.0, 0, 0], 'false,true': [3.735, 239, 118], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.319, 14, 8]}]
{'': [nan, 0.2219282795302204], 'false': [0.22096688617708818, 0.23582766439909303], 'false,true': [0.03171190540177734, -1.8064645824409328e-16], 'false,true,true': [0.021494988527955797, 0.06035379812695213]}
{'': [nan, 0.16028400955302], 'false': [nan, 0.16028400955302466], 'false,false': [nan, 0.16028400955302], 'false,false,false': [nan, 0.16028400955302466]}
{'': [nan, 0.1662239649568683], 'false': [nan, 0.16622396495686592], 'false,false': [nan, 0.16622396495686592], 'false,false,false': [0.16153805092521178, 0.24376731301939056]}
{'': [0.03546695098520189, 0.0001698056624801116], 'false': [nan, 0.0001698056624801116], 'false,false': [nan, 0.0001698056624801116], 'false,false,false': [nan, 0.0001698056624801116]}
{'': [nan, 0.10526386472505708], 'false': [nan, 0.10526386472505485], 'false,false': [0.10569522148625367, 0.10300570753859385], 'false,false,true': [nan, 0.10569522148625367]}
{'': [nan, 0.1024138504331995], 'false': [nan, 0.1024138504331995], 'false,false': [0.04039120536207153, 0.0002507830181313999], 'false,false,false': [nan, 0.00025078301813141594]}
{'': [0.06601184415014354, 0.05355869248636479], 'true': [nan, 0.06601184415014354], 'false': [nan, 0.05355869248636479], 'false,false': [nan, 0.05355869248636479], 'false,false,false': [nan, 0.05355869248636479]}
{'': [nan, 0.06624968036765172], 'false': [nan, 0.06624968036765172], 'false,false': [nan, 0.06624968036765172], 'false,false,false': [0.06250691611120736, 0.11427164686578994]}
{'': [nan, 0.06361457151586096], 'false': [nan, 0.06361457151586118], 'false,false': [0.016466785039849274, 0.00020506439684372861], 'false,false,false': [nan, 0.00020506439684372861]}
{'': [nan, 0.041437752381477753], 'false': [0.039074080842250995, 0.07913954282956409], 'false,false': [nan, 0.07913954282956409], 'false,false,false': [nan, 0.07913954282956409]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, D).;true;true
0;true;follows(E, D), recursion_accounttype(E, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true


Refining candidate
***************************
Model training time 18.859328031539917
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.8444503049625265;  // std dev = 0.993, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.7039789695473824;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else return 0.7225934150469331;  // std dev = 0.052, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(E, F), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, E) )
%   | | | then return 0.7215407748803292;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.387977734583732;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7203922400640099;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6159724346647707;  // std dev = 1.351, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.12544463852839177;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11485150687139777;  // std dev = 2.158, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.2500744951335403;  // std dev = 1.781, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.5325364056209393;  // std dev = 1.394, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return 0.373534382026232;  // std dev = 1.975, 23.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | | else return 0.6576625810345769;  // std dev = 0.056, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.11639866496974341;  // std dev = 0.137, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.554704601166242;  // std dev = 0.000842, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5702920955938584;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11231637819360618;  // std dev = 3.33e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16636538065386644;  // std dev = 1.223, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.16057471619816482;  // std dev = 1.442, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.38462006084864375;  // std dev = 1.354, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.4201374509456918;  // std dev = 0.018, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.43365089696095266;  // std dev = 0.116, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.4978166647345519;  // std dev = 0.232, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.4073497825252879;  // std dev = 0.870, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5422333722433157;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.594377998983927;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10980950256601867;  // std dev = 0.352, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.33447711534732705;  // std dev = 0.084, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(D, C), follows(A, D) )
%   | | then return 0.12552583265963407;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3316272120059062;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.338400052129565;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.042566991606209054;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08104555141418186;  // std dev = 0.791, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | | else return -0.0040086688526168495;  // std dev = 1.501, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03778080431915616;  // std dev = 1.415, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.022114991555118958;  // std dev = 1.523, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2468802067284018;  // std dev = 0.995, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.15522088250291066;  // std dev = 0.940, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.039382728699943415;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.27386451632103004;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return 0.37819361402707835;  // std dev = 0.178, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.22892161599302943;  // std dev = 0.904, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4063634017594998;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.49420359967134786;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09523342703441166;  // std dev = 0.341, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(C, D), tweets(E, D) )
%   | | | then return 0.1652525940935722;  // std dev = 1.352, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.21859453629501566;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.23001808334315266;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2197778924029533;  // std dev = 0.093, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07088593545759656;  // std dev = 0.052, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | else return -0.019948384894326564;  // std dev = 0.155, 107.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23283980973789478;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.040105868722655;  // std dev = 1.446, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return -0.006495165721646932;  // std dev = 1.216, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.19099363350559437;  // std dev = 0.059, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.07201649033600525;  // std dev = 0.910, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.18065054904017383;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.23393986334333353;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.04311854893264395;  // std dev = 0.105, 220.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=20 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2024896355283175;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07002903551037948;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08008231501429096;  // std dev = 0.060, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.0058806518812560965;  // std dev = 1.657, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.163218221199969;  // std dev = 0.052, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.1129451443559843;  // std dev = 0.941, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return -0.08241637550179681;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1886771893240369;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.0011930226995560123;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17187582732070628;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3233586880129093;  // std dev = 0.095, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3578106000879253;  // std dev = 0.121, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08003335641752657;  // std dev = 0.322, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.14757138670372402;  // std dev = 0.016, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.1780577519946157;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.14970328658251245;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06316709910420472;  // std dev = 0.073, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.23653302168889354;  // std dev = 0.137, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.07328445663241327;  // std dev = 0.020, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1363331117054567;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.005036637519851595;  // std dev = 0.957, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.014768124216687615;  // std dev = 0.945, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
Inference time using transfer learning 15.827857494354248
Refined model CLL: -0.101773


******************************************
Best model found
******************************************
Results 

CLL : -0.105386 

AUC ROC : 0.994242 

AUC PR : 0.368896 

Precision : 0.342529 

Recall : 0.955128 

F1 : 0.50423 

Total Learning Time : 18.859328031539917 

Total Inference Time : 11.139081239700317 

Total revision time: 37.413734912872314
Best scored revision CLL: -0.101773


Results 

CLL : -0.105386 

AUC ROC : 0.994242 

AUC PR : 0.368896 

Precision : 0.342529 

Recall : 0.955128 

F1 : 0.50423 

Total Learning Time : 37.439279556274414 

Total Inference Time : 11.139081239700317 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.9234793186187744
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.8379469148974912;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | | else return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.14185106490048807;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0.18756069980539336;  // std dev = 0.470, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, D), tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.158961097145688;  // std dev = 8.958, 467.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.14507878721997206;  // std dev = 7.632, 368.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=128 */
%   | | | else return 0.18386648904822622;  // std dev = 4.189, 75.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=28 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6668577814349433;  // std dev = 1.551, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(E, A), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17590345984809833;  // std dev = 0.412, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.059330237739763106;  // std dev = 6.058, 365.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=115 */
%   | | else return 0.06463327051509658;  // std dev = 0.319, 130.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(C, A), tweets(A, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4780608705209189;  // std dev = 2.283, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | else if ( tweets(A, F), tweets(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15768020947917907;  // std dev = 0.370, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(C, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03543808056152726;  // std dev = 4.743, 348.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=115 */
%   else if ( tweets(E, A), tweets(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026881891202805624;  // std dev = 2.949, 131.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(C, A), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(D, A), tweets(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return 0.028506324660534838;  // std dev = 4.619, 383.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=128 */
%   | | | else return 0.057094214260243484;  // std dev = 2.948, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), recursion_accounttype(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3700948576405446;  // std dev = 1.232, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | | else if ( tweets(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1463603955319998;  // std dev = 0.366, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(C, A) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, D) )
%   | then return 0.013456215876124254;  // std dev = 3.663, 372.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=128 */
%   | else if ( tweets(A, E), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, A), tweets(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021999351828075615;  // std dev = 2.464, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
Inference time using transfer learning 4.775493621826172
Parameter learned model CLL:-0.154689 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), tweets(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true,true': [1.4, 2, 97], 'false,true,true,false': [2.06e-07, 0, 31], 'false,true,false': [0.0, 269, 0], 'false,false': [0.47, 57, 28]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D), tweets(D, A)', 'false,false': 'tweets(E, A), tweets(F, E)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.958, 311, 156]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.632, 240, 128], 'false,false,false,false': [4.189, 47, 28]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'tweets(E, A), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, A)'}, {'true': [1.551, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.412, 297, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'tweets(E, F), recursion_accounttype(F, B)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.058, 250, 115], 'false,false,false': [0.319, 89, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), tweets(A, C)', 'false': 'tweets(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, F), tweets(F, G)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.283, 5, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.37, 320, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(C, D), recursion_accounttype(D, B)', 'false': 'tweets(E, A), tweets(E, E)', 'false,false': 'tweets(A, F)', 'false,false,false': 'tweets(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.743, 233, 115], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.949, 90, 41]}]
['accounttype(A, B)', {'': 'tweets(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, A)', 'false,false': 'tweets(D, A), tweets(A, D)', 'false,false,false': 'follows(A, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.619, 255, 128], 'false,false,false,false': [2.948, 53, 28]}]
['accounttype(A, B)', {'': 'tweets(A, C), recursion_accounttype(C, B)', 'false': 'tweets(D, A)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.232, 1, 156], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.366, 300, 0]}]
['accounttype(A, B)', {'': 'tweets(C, A)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, A), tweets(F, F)'}, {'true': [0.0, 0, 0], 'false,true': [3.663, 244, 128], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.464, 56, 28]}]
{'': [nan, 0.21842770302575254], 'false': [0.2178880785924738, 0.22089965397924005], 'false,true': [0.01514792899408716, -5.943201321413477e-17], 'false,true,true': [0.019793898581778793, 1.375244004696968e-15]}
{'': [nan, 0.17181639980879396], 'false': [nan, 0.17181639980879532], 'false,false': [nan, 0.17181639980879396], 'false,false,false': [nan, 0.17181639980879532]}
{'': [nan, 0.1712999354475262], 'false': [nan, 0.17129993544752942], 'false,false': [nan, 0.17129993544752942], 'false,false,false': [0.1582757378659978, 0.23395555555555436]}
{'': [0.015229317472643151, 0.0005705572601986598], 'false': [nan, 0.0005705572601986598], 'false,false': [nan, 0.0005705572601986598], 'false,false,false': [nan, 0.0005705572601986598]}
{'': [nan, 0.10079627859007022], 'false': [nan, 0.10079627859007076], 'false,false': [0.10054225657696945, 0.10148875770251063], 'false,false,true': [nan, 0.10054225657696945]}
{'': [nan, 0.10112301086263145], 'false': [nan, 0.10112301086263145], 'false,false': [0.032379312047378206, 0.0004272684272866534], 'false,false,false': [nan, 0.0004272684272867644]}
{'': [0.06463323954236681, 0.0663709175716738], 'false': [nan, 0.0663709175716738], 'false,false': [nan, 0.0663709175716738], 'false,false,false': [nan, 0.0663709175716738], 'true': [nan, 0.06463323954236681]}
{'': [nan, 0.06483230195565291], 'false': [nan, 0.06483230195565291], 'false,false': [nan, 0.06483230195565291], 'false,false,false': [0.055707523492203426, 0.10730326147994224]}
{'': [nan, 0.06376659371769804], 'false': [nan, 0.0637665937176981], 'false,false': [0.009664696323048538, 0.0004475644866881871], 'false,false,false': [nan, 0.0004475644866881871]}
{'': [nan, 0.04275630677745934], 'false': [0.0360728247101784, 0.07229504396902116], 'false,false': [nan, 0.07229504396902132], 'false,false,false': [nan, 0.07229504396902116]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, D).;true;true
0;true;follows(E, D), recursion_accounttype(E, B).;true;true
0;true,true;tweets(E, F), tweets(A, F).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(E, B).;true;true


Refining candidate
***************************
Model training time 24.533308267593384
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.8343394112899883;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.09952824544433996;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.7234569992538447;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.39092038332908946;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6888884327455322;  // std dev = 0.850, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12624366983737836;  // std dev = 0.082, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.08824517049954798;  // std dev = 3.946, 115.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=29 */
%   | | | else return 0.2322580578376974;  // std dev = 2.592, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.5281553050002465;  // std dev = 0.178, 93.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=90 */
%   | | else return 0.6457403688905854;  // std dev = 0.229, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return -0.12074839816451617;  // std dev = 0.295, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.38869977007961803;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5553664367462847;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then return -0.07128600076391038;  // std dev = 0.182, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1500734793134983;  // std dev = 2.468, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.12615330255075322;  // std dev = 2.397, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.34902992104023695;  // std dev = 2.051, 63.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | | | else return 0.4062194600372984;  // std dev = 1.010, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4299629661462963;  // std dev = 0.076, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5823703625725748;  // std dev = 0.206, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.4337802074071539;  // std dev = 0.139, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14553052715828793;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.5576610875383957;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7050245897112266;  // std dev = 0.274, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11676086098555291;  // std dev = 0.478, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33758415552878673;  // std dev = 0.089, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.0923455112525408;  // std dev = 0.718, 112.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=1 */
%   | | | else return -0.05423975878028087;  // std dev = 0.418, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.03449348725677263;  // std dev = 1.561, 83.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=12 */
%   | | | else return 0.0883488354770152;  // std dev = 1.168, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.39606613239214933;  // std dev = 0.259, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10996338519904245;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.002043830281905204;  // std dev = 1.165, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.06167340089481968;  // std dev = 2.782, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2729190505577233;  // std dev = 0.272, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.07918583765712134;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.3232862352199728;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.268584190613859;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3554901936750757;  // std dev = 0.360, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2496394952799742;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5345495686227034;  // std dev = 0.350, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.10387602157556894;  // std dev = 0.547, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21937824678448853;  // std dev = 0.054, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.15884028790772226;  // std dev = 0.211, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.13861526543220784;  // std dev = 1.485, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.3542426148165782;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08082816372776486;  // std dev = 0.152, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.020574484486342595;  // std dev = 1.307, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
%   | | | else return 0.002457749811798339;  // std dev = 1.652, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0230023331235293;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.12068479717185057;  // std dev = 1.374, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.16193119599320407;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.1861540683216535;  // std dev = 0.061, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07056023378659868;  // std dev = 0.069, 136.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.20323497768993348;  // std dev = 1.018, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07856583277589205;  // std dev = 0.081, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.271503394483342;  // std dev = 0.424, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10367658027977347;  // std dev = 0.181, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04908361480313892;  // std dev = 1.433, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | | else return 0.08442127066947128;  // std dev = 1.535, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.1736002306003437;  // std dev = 0.275, 87.000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | | | else return 0.12306657508356188;  // std dev = 0.890, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.056508495057376595;  // std dev = 0.755, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18969426460075067;  // std dev = 0.261, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20268120877541884;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.34000062867453723;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4187553846132586;  // std dev = 0.177, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(K, A) )
%   | then return -0.06963580604697767;  // std dev = 0.127, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.12743244731887166;  // std dev = 0.046, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.11056658117181031;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.13548697219643893;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.14232733008749415;  // std dev = 0.073, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), tweets(F, H) )
%   | | then return -0.04675490745822811;  // std dev = 0.107, 232.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | | else return -0.1706829611817454;  // std dev = 0.578, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.21231997244999246;  // std dev = 0.383, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0992724379863722;  // std dev = 0.210, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.008194132372234835;  // std dev = 0.645, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.04752423150875737;  // std dev = 1.096, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
Inference time using transfer learning 10.968904256820679
Refined model CLL: -0.09941


******************************************
Best model found
******************************************
Results 

CLL : -0.093684 

AUC ROC : 0.994284 

AUC PR : 0.391793 

Precision : 0.345304 

Recall : 0.992063 

F1 : 0.512295 

Total Learning Time : 24.533308267593384 

Total Inference Time : 17.557140111923218 

Total revision time: 50.79935073852539
Best scored revision CLL: -0.09941


Results 

CLL : -0.093684 

AUC ROC : 0.994284 

AUC PR : 0.391793 

Precision : 0.345304 

Recall : 0.992063 

F1 : 0.512295 

Total Learning Time : 50.82489538192749 

Total Inference Time : 17.557140111923218 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.5021300315856934
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10851773156715441;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6975774188244115;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04432246936034006;  // std dev = 0.253, 224.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0874808022185997;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7614150525235913;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13562727677689357;  // std dev = 3.205, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5248858471370408;  // std dev = 1.937, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7302298246710035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7205714304863883;  // std dev = 0.226, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.601123008070644;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.46313349127528375;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3631334912752837;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03364383160029313;  // std dev = 3.682, 190.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=21 */
%   | | | else return 0.00702023918655607;  // std dev = 2.858, 72.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5087175364226431;  // std dev = 2.221, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12034889697336584;  // std dev = 0.317, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | | else return -0.1213774857610474;  // std dev = 0.001, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15598652720463232;  // std dev = 0.140, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29789221502903573;  // std dev = 1.631, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.3649892237931185;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33838459688794026;  // std dev = 0.046, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5918981647148005;  // std dev = 1.014, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08495379172920284;  // std dev = 2.360, 244.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=9 */
%   | | else return -0.1043320396212999;  // std dev = 2.28e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.038760648157981366;  // std dev = 3.300, 262.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19545678411666192;  // std dev = 0.955, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4540977848640195;  // std dev = 1.711, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11718471164484243;  // std dev = 0.163, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.11222544924097741;  // std dev = 0.116, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2721289068388792;  // std dev = 1.920, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07904450636566297;  // std dev = 2.142, 266.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.051469785617523016;  // std dev = 0.701, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16637148913123204;  // std dev = 1.708, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.1713950160444489;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.050709208389981726;  // std dev = 0.165, 202.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0047296951326773525;  // std dev = 1.475, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | | | else return 0.1546143765821958;  // std dev = 1.597, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13582432908567013;  // std dev = 0.229, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29443563013689633;  // std dev = 0.650, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09054371001770785;  // std dev = 0.140, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4650055475753623;  // std dev = 0.588, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.113544652272927;  // std dev = 0.166, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15733838084416088;  // std dev = 2.019, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.15967362917252598;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08324854611848782;  // std dev = 0.016, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08310462760859706;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.025223601375885852;  // std dev = 0.504, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.009370123880981513;  // std dev = 1.334, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22572441462343917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.052620103118100066;  // std dev = 1.357, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
Inference time using transfer learning 10.825137615203857
Parameter learned model CLL:-0.111397 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 170, 0], 'true,false,false,true': [0.983, 29, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.445, 24, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.397, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.253, 202, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [0.092, 0, 4], 'false,false,false,false': [3.205, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.937, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.226, 0, 2], 'true,false,false': [0.129, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [1.265, 2, 8], 'false,false,false,true': [3.682, 169, 21], 'false,false,false,false': [2.858, 61, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.221, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.317, 166, 0], 'false,true,false,false': [0.001, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.14, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.631, 3, 73], 'true,false': [0.16, 0, 4], 'false,true,true': [0.046, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.014, 1, 23], 'false,false,true,false': [2.36, 235, 9], 'false,false,false': [2.28e-09, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.3, 171, 91], 'false,true': [0.955, 1, 13], 'false,false,true': [1.711, 2, 22], 'false,false,false,true': [0.163, 23, 0], 'false,false,false,false': [0.116, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.92, 3, 107], 'true,false': [2.142, 255, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.701, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.708, 3, 80], 'true,false,true': [0.045, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.165, 180, 22], 'false,false,false,true': [1.475, 44, 13], 'false,false,false,false': [1.597, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 5, 77], 'false,true,true,true': [0.65, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.14, 205, 0], 'false,false,true': [0.588, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.166, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.019, 4, 94], 'true,true,false': [0.004, 0, 9], 'true,false,true': [0.016, 168, 0], 'true,false,false,true': [3.73e-09, 11, 0], 'true,false,false,false': [0.504, 8, 2], 'false,true': [1.334, 32, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.357, 17, 8]}]
{'': [0.22574576726686596, 0.21172022684310035], 'true': [0.009522928994084868, 0.0098512413059081], 'false': [0.22222222222222174, 0.19834710743801665], 'false,true': [0.07100591715976314, 9.654113257610057e-18], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.750233944703188e-16, 0.060353798126951116], 'true,false,false': [0.03222222222222228, 0.0]}
{'': [0.023241576663830765, 0.09579267713470649], 'false': [0.0641689326767316, 0.16359266967982725], 'false,false': [0.0399305555555556, 0.19254636992215443], 'false,false,false': [0.0021356759716524287, 0.18022915730824904], 'false,true': [nan, 0.0641689326767316], 'false,false,true': [nan, 0.0399305555555556]}
{'': [0.048797404934885456, 0.09888525067210004], 'false': [nan, 0.09888525067209997], 'false,false': [0.1274999999999998, 0.0832435068604965], 'false,false,true': [0.08999999999999994, 0.16], 'false,false,false': [0.07135183115744867, 0.11342516635399005], 'true': [0.05059475027412456, 0.014441351336518471], 'true,true': [0.05071624779420718, 0.0], 'true,false': [0.02553759923173593, 0.004137252183039786]}
{'': [0.03823943076454255, 0.0006815443843702732], 'false': [0.0005044050978586244, 0.00042613144356794675], 'false,true': [nan, 0.0005044050978586356], 'false,true,false': [0.0006044965855541238, 3.203549193260336e-08], 'false,false': [nan, 0.00042613144356794675], 'false,false,false': [nan, 0.00042613144356794675]}
{'': [0.03377528890795425, 0.06233794076987699], 'false': [0.0001250414727197773, 0.05844780301686031], 'false,false': [0.06197068653017308, 7.709882115452476e-18], 'false,false,true': [0.04280922142916651, 0.022828981613560853], 'true': [0.034989010312994416, 0.006437674056359088], 'false,true': [0.0001250414727197773, nan]}
{'': [0.041564036853288064, 0.10077028741176888], 'false': [0.06515678262219286, 0.10398377299378894], 'false,false': [0.1219737477401116, 0.0007075488820099674], 'true': [nan, 0.04156403685328809], 'true,false': [nan, 0.041564036853288064], 'false,false,false': [0.0011552608858177824, 0.0003947608702660738]}
{'': [0.04752484061467368, 0.02589377287557066], 'true': [0.03350357100752001, 0.01724464118303212], 'false': [nan, 0.02589377287557066], 'false,false': [nan, 0.02589377287557066], 'false,false,false': [nan, 0.02589377287557066]}
{'': [0.03436053810493411, 0.0396174809863812], 'false': [nan, 0.03961748098638107], 'false,false': [0.027293776403212643, 0.0643399824729212], 'false,false,false': [0.0381599262508654, 0.11596090268607068], 'true': [0.03516373803277946, 0.0010030990607659725], 'true,false': [0.0010030990607659725, nan]}
{'': [0.05226546597811018, 0.031034065753770556], 'false': [0.019176256797599413, 0.06895811602028722], 'false,false': [0.0203575825286798, 0.0005532575021142327], 'false,true': [0.01321421924112827, 9.556207781625126e-05], 'false,true,true': [0.01321421924112827, nan], 'false,false,false': [nan, 0.0005532575021142327]}
{'': [0.027786664439584517, 0.05322996852241249], 'false': [0.040437054307222775, 0.07191733534049229], 'false,false': [0.0, 0.0736415248055836], 'false,false,false': [nan, 0.0736415248055836], 'true': [0.038114614076518255, 0.0015143343381345206], 'true,true': [0.04161432256407964, 1.6825231199576092e-06], 'true,false': [1.4398728670589598e-06, 0.012935143640634528], 'true,false,false': [1.261617073437678e-18, 0.025408928065557744]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.760879039764404
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8438632208137985;  // std dev = 0.993, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13121276702814783;  // std dev = 0.103, 188.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.10814893509951236;  // std dev = 0.433, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6939762318941534;  // std dev = 0.165, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7313126569706528;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6680096627127009;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12661640591296885;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.032424521209754156;  // std dev = 0.275, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07338359408703157;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.12661640591296844;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7507219186171548;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1277309209919642;  // std dev = 3.092, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5312915361381195;  // std dev = 0.201, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | else return 0.6659650813695076;  // std dev = 0.308, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.0853238639231023;  // std dev = 0.139, 161.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=7 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5412755999315818;  // std dev = 0.880, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.11706765802415808;  // std dev = 0.033, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6981106874017202;  // std dev = 0.410, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.14593092624047624;  // std dev = 0.092, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.441329923545949;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.12004610099889917;  // std dev = 0.139, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4142525239036375;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.48464749003972035;  // std dev = 0.307, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), tweets(F, D) )
%   | | | then return 0.3455062416399814;  // std dev = 1.581, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.45215831516113325;  // std dev = 0.081, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.43917466645522013;  // std dev = 0.157, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5879914055408957;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6813222647595204;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then return -0.10613997339346151;  // std dev = 0.005, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.13177628062911967;  // std dev = 0.094, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.33470172446525054;  // std dev = 0.014, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2340621491876502;  // std dev = 0.962, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.017647962168855263;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3286235842456954;  // std dev = 0.810, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.37277501393168383;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3565991378099576;  // std dev = 0.062, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.05796873975978554;  // std dev = 1.789, 179.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=15 */
%   | | | else return 0.04151429864917514;  // std dev = 2.048, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.09245549209048821;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.24735745240660076;  // std dev = 0.992, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.19534331263621338;  // std dev = 0.977, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.35302052023280184;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.09526438547697033;  // std dev = 0.442, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.05652376629143933;  // std dev = 0.126, 208.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26622082426049204;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.231091575469136;  // std dev = 1.462, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.4573704138256249;  // std dev = 0.268, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11189255285794897;  // std dev = 0.019, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.16807431185136368;  // std dev = 1.336, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.22021253892339177;  // std dev = 0.000954, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2218426658233125;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2354059009429985;  // std dev = 0.045, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3829370941183772;  // std dev = 0.092, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08587331310993712;  // std dev = 0.061, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.006433597041222261;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03543229975260711;  // std dev = 1.207, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.062481793285086476;  // std dev = 1.113, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.17507979070838994;  // std dev = 0.122, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else return 0.19726054944814697;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.24617145322937217;  // std dev = 0.126, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.06853447460952374;  // std dev = 0.073, 129.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.28466155472509086;  // std dev = 0.346, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.08240814253194048;  // std dev = 0.173, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20073893514910202;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.011093709188484445;  // std dev = 1.090, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.013386355516008324;  // std dev = 1.360, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.16544025112890723;  // std dev = 0.008, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.18863330892880775;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22838625225248635;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16171837622187776;  // std dev = 0.139, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.27785222589169695;  // std dev = 0.325, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07452696578986345;  // std dev = 0.054, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3282454928809617;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3867900216256064;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11597031317805855;  // std dev = 0.014, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12898940715167578;  // std dev = 0.176, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.05308596933506872;  // std dev = 0.233, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06613857713238525;  // std dev = 0.036, 207.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13473014812589623;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.06271868532046533;  // std dev = 1.224, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.054258149811691324;  // std dev = 0.586, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.15817602890753968;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.006422834071066796;  // std dev = 0.439, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.012979278023986497;  // std dev = 0.814, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning 16.794543027877808
Refined model CLL: -0.101458


******************************************
Best model found
******************************************
Results 

CLL : -0.098594 

AUC ROC : 0.9944 

AUC PR : 0.347104 

Precision : 0.338636 

Recall : 0.955128 

F1 : 0.5 

Total Learning Time : 10.760879039764404 

Total Inference Time : 14.608213186264038 

Total revision time: 36.11488056182861
Best scored revision CLL: -0.101458


Results 

CLL : -0.098594 

AUC ROC : 0.9944 

AUC PR : 0.347104 

Precision : 0.338636 

Recall : 0.955128 

F1 : 0.5 

Total Learning Time : 36.133556842803955 

Total Inference Time : 14.608213186264038 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.6519775390625
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.095339436993511;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7234468756769733;  // std dev = 0.122, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03224741854836177;  // std dev = 0.267, 171.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.056555729621814904;  // std dev = 1.783, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7482316423772823;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1491452960244012;  // std dev = 4.857, 125.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5124471324866031;  // std dev = 2.002, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.44285421021063015;  // std dev = 0.925, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5873602077657138;  // std dev = 0.192, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4303821454959875;  // std dev = 0.950, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.556736584427279;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.024081321013695572;  // std dev = 4.602, 267.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=34 */
%   | | | else return 0.06441780046222174;  // std dev = 4.063, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5388070429197339;  // std dev = 2.527, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12188019321701093;  // std dev = 0.181, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return -0.12930423127887988;  // std dev = 0.005, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16953499750253942;  // std dev = 0.298, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2876466582412765;  // std dev = 1.752, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.43456321897569483;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25455490497286287;  // std dev = 0.984, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.4376302934980767;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6265133162347326;  // std dev = 0.343, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10056939470098225;  // std dev = 1.780, 241.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=5 */
%   | | else return -0.005830394131790819;  // std dev = 0.293, 79.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028932844793198017;  // std dev = 3.233, 238.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25867081318816215;  // std dev = 0.119, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49029819500165905;  // std dev = 1.680, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1263678541159624;  // std dev = 0.210, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.12612868723280174;  // std dev = 0.190, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2554874402055282;  // std dev = 2.407, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.09133374219128583;  // std dev = 1.872, 268.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027072032625998065;  // std dev = 2.282, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17445004806569298;  // std dev = 1.398, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.23018443618285783;  // std dev = 0.001, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043456823362983836;  // std dev = 0.157, 168.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 6.510394567042001E-4;  // std dev = 2.151, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.07556718689731655;  // std dev = 2.376, 67.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1652563779565685;  // std dev = 0.145, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2875129925384898;  // std dev = 0.867, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09304791105484408;  // std dev = 0.123, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.388526362857429;  // std dev = 0.792, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1215500213171401;  // std dev = 0.300, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17906106520690296;  // std dev = 1.111, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16308567564307233;  // std dev = 0.363, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08310612951957812;  // std dev = 0.034, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09078772233658307;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.028635733081269092;  // std dev = 1.018, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -1.37803289022342E-4;  // std dev = 1.328, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1778843661044056;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013826874197006008;  // std dev = 1.976, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning 7.933582305908203
Parameter learned model CLL:-0.112265 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 187, 0], 'true,false,false,true': [1.381, 41, 2], 'true,false,false,false': [1.0, 2, 2], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [3.65e-08, 36, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.122, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 152, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.783, 46, 4], 'false,false,false,true': [0.141, 0, 8], 'false,false,false,false': [4.857, 85, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.002, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.925, 1, 3], 'true,false,false': [0.192, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.95, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.602, 233, 34], 'false,false,false,false': [4.063, 77, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.527, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.181, 183, 0], 'false,true,false,false': [0.005, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.298, 108, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.752, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.984, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.343, 0, 39], 'false,false,true,false': [1.78, 236, 5], 'false,false,false': [0.293, 66, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.233, 156, 82], 'false,true': [0.119, 0, 22], 'false,false,true': [1.68, 1, 52], 'false,false,false,true': [0.21, 77, 0], 'false,false,false,false': [0.19, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.407, 5, 121], 'true,false': [1.872, 261, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.282, 64, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 83], 'true,false,true': [0.001, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 149, 19], 'false,false,false,true': [2.151, 81, 28], 'false,false,false,false': [2.376, 43, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.145, 2, 78], 'false,true,true,true': [0.867, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.123, 226, 0], 'false,false,true': [0.792, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.3, 102, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.111, 1, 85], 'true,true,false': [0.363, 0, 19], 'true,false,true': [0.034, 165, 0], 'true,false,false,true': [0.016, 22, 0], 'true,false,false,false': [1.018, 25, 4], 'false,true': [1.328, 62, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.976, 50, 21]}]
{'': [0.21708826063121833, 0.23140495867768657], 'false': [0.2418704649287839, 0.2190041658401121], 'false,true': [7.105427357601002e-16, 3.700743415417188e-17], 'true': [0.009433106575965852, 0.016801811673606438], 'true,false': [-2.1610758340297165e-16, 0.07786328655500212], 'true,false,false': [0.04434829637641966, 0.25], 'false,true,true': [0.0, 0.0]}
{'': [0.00017530387487755327, 0.12936779467920534], 'false': [0.07113275523620018, 0.1727146229382959], 'false,false': [0.06355008482027744, 0.19778768360374926], 'false,false,false': [0.002481107406898664, 0.1886990668631177], 'false,true': [nan, 0.07113275523620018], 'false,false,true': [nan, 0.06355008482027744]}
{'': [0.05978351365585082, 0.11508964825619222], 'false': [nan, 0.11508964825619321], 'false,false': [0.04444478291259359, 0.10423711264520413], 'false,false,false': [0.07932672850094584, 0.16504982950373556], 'true': [0.05643786090145483, 0.07896677393145934], 'true,false': [0.21380332130108545, 0.004587839136849625], 'true,true': [0.05643786090145483, nan], 'false,false,true': [0.12879807327755158, 0.0]}
{'': [0.04014852766995339, 0.0008558386529013564], 'false': [0.00015844863750167135, 0.0008199196365879245], 'false,false': [nan, 0.0008199196365879245], 'false,false,false': [nan, 0.0008199196365879245], 'false,true': [nan, 0.00015844863750167748], 'false,true,false': [0.00017978155034371716, 6.405916369451553e-07]}
{'': [0.038162846400711464, 0.07939673908784282], 'false': [0.04545423518257201, 0.07746418070838876], 'false,false': [0.07510584638263819, 0.08578954353675308], 'false,false,true': [0.003009739041427377, 0.01313956032963365], 'false,true': [0.04609524085023385, 0.0], 'true': [0.038373406970621214, 0.0]}
{'': [0.04392342012187918, 0.08742085245834706], 'false': [0.000645898859905221, 0.09305339181852125], 'false,false': [0.05322246268241044, 0.000602749837812346], 'true': [nan, 0.04392342012187912], 'true,false': [nan, 0.04392342012187918], 'false,false,false': [0.0005705262203332586, 0.0006470241955946833]}
{'': [0.04976175123330436, 0.05659014184826892], 'false': [nan, 0.05659014184826897], 'false,false': [nan, 0.05659014184826892], 'false,false,false': [nan, 0.05659014184826892], 'true': [0.04597295748826291, 0.013076294702718679]}
{'': [0.02253116164044686, 0.04384501793098239], 'false': [nan, 0.0438450179309823], 'false,false': [0.02457057132778337, 0.05966734072604288], 'false,false,false': [0.0424330192837843, 0.08422938723937727], 'true': [0.02298988058097286, 6.943508788215258e-07], 'true,false': [6.943508788215258e-07, nan]}
{'': [0.02093079808344624, 0.03450359808000291], 'false': [0.020750637795109366, 0.057699990952122804], 'false,false': [0.015694567465712607, 0.0008831517652264251], 'false,true': [0.019784034775996762, 6.691074273957944e-05], 'false,true,true': [0.019784034775996762, nan], 'false,false,false': [nan, 0.0008831517652264251]}
{'': [0.021803906133103557, 0.03584981495394939], 'false': [0.020285975605621516, 0.05421321762607101], 'false,false': [0.0, 0.05500295707445471], 'false,false,false': [nan, 0.05500295707445456], 'true': [0.013051022177384517, 0.005163336008021201], 'true,true': [0.014354480852311797, 0.006942124937395842], 'true,false': [6.887489741680745e-06, 0.021261542040640874], 'true,false,false': [1.1452791959360645e-05, 0.0357159634231872]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 13.143172264099121
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.1081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12271230891962705;  // std dev = 0.137, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return 0.17957750652808377;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7113438175476752;  // std dev = 0.123, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.6680024725418248;  // std dev = 0.206, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109543;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04350272115702479;  // std dev = 2.899, 131.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=13 */
%   | | | else return -0.09835138533251374;  // std dev = 0.832, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.003909042960588612;  // std dev = 1.320, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return -0.08412183299430322;  // std dev = 1.167, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6290808102212903;  // std dev = 0.902, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12077360821942854;  // std dev = 4.953, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.547880751946358;  // std dev = 0.128, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.3886997700796176;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6196246785083248;  // std dev = 0.273, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.32279854541733205;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5756491780559119;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6820851146528079;  // std dev = 0.991, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12126697986386956;  // std dev = 0.048, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07195882601315114;  // std dev = 3.963, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.12363439499456996;  // std dev = 3.022, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.42921342704705495;  // std dev = 0.196, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.34046181817564236;  // std dev = 1.578, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else if ( recursion_accounttype(D, B), follows(G, D) )
%   | | | then return 0.42300609609722495;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5925427285697281;  // std dev = 0.203, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.42388272343242833;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6250085227309657;  // std dev = 0.983, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.7780072888352099;  // std dev = 0.302, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7983501471087793;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12815412910820861;  // std dev = 0.031, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.326058043635967;  // std dev = 0.121, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.5800615148181401;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.12066207613384206;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.32574442725004243;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5107924696128022;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.0934045316905262;  // std dev = 0.524, 133.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=1 */
%   | | | else return -0.0010080127450210145;  // std dev = 1.980, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.024789634176352146;  // std dev = 2.512, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return 0.14738951324201557;  // std dev = 2.968, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.2619030740412508;  // std dev = 0.169, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.21178117989229062;  // std dev = 0.232, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.332554769157697;  // std dev = 1.094, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.09272794157135883;  // std dev = 0.044, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.07485576726984287;  // std dev = 0.085, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2779165290233467;  // std dev = 0.044, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.13454297611107785;  // std dev = 1.326, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.5682992633002918;  // std dev = 0.378, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.14375123169034718;  // std dev = 0.045, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, E) )
%   | then return 0.22704193074069465;  // std dev = 0.052, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.09301311223909346;  // std dev = 0.857, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, G), follows(H, F) )
%   | | | then return 0.3511215515552226;  // std dev = 0.157, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.06972248263302609;  // std dev = 0.810, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.0810979107056403;  // std dev = 0.049, 195.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=2 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.20941294880959394;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1239203845237394;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return -0.0628866620753257;  // std dev = 0.376, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.01467227349994719;  // std dev = 3.160, 148.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=41 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17311210498523016;  // std dev = 0.112, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.32737194932450997;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2865027437668273;  // std dev = 0.447, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.011913328781644602;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07814529509580567;  // std dev = 0.064, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33372883555353217;  // std dev = 0.391, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.122603466751789;  // std dev = 0.019, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07067658785886304;  // std dev = 1.986, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.01219961716322685;  // std dev = 1.427, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1557493508109941;  // std dev = 0.130, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.12405728005279561;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.13834334351228983;  // std dev = 0.726, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.18031497312731298;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20734595377393641;  // std dev = 0.063, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.0735084851894938;  // std dev = 0.059, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.30288772598657276;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.41831261076785947;  // std dev = 0.972, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.14095824175713845;  // std dev = 0.037, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13351881047589836;  // std dev = 0.129, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.06647633623211313;  // std dev = 0.070, 250.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1601179116173068;  // std dev = 0.969, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.09577090729028995;  // std dev = 1.83e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.03439733763594936;  // std dev = 0.369, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06808176845088693;  // std dev = 0.476, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19887559674015431;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 2.088412293839122E-4;  // std dev = 1.643, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | | else return -0.043648556585063475;  // std dev = 1.214, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
Inference time using transfer learning 26.181524991989136
Refined model CLL: -0.10874


******************************************
Best model found
******************************************
Results 

CLL : -0.105612 

AUC ROC : 0.992606 

AUC PR : 0.343608 

Precision : 0.336022 

Recall : 0.992063 

F1 : 0.502008 

Total Learning Time : 13.143172264099121 

Total Inference Time : 31.249459743499756 

Total revision time: 56.655986070632935
Best scored revision CLL: -0.10874


Results 

CLL : -0.105612 

AUC ROC : 0.992606 

AUC PR : 0.343608 

Precision : 0.336022 

Recall : 0.992063 

F1 : 0.502008 

Total Learning Time : 56.674662351608276 

Total Inference Time : 31.249459743499756 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.4366180896759033
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.08302753548872309;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6992525907102506;  // std dev = 1.406, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.038598613609444686;  // std dev = 0.260, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10451081761618224;  // std dev = 0.999, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5642505084019607;  // std dev = 0.825, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1217303721994325;  // std dev = 3.190, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5398588048224491;  // std dev = 1.587, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7291007733432371;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8165127250466064;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.42207465991941007;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5627213317737364;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5627213317737364;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04066052402490542;  // std dev = 3.653, 208.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=21 */
%   | | | else return -0.005248388704332463;  // std dev = 2.878, 73.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46102664691311734;  // std dev = 3.234, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1173114854157937;  // std dev = 0.046, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.1206752111283175;  // std dev = 0.001, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15761445515849803;  // std dev = 0.141, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30386510703611885;  // std dev = 1.725, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.27210723770538847;  // std dev = 0.830, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31614733879774365;  // std dev = 3.33e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.641424951665103;  // std dev = 0.189, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08120366465041429;  // std dev = 2.330, 236.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=9 */
%   | | else return -0.10475150865699677;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02429289016914897;  // std dev = 3.633, 277.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2629460674275955;  // std dev = 0.136, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5131123959715219;  // std dev = 1.156, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12044226185995152;  // std dev = 0.117, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.11542863056355249;  // std dev = 0.173, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2762967535258633;  // std dev = 1.976, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07429089163072582;  // std dev = 2.090, 231.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02020768729021723;  // std dev = 0.658, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19108553092490943;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return -0.10677770206229027;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042443383933773636;  // std dev = 0.149, 205.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01744750042381781;  // std dev = 1.612, 66.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | | else return 0.07296291570090586;  // std dev = 1.721, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1730147384167418;  // std dev = 0.172, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2591560551309079;  // std dev = 1.110, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0899169841665186;  // std dev = 0.038, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45575183994634133;  // std dev = 0.621, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10499109822465341;  // std dev = 0.124, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18601119666556995;  // std dev = 1.182, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.14060705690664246;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.083599398962385;  // std dev = 0.014, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07923058088478932;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.031237075397537853;  // std dev = 0.525, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.017349453091014787;  // std dev = 1.032, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3081972241826264;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11193772838328661;  // std dev = 1.261, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
Inference time using transfer learning 10.007184982299805
Parameter learned model CLL:-0.110502 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 179, 0], 'true,false,false,true': [0.97, 16, 1], 'true,false,false,false': [0.935, 7, 1], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.79e-08, 30, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.406, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 189, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.999, 30, 1], 'false,false,false,true': [0.825, 1, 4], 'false,false,false,false': [3.19, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.587, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.089, 0, 2], 'true,false,false': [0.935, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [3.65e-08, 0, 8], 'false,false,false,true': [3.653, 187, 21], 'false,false,false,false': [2.878, 62, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.234, 9, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 152, 0], 'false,true,false,false': [0.001, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.141, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.725, 3, 73], 'true,false': [0.83, 1, 4], 'false,true,true': [3.33e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.189, 0, 23], 'false,false,true,false': [2.33, 227, 9], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.633, 186, 91], 'false,true': [0.136, 0, 13], 'false,false,true': [1.156, 1, 22], 'false,false,false,true': [0.117, 30, 0], 'false,false,false,false': [0.173, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.976, 3, 107], 'true,false': [2.09, 220, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.658, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [0.844, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 183, 22], 'false,false,false,true': [1.612, 53, 13], 'false,false,false,false': [1.721, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.172, 2, 77], 'false,true,true,true': [1.11, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.038, 199, 0], 'false,false,true': [0.621, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.124, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.182, 1, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.014, 184, 0], 'true,false,false,true': [7.45e-09, 16, 0], 'true,false,false,false': [0.525, 16, 2], 'false,true': [1.032, 28, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.261, 11, 8]}]
{'': [0.2246900826446303, 0.21345155709342578], 'true': [0.009522928994084868, 0.009707804690503497], 'false': [0.2040816326530607, 0.22633136094674564], 'false,true': [-1.4802973661668753e-16, 2.590520390792032e-17], 'true,false': [-1.9847562451399445e-16, 0.07360000000000004], 'true,false,false': [0.055363321799308, 0.10937500000000004], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02354785043920779, 0.0954182836402878], 'false': [0.06745534158153134, 0.14921329019683452], 'false,false': [0.032192914455865446, 0.18369790553636217], 'false,false,false': [0.13614122480034413, 0.1724293771748257], 'false,true': [nan, 0.06745534158153134], 'false,false,true': [nan, 0.032192914455865446]}
{'': [0.04515804076064027, 0.09180002884325454], 'false': [nan, 0.09180002884325454], 'false,false': [1.5673736818237505e-16, 0.07721318493908541], 'false,false,false': [0.06417326465789062, 0.1134397842234162], 'true': [0.034501500092716145, 0.1577595058096384], 'true,false': [0.003965187984362073, 0.17482540801938135], 'true,true': [0.0344901703728787, 0.0], 'false,false,true': [1.4802973661668753e-16, 1.6653345369377348e-16]}
{'': [0.07748163232707889, 0.00028831188677790195], 'false': [1.3106886123261571e-05, 0.0006424931282369249], 'false,false': [nan, 0.0006424931282369249], 'false,false,false': [nan, 0.0006424931282369249], 'false,true': [nan, 1.3106886123263883e-05], 'false,true,false': [1.4191809424302093e-05, 2.6745799586169738e-08]}
{'': [0.045300946410962065, 0.06341040352277454], 'false': [6.530723674265627e-17, 0.06067827438211394], 'false,false': [0.06335614016982874, -6.4051328343759035e-18], 'false,false,true': [0.001550524667738606, 0.023007295850559783], 'true': [0.03916086300857242, 0.13768390879275988], 'false,true': [6.530723674265627e-17, nan]}
{'': [0.04764383667314029, 0.07810103956631174], 'false': [0.0014233512048823249, 0.08113574127697243], 'false,false': [0.0581455977173084, 0.0005405875270283114], 'true': [nan, 0.047643836673140254], 'true,false': [nan, 0.04764383667314029], 'false,false,false': [0.00046009160516232903, 0.0005778312019109227]}
{'': [0.05112847464861383, 0.019675745513615513], 'true': [0.03551400500374765, 0.01891500188863784], 'false': [nan, 0.019675745513615513], 'false,false': [nan, 0.019675745513615513], 'false,false,false': [nan, 0.019675745513615513]}
{'': [0.023311031019205456, 0.03481911467571783], 'false': [nan, 0.03481911467571798], 'false,false': [0.02226821325574728, 0.0596893841814348], 'false,false,false': [0.03938440018495781, 0.09874069417479082], 'true': [0.01220894734619075, 0.23751344553807233], 'true,false': [0.23751344553807238, nan]}
{'': [0.0294221826681038, 0.032942796471287714], 'false': [0.020188505907515975, 0.07941674771558127], 'false,false': [0.02266283757633442, 0.0004783864352830413], 'false,true': [0.03736885463134925, 7.108686256713603e-06], 'false,true,true': [0.03736885463134925, nan], 'false,false,false': [nan, 0.0004783864352830413]}
{'': [0.020287762143598103, 0.047300647706277184], 'false': [0.026622505046733136, 0.08139051901287578], 'false,false': [0.0, 0.0837483410552987], 'false,false,false': [nan, 0.0837483410552987], 'true': [0.013597726809525593, 0.0014712444069266055], 'true,true': [0.014706244901835473, 1.3568740381189296e-05], 'true,false': [1.094901729883792e-06, 0.008678958557881531], 'true,false,false': [3.469446951953614e-18, 0.015309646472307275]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.811229467391968
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8432235619651843;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.694698152552196;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.7224759303299733;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7224759303299733;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.732013929399491;  // std dev = 0.140, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7430591557243759;  // std dev = 0.177, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12618339171102244;  // std dev = 0.032, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7452075089279165;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11985415039593504;  // std dev = 2.135, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.10812408479308834;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5050585721793469;  // std dev = 1.938, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | | else return 0.6221753834002949;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6221753834002948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6414678337988692;  // std dev = 0.234, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5580219648970679;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09931267292604203;  // std dev = 1.136, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   | | | else return 0.010562453881883174;  // std dev = 2.071, 64.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.053233529229991805;  // std dev = 2.194, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.01659049320619312;  // std dev = 2.513, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4386339987243605;  // std dev = 0.019, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.3163893080626079;  // std dev = 1.598, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.424167648660848;  // std dev = 0.043, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5468673329514737;  // std dev = 0.140, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4486588753362283;  // std dev = 0.201, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5832533284496371;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.8034574969258266;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7589573128305457;  // std dev = 0.244, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11585689849542888;  // std dev = 0.024, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.3220264803723959;  // std dev = 0.971, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.27059690382208257;  // std dev = 0.942, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.3811242262441089;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43236121110274967;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.10259408432581082;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32104506673239486;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.47483464746309173;  // std dev = 0.408, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07966892043925106;  // std dev = 2.158, 223.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=9 */
%   | | else return -0.1755413473125469;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.27332614375999187;  // std dev = 0.093, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.2799864485922991;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.006568879743169109;  // std dev = 1.185, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return -0.046813851630591374;  // std dev = 0.134, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.28611748440231405;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14268414175166821;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3625396580063514;  // std dev = 0.994, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5886925839112167;  // std dev = 0.338, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12807198320280305;  // std dev = 0.032, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22718639067237048;  // std dev = 0.192, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.14619706589309536;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.31090954577246077;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08458336324418025;  // std dev = 0.071, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.006265321564579795;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03978968481861623;  // std dev = 1.111, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.06392115035609483;  // std dev = 1.611, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then return 0.1848509735361893;  // std dev = 0.059, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.14075183992506568;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19017298992510792;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2077507064563195;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(G, A) )
%   | then return -0.048791027552530467;  // std dev = 0.107, 242.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31019895029343636;  // std dev = 0.225, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12422765643892704;  // std dev = 0.081, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09321120360199578;  // std dev = 0.919, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.1304963436269088;  // std dev = 1.161, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), follows(A, E) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.11821574962279459;  // std dev = 1.657, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | | else return 0.20514656146085528;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24076801076838628;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17805610255832877;  // std dev = 0.114, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.20690478135936283;  // std dev = 0.054, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07405529947350759;  // std dev = 0.066, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.28340543337394364;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.46432747656286644;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12433066316376874;  // std dev = 0.031, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15338378803722996;  // std dev = 0.113, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1351883736811193;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06701992724066463;  // std dev = 0.029, 204.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.0694780245001459;  // std dev = 0.997, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.09102943284586472;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.02252315547108606;  // std dev = 0.203, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.3489891613308924;  // std dev = 0.727, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0358753029581662;  // std dev = 0.493, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.03848179150732131;  // std dev = 1.047, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning 15.146676301956177
Refined model CLL: -0.104339


******************************************
Best model found
******************************************
Results 

CLL : -0.104101 

AUC ROC : 0.994914 

AUC PR : 0.406282 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 16.811229467391968 

Total Inference Time : 12.289266586303711 

Total revision time: 39.841708183288574
Best scored revision CLL: -0.104339


Results 

CLL : -0.104101 

AUC ROC : 0.994914 

AUC PR : 0.406282 

Precision : 0.337662 

Recall : 1.0 

F1 : 0.504854 

Total Learning Time : 39.860045433044434 

Total Inference Time : 12.289266586303711 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.65290904045105
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.10411521584388395;  // std dev = 1.387, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.17759337954395607;  // std dev = 0.466, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7102701620312597;  // std dev = 1.007, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03444302543286361;  // std dev = 0.265, 173.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.045592656540003114;  // std dev = 1.770, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6411268156226788;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13629532660110721;  // std dev = 4.947, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5578203109186363;  // std dev = 0.913, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.709913916071571;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6211085016335254;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5808130697849888;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5576378638178934;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01426058541741235;  // std dev = 4.610, 254.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=34 */
%   | | | else return 0.036696067159717086;  // std dev = 4.147, 115.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.546687693551067;  // std dev = 2.322, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12175227500108733;  // std dev = 0.105, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return -0.12604612591569844;  // std dev = 0.005, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16765805686795973;  // std dev = 0.224, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29165641597432584;  // std dev = 1.422, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.39531596550698234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29348506031271826;  // std dev = 0.009, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.42655520887100773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6302863141864123;  // std dev = 0.347, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10184744418439545;  // std dev = 1.797, 231.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=5 */
%   | | else return 0.01301721122807042;  // std dev = 0.307, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02200316455672153;  // std dev = 3.173, 245.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24274686073423907;  // std dev = 0.113, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5243481572962947;  // std dev = 1.064, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12806828831382594;  // std dev = 0.181, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.12341910417136308;  // std dev = 0.180, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27449631621343373;  // std dev = 1.577, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08824657693259993;  // std dev = 1.675, 256.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02662931524065051;  // std dev = 2.408, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18732630580679593;  // std dev = 0.082, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2161966830274778;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04402914335260497;  // std dev = 0.143, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.005183024158377109;  // std dev = 2.030, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
%   | | | else return 0.03450109129084741;  // std dev = 2.514, 82.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1530100740445875;  // std dev = 0.152, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24852322152073028;  // std dev = 1.406, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09299771550066227;  // std dev = 0.130, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39378161862935607;  // std dev = 0.826, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1157338528343368;  // std dev = 0.246, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1478214398990264;  // std dev = 1.831, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.16059552441817274;  // std dev = 0.360, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0824103356056653;  // std dev = 0.017, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09454047549235323;  // std dev = 0.020, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.008377596177726617;  // std dev = 0.939, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.012062774346513809;  // std dev = 1.450, 71.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18777568824745816;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02114287779989493;  // std dev = 1.963, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning 9.316757917404175
Parameter learned model CLL:-0.1115 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C)', 'false': 'tweets(A, F)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(G, H), follows(A, H)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 182, 0], 'true,false,false,true': [1.387, 51, 2], 'true,false,false,false': [1.095, 3, 2], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.37e-08, 50, 0], 'false,false': [0.466, 49, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.007, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 154, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.77, 40, 4], 'false,false,false,true': [0.977, 1, 8], 'false,false,false,false': [4.947, 92, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.913, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.174, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.127, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.61, 220, 34], 'false,false,false,false': [4.147, 92, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.322, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.105, 158, 0], 'false,true,false,false': [0.005, 25, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.224, 79, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.422, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.009, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.347, 0, 39], 'false,false,true,false': [1.797, 226, 5], 'false,false,false': [0.307, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.173, 163, 82], 'false,true': [0.113, 0, 22], 'false,false,true': [1.064, 0, 52], 'false,false,false,true': [0.181, 67, 0], 'false,false,false,false': [0.18, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.577, 2, 121], 'true,false': [1.675, 249, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.408, 60, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.082, 0, 83], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 158, 19], 'false,false,false,true': [2.03, 82, 28], 'false,false,false,false': [2.514, 58, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.152, 2, 78], 'false,true,true,true': [1.406, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.13, 198, 0], 'false,false,true': [0.826, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.246, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.831, 3, 85], 'true,true,false': [0.36, 0, 19], 'true,false,true': [0.017, 167, 0], 'true,false,false,true': [0.02, 25, 0], 'true,false,false,false': [0.939, 19, 4], 'false,true': [1.45, 46, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.963, 50, 21]}]
{'': [0.21538669551108913, 0.2183685419575703], 'false': [0.2192612582222983, 0.2173996913580257], 'false,true': [0.06858710562414343, 5.773159728050814e-17], 'true': [2.049642507000289e-15, 0.01638888888888878], 'false,true,true': [0.04338842975206614, 0.15999999999999986], 'true,false': [-2.049642507000289e-16, 0.06420927467300819], 'true,false,false': [0.036311854752580947, 0.24000000000000005]}
{'': [0.011796002467964304, 0.12986085683860524], 'false': [0.07040046686956797, 0.17429400949027454], 'false,false': [0.07116271422118825, 0.19557347381756393], 'false,false,false': [0.10599123246285587, 0.18541402418815964], 'false,false,true': [nan, 0.07116271422118825], 'false,true': [nan, 0.07040046686956797]}
{'': [0.012707951119342918, 0.11530318850570102], 'false': [nan, 0.11530318850570143], 'false,false': [0.0008768819128446399, 0.10476956558112865], 'false,false,false': [0.0836819358396959, 0.14955837365084662], 'true': [0.01225524592587673, 0.008915120041323232], 'true,true': [0.01225524592587673, nan], 'true,false': [0.0169178098007227, 0.0037632745724084926], 'false,false,true': [0.002685450858086543, 0.0]}
{'': [0.03435654571168087, 0.0006668778097103107], 'false': [6.2359327130176e-05, 0.0006326734079171697], 'false,false': [nan, 0.0006326734079171697], 'false,false,false': [nan, 0.0006326734079171697], 'false,true': [nan, 6.235932713018086e-05], 'false,true,false': [6.956207998995118e-05, 9.195104941106535e-07]}
{'': [0.02542505719780359, 0.08196737968062316], 'false': [0.0008071723959173216, 0.08195045187383086], 'false,false': [0.0786493076988531, 0.09409480543948162], 'false,false,true': [0.0030843315279349636, 0.01398194292737676], 'true': [0.025612577087247956, 0.0], 'false,true': [4.308899650085074e-06, 0.0]}
{'': [0.04108992538079382, 0.08523430152142704], 'false': [0.0005808507083648177, 0.09155853320695467], 'false,false': [0.021763327787439356, 0.0004915745298304792], 'true': [nan, 0.041089925380793535], 'true,false': [nan, 0.04108992538079382], 'false,false,false': [0.00048650378963872886, 0.0004858378134269756]}
{'': [0.04280818050436969, 0.06591808680468521], 'false': [nan, 0.06591808680468529], 'false,false': [nan, 0.06591808680468521], 'false,false,false': [nan, 0.06591808680468521], 'true': [0.020219888260452967, 0.010957623969723156]}
{'': [9.932099788089634e-05, 0.03911910821666697], 'false': [nan, 0.03911910821666728], 'false,false': [0.0203654153395414, 0.054579620605957994], 'false,false,false': [0.03744567894718732, 0.07707172650716322], 'true': [8.044719807102366e-05, 6.869674279377097e-05], 'true,false': [6.869674279377097e-05, nan]}
{'': [0.023150677670622608, 0.038562068429200104], 'false': [0.024444412735214204, 0.060182810673377767], 'false,false': [0.01706192930833088, 0.0006524291230190989], 'false,true': [0.05066938929567806, 8.553065018090608e-05], 'false,true,true': [0.05066938929567806, nan], 'false,false,false': [nan, 0.0006524291230190989]}
{'': [0.02526871703748791, 0.0417836241336372], 'false': [0.029630740063239774, 0.05351174722911755], 'false,false': [0.0, 0.05425839454070235], 'false,false,false': [nan, 0.05425839454070242], 'true': [0.032559986098351444, 0.004668965499226598], 'true,true': [0.03808456111677147, 0.006838278911500041], 'true,false': [1.6809512498758532e-06, 0.020246926716944797], 'true,false,false': [1.6466813347288945e-05, 0.038369868624136425]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, F).;true;true
0;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 25.76274847984314
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8181489350995128;  // std dev = 0.196, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.12460968559014356;  // std dev = 0.130, 232.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7281611909976013;  // std dev = 0.210, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.7228075544695836;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.43719947223541417;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12061751195702648;  // std dev = 0.851, 127.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=1 */
%   | | | else return 0.036917670807521605;  // std dev = 3.107, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.13905399877701305;  // std dev = 3.822, 91.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=29 */
%   | | | else return 0.168161235891347;  // std dev = 2.541, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then return 0.544887123120853;  // std dev = 0.126, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | else return 0.6313537928462473;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.3977344842948372;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.4875584854422902;  // std dev = 0.321, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5653215261650901;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6253982387461039;  // std dev = 1.327, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.12139989318408684;  // std dev = 0.125, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.10192916303991653;  // std dev = 3.813, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | | | else return 0.19188488485684516;  // std dev = 2.418, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.40944610739314424;  // std dev = 0.990, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.25749864332910266;  // std dev = 1.260, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.41493274874840136;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5914885216934267;  // std dev = 0.198, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.4332717027647917;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5250584700053533;  // std dev = 0.147, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6724822897234345;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.6420023344914615;  // std dev = 0.935, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.13221922301054723;  // std dev = 0.037, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.28603040676584385;  // std dev = 1.380, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.328888720483668;  // std dev = 0.018, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.38315863244813564;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5100077211897116;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3270963453073813;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.44647973098670773;  // std dev = 0.226, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09722995608421088;  // std dev = 0.106, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.08200414198577183;  // std dev = 2.028, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return 0.05761579173870231;  // std dev = 2.961, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2696110649170349;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.22491017658607199;  // std dev = 0.973, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.028746084467805355;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.055030994273105975;  // std dev = 0.128, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | else return -0.09509947876558895;  // std dev = 0.114, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2657797412433428;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.41015677895310865;  // std dev = 1.112, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5303562382002727;  // std dev = 0.412, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1327679990639693;  // std dev = 0.044, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.2228679105640744;  // std dev = 0.052, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, C) )
%   | | | then return -0.4398480255629021;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1422425117675798;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.22558300406852616;  // std dev = 0.033, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then return -0.0396933500595359;  // std dev = 0.127, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B), follows(G, F) )
%   | | | then return 0.3380764515681759;  // std dev = 0.500, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.1324386611928526;  // std dev = 0.822, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.20788018079173484;  // std dev = 0.677, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.032430031422415934;  // std dev = 1.678, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18560382162793254;  // std dev = 0.135, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.28699463008643195;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.30698533150288293;  // std dev = 1.031, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.06844941377119378;  // std dev = 0.714, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07966429082448952;  // std dev = 0.119, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2736028430762576;  // std dev = 0.448, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1164592438450607;  // std dev = 0.010, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.0011629873239437187;  // std dev = 0.542, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.041381691872140455;  // std dev = 1.777, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.17133983040554307;  // std dev = 0.041, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.10989556531323132;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.1146595224878307;  // std dev = 0.996, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.28366726105902335;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.0740049274002568;  // std dev = 0.083, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2605546051275547;  // std dev = 0.095, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4003111449231072;  // std dev = 0.272, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10509156520547541;  // std dev = 0.009, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.21675237200913755;  // std dev = 0.184, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.14086259875692173;  // std dev = 0.106, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.0439588710305279;  // std dev = 1.338, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.2250464651407749;  // std dev = 0.014, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.0650905463948036;  // std dev = 0.066, 204.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return -0.013186422233193187;  // std dev = 0.137, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
%   | | else return 0.08611371604838317;  // std dev = 0.184, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.09826285792825806;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.00672395962527172;  // std dev = 0.897, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.01932939784896008;  // std dev = 1.287, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
Inference time using transfer learning 14.597147464752197
Refined model CLL: -0.106448


******************************************
Best model found
******************************************
Results 

CLL : -0.108985 

AUC ROC : 0.992876 

AUC PR : 0.346906 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 25.76274847984314 

Total Inference Time : 14.895461082458496 

Total revision time: 53.07077765464783
Best scored revision CLL: -0.106448


Results 

CLL : -0.108985 

AUC ROC : 0.992876 

AUC PR : 0.346906 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 53.08911490440369 

Total Inference Time : 14.895461082458496 

