Starting experiment 3_imdb_cora 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.294
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.436', 'seconds']
Parameter learned model CLL:-0.554626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [3.7007434154171886e-16, 0.20305555555554874]}
{'': [1.7393494052460785e-15, 0.20305555555554408]}
{'': [5.181040781584064e-16, 0.20305555555556368]}
{'': [1.850371707708594e-17, 0.20305555555556454]}
{'': [-4.625929269271486e-17, 0.20305555555555405]}
{'': [1.6653345369377348e-16, 0.203055555555546]}
{'': [6.013708050052931e-17, 0.2030555555555644]}
{'': [-6.013708050052931e-17, 0.20305555555555183]}
{'': [1.3877787807814457e-17, 0.2030555555555464]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 39.036
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17407582804989927;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14999749052457834;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4353005423349522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10054271867082451;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520725;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091865;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12835421777464812;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3664491813617209;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.08638739330851383;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917126;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0048814113928811334;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10813958472874342;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4079491798045053;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04364995309249772;  // std dev = 1.837, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.1068490030540994;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08988044289666687;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.33668123611469153;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.036201096134763945;  // std dev = 1.836, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09707620226623424;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.0619627397696433;  // std dev = 0.940, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.07549289660531808;  // std dev = 12.864, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.05952740314147813;  // std dev = 2.046, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08889684111111595;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033008012454352645;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05992648759307254;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2643056018681659;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.018381282156455216;  // std dev = 1.831, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08195744267348955;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028949568237196313;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048394933152790684;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.24889829015884649;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.00297569229946086;  // std dev = 1.803, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07600040434149678;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025382258678852574;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03884259952583078;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.20234840145468072;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -7.418782244617356E-4;  // std dev = 1.796, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.0708339530471855;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022248477584885153;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.031023714725610364;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.19050263312265905;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.010465303859278227;  // std dev = 1.778, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.06631260781360634;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0014757167188846957;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.001949694817582405;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.695', 'seconds']
Refined model CLL: -0.538963


******************************************
Best model found
******************************************
Results 

CLL : -0.618541 

AUC ROC : 0.617789 

AUC PR : 0.56938 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 39.036 

Total Inference Time : 1.1657042503356934 

Total revision time: 42.3688171672821
Best scored revision CLL: -0.538963


Results 

CLL : -0.618541 

AUC ROC : 0.617789 

AUC PR : 0.56938 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 42.39394243240356 

Total Inference Time : 1.1657042503356934 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.58
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.402', 'seconds']
Parameter learned model CLL:-0.645914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [-3.4492365813597096e-16, 0.24738315415699694]}
{'': [1.793603022307049e-15, 0.24738315415698806]}
{'': [6.553549504583448e-16, 0.2473831541570005]}
{'': [-2.4144656069517967e-16, 0.24738315415699036]}
{'': [-5.1738548720395646e-17, 0.24738315415699547]}
{'': [2.0695419488158259e-16, 0.2473831541570034]}
{'': [2.5869274360197823e-17, 0.24738315415699816]}
{'': [-1.2503482607428947e-16, 0.24738315415699647]}
{'': [4.527123013034619e-17, 0.24738315415700443]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 38.054
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952967;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4761269733257933;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.16597828983210133;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.17269322973112616;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.22861439261905941;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1333216688060708;  // std dev = 0.497, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.18648409910313157;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1550461812274263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.40267984333076595;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.16577990212489407;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.27342798406102325;  // std dev = 0.906, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.09852943363698502;  // std dev = 16.493, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.12964332899983771;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.173096690164068;  // std dev = 1.816, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3023926978292275;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.12641708568235085;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20919749417301323;  // std dev = 0.907, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.07414047286641229;  // std dev = 16.493, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.09876097821256818;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.14078793908263154;  // std dev = 1.822, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.22871674745423304;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12505951885938565;  // std dev = 1.235, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.055669517390412995;  // std dev = 16.493, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.07587621669954756;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.16242817907667417;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.019579206571401577;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.27053054021723466;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17662099818189075;  // std dev = 1.228, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1047311469938288;  // std dev = 2.082, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.03986985428740403;  // std dev = 16.549, 1,108.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=600 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.14152280254186284;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.01486269866698861;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.485', 'seconds']
Refined model CLL: -0.629555


******************************************
Best model found
******************************************
Results 

CLL : -0.706076 

AUC ROC : 0.612027 

AUC PR : 0.487146 

Precision : 0.35392 

Recall : 0.956812 

F1 : 0.516711 

Total Learning Time : 38.054 

Total Inference Time : 1.323810338973999 

Total revision time: 41.79011004829407
Best scored revision CLL: -0.629555


Results 

CLL : -0.706076 

AUC ROC : 0.612027 

AUC PR : 0.487146 

Precision : 0.35392 

Recall : 0.956812 

F1 : 0.516711 

Total Learning Time : 41.81523531341553 

Total Inference Time : 1.323810338973999 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.18
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15223069226851285;  // std dev = 18.446, 1,639.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.13177668596657602;  // std dev = 18.458, 1,644.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1182149423263366;  // std dev = 18.391, 1,616.000 (wgt'ed) examples reached here.  /* #neg=1,134 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.10065307368897773;  // std dev = 18.384, 1,613.000 (wgt'ed) examples reached here.  /* #neg=1,131 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.0799716880688587;  // std dev = 18.439, 1,636.000 (wgt'ed) examples reached here.  /* #neg=1,154 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.06474947569865788;  // std dev = 18.458, 1,644.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.05101244352284807;  // std dev = 18.485, 1,656.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.04604486434074586;  // std dev = 18.427, 1,631.000 (wgt'ed) examples reached here.  /* #neg=1,149 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.034987529404442864;  // std dev = 18.458, 1,644.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.018238685149473535;  // std dev = 18.588, 1,702.000 (wgt'ed) examples reached here.  /* #neg=1,220 #pos=482 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.287', 'seconds']
Parameter learned model CLL:-0.478454 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.446, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.458, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.391, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.384, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.439, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.458, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.485, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.427, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.458, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.588, 1, 482]}]
{'': [1.4354398702224246e-15, 0.20759767726937867]}
{'': [1.4354398702224247e-16, 0.20722852694453248]}
{'': [1.794299837778031e-15, 0.20930392853641208]}
{'': [6.100619448445304e-16, 0.20952744075281207]}
{'': [0.0, 0.2078194774062936]}
{'': [-4.485749594445077e-17, 0.20722852694454774]}
{'': [1.8840148296669324e-16, 0.2063452472636465]}
{'': [4.9343245538895844e-17, 0.20818965468632708]}
{'': [-1.1214373986112693e-16, 0.20722852694455612]}
{'': [4.261462114722823e-17, 0.20299612952758403]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 25.843
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17223344214176092;  // std dev = 0.464, 1,420.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.058148935099512376;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.009409439301193045;  // std dev = 3.909, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16086344983168144;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.150543682389814;  // std dev = 0.464, 1,376.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.036774946623655345;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.02535327545169122;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.00608474957860993;  // std dev = 3.930, 128.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return -0.18741378271361933;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1375862172863805;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.1227771222908245;  // std dev = 0.462, 1,403.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.04060418494024778;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.019724664541007617;  // std dev = 3.871, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return 0.011191598144088391;  // std dev = 3.666, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11797696006625942;  // std dev = 0.468, 1,380.000 (wgt'ed) examples reached here.  /* #neg=934 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03393737208806842;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.05036447119578285;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.012833396287970613;  // std dev = 3.881, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.11343704696155911;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09472645088532382;  // std dev = 0.466, 1,395.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.05505725727138048;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0239145512104368;  // std dev = 3.852, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.008775989250882944;  // std dev = 3.660, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07320264618795905;  // std dev = 0.465, 1,415.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.017649265597943574;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.05612771047728442;  // std dev = 1.256, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.017979484558034296;  // std dev = 5.144, 190.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return -0.20287672151243322;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.10061870348117664;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.07765244054651592;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.06226006103604781;  // std dev = 16.925, 1,321.000 (wgt'ed) examples reached here.  /* #neg=901 #pos=420 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.01555814767414252;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.031743543346579244;  // std dev = 3.821, 96.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=18 */
%   | | | else return 0.00736732749994502;  // std dev = 3.658, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06746877121502515;  // std dev = 0.471, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else return 0.04872114428824324;  // std dev = 0.465, 1,368.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.05735163701119321;  // std dev = 0.299, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.02390489991028666;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.01070151637352098;  // std dev = 5.153, 192.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03887047052903121;  // std dev = 0.465, 1,409.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.012942354232262105;  // std dev = 3.647, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.0486214608170892;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.139331165751741;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.005774633449022527;  // std dev = 3.894, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.009151875551270661;  // std dev = 0.440, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | | else return 0.031040085011875947;  // std dev = 0.465, 1,367.000 (wgt'ed) examples reached here.  /* #neg=934 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.0031311186073894517;  // std dev = 3.661, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return 0.11202578639266521;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 5.772342120299768E-4;  // std dev = 3.883, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.10265603147170133;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.547', 'seconds']
Refined model CLL: -0.475065


******************************************
Best model found
******************************************
Results 

CLL : -0.675997 

AUC ROC : 0.616226 

AUC PR : 0.636819 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 25.843 

Total Inference Time : 1.34743070602417 

Total revision time: 30.396318433761596
Best scored revision CLL: -0.475065


Results 

CLL : -0.675997 

AUC ROC : 0.616226 

AUC PR : 0.636819 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 30.421443698883056 

Total Inference Time : 1.34743070602417 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.752
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11460351721530632;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09210948752888284;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07318345847215395;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.057634348439473126;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.045085934115190816;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.035092443397827175;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.404', 'seconds']
Parameter learned model CLL:-0.627637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [19.926, 1, 632]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [-1.0503675224279742e-15, 0.23355570934255973]}
{'': [1.853589745461131e-15, 0.23355570934256867]}
{'': [9.267948727305654e-16, 0.23355570934254272]}
{'': [2.934850430313457e-16, 0.2335557093425736]}
{'': [-4.633974363652827e-17, 0.23355570934255332]}
{'': [2.703151712130816e-16, 0.23355570934257525]}
{'': [-2.703151712130816e-17, 0.23355570934256772]}
{'': [-1.5832745742480493e-16, 0.2335557093425776]}
{'': [5.0201388939572296e-17, 0.23355570934255943]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 63.625
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3058688212228416;  // std dev = 3.532, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2.444, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.07061332026691819;  // std dev = 3.295, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.13497714535974895;  // std dev = 1.446, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2533396084457329;  // std dev = 3.531, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2.445, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.15171074486703773;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04158143204570116;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713772;  // std dev = 3.527, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12806826918592384;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03595871392802752;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11706362495124976;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.15611947265725945;  // std dev = 3.526, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1866618425598685;  // std dev = 2.450, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1063915232587506;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.030967932100820536;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.716037138639629;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.26990561544960934;  // std dev = 0.105, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46603713863962914;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.09171281431531109;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.1274868442089731;  // std dev = 4.294, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.045946644909533756;  // std dev = 3.578, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.026573528537136713;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07429025953146699;  // std dev = 0.484, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08678832881787876;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11792812319138309;  // std dev = 2.453, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07856705645208245;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02273114423100811;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02262509526215859;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05837044867180825;  // std dev = 0.484, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06513008526260095;  // std dev = 3.521, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08991913325694934;  // std dev = 2.454, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06336830451227943;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.019391611969883513;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019300383877583146;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6683019561445077;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.313150427187646;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.4183019561445076;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.043389016522170996;  // std dev = 18.585, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.05507344329477026;  // std dev = 4.292, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.027828787124600456;  // std dev = 3.574, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.016426015242758024;  // std dev = 2.964, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.1214638286979364;  // std dev = 1.447, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3202329667286048;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03369410537347138;  // std dev = 18.584, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.04138721471609292;  // std dev = 4.292, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.04502657138218943;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.013951914094611268;  // std dev = 2.964, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01314413321522272;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.259', 'seconds']
Refined model CLL: -0.617158


******************************************
Best model found
******************************************
Results 

CLL : -0.590114 

AUC ROC : 0.636299 

AUC PR : 0.576766 

Precision : 0.832461 

Recall : 0.210132 

F1 : 0.335561 

Total Learning Time : 63.625 

Total Inference Time : 1.3225932121276855 

Total revision time: 67.66804828834533
Best scored revision CLL: -0.617158


Results 

CLL : -0.590114 

AUC ROC : 0.636299 

AUC PR : 0.576766 

Precision : 0.832461 

Recall : 0.210132 

F1 : 0.335561 

Total Learning Time : 67.69317355346679 

Total Inference Time : 1.3225932121276855 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.312
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15608333952704592;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.12083487756737883;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0924698618250928;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.07024281341416025;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05311363022664483;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.04004756889870338;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.400', 'seconds']
Parameter learned model CLL:-0.650109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.48e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 82], 'false': [15.548, 500, 468]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [8.665155314147563e-16, 0.2497267946178503]}
{'': [1.4730764034050857e-15, 0.24972679461786704]}
{'': [1.2997732971221344e-16, 0.2497267946178606]}
{'': [-3.4660621256590254e-16, 0.24972679461785535]}
{'': [-5.415722071342227e-17, 0.24972679461785033]}
{'': [-1.408087738548979e-16, 0.2497267946178522]}
{'': [2.166288828536891e-17, 0.24972679461784802]}
{'': [-5.144935967775116e-17, 0.24972679461785843]}
{'': [4.06179155350667e-17, 0.24972679461785577]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 27.741
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2849765791485283;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.482811302773096;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.43831522268118245;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23471588815993344;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.056500104930256576;  // std dev = 2.083, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.07481271282152424;  // std dev = 3.365, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.25305643964275626;  // std dev = 12.596, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.026441334918466532;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.03085497192017116;  // std dev = 3.261, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   | | | else return 0.37898847847243955;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.18618176610170237;  // std dev = 0.494, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.02183750159344586;  // std dev = 1.192, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09164262939876927;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012287199930136982;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340944;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1320580946222698;  // std dev = 0.495, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3033841745435964;  // std dev = 0.915, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.22919506306404053;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.17392191107241345;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04314159878344516;  // std dev = 2.942, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.06266747597857944;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.003179937544914168;  // std dev = 3.138, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09980278889526076;  // std dev = 0.495, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.2302613873961081;  // std dev = 0.915, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.17417942145904702;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.12342280928142228;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04277722398617655;  // std dev = 2.937, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05316924897927165;  // std dev = 4.182, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 2.248421550890086E-4;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0750941008924883;  // std dev = 0.495, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1821531414114708;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.13252805826750783;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1351908522744082;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.026735517646470933;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.006623892212495536;  // std dev = 3.134, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0498428055031831;  // std dev = 4.181, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4513966756827048;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.23674791204740406;  // std dev = 2.375, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.24329351392596552;  // std dev = 1.437, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.06683577285678897;  // std dev = 3.206, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.05656036949273204;  // std dev = 3.062, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.05809243962582211;  // std dev = 3.378, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.07455769914417015;  // std dev = 12.593, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | | else return 0.011954192600410222;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.24460105055431733;  // std dev = 2.198, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.2666676633328797;  // std dev = 1.208, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.30228345466349915;  // std dev = 1.441, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.07490358979832994;  // std dev = 3.205, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.058521916504840836;  // std dev = 2.843, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.0366619490617236;  // std dev = 3.183, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.0559690123228036;  // std dev = 12.593, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | | else return 0.010175139512578903;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.669', 'seconds']
Refined model CLL: -0.599125


******************************************
Best model found
******************************************
Results 

CLL : -0.651878 

AUC ROC : 0.620426 

AUC PR : 0.555531 

Precision : 0.375818 

Recall : 0.93109 

F1 : 0.535494 

Total Learning Time : 27.741 

Total Inference Time : 1.1015925407409668 

Total revision time: 30.995755937576295
Best scored revision CLL: -0.599125


Results 

CLL : -0.651878 

AUC ROC : 0.620426 

AUC PR : 0.555531 

Precision : 0.375818 

Recall : 0.93109 

F1 : 0.535494 

Total Learning Time : 31.020881202697755 

Total Inference Time : 1.1015925407409668 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.044
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.293', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 47.061
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3018764347368976;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30090639731156066;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23763375697696634;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.22883557309838967;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18290394578346572;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1790302565924964;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13808828228734427;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.13542730130284078;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10193931287716791;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0020451882239722694;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11000060452337293;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07526521169835597;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07562008096373789;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025843286692854737;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.09076926035656933;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05727594066188206;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0016844295027274778;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08355889312927847;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022653328730364527;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06853628283484228;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041469072279881336;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.0198193374130048;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007593785208225881;  // std dev = 3.072, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 7.137965988947496E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.268', 'seconds']
Refined model CLL: -0.62194


******************************************
Best model found
******************************************
Results 

CLL : -0.658905 

AUC ROC : 0.555747 

AUC PR : 0.427987 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 47.061 

Total Inference Time : 1.1119341850280762 

Total revision time: 49.94843934059143
Best scored revision CLL: -0.62194


Results 

CLL : -0.658905 

AUC ROC : 0.555747 

AUC PR : 0.427987 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.97584674835205 

Total Inference Time : 1.1119341850280762 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.053
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.194', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 46.019
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22171737779321607;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2531325933398253;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14102718021002747;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16161242882722296;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1950484432296957;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37859676387835556;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02859676387835554;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.23511880422126058;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1039736483004662;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13645321309008912;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.17309669016406795;  // std dev = 1.816, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.34922083399377135;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.021465612914715382;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.26032453521160415;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07748710597423218;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10487143825313525;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1490329270137191;  // std dev = 1.813, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.05015211051364887;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.059763223584875;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06535903411668016;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09535514650172666;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16130960713341475;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.038313764629344514;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03607067682857983;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.24783253804124405;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.13101183367109082;  // std dev = 1.614, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04324442293933371;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06386843351961931;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.14065919492970774;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.029181472682140188;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02745830695615581;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.473', 'seconds']
Refined model CLL: -0.666962


******************************************
Best model found
******************************************
Results 

CLL : -0.75567 

AUC ROC : 0.537363 

AUC PR : 0.346217 

Precision : 0.35429 

Recall : 0.955922 

F1 : 0.516976 

Total Learning Time : 46.019 

Total Inference Time : 1.1956920623779297 

Total revision time: 49.097531291961666
Best scored revision CLL: -0.666962


Results 

CLL : -0.75567 

AUC ROC : 0.537363 

AUC PR : 0.346217 

Precision : 0.35429 

Recall : 0.955922 

F1 : 0.516976 

Total Learning Time : 49.124938699722286 

Total Inference Time : 1.1956920623779297 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.676
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.192633678910676;  // std dev = 19.664, 1,737.000 (wgt'ed) examples reached here.  /* #neg=1,156 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.159633384368925;  // std dev = 19.780, 1,779.000 (wgt'ed) examples reached here.  /* #neg=1,198 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13697322917962743;  // std dev = 19.769, 1,775.000 (wgt'ed) examples reached here.  /* #neg=1,194 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11869438572556001;  // std dev = 19.714, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10025244371395643;  // std dev = 19.684, 1,744.000 (wgt'ed) examples reached here.  /* #neg=1,163 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07977707568697631;  // std dev = 19.714, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07298587438578262;  // std dev = 19.589, 1,711.000 (wgt'ed) examples reached here.  /* #neg=1,130 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05907164178961388;  // std dev = 19.580, 1,708.000 (wgt'ed) examples reached here.  /* #neg=1,127 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03768332509323194;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.030758735144596636;  // std dev = 19.703, 1,751.000 (wgt'ed) examples reached here.  /* #neg=1,170 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.187', 'seconds']
Parameter learned model CLL:-0.535752 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.664, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.78, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.769, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.714, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.684, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.714, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.589, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.58, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.703, 1, 581]}]
{'': [nan, 0.2226046999687312]}
{'': [nan, 0.21992826811835386]}
{'': [nan, 0.22018297956754823]}
{'': [nan, 0.22145729336614]}
{'': [nan, 0.22215847519149629]}
{'': [nan, 0.22145729336613204]}
{'': [nan, 0.22426141435024002]}
{'': [nan, 0.22445243214191368]}
{'': [nan, 0.22139355596950144]}
{'': [nan, 0.2217122564539237]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 25.957
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21812251502024713;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.053270886319024574;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.013321348892615825;  // std dev = 3.900, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.1555572078340156;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return 0.16280358464560982;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.13179583270762532;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.19594752403954577;  // std dev = 18.080, 1,408.000 (wgt'ed) examples reached here.  /* #neg=892 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.04256609814408704;  // std dev = 3.609, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.04348041348382034;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.1407883645088475;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.019273064802578285;  // std dev = 3.872, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16622808561384023;  // std dev = 0.482, 1,490.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.03944849862541778;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.029963960466348635;  // std dev = 3.621, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return 0.02052037469661845;  // std dev = 3.867, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1365907555798422;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.05753754300354942;  // std dev = 3.551, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.023516714602815462;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.13870995512724232;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.010637393463764732;  // std dev = 3.883, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2539655134717173;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08401060313821083;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.10135239433324697;  // std dev = 0.478, 1,494.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03634286989485045;  // std dev = 3.600, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.051063589007727915;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.011069686804114407;  // std dev = 3.912, 124.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=18 */
%   | | | else return -0.12678765353239085;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08258195307276082;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.046653119953137;  // std dev = 0.305, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.023181245208256037;  // std dev = 3.623, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.0054669650165713735;  // std dev = 3.876, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.024036047353198337;  // std dev = 3.231, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return -0.0643829099734499;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.07159339605049761;  // std dev = 0.480, 1,467.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0411202581438883;  // std dev = 3.571, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.026559073692325172;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.008277302935589474;  // std dev = 3.873, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.11787168388586576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.11798938746362193;  // std dev = 1.306, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.047447411573829264;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.04685315276006194;  // std dev = 0.477, 1,508.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.05452722194513017;  // std dev = 0.299, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.008864031361164246;  // std dev = 3.868, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.009334921136288575;  // std dev = 3.671, 108.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08922174453806711;  // std dev = 0.482, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | else return 0.04690129034759539;  // std dev = 0.480, 1,466.000 (wgt'ed) examples reached here.  /* #neg=937 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.009353645147620644;  // std dev = 3.636, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.10933072672326416;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.008433197113494172;  // std dev = 3.860, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.10067992249552114;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.036280643686164425;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04040849745619399;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.00435466809353544;  // std dev = 3.870, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return 8.777232830350052E-4;  // std dev = 3.649, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.804', 'seconds']
Refined model CLL: -0.528008


******************************************
Best model found
******************************************
Results 

CLL : -0.728874 

AUC ROC : 0.550794 

AUC PR : 0.500987 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 25.957 

Total Inference Time : 1.332909107208252 

Total revision time: 29.89104138183594
Best scored revision CLL: -0.528008


Results 

CLL : -0.728874 

AUC ROC : 0.550794 

AUC PR : 0.500987 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 29.91844878959656 

Total Inference Time : 1.332909107208252 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.336
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.247', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 66.732
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497723;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556042;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332082;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084445;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.183223242635976;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.1695469424352294;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3725593246983209;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08057112543682675;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.1012908076105482;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06362839472159043;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.047319506613452376;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.126374527016667;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6233825423247468;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3469892734327296;  // std dev = 0.176, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.39639805912259674;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.046764757714173495;  // std dev = 19.646, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05740368757175235;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.02641561393003841;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03733713084753192;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.02071856947045232;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08189972473799662;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03577772367201456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014702350622810887;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.539', 'seconds']
Refined model CLL: -0.667635


******************************************
Best model found
******************************************
Results 

CLL : -0.643391 

AUC ROC : 0.567325 

AUC PR : 0.419677 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 66.732 

Total Inference Time : 1.2848670482635498 

Total revision time: 70.14814702796936
Best scored revision CLL: -0.667635


Results 

CLL : -0.643391 

AUC ROC : 0.567325 

AUC PR : 0.419677 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 70.17555443572998 

Total Inference Time : 1.2848670482635498 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.101
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.204', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 28.837
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3126391982731987;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5794119437364615;  // std dev = 0.320, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03803948203831724;  // std dev = 3.411, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.25639351793986287;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.3686755317146412;  // std dev = 1.569, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.026441334918466543;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.018192328705489667;  // std dev = 3.139, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07848058847685298;  // std dev = 4.202, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.49728864497904485;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18574455973342197;  // std dev = 13.963, 808.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=472 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2613368148272762;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3634510702525692;  // std dev = 0.135, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.18988424101568085;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05833304417748358;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.00779611826654324;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07154545515204899;  // std dev = 4.197, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16919153736079892;  // std dev = 2.655, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.0991716450003223;  // std dev = 2.126, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.15146956856701282;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.21588980341281097;  // std dev = 1.557, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.13313219320103223;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05558654748461301;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06110505839681378;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0038711334239901183;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4824607944829032;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.22267196389493818;  // std dev = 2.299, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2915433934565273;  // std dev = 1.677, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.09457622943246287;  // std dev = 3.216, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.11826576952069724;  // std dev = 13.394, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.19939752550357379;  // std dev = 1.564, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.051517934972382155;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.003298749685594879;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3652506390200804;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.17052529662949867;  // std dev = 2.292, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.22348458749927214;  // std dev = 1.671, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07682541631393569;  // std dev = 3.216, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.06323233968663551;  // std dev = 3.058, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.02969192014318202;  // std dev = 3.329, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.09970994248237948;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.013038953097730503;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.41981854237441674;  // std dev = 0.196, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25037374608124624;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.02562377739146377;  // std dev = 2.847, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.05063325471695522;  // std dev = 3.344, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.06485747340497622;  // std dev = 13.379, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.14491493250680948;  // std dev = 1.572, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.06309965163306057;  // std dev = 3.099, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.011107485459215239;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4523134038570081;  // std dev = 1.327, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.42364088073656203;  // std dev = 0.426, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.29987658838545134;  // std dev = 1.058, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.07420161705324857;  // std dev = 3.046, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.050161096010128255;  // std dev = 13.276, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.09830959091298089;  // std dev = 1.562, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.016791587438525372;  // std dev = 3.124, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04279236657180357;  // std dev = 4.185, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.330', 'seconds']
Refined model CLL: -0.619324


******************************************
Best model found
******************************************
Results 

CLL : -0.706713 

AUC ROC : 0.557523 

AUC PR : 0.407093 

Precision : 0.376265 

Recall : 0.934333 

F1 : 0.536483 

Total Learning Time : 28.837 

Total Inference Time : 1.165287733078003 

Total revision time: 31.868728197097777
Best scored revision CLL: -0.619324


Results 

CLL : -0.706713 

AUC ROC : 0.557523 

AUC PR : 0.407093 

Precision : 0.376265 

Recall : 0.934333 

F1 : 0.536483 

Total Learning Time : 31.896135604858397 

Total Inference Time : 1.165287733078003 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.988
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.207', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 47.695
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3974484051691344;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3717678476909069;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.39107968864188797;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30040266398009907;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30670965566297825;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23718535411670655;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2132671793519844;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18249624986711133;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.199064245151517;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13637796680479367;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002239821746621479;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09361024488001457;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.14942131941701128;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10262387362407456;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08158892117033024;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002924834380481179;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1197093301011521;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07638447391265467;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07568113317161662;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025644747591500277;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08438095992096853;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0562010538812316;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0016753806916325292;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0837536976450934;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022478960391661426;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0690924774388341;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041349689690013965;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.06774852053469209;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.001969923006175194;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0020238280550721422;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.503', 'seconds']
Refined model CLL: -0.621882


******************************************
Best model found
******************************************
Results 

CLL : -0.659235 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 47.695 

Total Inference Time : 1.08689284324646 

Total revision time: 50.508294494628906
Best scored revision CLL: -0.621882


Results 

CLL : -0.659235 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 50.5315791683197 

Total Inference Time : 1.08689284324646 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.097
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.235', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 40.462
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22171737779321607;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2531325933398253;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14102718021002747;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16161242882722285;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1950484432296957;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37859676387835556;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02859676387835554;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.23511880422126058;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.37070202703625027;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.23511880422126058;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.10303560031683325;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | | else return 0.15715711387343007;  // std dev = 2.561, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2862034863660845;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.021465612914715382;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1779550618433961;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07771630798809821;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1124961749785695;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1437204244111643;  // std dev = 1.821, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.05364988714669828;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.21753930012972394;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.016106837037364055;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1363260287152275;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.058303307247552054;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08713899252385923;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1176196861361952;  // std dev = 1.828, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.04102264609421903;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.24707036664860685;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.16355934945004738;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13174036537698294;  // std dev = 1.396, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04317176137782696;  // std dev = 17.027, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06814124737951224;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11289109572286422;  // std dev = 1.815, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return -7.403515008760274E-4;  // std dev = 1.814, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.479', 'seconds']
Refined model CLL: -0.665598


******************************************
Best model found
******************************************
Results 

CLL : -0.75769 

AUC ROC : 0.536032 

AUC PR : 0.345283 

Precision : 0.353512 

Recall : 0.956812 

F1 : 0.516276 

Total Learning Time : 40.462 

Total Inference Time : 1.194624423980713 

Total revision time: 43.530199512481694
Best scored revision CLL: -0.665598


Results 

CLL : -0.75769 

AUC ROC : 0.536032 

AUC PR : 0.345283 

Precision : 0.353512 

Recall : 0.956812 

F1 : 0.516276 

Total Learning Time : 43.55348418617249 

Total Inference Time : 1.194624423980713 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.685
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18976993966571737;  // std dev = 19.706, 1,752.000 (wgt'ed) examples reached here.  /* #neg=1,171 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1591159705659922;  // std dev = 19.794, 1,784.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14216983426815166;  // std dev = 19.700, 1,750.000 (wgt'ed) examples reached here.  /* #neg=1,169 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12990719271267348;  // std dev = 19.544, 1,696.000 (wgt'ed) examples reached here.  /* #neg=1,115 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09620645206647292;  // std dev = 19.709, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08267341262852004;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06385008017543414;  // std dev = 19.689, 1,746.000 (wgt'ed) examples reached here.  /* #neg=1,165 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05092322945949814;  // std dev = 19.692, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.032699088554906754;  // std dev = 19.807, 1,789.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04069754146063657;  // std dev = 19.589, 1,711.000 (wgt'ed) examples reached here.  /* #neg=1,130 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.148', 'seconds']
Parameter learned model CLL:-0.535707 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.706, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.794, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.7, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.544, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.709, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.689, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.692, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.807, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.589, 1, 581]}]
{'': [nan, 0.22164851389669327]}
{'': [nan, 0.21960997355668502]}
{'': [nan, 0.22177600000000997]}
{'': [nan, 0.22521603272963517]}
{'': [nan, 0.2215847724494318]}
{'': [nan, 0.22298715007970674]}
{'': [nan, 0.22203098163172785]}
{'': [nan, 0.22196723535218327]}
{'': [nan, 0.21929179655437928]}
{'': [nan, 0.22426141435022806]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 29.568
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.2152917922423695;  // std dev = 3.105, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.22348042681221456;  // std dev = 0.482, 1,448.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.046384229217159435;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.005689918706069744;  // std dev = 3.917, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.17077937277704155;  // std dev = 3.144, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return 0.08320549123154841;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.18711212376496109;  // std dev = 0.480, 1,476.000 (wgt'ed) examples reached here.  /* #neg=947 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.05493992178127877;  // std dev = 3.572, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.031569359545338155;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.1425451074248424;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.018474543805451295;  // std dev = 3.885, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.31567456379791703;  // std dev = 1.211, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.16549599569062493;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.15600838166584682;  // std dev = 0.479, 1,488.000 (wgt'ed) examples reached here.  /* #neg=959 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03358713380723938;  // std dev = 3.624, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.05786160119944054;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.010105719608385078;  // std dev = 3.880, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.1250765409181918;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.15636706878895656;  // std dev = 0.484, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.0698674823180795;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.12783759439778666;  // std dev = 18.266, 1,460.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=516 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03576730427105907;  // std dev = 3.610, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.03253526965251107;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.14552517696438375;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.01122703251923389;  // std dev = 3.873, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0966017868780041;  // std dev = 0.475, 1,579.000 (wgt'ed) examples reached here.  /* #neg=1,034 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.007362927189435385;  // std dev = 0.349, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.01961559630883489;  // std dev = 3.852, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.004940281892043054;  // std dev = 3.671, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.12329272567334164;  // std dev = 3.001, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0.0557876854252786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08743663213569393;  // std dev = 0.478, 1,493.000 (wgt'ed) examples reached here.  /* #neg=964 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.046258677564138075;  // std dev = 0.304, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.025695435251548295;  // std dev = 3.846, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
%   | | | else return 0.0078049288536325085;  // std dev = 3.649, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E), haswordtitle(G, D) )
%   | | | then return 0.33971233660240524;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.016835801956944157;  // std dev = 3.105, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | else return 0.08102189669196577;  // std dev = 0.481, 1,448.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.043114937274152575;  // std dev = 3.569, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.051918272424607934;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004367635814717619;  // std dev = 3.886, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.11121511953786538;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06170513564711158;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.017544573564001107;  // std dev = 3.607, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.08944065039196282;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.1189550746554352;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.016136544386812775;  // std dev = 3.854, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05239889157303039;  // std dev = 0.482, 1,486.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.005627439201209632;  // std dev = 3.649, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.08219844687284174;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.0017047900947091026;  // std dev = 1.293, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.0036879407898945888;  // std dev = 3.654, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.0270874196533138;  // std dev = 3.095, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return -0.11649180303325908;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.002265077093198789;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.039712236725607;  // std dev = 18.091, 1,411.000 (wgt'ed) examples reached here.  /* #neg=895 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.03415609136522457;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.04999563782000619;  // std dev = 1.338, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1314756306118077;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0027199773108921507;  // std dev = 3.860, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.426', 'seconds']
Refined model CLL: -0.528993


******************************************
Best model found
******************************************
Results 

CLL : -0.726991 

AUC ROC : 0.549251 

AUC PR : 0.498882 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 29.568 

Total Inference Time : 1.4430913925170898 

Total revision time: 33.54825685310364
Best scored revision CLL: -0.528993


Results 

CLL : -0.726991 

AUC ROC : 0.549251 

AUC PR : 0.498882 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 33.571541526794434 

Total Inference Time : 1.4430913925170898 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.303
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.151', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 74.879
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977226;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.29201435143743193;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556036;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332089;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084447;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1832232426359761;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03906562960272463;  // std dev = 3.283, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.055089405090842335;  // std dev = 1.434, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230904723488833;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.072138352682023;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1515536609355913;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07126183280449044;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022830113728013288;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06365407449537304;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05375781042470198;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11512733043548659;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05724902090387317;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01947736064490914;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04891958895439685;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.03450189330266432;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09688925134737329;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.04566191093011979;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016578045012117144;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03742942642087201;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.025132501446958846;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07439238230775497;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03621520637025726;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014081971828220796;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.526', 'seconds']
Refined model CLL: -0.670013


******************************************
Best model found
******************************************
Results 

CLL : -0.64335 

AUC ROC : 0.564309 

AUC PR : 0.421966 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 74.879 

Total Inference Time : 1.3803412914276123 

Total revision time: 78.3497930355072
Best scored revision CLL: -0.670013


Results 

CLL : -0.64335 

AUC ROC : 0.564309 

AUC PR : 0.421966 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 78.373077709198 

Total Inference Time : 1.3803412914276123 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.078
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.178', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 29.959
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137362;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.6790527576999382;  // std dev = 0.185, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10763229578059454;  // std dev = 3.428, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12337331648313138;  // std dev = 3.384, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3407618475330498;  // std dev = 13.065, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24376231818084207;  // std dev = 0.490, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.351539533166898;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4327461406810696;  // std dev = 1.306, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1557002943717436;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.083737008556944;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.44513324933442205;  // std dev = 0.267, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.02362739017020253;  // std dev = 3.403, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.0439054724722164;  // std dev = 3.365, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.20981269670145983;  // std dev = 13.055, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.12582628229372092;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07056710107910391;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012287199930136963;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340937;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(A, E), haswordauthor(G, D) )
%   | | | then return 0.4033524412292114;  // std dev = 1.83e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.139116132870699;  // std dev = 13.885, 809.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=473 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2249281658618711;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3506400816025122;  // std dev = 0.215, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.017612321080728414;  // std dev = 1.177, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08120446769237703;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.05855866946674006;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250082;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.15701516512672495;  // std dev = 2.623, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.10797883189898139;  // std dev = 2.072, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11275095614251637;  // std dev = 13.404, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.20705269571390233;  // std dev = 1.565, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.057620829807198994;  // std dev = 0.454, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.00625361102286168;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.05805773184466832;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.1297641494905738;  // std dev = 2.611, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.132706675534952;  // std dev = 2.096, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08557813248276949;  // std dev = 13.376, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.18071991769194568;  // std dev = 1.577, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.19026308512821385;  // std dev = 0.105, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.07691388910240575;  // std dev = 4.271, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0705527847646529;  // std dev = 4.261, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22112818630935824;  // std dev = 0.114, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.2617538925110429;  // std dev = 0.124, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.05627590090231131;  // std dev = 13.770, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | | else return 0.1558159426073362;  // std dev = 1.811, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.14269189621303996;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.01884078838848274;  // std dev = 2.892, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04166901768119157;  // std dev = 4.152, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.010429850914421914;  // std dev = 3.112, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.23545396542236105;  // std dev = 2.223, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.23433510450443906;  // std dev = 1.095, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return -0.023832860119158406;  // std dev = 0.431, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.050277715421547915;  // std dev = 13.376, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.11360038309113335;  // std dev = 1.577, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.01076120054779745;  // std dev = 3.114, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03682456662501513;  // std dev = 4.153, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.176', 'seconds']
Refined model CLL: -0.629866


******************************************
Best model found
******************************************
Results 

CLL : -0.704749 

AUC ROC : 0.554821 

AUC PR : 0.404153 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 29.959 

Total Inference Time : 1.3448655605316162 

Total revision time: 33.16678744506836
Best scored revision CLL: -0.629866


Results 

CLL : -0.704749 

AUC ROC : 0.554821 

AUC PR : 0.404153 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 33.190072118759154 

Total Inference Time : 1.3448655605316162 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.008
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.233', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 48.322
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.433906510857088;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.46341493136240836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3676119673930714;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520728;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0055561304250918405;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3910064939368783;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30040272227663645;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917126;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004881411392881223;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30664252570447526;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2371853978320999;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10684900305409939;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24387427529249903;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1816264674752957;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09707620226623424;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18327419126982888;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13771028241954714;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08889684111111595;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033008012454352645;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1454835263591456;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10296276923609339;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0018962540691505954;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09531655351260526;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028949568237196313;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10964727319931625;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07529735548813905;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07824603205654068;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025382258678852574;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025772264296295335;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.0909887349847472;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05724188155488287;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.001878914833010413;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.07946470443859721;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0022590956817512475;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07048740083993024;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041161317859664565;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07017835143908285;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019797547543776548;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025692398822281964;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.379', 'seconds']
Refined model CLL: -0.621892


******************************************
Best model found
******************************************
Results 

CLL : -0.659011 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.322 

Total Inference Time : 1.2769393920898438 

Total revision time: 51.293304758071905
Best scored revision CLL: -0.621892


Results 

CLL : -0.659011 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 56.418927984237676 

Total Inference Time : 1.2769393920898438 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.141
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.208', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 46.128
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22171737779321607;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2531325933398254;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14102718021002747;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1616124288272229;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1950484432296957;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37859676387835556;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02859676387835554;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.23511880422126058;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1039736483004662;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13645321309008912;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.17309669016406784;  // std dev = 1.816, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2843598552650772;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.10182609367542732;  // std dev = 1.610, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07801145413844374;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10487143825313527;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.18250262308545917;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05015211051364887;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3272924883641372;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.16230859428844135;  // std dev = 1.662, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1054135647941321;  // std dev = 2.169, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.057253169976125354;  // std dev = 17.118, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.15683269906296932;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.038313764629344514;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.24714518211172357;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.12199601906714837;  // std dev = 1.662, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.043001484360048005;  // std dev = 17.036, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06902021291944371;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.13719108994736112;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.029181472682140188;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.865', 'seconds']
Refined model CLL: -0.666428


******************************************
Best model found
******************************************
Results 

CLL : -0.756167 

AUC ROC : 0.536352 

AUC PR : 0.343846 

Precision : 0.354232 

Recall : 0.955922 

F1 : 0.516913 

Total Learning Time : 46.128 

Total Inference Time : 1.3281779289245605 

Total revision time: 49.366848176956175
Best scored revision CLL: -0.666428


Results 

CLL : -0.756167 

AUC ROC : 0.536352 

AUC PR : 0.343846 

Precision : 0.354232 

Recall : 0.955922 

F1 : 0.516913 

Total Learning Time : 54.49247140312195 

Total Inference Time : 1.3281779289245605 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.573
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18920306615363838;  // std dev = 19.714, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17589088708038175;  // std dev = 19.547, 1,697.000 (wgt'ed) examples reached here.  /* #neg=1,116 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1370296632791353;  // std dev = 19.739, 1,764.000 (wgt'ed) examples reached here.  /* #neg=1,183 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11615465575635212;  // std dev = 19.720, 1,757.000 (wgt'ed) examples reached here.  /* #neg=1,176 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10128962242719311;  // std dev = 19.641, 1,729.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08144606354763033;  // std dev = 19.658, 1,735.000 (wgt'ed) examples reached here.  /* #neg=1,154 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06285917563956736;  // std dev = 19.700, 1,750.000 (wgt'ed) examples reached here.  /* #neg=1,169 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04712252460966701;  // std dev = 19.748, 1,767.000 (wgt'ed) examples reached here.  /* #neg=1,186 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04864955262837791;  // std dev = 19.583, 1,709.000 (wgt'ed) examples reached here.  /* #neg=1,128 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03771097832941808;  // std dev = 19.594, 1,713.000 (wgt'ed) examples reached here.  /* #neg=1,132 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.145', 'seconds']
Parameter learned model CLL:-0.536652 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.714, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.547, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.739, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.72, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.641, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.658, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.7, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.748, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.583, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.594, 1, 581]}]
{'': [nan, 0.22145729336611075]}
{'': [nan, 0.22515243198421184]}
{'': [nan, 0.22088372385989966]}
{'': [nan, 0.22132982016159042]}
{'': [nan, 0.2231146224327604]}
{'': [nan, 0.22273218779327839]}
{'': [nan, 0.2217760000000053]}
{'': [nan, 0.22069257522284352]}
{'': [nan, 0.22438876412728223]}
{'': [nan, 0.22413404721763122]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 51.012
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21158602978173824;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0339731109236882;  // std dev = 3.631, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.017440970497742472;  // std dev = 3.890, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2589642713378623;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.1637261760997675;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.1871022156592366;  // std dev = 0.479, 1,483.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.011064037373971823;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.04159442220197976;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0.04108190199064696;  // std dev = 5.103, 172.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16434457960123017;  // std dev = 0.481, 1,506.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.015369464824031794;  // std dev = 3.657, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.10087459093720738;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.00981769084563901;  // std dev = 3.892, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.1491254090627926;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1294662876078485;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.03334214774703368;  // std dev = 3.616, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.05249986390213065;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.005181492410366715;  // std dev = 3.896, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.1311757838679637;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10587707100296626;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.00992211419508079;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.015464977401348648;  // std dev = 3.867, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.008166478810182325;  // std dev = 3.661, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07826788759280391;  // std dev = 0.475, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.03139991138002643;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.08650504327057;  // std dev = 18.242, 1,453.000 (wgt'ed) examples reached here.  /* #neg=937 #pos=516 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.017944424199749908;  // std dev = 3.634, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.07370061700402156;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.07828842048313946;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.01399826671960022;  // std dev = 3.707, 115.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06429846973200423;  // std dev = 0.477, 1,558.000 (wgt'ed) examples reached here.  /* #neg=1,013 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.043905121578098026;  // std dev = 3.572, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.04782277858160136;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.011248380772892709;  // std dev = 3.879, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.11633437940182549;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.437228812289712;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.005822437275179303;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0.06360992610936352;  // std dev = 0.481, 1,458.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.013320320323375028;  // std dev = 3.619, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.1525984396221919;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0058923028582697455;  // std dev = 3.887, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.10227010587020009;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.05078949948202676;  // std dev = 3.095, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.08005718935519597;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.013999823022314289;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.05501535230339665;  // std dev = 18.062, 1,403.000 (wgt'ed) examples reached here.  /* #neg=887 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.03980913136933832;  // std dev = 3.591, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.07702076248795646;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.008905609411707156;  // std dev = 3.892, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
%   | | | else return -0.0963181848068083;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5578694633761541;  // std dev = 7.050, 453.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=396 */
%   | | | else return -0.29090492963078973;  // std dev = 4.139, 872.000 (wgt'ed) examples reached here.  /* #neg=856 #pos=16 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.14840505031928727;  // std dev = 8.340, 279.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=132 */
%   | | | else return 0.03950555207990796;  // std dev = 1.652, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 8.681285777810328E-5;  // std dev = 3.757, 100.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=17 */
%   | | | else return 0.1797616038935681;  // std dev = 1.528, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.5930246612270997;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.08617289076903834;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.374', 'seconds']
Refined model CLL: -0.437159


******************************************
Best model found
******************************************
Results 

CLL : -0.583869 

AUC ROC : 0.838534 

AUC PR : 0.7678 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 51.012 

Total Inference Time : 1.8450045585632324 

Total revision time: 55.334264001846314
Best scored revision CLL: -0.437159


Results 

CLL : -0.583869 

AUC ROC : 0.838534 

AUC PR : 0.7678 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 60.459887228012086 

Total Inference Time : 1.8450045585632324 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.395
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.285', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 61.281
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.2793356173487745;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.16413830416657968;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.22657146233053777;  // std dev = 4.394, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.2453940462363945;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.49689623535773253;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.13138009700353132;  // std dev = 19.650, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17571779856528294;  // std dev = 4.392, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04565218579107922;  // std dev = 3.285, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.07188755709780537;  // std dev = 1.436, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10547824069600742;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09688267820357878;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.19825086185038612;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08767840951939945;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026643141938027713;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08229808833664212;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07311228738995171;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14996449664686082;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03388647637465817;  // std dev = 3.282, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.048689500407643985;  // std dev = 1.434, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.02279178343169341;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.14926725153332449;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3378718498400265;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.06197656979066674;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.07626451245630074;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06301182355970776;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.019444139295243145;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019408793588260285;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048898678432528056;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.028225263414331066;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.10760311743407586;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05040467761994129;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.01654938944959382;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016518895651362407;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5664649690106646;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3994670856976563;  // std dev = 0.228, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2420657573022349;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.03616971019668824;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.043128284783363204;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.02333671670236877;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.014031155061731476;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.390', 'seconds']
Refined model CLL: -0.667545


******************************************
Best model found
******************************************
Results 

CLL : -0.644218 

AUC ROC : 0.567186 

AUC PR : 0.418658 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 61.281 

Total Inference Time : 1.5800538063049316 

Total revision time: 65.07764113044739
Best scored revision CLL: -0.667545


Results 

CLL : -0.644218 

AUC ROC : 0.567186 

AUC PR : 0.418658 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 70.20326435661316 

Total Inference Time : 1.5800538063049316 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.005
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.151', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 34.199
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.6674283310648041;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10890834029897223;  // std dev = 3.434, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12253181265650104;  // std dev = 3.382, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3408865878733577;  // std dev = 13.067, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.024798684113639485;  // std dev = 3.137, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08931411673328132;  // std dev = 4.209, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24375307078421174;  // std dev = 0.490, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.33482407778217244;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4412495338650186;  // std dev = 1.307, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2077903460118149;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07541851145852156;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.10573852861959696;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03157589481661987;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.22376811199542046;  // std dev = 2.692, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.1864486407611265;  // std dev = 13.690, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.25277928323007426;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.40582528435375365;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.17346060285889628;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06321016476376853;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.006408321858427583;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0718271044608526;  // std dev = 4.198, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.3793052185872332;  // std dev = 0.325, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.02301167860257782;  // std dev = 3.386, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.15054726300124371;  // std dev = 13.427, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.24087472728885376;  // std dev = 1.565, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.14164257558800275;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05255757907674789;  // std dev = 2.940, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.06167753354620533;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.003465943833047089;  // std dev = 3.141, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16115594735941507;  // std dev = 2.645, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.10578826253842126;  // std dev = 2.074, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11314269045362046;  // std dev = 13.427, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.18660709833861622;  // std dev = 1.567, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.11830668819426315;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04525738992063015;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05626883946014166;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.005224038116550786;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.46008288324678853;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.22855366749752246;  // std dev = 2.311, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.28111768688970246;  // std dev = 1.618, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08528848241332512;  // std dev = 3.204, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.011240202214887146;  // std dev = 3.279, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.0974366513827389;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.004696017477240024;  // std dev = 3.134, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04804877224464338;  // std dev = 4.185, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3497605574749817;  // std dev = 1.83e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.1750855313485433;  // std dev = 2.304, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.21623821600158624;  // std dev = 1.611, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.06910713508484467;  // std dev = 3.203, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.008539386565889368;  // std dev = 3.279, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07328354365292095;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04044532308542993;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.0051610295978129;  // std dev = 3.145, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0439331526040881;  // std dev = 0.481, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2430911218866973;  // std dev = 0.894, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1502921798300141;  // std dev = 0.938, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.0435732996441053;  // std dev = 4.306, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.21815292948036075;  // std dev = 0.142, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05645213310119954;  // std dev = 4.248, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22680718322178123;  // std dev = 0.124, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.581', 'seconds']
Refined model CLL: -0.626215


******************************************
Best model found
******************************************
Results 

CLL : -0.708788 

AUC ROC : 0.54951 

AUC PR : 0.39849 

Precision : 0.373668 

Recall : 0.923794 

F1 : 0.532104 

Total Learning Time : 34.199 

Total Inference Time : 1.1389880180358887 

Total revision time: 37.08224320793152
Best scored revision CLL: -0.626215


Results 

CLL : -0.708788 

AUC ROC : 0.54951 

AUC PR : 0.39849 

Precision : 0.373668 

Recall : 0.923794 

F1 : 0.532104 

Total Learning Time : 42.20786643409729 

Total Inference Time : 1.1389880180358887 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.26
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.452', 'seconds']
Parameter learned model CLL:-0.554626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [3.7007434154171886e-16, 0.20305555555554874]}
{'': [1.7393494052460785e-15, 0.20305555555554408]}
{'': [5.181040781584064e-16, 0.20305555555556368]}
{'': [1.850371707708594e-17, 0.20305555555556454]}
{'': [-4.625929269271486e-17, 0.20305555555555405]}
{'': [1.6653345369377348e-16, 0.203055555555546]}
{'': [6.013708050052931e-17, 0.2030555555555644]}
{'': [-6.013708050052931e-17, 0.20305555555555183]}
{'': [1.3877787807814457e-17, 0.2030555555555464]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 40.977
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15012155747461325;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1058893024861437;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.014481568333270823;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13011306320755617;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.12198807157795849;  // std dev = 2.125, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10809639487085558;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4101239540460635;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04529626692814972;  // std dev = 1.836, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08984200736586506;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.28606201170580964;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05153285866705698;  // std dev = 1.872, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07381767888181813;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.328921773819566;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.014574470720849105;  // std dev = 1.799, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06007866668079103;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2593136722769568;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.011931534330884236;  // std dev = 1.798, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04852164124362113;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2151954611051144;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.00546858485688716;  // std dev = 1.789, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00188146976764761;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08346016306130004;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03894668703099442;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1975951754520501;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.004599419145541812;  // std dev = 1.771, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07044868402425504;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002286248498433968;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.031108320236372156;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16429419565933115;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.007690370104975755;  // std dev = 1.764, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.0073724999953046115;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 2.174506080352709E-4;  // std dev = 2.920, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.121', 'seconds']
Refined model CLL: -0.539008


******************************************
Best model found
******************************************
Results 

CLL : -0.618048 

AUC ROC : 0.618228 

AUC PR : 0.569646 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 40.977 

Total Inference Time : 1.1832139492034912 

Total revision time: 44.262581836700434
Best scored revision CLL: -0.539008


Results 

CLL : -0.618048 

AUC ROC : 0.618228 

AUC PR : 0.569646 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 44.282431137084956 

Total Inference Time : 1.1832139492034912 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.399
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.528', 'seconds']
Parameter learned model CLL:-0.645914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [-3.4492365813597096e-16, 0.24738315415699694]}
{'': [1.793603022307049e-15, 0.24738315415698806]}
{'': [6.553549504583448e-16, 0.2473831541570005]}
{'': [-2.4144656069517967e-16, 0.24738315415699036]}
{'': [-5.1738548720395646e-17, 0.24738315415699547]}
{'': [2.0695419488158259e-16, 0.2473831541570034]}
{'': [2.5869274360197823e-17, 0.24738315415699816]}
{'': [-1.2503482607428947e-16, 0.24738315415699647]}
{'': [4.527123013034619e-17, 0.24738315415700443]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 39.692
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462534;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5266766974553888;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.05105768803469016;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1725714228453629;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.22324295386072326;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.3038300900527117;  // std dev = 2.685, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.33324199902303153;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1747614807273645;  // std dev = 0.497, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.24556868696279768;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.20966493899822422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10753030962032166;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3604526667012066;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12394982385838375;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.259781330058205;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.12996200802898197;  // std dev = 16.551, 1,108.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=600 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.2678472860901805;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08370165024909026;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37134062634352;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.18928431486532865;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.27618773353473425;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.0988031266564102;  // std dev = 16.475, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.13973712683697276;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.17849956965138156;  // std dev = 1.820, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06459187490147254;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2788791248129155;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17593669850229596;  // std dev = 1.225, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07437855773387865;  // std dev = 16.474, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.10619678192145082;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.18970640827711133;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04954309788973836;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04827790940878247;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05679470890208109;  // std dev = 0.495, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.09625537335413942;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06481260036381171;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.16224401658188725;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03783935290654948;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03685872781414296;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04266018745159411;  // std dev = 0.495, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07880894573260952;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.045121740980955644;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1413806968168796;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.028814464864342377;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.028059558409693243;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.254', 'seconds']
Refined model CLL: -0.630024


******************************************
Best model found
******************************************
Results 

CLL : -0.705019 

AUC ROC : 0.612411 

AUC PR : 0.471454 

Precision : 0.354339 

Recall : 0.956367 

F1 : 0.517092 

Total Learning Time : 39.692 

Total Inference Time : 1.2259745597839355 

Total revision time: 43.22011605834961
Best scored revision CLL: -0.630024


Results 

CLL : -0.705019 

AUC ROC : 0.612411 

AUC PR : 0.471454 

Precision : 0.354339 

Recall : 0.956367 

F1 : 0.517092 

Total Learning Time : 43.23996535873413 

Total Inference Time : 1.2259745597839355 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.236
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15062466325484716;  // std dev = 18.467, 1,648.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.13670524782397955;  // std dev = 18.396, 1,618.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.10964321138086429;  // std dev = 18.497, 1,661.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.09232723054886946;  // std dev = 18.504, 1,664.000 (wgt'ed) examples reached here.  /* #neg=1,182 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07694593487567308;  // std dev = 18.508, 1,666.000 (wgt'ed) examples reached here.  /* #neg=1,184 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.06873618059241247;  // std dev = 18.444, 1,638.000 (wgt'ed) examples reached here.  /* #neg=1,156 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.053834277235166275;  // std dev = 18.478, 1,653.000 (wgt'ed) examples reached here.  /* #neg=1,171 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.043764392913856746;  // std dev = 18.481, 1,654.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.034292379367534424;  // std dev = 18.497, 1,661.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.029289134930946144;  // std dev = 18.476, 1,652.000 (wgt'ed) examples reached here.  /* #neg=1,170 #pos=482 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.379', 'seconds']
Parameter learned model CLL:-0.478305 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.467, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.396, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.497, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.504, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.508, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.444, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.478, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.481, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.497, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.476, 1, 482]}]
{'': [1.4354398702224246e-15, 0.20693367659532663]}
{'': [1.4354398702224247e-16, 0.20915504040605776]}
{'': [1.794299837778031e-15, 0.205978351681677]}
{'': [6.100619448445304e-16, 0.20575854058801207]}
{'': [0.0, 0.20561213681152238]}
{'': [-4.485749594445077e-17, 0.20767158496097243]}
{'': [1.8840148296669324e-16, 0.20656570813519157]}
{'': [4.9343245538895844e-17, 0.20649219436521632]}
{'': [-1.1214373986112693e-16, 0.20597835168169254]}
{'': [4.261462114722823e-17, 0.20663924863251973]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 27.208
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.17179169178023876;  // std dev = 0.464, 1,422.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=446 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.011995088945666216;  // std dev = 3.679, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.006297083247660511;  // std dev = 3.692, 108.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15282259581069244;  // std dev = 0.465, 1,408.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.00998416810129781;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.02562937398703815;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.026458248076235775;  // std dev = 5.152, 188.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12782872514336183;  // std dev = 0.464, 1,421.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04259465120423119;  // std dev = 3.603, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.06668252508645989;  // std dev = 1.340, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.009788943001898306;  // std dev = 3.899, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.14461105524415171;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10549793791817721;  // std dev = 0.463, 1,431.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.02269403947102357;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.006531702500798791;  // std dev = 3.889, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return 0.004188689514683424;  // std dev = 3.684, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.1742642752832423;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1698616121787134;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | else return 0.08788187241799043;  // std dev = 0.463, 1,388.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=433 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.05061901810366862;  // std dev = 3.572, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.05735829659395483;  // std dev = 1.338, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.006587838971490461;  // std dev = 3.902, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.1292431756221505;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.15059191836929076;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13170163950580507;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return 0.06221049971833779;  // std dev = 0.459, 1,432.000 (wgt'ed) examples reached here.  /* #neg=999 #pos=433 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.025661472101460497;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.016883094878289522;  // std dev = 3.876, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return 0.006026333772346848;  // std dev = 3.650, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.13232479369557795;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.028472138323649043;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.06258940115750378;  // std dev = 0.464, 1,378.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=433 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.036004504224477006;  // std dev = 3.607, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.05970457144432133;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.008473167962722166;  // std dev = 3.910, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
%   | | | else return -0.11360644678851686;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06056168432404771;  // std dev = 0.468, 1,377.000 (wgt'ed) examples reached here.  /* #neg=931 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.004614938368106689;  // std dev = 3.664, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return 0.1068660467532061;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.008536256965739184;  // std dev = 3.873, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.1029455977900805;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.12430048535633642;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.010690815055712817;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.104750051449837;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.04138674827060532;  // std dev = 16.943, 1,327.000 (wgt'ed) examples reached here.  /* #neg=907 #pos=420 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.005728838589366452;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.026381931411749944;  // std dev = 1.320, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.038628247364851306;  // std dev = 5.066, 165.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.11138993000274572;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.015379415790050732;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.029351042076689118;  // std dev = 0.464, 1,381.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=433 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.03003003746952312;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03246911359413974;  // std dev = 3.810, 94.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=18 */
%   | | | else return 0.005725931666457994;  // std dev = 3.633, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.741', 'seconds']
Refined model CLL: -0.474553


******************************************
Best model found
******************************************
Results 

CLL : -0.676847 

AUC ROC : 0.61881 

AUC PR : 0.639302 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 27.208 

Total Inference Time : 1.489595651626587 

Total revision time: 31.97864674949646
Best scored revision CLL: -0.474553


Results 

CLL : -0.676847 

AUC ROC : 0.61881 

AUC PR : 0.639302 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 31.99849604988098 

Total Inference Time : 1.489595651626587 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.719
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11460351721530632;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09210948752888284;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07318345847215395;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.057634348439473126;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.045085934115190816;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.035092443397827175;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.480', 'seconds']
Parameter learned model CLL:-0.627637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [19.926, 1, 632]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [-1.0503675224279742e-15, 0.23355570934255973]}
{'': [1.853589745461131e-15, 0.23355570934256867]}
{'': [9.267948727305654e-16, 0.23355570934254272]}
{'': [2.934850430313457e-16, 0.2335557093425736]}
{'': [-4.633974363652827e-17, 0.23355570934255332]}
{'': [2.703151712130816e-16, 0.23355570934257525]}
{'': [-2.703151712130816e-17, 0.23355570934256772]}
{'': [-1.5832745742480493e-16, 0.2335557093425776]}
{'': [5.0201388939572296e-17, 0.23355570934255943]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 67.256
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.30586882122284154;  // std dev = 3.532, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2.444, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.07061332026691809;  // std dev = 3.295, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.13497714535974895;  // std dev = 1.446, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2533396084457329;  // std dev = 3.531, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2.445, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.15171074486703787;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04158143204570116;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713774;  // std dev = 3.527, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12806826918592373;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03595871392802752;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.2392265087963707;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4892265087963705;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11490218447205226;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.16602510613918664;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.10639152325875058;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.030967932100820536;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09385311470831026;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1177685916417894;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14780460040509427;  // std dev = 2.450, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08719015074985949;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026573528537136713;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07439133170970157;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08679747172194947;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11789281366539169;  // std dev = 2.453, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07065925636321489;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02273114423100811;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05844360869871204;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06508666695511015;  // std dev = 3.521, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08999677543102107;  // std dev = 2.454, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05674959240791561;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019391611969883513;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045608824880375175;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0468487929178252;  // std dev = 3.519, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07219816506780784;  // std dev = 2.456, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.045254593675840775;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016504106472168018;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.12958311991766366;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.31965134968643305;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03375644589648258;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.04137837982370737;  // std dev = 4.292, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.03588712611261486;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014018477459980992;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.997', 'seconds']
Refined model CLL: -0.620943


******************************************
Best model found
******************************************
Results 

CLL : -0.593399 

AUC ROC : 0.628786 

AUC PR : 0.566568 

Precision : 0.818363 

Recall : 0.180617 

F1 : 0.295922 

Total Learning Time : 67.256 

Total Inference Time : 1.3196451663970947 

Total revision time: 71.21988019943237
Best scored revision CLL: -0.620943


Results 

CLL : -0.593399 

AUC ROC : 0.628786 

AUC PR : 0.566568 

Precision : 0.818363 

Recall : 0.180617 

F1 : 0.295922 

Total Learning Time : 71.23972949981689 

Total Inference Time : 1.3196451663970947 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.336
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15608333952704592;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.12083487756737883;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0924698618250928;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.07024281341416025;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05311363022664483;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.04004756889870338;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.416', 'seconds']
Parameter learned model CLL:-0.650109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.48e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 82], 'false': [15.548, 500, 468]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [8.665155314147563e-16, 0.2497267946178503]}
{'': [1.4730764034050857e-15, 0.24972679461786704]}
{'': [1.2997732971221344e-16, 0.2497267946178606]}
{'': [-3.4660621256590254e-16, 0.24972679461785535]}
{'': [-5.415722071342227e-17, 0.24972679461785033]}
{'': [-1.408087738548979e-16, 0.2497267946178522]}
{'': [2.166288828536891e-17, 0.24972679461784802]}
{'': [-5.144935967775116e-17, 0.24972679461785843]}
{'': [4.06179155350667e-17, 0.24972679461785577]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 26.243
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.15602127552504427;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.23737105233349803;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11011696967118058;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.14260202386817658;  // std dev = 3.120, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.678628035059375;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12245277480848712;  // std dev = 3.429, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else return 0.2998535904733655;  // std dev = 0.495, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.20240995758665706;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09456033016649522;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.12232371103554539;  // std dev = 3.120, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.22558492627756876;  // std dev = 0.497, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3534985879390793;  // std dev = 1.253, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.40542766397354973;  // std dev = 1.277, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.20169967383881682;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07117493805123422;  // std dev = 2.946, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10486787141508389;  // std dev = 3.115, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.21179222411412796;  // std dev = 2.640, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.0795319228977536;  // std dev = 2.025, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.18627504867495165;  // std dev = 0.495, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1676835490818486;  // std dev = 1.551, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05948091335962651;  // std dev = 2.946, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.01139289281692166;  // std dev = 3.136, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07042074040913238;  // std dev = 4.195, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.13272208350972906;  // std dev = 2.629, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.15400946597622986;  // std dev = 2.073, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.04283316232593739;  // std dev = 3.295, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.15433557473229997;  // std dev = 12.595, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14080829871041398;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05158685752878;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06323648235765314;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0015414902205545485;  // std dev = 3.141, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09776416864027035;  // std dev = 0.494, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.33914525800081563;  // std dev = 0.903, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2152420479699151;  // std dev = 1.552, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.12810932251736667;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.039388082593961184;  // std dev = 2.936, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 3.692257025138888E-5;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.05472829720458551;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.47244501071390177;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.21635082165652605;  // std dev = 2.314, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2592627385452441;  // std dev = 1.468, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.08850448407768549;  // std dev = 3.219, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.003915958459383095;  // std dev = 3.268, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09172419495667533;  // std dev = 12.594, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04655326715476643;  // std dev = 4.177, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.001662243952632879;  // std dev = 3.149, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3644432021394437;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.04272154970787673;  // std dev = 2.969, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.039568624285872114;  // std dev = 3.358, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.06423017229936821;  // std dev = 0.492, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03889442111854844;  // std dev = 4.176, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.0014117170473436286;  // std dev = 3.149, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03932582637574169;  // std dev = 0.490, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.22798159292053838;  // std dev = 0.899, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.13755137882261242;  // std dev = 1.555, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.20596371336357103;  // std dev = 0.119, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.07073706417925169;  // std dev = 4.259, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05646190649326487;  // std dev = 4.254, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.2197337478506124;  // std dev = 0.115, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.973', 'seconds']
Refined model CLL: -0.599512


******************************************
Best model found
******************************************
Results 

CLL : -0.652994 

AUC ROC : 0.619064 

AUC PR : 0.554385 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 26.243 

Total Inference Time : 1.157825231552124 

Total revision time: 29.51100993537903
Best scored revision CLL: -0.599512


Results 

CLL : -0.652994 

AUC ROC : 0.619064 

AUC PR : 0.554385 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 29.53085923576355 

Total Inference Time : 1.157825231552124 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.033
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.233', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 46.358
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3688769765977062;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.38614045132289815;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3007528710134885;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30226096528282015;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23751879928703248;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.21379053560693073;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18240368900377815;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.18069317746030547;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13796545795922885;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13566549954890209;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10190323816309177;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00204518822397227;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12152643814383735;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05984201257766986;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.07625225600390388;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.07562008096373789;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.002584328669285462;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045816398181049725;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.09166943515974642;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05720515847682068;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0016844295027274709;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08355889312927847;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022653328730364527;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554203749134575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06907880995082886;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04139317084875193;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.06770888236840898;  // std dev = 0.000464, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019852295939413026;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0020246303374034103;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.253', 'seconds']
Refined model CLL: -0.621744


******************************************
Best model found
******************************************
Results 

CLL : -0.659509 

AUC ROC : 0.555617 

AUC PR : 0.427904 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.358 

Total Inference Time : 1.211883306503296 

Total revision time: 49.359986988067625
Best scored revision CLL: -0.621744


Results 

CLL : -0.659509 

AUC ROC : 0.555617 

AUC PR : 0.427904 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.38853212928772 

Total Inference Time : 1.211883306503296 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.139
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.188', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 46.935
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.30406508412651806;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3293852703427406;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21620092837718075;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2579001537942363;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20140397307190894;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.13891629954241463;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.179551302759352;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.21003275240803626;  // std dev = 1.826, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10609616252783154;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1195002721299693;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15106515456737546;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06663849887891601;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3492179281868031;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.1577579891004706;  // std dev = 1.641, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07748619389287531;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1048745851952329;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18263666018985042;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05114869023472218;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05974246388654993;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0644551310407343;  // std dev = 1.927, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09614004014467571;  // std dev = 1.952, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.15693376808783466;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03908599517318729;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.24783496321377455;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04585061471027661;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2095227657212288;  // std dev = 1.229, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.04307625298104202;  // std dev = 17.054, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06386716954817213;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.10525982839050557;  // std dev = 1.812, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.379', 'seconds']
Refined model CLL: -0.667089


******************************************
Best model found
******************************************
Results 

CLL : -0.755606 

AUC ROC : 0.537253 

AUC PR : 0.344379 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 46.935 

Total Inference Time : 1.4216184616088867 

Total revision time: 50.237216114044195
Best scored revision CLL: -0.667089


Results 

CLL : -0.755606 

AUC ROC : 0.537253 

AUC PR : 0.344379 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 50.26576125526429 

Total Inference Time : 1.4216184616088867 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.659
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19052879779973617;  // std dev = 19.695, 1,748.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16288985703081427;  // std dev = 19.737, 1,763.000 (wgt'ed) examples reached here.  /* #neg=1,182 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14242303142189391;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11608588876773344;  // std dev = 19.737, 1,763.000 (wgt'ed) examples reached here.  /* #neg=1,182 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10477703864276927;  // std dev = 19.606, 1,717.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08006838729101867;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0659848618675867;  // std dev = 19.667, 1,738.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05264230302099968;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03620865568847927;  // std dev = 19.753, 1,769.000 (wgt'ed) examples reached here.  /* #neg=1,188 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.032799666786893326;  // std dev = 19.692, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.167', 'seconds']
Parameter learned model CLL:-0.535347 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.695, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.737, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.737, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.606, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.667, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.753, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.692, 1, 581]}]
{'': [nan, 0.22190348957159142]}
{'': [nan, 0.22094744526439497]}
{'': [nan, 0.2220947282862933]}
{'': [nan, 0.22094744526438195]}
{'': [nan, 0.22387926551744217]}
{'': [nan, 0.2220947282863083]}
{'': [nan, 0.22254095484275194]}
{'': [nan, 0.2224772090799345]}
{'': [nan, 0.2205651569122361]}
{'': [nan, 0.22196723535218504]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 52.122
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E), haswordtitle(G, D) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.149815601766179;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return 0.2197347177379216;  // std dev = 0.480, 1,463.000 (wgt'ed) examples reached here.  /* #neg=934 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03592671287729016;  // std dev = 3.627, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.006297083247660511;  // std dev = 3.692, 108.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18896510529516872;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.0593400268374084;  // std dev = 3.571, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.04261933482555025;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.030715341441014146;  // std dev = 3.850, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.14423399299077416;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16290595599899804;  // std dev = 0.480, 1,506.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.040317625019052214;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.062010080228132806;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.005426300329709181;  // std dev = 3.899, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.12684415197531484;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12266872193412205;  // std dev = 0.477, 1,562.000 (wgt'ed) examples reached here.  /* #neg=1,017 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.028531619281384726;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.0547564990391067;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0073496121361913145;  // std dev = 3.893, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.11344813125715358;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.098340932583851;  // std dev = 3.132, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.035836209521676286;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.11267015159428047;  // std dev = 0.480, 1,464.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.013294258995388697;  // std dev = 3.652, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.1467054014425361;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.007508981179074221;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.0067403423081370505;  // std dev = 3.655, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08341380782697252;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.023117418134486655;  // std dev = 3.609, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.20704750145724135;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.011862542680252636;  // std dev = 3.871, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.10235194900975157;  // std dev = 6.45e-05, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07595915134311464;  // std dev = 0.481, 1,503.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.041916219135537815;  // std dev = 3.582, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.03442817121770832;  // std dev = 1.318, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0033753127952301236;  // std dev = 3.871, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.09407033147213843;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05699216741166664;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.06885949101114851;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.014079912209590394;  // std dev = 3.851, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.0013888989874193635;  // std dev = 3.646, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.04616657538697135;  // std dev = 0.479, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | else return 0.04883116148869143;  // std dev = 0.481, 1,456.000 (wgt'ed) examples reached here.  /* #neg=927 #pos=529 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.021878989291816964;  // std dev = 3.611, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.04046607334543888;  // std dev = 1.330, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.009407253517029443;  // std dev = 3.856, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.0865921874430332;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5663547059139065;  // std dev = 6.741, 448.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=396 */
%   | | | else return -0.29243581681102265;  // std dev = 4.141, 873.000 (wgt'ed) examples reached here.  /* #neg=857 #pos=16 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.20066471781566897;  // std dev = 1.871, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return 0.20808649352041703;  // std dev = 7.846, 251.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=132 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.00696451128291611;  // std dev = 3.746, 95.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=17 */
%   | | | else return 0.08006967783826212;  // std dev = 1.628, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.477439849304068;  // std dev = 1.556, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.08017743936481223;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.330', 'seconds']
Refined model CLL: -0.435676


******************************************
Best model found
******************************************
Results 

CLL : -0.581034 

AUC ROC : 0.843403 

AUC PR : 0.772105 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 52.122 

Total Inference Time : 1.8660013675689697 

Total revision time: 56.60782180404663
Best scored revision CLL: -0.435676


Results 

CLL : -0.581034 

AUC ROC : 0.843403 

AUC PR : 0.772105 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 56.63636694526672 

Total Inference Time : 1.8660013675689697 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.275
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.188', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 71.214
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977226;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374319;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1043741085989677;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.184650884821522;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07865195988799584;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14015013481000496;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.1765974607196893;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.44326412738635596;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.06140014753749459;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.07629057894788056;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048909762097638254;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.03460171264538918;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09686475012815955;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.12335441670844835;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.32432724354658754;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03570674192032799;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04325709525596067;  // std dev = 4.363, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.059', 'seconds']
Refined model CLL: -0.669776


******************************************
Best model found
******************************************
Results 

CLL : -0.644563 

AUC ROC : 0.563917 

AUC PR : 0.415216 

Precision : 0.482906 

Recall : 0.04978 

F1 : 0.090256 

Total Learning Time : 71.214 

Total Inference Time : 1.475067377090454 

Total revision time: 74.81986061477662
Best scored revision CLL: -0.669776


Results 

CLL : -0.644563 

AUC ROC : 0.563917 

AUC PR : 0.415216 

Precision : 0.482906 

Recall : 0.04978 

F1 : 0.090256 

Total Learning Time : 74.84840575599671 

Total Inference Time : 1.475067377090454 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.07
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.276', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 35.398
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3126391982731987;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5794119437364615;  // std dev = 0.320, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03829722329286939;  // std dev = 3.412, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.05346509447109697;  // std dev = 3.367, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2734741684206236;  // std dev = 13.055, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02644133491846655;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.22484489688045364;  // std dev = 2.695, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.04385715871767136;  // std dev = 2.191, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.19565947374917844;  // std dev = 13.428, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.31277664968857183;  // std dev = 1.564, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.012287199930136956;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340929;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14112500113909596;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.24357442068617777;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.33485604760265625;  // std dev = 0.145, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 5.258890547054501E-4;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07849983607364949;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05855866946674005;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250059;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10536467605363915;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.26449488776586666;  // std dev = 0.882, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.18620803358131807;  // std dev = 1.555, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.16626717878219183;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03356626811832098;  // std dev = 2.934, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.005273542093363861;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.057167991846029526;  // std dev = 4.188, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.45805406562364487;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24275873567111225;  // std dev = 2.340, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2747821184123926;  // std dev = 1.661, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08251711545398766;  // std dev = 3.216, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.06206797288723605;  // std dev = 3.057, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.03443496082760275;  // std dev = 3.323, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.09898311904862886;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.0152563124843206;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.34836516409788;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.18526133177394363;  // std dev = 2.332, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.21138680738379556;  // std dev = 1.655, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.06662869833579586;  // std dev = 3.216, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.04407421151236876;  // std dev = 2.704, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.017716973077513302;  // std dev = 3.622, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.0744436332394044;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.013015978457029686;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.0789099197973901;  // std dev = 2.635, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.041154611855639234;  // std dev = 13.490, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1325790116584699;  // std dev = 1.279, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20363249930193053;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.2054661087947351;  // std dev = 0.185, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.0695920604465748;  // std dev = 4.254, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06067327875108274;  // std dev = 4.256, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.23054387799492082;  // std dev = 0.146, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.206', 'seconds']
Refined model CLL: -0.626912


******************************************
Best model found
******************************************
Results 

CLL : -0.707899 

AUC ROC : 0.549365 

AUC PR : 0.398629 

Precision : 0.375163 

Recall : 0.933117 

F1 : 0.535162 

Total Learning Time : 35.398 

Total Inference Time : 1.1540236473083496 

Total revision time: 38.36830407905579
Best scored revision CLL: -0.626912


Results 

CLL : -0.707899 

AUC ROC : 0.549365 

AUC PR : 0.398629 

Precision : 0.375163 

Recall : 0.933117 

F1 : 0.535162 

Total Learning Time : 38.39684922027588 

Total Inference Time : 1.1540236473083496 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.083
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.265', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 44.999
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3688769765977062;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0036637537051136967;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.14148167170420273;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091865;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30279090858494073;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12502585645554135;  // std dev = 6.02e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0048814113928811334;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004888353616469523;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.316636792330854;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23626448595552693;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11197745008152322;  // std dev = 5.48e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004292526622817879;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.2418908369061481;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1817883938968652;  // std dev = 2.932, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10131691520058754;  // std dev = 5.01e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037676025986480744;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18217185617625084;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13782669917303128;  // std dev = 2.932, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00224520909195017;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09747292703701338;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033055424376907594;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.13565811969589184;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10191529304728408;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08843247466345677;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028991256183165913;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037123768590154693;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11023850266617843;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.075241004508186;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08155956631586492;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025418890912303586;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003256973224597009;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.0931516036175634;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.057082470353492606;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07565584892875228;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022280649674125525;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028564406945333245;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06845165775699905;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041493383233209086;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07053277624574954;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019525189636049327;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002504398772201979;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.251', 'seconds']
Refined model CLL: -0.621886


******************************************
Best model found
******************************************
Results 

CLL : -0.658963 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 44.999 

Total Inference Time : 1.1695497035980225 

Total revision time: 47.976217252731324
Best scored revision CLL: -0.621886


Results 

CLL : -0.658963 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.00004385185242 

Total Inference Time : 1.1695497035980225 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.138
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.253', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 37.418
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558626;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2420224216035936;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479393;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3922035313213573;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.12696459948062144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08119839174374606;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.4512788771623652;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1576151847535715;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.18434357319980474;  // std dev = 17.122, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | | else return 0.23310409494846301;  // std dev = 2.624, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14056917176641232;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1727446184901037;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.210171024584088;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2910503092917415;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.09209426359879103;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0552275148795436;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3104170410011817;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06259069739872845;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15253049444663203;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1041456952483893;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1461206481611796;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18099020718525538;  // std dev = 1.838, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.04231968037982899;  // std dev = 1.820, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0794634368101942;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09489163290752421;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.12672782838532018;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.20386204825335685;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.033638909099530004;  // std dev = 1.821, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03232023153213195;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2141999121241595;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.027379796200353038;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13050849806969977;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.11289390219503087;  // std dev = 2.154, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.05810677487919637;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.1225637209268904;  // std dev = 1.833, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.025628729377444;  // std dev = 1.821, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.16620008004905423;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.020550679650964132;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10149126530883922;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.04360524240901416;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.07403765875962054;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09975507893066077;  // std dev = 1.862, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | | else return 0.015287288176027626;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.043', 'seconds']
Refined model CLL: -0.665272


******************************************
Best model found
******************************************
Results 

CLL : -0.756996 

AUC ROC : 0.535719 

AUC PR : 0.344343 

Precision : 0.353454 

Recall : 0.956812 

F1 : 0.516214 

Total Learning Time : 37.418 

Total Inference Time : 1.295222520828247 

Total revision time: 40.69030118560791
Best scored revision CLL: -0.665272


Results 

CLL : -0.756996 

AUC ROC : 0.535719 

AUC PR : 0.344343 

Precision : 0.353454 

Recall : 0.956812 

F1 : 0.516214 

Total Learning Time : 40.714127784729 

Total Inference Time : 1.295222520828247 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.804
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18345688582739086;  // std dev = 19.799, 1,786.000 (wgt'ed) examples reached here.  /* #neg=1,205 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17289591965939713;  // std dev = 19.603, 1,716.000 (wgt'ed) examples reached here.  /* #neg=1,135 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14680950277956842;  // std dev = 19.615, 1,720.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1188269749548406;  // std dev = 19.678, 1,742.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09358200932877811;  // std dev = 19.745, 1,766.000 (wgt'ed) examples reached here.  /* #neg=1,185 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08571205674864536;  // std dev = 19.606, 1,717.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.055568619150859394;  // std dev = 19.807, 1,789.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04595633033696259;  // std dev = 19.785, 1,781.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.044280100632293325;  // std dev = 19.672, 1,740.000 (wgt'ed) examples reached here.  /* #neg=1,159 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03527761774914041;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.158', 'seconds']
Parameter learned model CLL:-0.535144 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.799, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.603, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.615, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.678, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.745, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.606, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.807, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.785, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.672, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
{'': [nan, 0.21948268792109368]}
{'': [nan, 0.223942966512891]}
{'': [nan, 0.22368814223906028]}
{'': [nan, 0.2222859692529049]}
{'': [nan, 0.22075628872538372]}
{'': [nan, 0.2238792655174148]}
{'': [nan, 0.2192917965543612]}
{'': [nan, 0.2198009370228538]}
{'': [nan, 0.22241346280884275]}
{'': [nan, 0.22247720907992513]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 27.988
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.2202297016977278;  // std dev = 0.481, 1,461.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.04862512557570285;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.024204006076958388;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.029577506528083813;  // std dev = 3.862, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.24811816884741303;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.15252617693695447;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.18879129074998974;  // std dev = 0.480, 1,471.000 (wgt'ed) examples reached here.  /* #neg=942 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.02102502915018324;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.042010204381597284;  // std dev = 3.824, 96.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=18 */
%   | | | else return 0.028373829787381285;  // std dev = 3.630, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.20848477447886868;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0833571857890039;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | else return 0.14912437039517568;  // std dev = 0.476, 1,520.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.03361106761308348;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.020863530952433866;  // std dev = 3.640, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return 0.006503137470099286;  // std dev = 3.893, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1276039580781379;  // std dev = 0.477, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.039701994735341556;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03701224759229567;  // std dev = 3.819, 96.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=18 */
%   | | | else return 0.012811438893162677;  // std dev = 3.654, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.21688712565136958;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08995101568669106;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.12883857324394396;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.12096636891166668;  // std dev = 18.058, 1,402.000 (wgt'ed) examples reached here.  /* #neg=886 #pos=516 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04556037005094206;  // std dev = 3.581, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.0532807831954719;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.0018047695018787886;  // std dev = 3.899, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.12852809531177004;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08318806323577199;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.03369527960990355;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.060630915242931606;  // std dev = 1.352, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.015233206272213518;  // std dev = 5.140, 187.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06557955161340187;  // std dev = 0.477, 1,549.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.024418463467022086;  // std dev = 3.616, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04017799828672732;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.009889060507148372;  // std dev = 3.866, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.11572122369303493;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09526499239779165;  // std dev = 3.009, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return -0.11275697121016148;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.05819527453204526;  // std dev = 0.479, 1,477.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.04673007374278156;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.046202180434769376;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.010943013308691121;  // std dev = 3.862, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.10204586216048069;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.041246489538696945;  // std dev = 0.478, 1,541.000 (wgt'ed) examples reached here.  /* #neg=996 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.013845652192591642;  // std dev = 3.630, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.05582167235318103;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 1.9290207391637682E-4;  // std dev = 3.873, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.09523875085475982;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06012635854067045;  // std dev = 0.481, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | else return 0.03721647306151909;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.024021539118692058;  // std dev = 3.603, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05313062787450899;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.07544352575606274;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.009014180351948354;  // std dev = 3.662, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.935', 'seconds']
Refined model CLL: -0.527291


******************************************
Best model found
******************************************
Results 

CLL : -0.730622 

AUC ROC : 0.550242 

AUC PR : 0.500837 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 27.988 

Total Inference Time : 1.3667595386505127 

Total revision time: 32.08190602493286
Best scored revision CLL: -0.527291


Results 

CLL : -0.730622 

AUC ROC : 0.550242 

AUC PR : 0.500837 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 32.10573262405396 

Total Inference Time : 1.3667595386505127 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.373
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.178', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 75.776
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374319;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556042;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1054968638933209;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084447;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1832232426359761;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230904723488837;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.072138352682023;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15155366093559158;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06365407449537307;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05375781042470198;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11512733043548656;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048919588954396825;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.03450189330266432;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09688925134737324;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03742942642087199;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.02513250144695886;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07439238230775497;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.138', 'seconds']
Refined model CLL: -0.67001


******************************************
Best model found
******************************************
Results 

CLL : -0.643427 

AUC ROC : 0.564221 

AUC PR : 0.421946 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 75.776 

Total Inference Time : 1.4203946590423584 

Total revision time: 79.37092335128784
Best scored revision CLL: -0.67001


Results 

CLL : -0.643427 

AUC ROC : 0.564221 

AUC PR : 0.421946 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 79.39474995040894 

Total Inference Time : 1.4203946590423584 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.988
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.293', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 29.848
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137361;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3201497659160316;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.07017179836195486;  // std dev = 2.417, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.4754259128135496;  // std dev = 1.593, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.25217485438635373;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.24491424097651082;  // std dev = 13.730, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3533973053426715;  // std dev = 1.275, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5047716927154388;  // std dev = 0.149, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.026441334918466532;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.5996742123054949;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5253903991741702;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.18414523622739126;  // std dev = 13.906, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | | else return 0.27572565790928977;  // std dev = 1.798, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012287199930136968;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340952;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.4249434476355991;  // std dev = 0.188, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.04157110960216338;  // std dev = 3.333, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.055734998688163;  // std dev = 3.349, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.16786522376210558;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.06694814021899116;  // std dev = 0.454, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0585586694667399;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.00920055424025008;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10620535503388304;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16926834601666868;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.27416130229808194;  // std dev = 0.138, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.16667658373689234;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.032842488226086694;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.006158139576731836;  // std dev = 3.129, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.058039626512334776;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.34101695430218415;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27901773191427776;  // std dev = 0.152, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.044899893315123986;  // std dev = 3.181, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.05642134076885026;  // std dev = 3.548, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.04416388276033035;  // std dev = 3.279, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.0994572920788123;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04619906535121393;  // std dev = 4.177, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.001134265404871725;  // std dev = 3.151, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.467714624993537;  // std dev = 3.33e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.21220848359242636;  // std dev = 2.309, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.27612096092351385;  // std dev = 1.554, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.09026946524644511;  // std dev = 3.210, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.0693076440890098;  // std dev = 3.055, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.03524087908729896;  // std dev = 3.310, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.07480423608221219;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.01176788150316188;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.2874909399017784;  // std dev = 0.125, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20203847196577193;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.03298533822101348;  // std dev = 2.978, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.04227917959544879;  // std dev = 3.409, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.05287899496761278;  // std dev = 3.056, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.028055542020422666;  // std dev = 3.309, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.05638704858561207;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.010015708182726743;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.840', 'seconds']
Refined model CLL: -0.629372


******************************************
Best model found
******************************************
Results 

CLL : -0.707682 

AUC ROC : 0.554951 

AUC PR : 0.403775 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 29.848 

Total Inference Time : 1.146378517150879 

Total revision time: 32.696843181610106
Best scored revision CLL: -0.629372


Results 

CLL : -0.707682 

AUC ROC : 0.554951 

AUC PR : 0.403775 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 32.7206697807312 

Total Inference Time : 1.146378517150879 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.03
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.252', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 48.722
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3974484051691344;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3717678476909069;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0036637537051137023;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.39107968864188797;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.300402663980099;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11855890509857493;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416272;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.3060150650828993;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23724489045214178;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10672285341134428;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004274819321584995;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.2448252374425209;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18154935459312063;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0023907297668857392;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10831914427658614;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003752007200638466;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.18267867731180765;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13776490767352995;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09210314282191569;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033166638726089964;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13536406045793484;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10192191493303682;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08468542964125579;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028870563957456093;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002908899871338643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10158218687506407;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07650852120016816;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07834786529697728;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845322;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025504739873283434;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1021160154745906;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.056274071209766914;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07287406842591006;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022187478909486795;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002235601096999389;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07036172785138466;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04116540474523281;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.019918638332887883;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007704355504697067;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.817910938474779E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.215', 'seconds']
Refined model CLL: -0.621937


******************************************
Best model found
******************************************
Results 

CLL : -0.658862 

AUC ROC : 0.555809 

AUC PR : 0.428002 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.722 

Total Inference Time : 1.1159048080444336 

Total revision time: 51.60244026374817
Best scored revision CLL: -0.621937


Results 

CLL : -0.658862 

AUC ROC : 0.555809 

AUC PR : 0.428002 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 56.72771063041687 

Total Inference Time : 1.1159048080444336 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.104
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.294', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 38.823
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15807064722459824;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18403810314669028;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857432272066528;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.26118801425970334;  // std dev = 1.847, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4106434583517543;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20094252580239752;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.33786210752146767;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12172739951120565;  // std dev = 1.234, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.13875630182690776;  // std dev = 17.120, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | | else return 0.1875614373733687;  // std dev = 2.586, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2613346674391546;  // std dev = 1.595, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.030608105297648052;  // std dev = 1.597, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.10454153766324766;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1460842220754835;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.2316083403296231;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.07147216566150653;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.0472426993257603;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07943268716014368;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.09488709201239709;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1266819278327027;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1929646966936862;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.054936309140648;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.036113365550357664;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2615603986872821;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.05025639426817008;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19545748789435383;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.09702821630873093;  // std dev = 2.101, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.05800997538308227;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.12687210125386236;  // std dev = 1.818, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.027530389870901093;  // std dev = 1.821, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.20010125603785966;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.07713540129895884;  // std dev = 1.606, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04327857498033398;  // std dev = 17.027, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.0740392398740151;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.14795931280484137;  // std dev = 1.97e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.020946685559304012;  // std dev = 1.821, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.016414376062105274;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.775', 'seconds']
Refined model CLL: -0.665063


******************************************
Best model found
******************************************
Results 

CLL : -0.75795 

AUC ROC : 0.536899 

AUC PR : 0.345593 

Precision : 0.35357 

Recall : 0.956812 

F1 : 0.516338 

Total Learning Time : 38.823 

Total Inference Time : 1.2724072933197021 

Total revision time: 41.98733968925476
Best scored revision CLL: -0.665063


Results 

CLL : -0.75795 

AUC ROC : 0.536899 

AUC PR : 0.345593 

Precision : 0.35357 

Recall : 0.956812 

F1 : 0.516338 

Total Learning Time : 47.11261005592346 

Total Inference Time : 1.2724072933197021 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.597
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19071905530557487;  // std dev = 19.692, 1,747.000 (wgt'ed) examples reached here.  /* #neg=1,166 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1711022287920809;  // std dev = 19.615, 1,720.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1501383189812435;  // std dev = 19.553, 1,699.000 (wgt'ed) examples reached here.  /* #neg=1,118 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11243523084498225;  // std dev = 19.750, 1,768.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1019473786915499;  // std dev = 19.615, 1,720.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07996932263184531;  // std dev = 19.661, 1,736.000 (wgt'ed) examples reached here.  /* #neg=1,155 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.056037071322350474;  // std dev = 19.785, 1,781.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05005683695262429;  // std dev = 19.709, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.039259127795725865;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.029396314371705097;  // std dev = 19.742, 1,765.000 (wgt'ed) examples reached here.  /* #neg=1,184 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.133', 'seconds']
Parameter learned model CLL:-0.535015 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.692, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.615, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.553, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.75, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.615, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.661, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.785, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.709, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.742, 1, 581]}]
{'': [nan, 0.22196723535217489]}
{'': [nan, 0.22368814223905462]}
{'': [nan, 0.22502521131253797]}
{'': [nan, 0.22062886458100153]}
{'': [nan, 0.2236881422390532]}
{'': [nan, 0.22266844432881583]}
{'': [nan, 0.21980093702285497]}
{'': [nan, 0.22158477244943217]}
{'': [nan, 0.2213935559695087]}
{'': [nan, 0.2208200049755598]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 52.913
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21389306042587813;  // std dev = 0.479, 1,532.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04205698107652387;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.029577506528083813;  // std dev = 3.862, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.18721052868976706;  // std dev = 3.105, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return 0.0800676715469093;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.1875001039793234;  // std dev = 0.479, 1,480.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.027855292187924294;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03785796557127447;  // std dev = 3.613, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return 0.01721412754619214;  // std dev = 3.881, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.3102410959333216;  // std dev = 1.218, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.13529605466725705;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12700870722999832;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.16406798449183654;  // std dev = 18.143, 1,425.000 (wgt'ed) examples reached here.  /* #neg=909 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.03610710057792475;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.030962002684370535;  // std dev = 1.331, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.04293528365619226;  // std dev = 5.083, 167.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.35205803095472793;  // std dev = 1.103, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09058952991426186;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.14070662485633567;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.13519899402648006;  // std dev = 18.164, 1,431.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.018205792670900535;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.014449513148028078;  // std dev = 1.322, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.01219831617197844;  // std dev = 5.162, 192.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1072469288450233;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03335279239641956;  // std dev = 3.608, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.04945372110542443;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.014753930010047342;  // std dev = 3.862, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.12960559014463136;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09014112567246464;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.050792975241655214;  // std dev = 3.559, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.043096041368359116;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.01778774840990829;  // std dev = 3.851, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.11640227371416209;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08476808283988088;  // std dev = 3.041, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | | else return -0.0938120564638099;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06568317569054007;  // std dev = 0.478, 1,495.000 (wgt'ed) examples reached here.  /* #neg=966 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.008404480094518933;  // std dev = 3.638, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.03188506040973607;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.039804914169214;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.024568306023498063;  // std dev = 3.710, 118.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05558272387166525;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.014507079222094158;  // std dev = 0.338, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.02286403552091033;  // std dev = 3.839, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.009469713823862885;  // std dev = 3.630, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.046062955546270025;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04440691814398196;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.021314291655810582;  // std dev = 1.317, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.01963930756146874;  // std dev = 5.106, 177.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5518602586903243;  // std dev = 7.191, 456.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=396 */
%   | | | else return -0.292310415165317;  // std dev = 4.135, 902.000 (wgt'ed) examples reached here.  /* #neg=886 #pos=16 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1523532216538615;  // std dev = 8.312, 277.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=132 */
%   | | | else return 0.0733077968492844;  // std dev = 1.621, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 1.240260698401624E-4;  // std dev = 3.762, 100.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=17 */
%   | | | else return 0.11136306984736583;  // std dev = 1.573, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.5314331795484375;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.10583109737395674;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.159', 'seconds']
Refined model CLL: -0.437693


******************************************
Best model found
******************************************
Results 

CLL : -0.58553 

AUC ROC : 0.846903 

AUC PR : 0.774562 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 52.913 

Total Inference Time : 1.8770592212677002 

Total revision time: 57.34874773979187
Best scored revision CLL: -0.437693


Results 

CLL : -0.58553 

AUC ROC : 0.846903 

AUC PR : 0.774562 

Precision : 1.0 

Recall : 0.004926 

F1 : 0.009804 

Total Learning Time : 62.47401810646057 

Total Inference Time : 1.8770592212677002 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.335
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.181', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 60.595
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.42475617506381624;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.3158346306230407;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.2006373174408249;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.2851297848161343;  // std dev = 4.405, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.27826964311060576;  // std dev = 1.927, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5306845497315434;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1641707455321416;  // std dev = 19.650, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.22684281852908164;  // std dev = 4.402, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1335581609234132;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.13976215662318853;  // std dev = 3.521, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2381039981976848;  // std dev = 2.606, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.045652185791079235;  // std dev = 3.285, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.07188755709780537;  // std dev = 1.436, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10548841725630684;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09686021618122663;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.19803589039006694;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08767840951939948;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026643141938027713;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.16852697718645795;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3579004328835407;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08062421965758797;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10124894768632042;  // std dev = 4.382, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.07107168656888584;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02279178343169341;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06363146122973848;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.047828456765401706;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.12526989747394485;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05709083340624684;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01944413929524313;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.11325488004763998;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.2535192935736754;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.14381897335280452;  // std dev = 2.087, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.04706983660022204;  // std dev = 20.018, 1,649.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=697 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.045532404369283117;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01654938944959382;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.0854482928889445;  // std dev = 1.925, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.19207307275819302;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03634686996261916;  // std dev = 19.647, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04561659136194411;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.0361104858963124;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01405735564296194;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.018', 'seconds']
Refined model CLL: -0.669233


******************************************
Best model found
******************************************
Results 

CLL : -0.647767 

AUC ROC : 0.562027 

AUC PR : 0.406942 

Precision : 0.404908 

Recall : 0.05815 

F1 : 0.101695 

Total Learning Time : 60.595 

Total Inference Time : 1.6045482158660889 

Total revision time: 64.27493327140809
Best scored revision CLL: -0.669233


Results 

CLL : -0.647767 

AUC ROC : 0.562027 

AUC PR : 0.406942 

Precision : 0.404908 

Recall : 0.05815 

F1 : 0.101695 

Total Learning Time : 69.40020363807679 

Total Inference Time : 1.6045482158660889 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.049
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.268', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 29.44
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137361;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3201497659160316;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.07017179836195486;  // std dev = 2.417, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.4754259128135498;  // std dev = 1.593, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.21870212528902105;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08920786616446091;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.12358095880871146;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24519932027603797;  // std dev = 0.491, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3533973053426714;  // std dev = 1.275, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5047716927154388;  // std dev = 0.149, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.16876667082068497;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07962838644597325;  // std dev = 2.950, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10390184918380616;  // std dev = 3.117, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.5633555428499679;  // std dev = 0.209, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.005592996819981101;  // std dev = 3.348, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.008836156209077038;  // std dev = 3.356, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.213107729220192;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.010314216196014036;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09208908678473375;  // std dev = 3.111, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.01181325423881676;  // std dev = 3.138, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.069694778021064;  // std dev = 4.195, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14049634477572873;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3261918852820116;  // std dev = 0.889, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.23152597417874565;  // std dev = 1.562, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1563872313421486;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.047730934493193565;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.06299334626201283;  // std dev = 4.186, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.002204690332676894;  // std dev = 3.138, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10566614024327178;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.2856258784355843;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18771326105728714;  // std dev = 1.798, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.11883527404665943;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.042481548737385244;  // std dev = 2.936, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 3.7091121805404436E-4;  // std dev = 3.137, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.05412299222445554;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.45729790097059064;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24009485134253553;  // std dev = 2.348, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else return -0.029419731163851447;  // std dev = 0.447, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.08813031333933846;  // std dev = 13.395, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.15158570842092922;  // std dev = 1.570, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.04612952589255526;  // std dev = 4.176, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.0015170345777628283;  // std dev = 3.151, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.36408936940482395;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29316532952777025;  // std dev = 0.164, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(E, G), haswordvenue(A, G) )
%   | | | then return -0.38129836684827095;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.006476097770594229;  // std dev = 4.670, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.041535452478139966;  // std dev = 2.849, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.0453870063742597;  // std dev = 3.399, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.07700024781073093;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.01169045801240517;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.2797501635760934;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2242529006475491;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.04309491703650644;  // std dev = 3.169, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | | else return -0.05425472915817848;  // std dev = 3.446, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.03161929061076814;  // std dev = 2.848, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.03638029359591294;  // std dev = 3.395, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.05803533659696736;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.009949372830363531;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.982', 'seconds']
Refined model CLL: -0.631476


******************************************
Best model found
******************************************
Results 

CLL : -0.707409 

AUC ROC : 0.554749 

AUC PR : 0.403815 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 29.44 

Total Inference Time : 1.1247656345367432 

Total revision time: 32.35993305587769
Best scored revision CLL: -0.631476


Results 

CLL : -0.707409 

AUC ROC : 0.554749 

AUC PR : 0.403815 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 37.48520342254639 

Total Inference Time : 1.1247656345367432 

Run: 3
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.306
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.510', 'seconds']
Parameter learned model CLL:-0.554626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [3.7007434154171886e-16, 0.20305555555554874]}
{'': [1.7393494052460785e-15, 0.20305555555554408]}
{'': [5.181040781584064e-16, 0.20305555555556368]}
{'': [1.850371707708594e-17, 0.20305555555556454]}
{'': [-4.625929269271486e-17, 0.20305555555555405]}
{'': [1.6653345369377348e-16, 0.203055555555546]}
{'': [6.013708050052931e-17, 0.2030555555555644]}
{'': [-6.013708050052931e-17, 0.20305555555555183]}
{'': [1.3877787807814457e-17, 0.2030555555555464]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 33.179
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15012155747461325;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09274792770397196;  // std dev = 1.878, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.003663753705113705;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12847188454287883;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3771445713199655;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07868050850172133;  // std dev = 1.873, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11855890509857493;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416284;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.031140506412920724;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1098883899603365;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.09790104388107781;  // std dev = 2.083, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10672285341134428;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0042748193215849835;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.02624970584280439;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09133134008564309;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.08085622618976669;  // std dev = 2.078, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09697063560776858;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003752007200638478;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07361486431944078;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.32681524431692954;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.02497672540474404;  // std dev = 1.834, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0021349630218403825;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10101864179535057;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.059907139082259364;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.26110549689332385;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.01952401029714005;  // std dev = 1.831, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08460349857328382;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002887056395745621;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0029234481300496906;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.03899390973975519;  // std dev = 0.942, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.049774077821246834;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.030203649008815073;  // std dev = 2.008, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07827748745531095;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025632573487824957;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.0327097112938639;  // std dev = 0.942, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.03993999534946613;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.02416734921095943;  // std dev = 2.006, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07281299855307367;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022187478909486556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022468274954907125;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.09810746377358792;  // std dev = 0.956, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.03229181480648251;  // std dev = 12.860, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.02447921970872041;  // std dev = 2.020, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.019918638332887883;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.007688485552807312;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.817910938474779E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.201', 'seconds']
Refined model CLL: -0.539359


******************************************
Best model found
******************************************
Results 

CLL : -0.619029 

AUC ROC : 0.6173 

AUC PR : 0.568773 

Precision : 0.956322 

Recall : 0.15704 

F1 : 0.26978 

Total Learning Time : 33.179 

Total Inference Time : 1.2102551460266113 

Total revision time: 36.44368134498596
Best scored revision CLL: -0.539359


Results 

CLL : -0.619029 

AUC ROC : 0.6173 

AUC PR : 0.568773 

Precision : 0.956322 

Recall : 0.15704 

F1 : 0.26978 

Total Learning Time : 36.46399389266968 

Total Inference Time : 1.2102551460266113 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.414
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.657', 'seconds']
Parameter learned model CLL:-0.645914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [-3.4492365813597096e-16, 0.24738315415699694]}
{'': [1.793603022307049e-15, 0.24738315415698806]}
{'': [6.553549504583448e-16, 0.2473831541570005]}
{'': [-2.4144656069517967e-16, 0.24738315415699036]}
{'': [-5.1738548720395646e-17, 0.24738315415699547]}
{'': [2.0695419488158259e-16, 0.2473831541570034]}
{'': [2.5869274360197823e-17, 0.24738315415699816]}
{'': [-1.2503482607428947e-16, 0.24738315415699647]}
{'': [4.527123013034619e-17, 0.24738315415700443]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 44.491
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952967;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4761269733257933;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.09746511107855259;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22312114697495847;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.3006883768345652;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.1713911475038452;  // std dev = 16.552, 1,108.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=600 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2611880142597033;  // std dev = 1.847, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3604425874626916;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.07580247327607267;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17305324512043713;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.1313159423757612;  // std dev = 16.520, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.18583412987182008;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.20606636791210747;  // std dev = 1.849, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10045091381428344;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1549092424477661;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1234757460305042;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2283314617491521;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04172116964225125;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07561931670384425;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1224317288980324;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0885768333421379;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1906043241305087;  // std dev = 2.79e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.031834295526259423;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3274681048487525;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2750222773632235;  // std dev = 1.227, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05514482674068666;  // std dev = 16.474, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.0815956933876117;  // std dev = 2.683, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1629156122960409;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02423344487157263;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0426302793232025;  // std dev = 0.495, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07775502344286597;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.04658517137248564;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14189877141203372;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.018416665490579825;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.295', 'seconds']
Refined model CLL: -0.631033


******************************************
Best model found
******************************************
Results 

CLL : -0.704344 

AUC ROC : 0.612198 

AUC PR : 0.487587 

Precision : 0.35392 

Recall : 0.956812 

F1 : 0.516711 

Total Learning Time : 44.491 

Total Inference Time : 1.1674695014953613 

Total revision time: 47.93371942520142
Best scored revision CLL: -0.631033


Results 

CLL : -0.704344 

AUC ROC : 0.612198 

AUC PR : 0.487587 

Precision : 0.35392 

Recall : 0.956812 

F1 : 0.516711 

Total Learning Time : 47.95403197288513 

Total Inference Time : 1.1674695014953613 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.114
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.144883021952571;  // std dev = 18.542, 1,681.000 (wgt'ed) examples reached here.  /* #neg=1,199 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1302931267795185;  // std dev = 18.490, 1,658.000 (wgt'ed) examples reached here.  /* #neg=1,176 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1238214793885048;  // std dev = 18.335, 1,593.000 (wgt'ed) examples reached here.  /* #neg=1,111 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.09287936941068793;  // std dev = 18.492, 1,659.000 (wgt'ed) examples reached here.  /* #neg=1,177 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07808604221324068;  // std dev = 18.488, 1,657.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07153968177898969;  // std dev = 18.398, 1,619.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.05442534956726981;  // std dev = 18.455, 1,643.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.041208919236742594;  // std dev = 18.497, 1,661.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.03342392446277797;  // std dev = 18.497, 1,661.000 (wgt'ed) examples reached here.  /* #neg=1,179 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.030172930630199386;  // std dev = 18.455, 1,643.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=482 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.302', 'seconds']
Parameter learned model CLL:-0.478703 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.542, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.49, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.335, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.492, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.488, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.398, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.455, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.497, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.497, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.455, 1, 482]}]
{'': [1.4354398702224246e-15, 0.20451765028958618]}
{'': [1.4354398702224247e-16, 0.20619840783654553]}
{'': [1.794299837778031e-15, 0.21102287983877183]}
{'': [6.100619448445304e-16, 0.20612502865806265]}
{'': [0.0, 0.20627181405926553]}
{'': [-4.485749594445077e-17, 0.20908063258992243]}
{'': [1.8840148296669324e-16, 0.20730230502596406]}
{'': [4.9343245538895844e-17, 0.20597835168168274]}
{'': [-1.1214373986112693e-16, 0.2059783516817052]}
{'': [4.261462114722823e-17, 0.2073023050259436]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 24.956
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.15360348055405781;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.16965972646641386;  // std dev = 0.463, 1,390.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=433 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04661296966239256;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.020311097261674547;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13385798024736764;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.15181391514562292;  // std dev = 0.465, 1,372.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.039566493426701224;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.039078394655573744;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.010380446351161162;  // std dev = 3.896, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12102028099254648;  // std dev = 0.461, 1,456.000 (wgt'ed) examples reached here.  /* #neg=1,010 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.024071197129668154;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.025043922103931013;  // std dev = 3.635, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 0.013730945010504246;  // std dev = 3.882, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.1249600536961407;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.15646518207921276;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.15218586516309252;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | | else return 0.10949019662254221;  // std dev = 16.972, 1,337.000 (wgt'ed) examples reached here.  /* #neg=917 #pos=420 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.02627264877326669;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.020592113894514805;  // std dev = 3.865, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.008108619670331083;  // std dev = 3.663, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08868476039654033;  // std dev = 0.463, 1,431.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.029578728562475308;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04837311398688525;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.007418545627321336;  // std dev = 3.890, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.11451231897336164;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07993901457491061;  // std dev = 0.466, 1,399.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04617107266181558;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.014831847029475742;  // std dev = 3.867, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.009293279367949311;  // std dev = 3.658, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05935285949966943;  // std dev = 0.463, 1,426.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.052200778448894966;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.0020550071514500723;  // std dev = 1.306, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.020464209397265006;  // std dev = 5.133, 184.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.005163420591790178;  // std dev = 0.440, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | | else return 0.04824767935793916;  // std dev = 0.464, 1,382.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.0378426998718541;  // std dev = 3.589, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.040935343829743474;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.003947464418877249;  // std dev = 3.884, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.10475937761863026;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.037018950544661346;  // std dev = 0.463, 1,433.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.02093658972656369;  // std dev = 3.617, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.14322224882573548;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.01413728582298828;  // std dev = 3.852, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.09555413177557236;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return -0.14172007736681286;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.025804990864419935;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.03020608208182727;  // std dev = 0.463, 1,387.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.03005241378163713;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.010890595659410288;  // std dev = 3.858, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return 0.010464941939175083;  // std dev = 3.629, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.766', 'seconds']
Refined model CLL: -0.473715


******************************************
Best model found
******************************************
Results 

CLL : -0.678403 

AUC ROC : 0.619351 

AUC PR : 0.639819 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 24.956 

Total Inference Time : 1.5812602043151855 

Total revision time: 29.69386918067932
Best scored revision CLL: -0.473715


Results 

CLL : -0.678403 

AUC ROC : 0.619351 

AUC PR : 0.639819 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 29.714181728363037 

Total Inference Time : 1.5812602043151855 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.71
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11460351721530632;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09210948752888284;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07318345847215395;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.057634348439473126;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.045085934115190816;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.035092443397827175;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.428', 'seconds']
Parameter learned model CLL:-0.627637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [19.926, 1, 632]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [-1.0503675224279742e-15, 0.23355570934255973]}
{'': [1.853589745461131e-15, 0.23355570934256867]}
{'': [9.267948727305654e-16, 0.23355570934254272]}
{'': [2.934850430313457e-16, 0.2335557093425736]}
{'': [-4.633974363652827e-17, 0.23355570934255332]}
{'': [2.703151712130816e-16, 0.23355570934257525]}
{'': [-2.703151712130816e-17, 0.23355570934256772]}
{'': [-1.5832745742480493e-16, 0.2335557093425776]}
{'': [5.0201388939572296e-17, 0.23355570934255943]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 56.829
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3058688212228416;  // std dev = 3.532, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2.444, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25333960844573267;  // std dev = 3.531, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2.445, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713763;  // std dev = 3.527, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.2392265087963707;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4892265087963705;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11490218447205226;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.1660251061391865;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7164764146199721;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.2695212489668094;  // std dev = 0.105, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46647641461997197;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.09168607457424896;  // std dev = 18.623, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.1275099998893477;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04421574458269951;  // std dev = 3.576, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0742752668228368;  // std dev = 0.483, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08725491339348565;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11699216222418747;  // std dev = 2.450, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07181784372780638;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022872931520347868;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5340219304747434;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.23229198066219744;  // std dev = 0.099, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.3453912819998781;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.19657319813539187;  // std dev = 2.089, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.05592415959430052;  // std dev = 18.988, 1,536.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=584 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.031269396266086505;  // std dev = 3.574, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04518495727493258;  // std dev = 0.483, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0493543861989121;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0801998644561967;  // std dev = 2.453, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.051425830100440294;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015378884268999339;  // std dev = 0.399, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5974872556585905;  // std dev = 3.65e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.37531129140083686;  // std dev = 0.204, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2861881608242903;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.03383576083418694;  // std dev = 18.557, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.04461095908073235;  // std dev = 4.293, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.024326854848850426;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.013054025714848016;  // std dev = 2.962, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.027', 'seconds']
Refined model CLL: -0.615829


******************************************
Best model found
******************************************
Results 

CLL : -0.590625 

AUC ROC : 0.636723 

AUC PR : 0.578045 

Precision : 0.746988 

Recall : 0.218502 

F1 : 0.338105 

Total Learning Time : 56.829 

Total Inference Time : 1.369945764541626 

Total revision time: 60.83402010345459
Best scored revision CLL: -0.615829


Results 

CLL : -0.590625 

AUC ROC : 0.636723 

AUC PR : 0.578045 

Precision : 0.746988 

Recall : 0.218502 

F1 : 0.338105 

Total Learning Time : 60.85433265113831 

Total Inference Time : 1.369945764541626 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.371
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15608333952704592;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.12083487756737883;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0924698618250928;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.07024281341416025;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05311363022664483;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.04004756889870338;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.451', 'seconds']
Parameter learned model CLL:-0.650109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.48e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 82], 'false': [15.548, 500, 468]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [8.665155314147563e-16, 0.2497267946178503]}
{'': [1.4730764034050857e-15, 0.24972679461786704]}
{'': [1.2997732971221344e-16, 0.2497267946178606]}
{'': [-3.4660621256590254e-16, 0.24972679461785535]}
{'': [-5.415722071342227e-17, 0.24972679461785033]}
{'': [-1.408087738548979e-16, 0.2497267946178522]}
{'': [2.166288828536891e-17, 0.24972679461784802]}
{'': [-5.144935967775116e-17, 0.24972679461785843]}
{'': [4.06179155350667e-17, 0.24972679461785577]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 29.09
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03996711691769419;  // std dev = 3.133, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.1134680840356819;  // std dev = 4.228, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.24613969075575545;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11623305111661432;  // std dev = 2.949, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.1427241283391345;  // std dev = 3.118, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04163883329901123;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.678628035059375;  // std dev = 0.125, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12246435534443814;  // std dev = 3.429, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.13801163369234362;  // std dev = 3.384, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3120530755117304;  // std dev = 12.600, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.2113100901992412;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.1002739790355267;  // std dev = 2.948, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.12244699710394773;  // std dev = 3.118, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03621377395946025;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2573766057410677;  // std dev = 2.642, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.021209842044061296;  // std dev = 2.094, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.23831613467486773;  // std dev = 0.495, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1768287636042101;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08549383439652593;  // std dev = 2.948, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.012378685965687869;  // std dev = 3.129, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08000849621170598;  // std dev = 4.204, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17283168567356774;  // std dev = 0.495, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.4166845057424114;  // std dev = 0.897, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.32025467151151615;  // std dev = 1.550, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.14469087855860843;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07213781940805951;  // std dev = 2.948, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.09210423488638173;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.025207565309152077;  // std dev = 4.212, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16145461671514164;  // std dev = 2.639, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.07060282907116859;  // std dev = 2.004, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.018270144533931977;  // std dev = 3.364, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.15156668401995968;  // std dev = 12.595, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.11623071657078907;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06032317185560299;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06072276557503413;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.003236791981160831;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09776837558219122;  // std dev = 0.494, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3320187066023341;  // std dev = 0.897, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.21459582587657428;  // std dev = 1.554, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.09203322686996332;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.050059503247666885;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05118379923897666;  // std dev = 4.181, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0027569652626689275;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07359847657030213;  // std dev = 0.493, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.25198771224961564;  // std dev = 0.898, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1638293196580684;  // std dev = 1.553, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1914306235811403;  // std dev = 0.083, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.07991025940597285;  // std dev = 4.269, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.06622163610607322;  // std dev = 4.266, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.21418921500333735;  // std dev = 0.095, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4621997211289496;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.21294666263212642;  // std dev = 2.335, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21393376845991077;  // std dev = 1.418, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.08147840583522373;  // std dev = 3.189, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.06368741268839256;  // std dev = 0.494, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.05455982270202535;  // std dev = 3.072, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.007186388943347006;  // std dev = 4.188, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.43398883976455604;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24346375010866952;  // std dev = 2.296, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.29709808461292897;  // std dev = 1.457, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.06672116675787385;  // std dev = 3.172, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.045246098620467086;  // std dev = 12.864, 696.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=380 */
%   | | | else return 0.06927955373472008;  // std dev = 4.271, 92.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.020094313987537478;  // std dev = 3.183, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | | else return -0.13421124585451785;  // std dev = 0.518, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.228', 'seconds']
Refined model CLL: -0.596052


******************************************
Best model found
******************************************
Results 

CLL : -0.653478 

AUC ROC : 0.61648 

AUC PR : 0.552158 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 29.09 

Total Inference Time : 1.1907017230987549 

Total revision time: 32.44789603805542
Best scored revision CLL: -0.596052


Results 

CLL : -0.653478 

AUC ROC : 0.61648 

AUC PR : 0.552158 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 32.468208585739134 

Total Inference Time : 1.1907017230987549 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.074
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.253', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 44.45
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37277259202160834;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30192753761678814;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3016108791985967;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23757287391463996;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00277475135055662;  // std dev = 3.071, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2137135450579878;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18241140956102492;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09676673656602773;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003761336513445365;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1842070553711496;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1376597568741871;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08863457116456785;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033000237681407455;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1356588358115877;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10189899174806238;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0019721332406458132;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09406367081378471;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002894268643883205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11300411419140355;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05984201257766986;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.07697842359646401;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.07811873217742597;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002537617124409127;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0025845391122892728;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045816398181049725;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08318093741379809;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05639739057264398;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.001745916820162231;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0808006728695498;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002265518206243104;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.035542037491345796;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06850257834982165;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04145008959339735;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.0699999118997218;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019853927335608253;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025571680295577047;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.277', 'seconds']
Refined model CLL: -0.621757


******************************************
Best model found
******************************************
Results 

CLL : -0.659306 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 44.45 

Total Inference Time : 1.2282767295837402 

Total revision time: 47.47420842552185
Best scored revision CLL: -0.621757


Results 

CLL : -0.659306 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 47.50210244560242 

Total Inference Time : 1.2282767295837402 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.161
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.174', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 45.898
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22171737779321607;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2531325933398254;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4135394151203006;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.1031272515463662;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.13891629954241463;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17955370484806227;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.31058191631929993;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0887175824827029;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18167807657295187;  // std dev = 1.237, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.10449961029747841;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13644035554819559;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.17309669016406795;  // std dev = 1.816, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23495189009805495;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05637817464248967;  // std dev = 1.610, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07840767106786309;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10485881121248347;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18250262308545917;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04935145005940963;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.18102915710527995;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.04310742143953907;  // std dev = 1.610, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05881185501233914;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.0814428203962038;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.15683269906296932;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03768756619198247;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04498781925070796;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.04571316233773167;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07948033979313097;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.13719108994736112;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.028695088409268772;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.915', 'seconds']
Refined model CLL: -0.667817


******************************************
Best model found
******************************************
Results 

CLL : -0.755813 

AUC ROC : 0.535441 

AUC PR : 0.342869 

Precision : 0.353386 

Recall : 0.957257 

F1 : 0.516206 

Total Learning Time : 45.898 

Total Inference Time : 1.2724003791809082 

Total revision time: 49.11614368820191
Best scored revision CLL: -0.667817


Results 

CLL : -0.755813 

AUC ROC : 0.535441 

AUC PR : 0.342869 

Precision : 0.353386 

Recall : 0.957257 

F1 : 0.516206 

Total Learning Time : 49.144037708282475 

Total Inference Time : 1.2724003791809082 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.654
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18400423515559258;  // std dev = 19.791, 1,783.000 (wgt'ed) examples reached here.  /* #neg=1,202 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18028146538139986;  // std dev = 19.492, 1,679.000 (wgt'ed) examples reached here.  /* #neg=1,098 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13401133272198282;  // std dev = 19.785, 1,781.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12118488718394359;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09875719808596271;  // std dev = 19.675, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07806994257966782;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06801049393880264;  // std dev = 19.638, 1,728.000 (wgt'ed) examples reached here.  /* #neg=1,147 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05445315408052265;  // std dev = 19.638, 1,728.000 (wgt'ed) examples reached here.  /* #neg=1,147 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03513972245107819;  // std dev = 19.758, 1,771.000 (wgt'ed) examples reached here.  /* #neg=1,190 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.029297677351530455;  // std dev = 19.737, 1,763.000 (wgt'ed) examples reached here.  /* #neg=1,182 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.103', 'seconds']
Parameter learned model CLL:-0.535228 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.791, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.492, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.785, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.675, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.638, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.638, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.758, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.737, 1, 581]}]
{'': [nan, 0.2196736234814292]}
{'': [nan, 0.22629610566145242]}
{'': [nan, 0.2198009370228865]}
{'': [nan, 0.22279593023178593]}
{'': [nan, 0.22234971615738225]}
{'': [nan, 0.22152103223255865]}
{'': [nan, 0.22317835594565705]}
{'': [nan, 0.22317835594564897]}
{'': [nan, 0.2204377509412766]}
{'': [nan, 0.22094744526438737]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 25.226
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16003572755234255;  // std dev = 0.459, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else return 0.2091774686097927;  // std dev = 0.477, 1,507.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=529 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.0346195233348065;  // std dev = 3.850, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
%   | | | else return 0.019765096715673995;  // std dev = 3.663, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1868814582578716;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.05478965697895421;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04178870915998716;  // std dev = 3.829, 97.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=18 */
%   | | | else return 0.01905492350647065;  // std dev = 3.654, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16208095088291521;  // std dev = 0.480, 1,518.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03345337732697944;  // std dev = 3.616, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04951040431152805;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.14122542562383775;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.01759591816523987;  // std dev = 3.877, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12958710821564487;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.023814018194729274;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03456297962106499;  // std dev = 3.824, 97.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=18 */
%   | | | else return 0.004142925161803712;  // std dev = 3.675, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10739231213354555;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.046786909628262985;  // std dev = 3.583, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.05604321412829781;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.008732817752373657;  // std dev = 3.873, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.14626404877707383;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0887833082862871;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.019455545350918597;  // std dev = 3.625, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.04345873541021105;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return 0.0020866971958654673;  // std dev = 0.362, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.32416954000782894;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09559811143640008;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return 0.08058974616800836;  // std dev = 0.482, 1,444.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.042140242819341346;  // std dev = 3.581, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.05357401838709088;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.008143609398994776;  // std dev = 3.866, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.12651037978170301;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05637412824279545;  // std dev = 0.480, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.024398898994792754;  // std dev = 3.605, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.039042948739911994;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.002948296941243807;  // std dev = 3.879, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.11559332488628996;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.008753366481572319;  // std dev = 3.166, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return -0.10785288406224654;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04725404556949347;  // std dev = 0.480, 1,463.000 (wgt'ed) examples reached here.  /* #neg=934 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.020898060531348798;  // std dev = 3.606, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.03955164173422952;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.005737721431575429;  // std dev = 3.899, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.09757221431550844;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06877339155234564;  // std dev = 0.487, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | else return 0.0423168318529501;  // std dev = 0.482, 1,442.000 (wgt'ed) examples reached here.  /* #neg=913 #pos=529 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.015771042656891627;  // std dev = 3.611, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.03486975678993354;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.006689172326819813;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.0010519027586675135;  // std dev = 3.661, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.712', 'seconds']
Refined model CLL: -0.529014


******************************************
Best model found
******************************************
Results 

CLL : -0.728079 

AUC ROC : 0.550309 

AUC PR : 0.500853 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 25.226 

Total Inference Time : 1.2432541847229004 

Total revision time: 29.01318133354187
Best scored revision CLL: -0.529014


Results 

CLL : -0.728079 

AUC ROC : 0.550309 

AUC PR : 0.500853 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 29.041075353622436 

Total Inference Time : 1.2432541847229004 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.353
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.153', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 74.992
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497722;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.1755276593955604;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332086;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084445;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.183223242635976;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230904723488827;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07213835268202302;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15155366093559125;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06365407449537303;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05375781042470201;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1151273304354866;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048919588954396825;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.03450189330266432;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09688925134737329;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.037429426420872026;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.025132501446958843;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07439238230775497;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.556', 'seconds']
Refined model CLL: -0.67001


******************************************
Best model found
******************************************
Results 

CLL : -0.643427 

AUC ROC : 0.564221 

AUC PR : 0.421946 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 74.992 

Total Inference Time : 1.3358392715454102 

Total revision time: 78.49456307411194
Best scored revision CLL: -0.67001


Results 

CLL : -0.643427 

AUC ROC : 0.564221 

AUC PR : 0.421946 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 78.5224570941925 

Total Inference Time : 1.3358392715454102 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.999
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.163', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 35.02
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.38027420357062824;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.032078136196191376;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.10106546954416978;  // std dev = 4.218, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.6226896307221419;  // std dev = 0.141, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1093820872074507;  // std dev = 3.433, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12300345775970677;  // std dev = 3.382, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3413995299761193;  // std dev = 13.066, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.11644681618787057;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.12001479059450904;  // std dev = 3.128, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.12358095880871148;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03629691665010788;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24367197150887804;  // std dev = 0.490, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3357985711366292;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.44270142380613475;  // std dev = 1.307, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2088101456823325;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07709292596790189;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.012245500808286038;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08071097691968314;  // std dev = 4.203, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.20983727579730999;  // std dev = 2.648, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.18699532818530865;  // std dev = 13.690, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2533072765842827;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.40712169342045534;  // std dev = 0.159, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.03717101432095606;  // std dev = 1.210, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.0933258993784176;  // std dev = 3.110, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06935008947901812;  // std dev = 4.192, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.008834228187531865;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.37663906849977546;  // std dev = 0.140, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14001331405078868;  // std dev = 13.927, 808.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=472 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2073525975137976;  // std dev = 1.249, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.31445133496961664;  // std dev = 0.139, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1462804063685392;  // std dev = 1.546, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05727834125874376;  // std dev = 2.942, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.06195692156766389;  // std dev = 4.188, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 1.968527609820431E-4;  // std dev = 3.141, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10632861609224789;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.15529773902691274;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20726663449048138;  // std dev = 1.273, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.15478695963988656;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03960541250369632;  // std dev = 2.931, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.0020453742649039577;  // std dev = 3.132, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0540862086361899;  // std dev = 4.189, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4576408791663606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.22236727554841232;  // std dev = 2.322, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2770334069335519;  // std dev = 1.597, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08267893802745058;  // std dev = 3.202, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.05385127838481498;  // std dev = 3.063, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.04485438982708987;  // std dev = 3.403, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.10211364556684618;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.011201072536776517;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4687376105070595;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.20864233526098044;  // std dev = 2.290, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.27804012291805547;  // std dev = 1.599, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.08945616377508916;  // std dev = 3.202, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.06709860869574724;  // std dev = 13.329, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.13186595163769027;  // std dev = 1.557, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04096603961338845;  // std dev = 4.176, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.012012536127312685;  // std dev = 3.135, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4406200579440042;  // std dev = 0.995, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.3874495102799308;  // std dev = 0.495, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return -0.19219246900059025;  // std dev = 0.919, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.05816396706008199;  // std dev = 3.192, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.04440549795374107;  // std dev = 2.846, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.032759744777867535;  // std dev = 3.268, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.059969743083079924;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.007248544840411987;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.095', 'seconds']
Refined model CLL: -0.619619


******************************************
Best model found
******************************************
Results 

CLL : -0.705591 

AUC ROC : 0.555101 

AUC PR : 0.404145 

Precision : 0.375538 

Recall : 0.919741 

F1 : 0.533318 

Total Learning Time : 35.02 

Total Inference Time : 1.138157606124878 

Total revision time: 37.913688129425054
Best scored revision CLL: -0.619619


Results 

CLL : -0.705591 

AUC ROC : 0.555101 

AUC PR : 0.404145 

Precision : 0.375538 

Recall : 0.919741 

F1 : 0.533318 

Total Learning Time : 37.94158214950562 

Total Inference Time : 1.138157606124878 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.994
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.279', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 45.17
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37277259202160834;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30192753761678814;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.2900483081482592;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23856395143324036;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.2405831397016751;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1818966655714435;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18113628827822217;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13790738092827323;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1354787623251185;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10193200722596747;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002045188223972286;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.11079202760842766;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07718338584810278;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.0756200809637379;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002584328669285462;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08238024962626782;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05654032132614445;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07050145559114838;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022653328730364527;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.07006031952139054;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04288378422919174;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.0198193374130048;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.007833971483499246;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 7.137965988947434E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.222', 'seconds']
Refined model CLL: -0.621932


******************************************
Best model found
******************************************
Results 

CLL : -0.659085 

AUC ROC : 0.555768 

AUC PR : 0.429049 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 45.17 

Total Inference Time : 1.13592529296875 

Total revision time: 48.00755473518372
Best scored revision CLL: -0.621932


Results 

CLL : -0.659085 

AUC ROC : 0.555768 

AUC PR : 0.429049 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.03143974685669 

Total Inference Time : 1.13592529296875 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.091
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.133', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 45.095
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211524;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10459348710461978;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.2399523433083081;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.3176515255108324;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.33324199902303153;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4558153748715591;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1269550565727362;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15762381970277634;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18399979254852572;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857309998181195;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2724786187727352;  // std dev = 1.859, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10823437731842023;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14102987661941238;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.15944554257026922;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.19689342545857452;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.28116111109659064;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08428552717955452;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08381249465409701;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.30845646648740377;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.062469629911001454;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15244962810769844;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.10450744530252239;  // std dev = 17.051, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1364290330498457;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.17399197299544586;  // std dev = 1.838, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06506600997309582;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07968008052199177;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08776560865825965;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1195985969547375;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.19879184882627246;  // std dev = 2.98e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04992255465396755;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02834001126565414;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05980718015020486;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06333582547634568;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0970972865450376;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16901077828753447;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0381399950396174;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.021569786253976098;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.044923868767868726;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.04769009012716299;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07782015436661913;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.14658191878092502;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.02905099376636656;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.016393459948817996;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.923', 'seconds']
Refined model CLL: -0.666848


******************************************
Best model found
******************************************
Results 

CLL : -0.755192 

AUC ROC : 0.537201 

AUC PR : 0.346119 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 45.095 

Total Inference Time : 1.1603991985321045 

Total revision time: 48.158389221191406
Best scored revision CLL: -0.666848


Results 

CLL : -0.755192 

AUC ROC : 0.537201 

AUC PR : 0.346119 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 48.18227423286438 

Total Inference Time : 1.1603991985321045 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.648
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19321237223906904;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1647753070430968;  // std dev = 19.703, 1,751.000 (wgt'ed) examples reached here.  /* #neg=1,170 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1487309691676177;  // std dev = 19.583, 1,709.000 (wgt'ed) examples reached here.  /* #neg=1,128 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12249277178014208;  // std dev = 19.615, 1,720.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10385024545987222;  // std dev = 19.574, 1,706.000 (wgt'ed) examples reached here.  /* #neg=1,125 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08298739796701854;  // std dev = 19.597, 1,714.000 (wgt'ed) examples reached here.  /* #neg=1,133 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06509401833706648;  // std dev = 19.624, 1,723.000 (wgt'ed) examples reached here.  /* #neg=1,142 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04890919512934039;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040378956437095596;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02414184387254668;  // std dev = 19.761, 1,772.000 (wgt'ed) examples reached here.  /* #neg=1,191 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.130', 'seconds']
Parameter learned model CLL:-0.536369 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.703, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.583, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.615, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.574, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.597, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.624, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.761, 1, 581]}]
{'': [nan, 0.22279593023177036]}
{'': [nan, 0.22171225645393897]}
{'': [nan, 0.22438876412727393]}
{'': [nan, 0.223688142239031]}
{'': [nan, 0.2245797536863836]}
{'': [nan, 0.22407035750610252]}
{'': [nan, 0.22349699147346128]}
{'': [nan, 0.2224772090799299]}
{'': [nan, 0.2229871500797286]}
{'': [nan, 0.2203740528614312]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 51.531
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.16767274462332188;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.18314893509951236;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.22152921678964824;  // std dev = 18.124, 1,420.000 (wgt'ed) examples reached here.  /* #neg=904 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.030739953789376686;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.004937925925200435;  // std dev = 3.695, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1897268743588411;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.05761273155296539;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.02480616023609255;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.015470220356516367;  // std dev = 3.884, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.14237327892315263;  // std dev = 0.000438, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15803552873247848;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.010459611698127947;  // std dev = 3.666, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return 0.10999756390432691;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.008544270465002678;  // std dev = 3.895, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.12578583098240403;  // std dev = 0.000353, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13019926892767797;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.03384453935306575;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.030243165224428343;  // std dev = 1.320, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.012250235285099014;  // std dev = 3.882, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.11272325567589993;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11771372268126937;  // std dev = 0.482, 1,485.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.003616870779685144;  // std dev = 0.359, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.009503302090958;  // std dev = 1.310, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.024556790268407888;  // std dev = 5.126, 183.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08465778438992418;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03559476219456729;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.054072411540807934;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.015633397882545374;  // std dev = 3.857, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.10350295252500323;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.18168319247213427;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.02791955977944543;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.07545972012569696;  // std dev = 0.481, 1,451.000 (wgt'ed) examples reached here.  /* #neg=922 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.01032919587539846;  // std dev = 3.641, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.06159359248109527;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.13406050424441585;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0012404716922242002;  // std dev = 3.887, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05692300793914968;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.0396241443419019;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.02930114926516758;  // std dev = 3.599, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.016991386868396796;  // std dev = 3.845, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5800837771805321;  // std dev = 6.602, 445.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=396 */
%   | | | else return -0.2852762717177058;  // std dev = 4.129, 904.000 (wgt'ed) examples reached here.  /* #neg=888 #pos=16 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.16924997827340896;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.2003774119276179;  // std dev = 7.982, 258.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=132 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0038866166144402737;  // std dev = 3.738, 100.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=17 */
%   | | | else return 0.08078441825884246;  // std dev = 1.594, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.6780374143881356;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09282202763152023;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.2649094138299392;  // std dev = 0.737, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.03103827824895018;  // std dev = 0.417, 1,484.000 (wgt'ed) examples reached here.  /* #neg=942 #pos=542 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.07912629830824786;  // std dev = 0.408, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.004423591161269915;  // std dev = 3.491, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.021720199964859;  // std dev = 3.695, 118.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.238', 'seconds']
Refined model CLL: -0.43513


******************************************
Best model found
******************************************
Results 

CLL : -0.57922 

AUC ROC : 0.838897 

AUC PR : 0.767909 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 51.531 

Total Inference Time : 1.825709581375122 

Total revision time: 56.017983535766604
Best scored revision CLL: -0.43513


Results 

CLL : -0.57922 

AUC ROC : 0.838897 

AUC PR : 0.767909 

Precision : 1.0 

Recall : 0.005747 

F1 : 0.011429 

Total Learning Time : 56.04186854743958 

Total Inference Time : 1.825709581375122 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.29
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.211', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 66.043
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.42475617506381624;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1043741085989677;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1846508848215219;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3177650311402712;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.08006052311436539;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10122723928974585;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03728292940755487;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5024894214429478;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.253884808586059;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.35229746711606474;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.061919050150514736;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.0763398668626433;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.031339518147954576;  // std dev = 3.574, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04873951778213237;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03511702818548421;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09597972890594474;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05110465359781665;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015677896419522035;  // std dev = 0.399, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.08775434919275504;  // std dev = 1.160, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.25237501174370947;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0361585252869853;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04323370626985294;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02192191204303767;  // std dev = 3.281, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.01808398620032853;  // std dev = 1.430, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.01331083742097621;  // std dev = 0.399, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.885', 'seconds']
Refined model CLL: -0.666801


******************************************
Best model found
******************************************
Results 

CLL : -0.642625 

AUC ROC : 0.569529 

AUC PR : 0.429152 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 66.043 

Total Inference Time : 1.5604209899902344 

Total revision time: 69.67817264366151
Best scored revision CLL: -0.666801


Results 

CLL : -0.642625 

AUC ROC : 0.569529 

AUC PR : 0.429152 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 69.70205765533449 

Total Inference Time : 1.5604209899902344 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.057
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.175', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 31.19
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654374;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.6674283310648044;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10890834029897223;  // std dev = 3.434, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.4776680855207563;  // std dev = 1.606, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24545322128280278;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3445004799862657;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.48397926981401385;  // std dev = 0.147, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.02644133491846654;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.18841466660351683;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25969643016524363;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3671775830814486;  // std dev = 0.138, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.012287199930136975;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0687369586834094;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14259991125887095;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.19699750585433026;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.28721523438517205;  // std dev = 0.122, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 5.258890547054709E-4;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07849983607364949;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05855866946674006;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250092;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4806887712150312;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2335511283311619;  // std dev = 2.348, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2918015017612741;  // std dev = 1.659, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.09060906635390263;  // std dev = 3.215, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.11868641280307789;  // std dev = 13.428, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.18075485440373854;  // std dev = 1.552, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.06638149167082034;  // std dev = 3.112, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.01877280824325357;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.3773022179003116;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -1.8060217873289153E-4;  // std dev = 1.005, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.04939903635044155;  // std dev = 2.904, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | | | else return -0.04442775942406804;  // std dev = 3.421, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.06099418251464512;  // std dev = 3.069, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.056099798575725966;  // std dev = 3.394, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.10135432999366785;  // std dev = 13.047, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.016056553416930675;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.37130514312207424;  // std dev = 0.166, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25285514502621;  // std dev = 0.146, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(E, G), haswordvenue(B, G) )
%   | | | then return -0.3543910884955646;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.007359918883531379;  // std dev = 4.499, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.0649001048262522;  // std dev = 13.408, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.13195883227173558;  // std dev = 1.558, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.06072765921091268;  // std dev = 3.108, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.013707038207901057;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3738037222386219;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.15512056042681188;  // std dev = 2.255, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.22228956836208977;  // std dev = 1.561, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07977902239141946;  // std dev = 3.206, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.031326826428447876;  // std dev = 3.070, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.058698914347611174;  // std dev = 3.391, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.05996276201561911;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.01168209297571316;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.087', 'seconds']
Refined model CLL: -0.628659


******************************************
Best model found
******************************************
Results 

CLL : -0.707617 

AUC ROC : 0.554028 

AUC PR : 0.402723 

Precision : 0.373873 

Recall : 0.924605 

F1 : 0.532446 

Total Learning Time : 31.19 

Total Inference Time : 1.0655274391174316 

Total revision time: 34.01090242576599
Best scored revision CLL: -0.628659


Results 

CLL : -0.707617 

AUC ROC : 0.554028 

AUC PR : 0.402723 

Precision : 0.373873 

Recall : 0.924605 

F1 : 0.532446 

Total Learning Time : 34.034787437438965 

Total Inference Time : 1.0655274391174316 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.976
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.231', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 41.785
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3688769765977062;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.38614045132289815;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3007528710134885;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0031576158915441106;  // std dev = 3.073, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.268363488524916;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23873101297787935;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10659972967786581;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004275198200142493;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.24549153970534274;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1815164904434683;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09686776837207182;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037523389461441205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18487683799432716;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1375981921786791;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08872009475685076;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032921083304070144;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13567600845156405;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10189408078670127;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08180574262627595;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028873101104008913;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11351444451785635;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05984201257766986;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.07693377400076784;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.07586882447203397;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0025315036113168696;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045816398181049725;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08362751046050713;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05632976128164128;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07071876782370917;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022189414091018872;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554203749134576;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06854345274606932;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04144423371380909;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.007456245084003064;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 2.1745060803527247E-4;  // std dev = 2.920, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.027', 'seconds']
Refined model CLL: -0.621792


******************************************
Best model found
******************************************
Results 

CLL : -0.659349 

AUC ROC : 0.555544 

AUC PR : 0.427922 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 41.785 

Total Inference Time : 1.1524899005889893 

Total revision time: 44.65434964752197
Best scored revision CLL: -0.621792


Results 

CLL : -0.659349 

AUC ROC : 0.555544 

AUC PR : 0.427922 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.77968557929992 

Total Inference Time : 1.1524899005889893 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.126
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.230', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 36.003
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211524;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558626;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359355;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3332523139479392;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4558251098703148;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05156272417014592;  // std dev = 1.640, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.18401378084152512;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857143614979437;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.3413723950665916;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10390055191315252;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1410177453604853;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1594613655167904;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.19687737356900537;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2692252801573361;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08078498109920405;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.30780334783569147;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10581677151268654;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1505041090862628;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1043531940605982;  // std dev = 17.054, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13642810972994943;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1677443848193327;  // std dev = 1.835, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.28041326283630597;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.08028536796911312;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20739144818956867;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07809851090350774;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10484602838966868;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1549338027736556;  // std dev = 1.817, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.027192137512626186;  // std dev = 1.819, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2135631877361277;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.07152644152782131;  // std dev = 1.614, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05860839970944195;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08143057871766553;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.16931916023662502;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0339445566250183;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.020695190599277758;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.197870140332789;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.07815060657872187;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14540646959715703;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.07866642824589974;  // std dev = 2.116, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.04345534886935731;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10325575909342648;  // std dev = 1.824, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.025822742065959598;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.799', 'seconds']
Refined model CLL: -0.665152


******************************************
Best model found
******************************************
Results 

CLL : -0.756829 

AUC ROC : 0.536133 

AUC PR : 0.345341 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 36.003 

Total Inference Time : 1.3686399459838867 

Total revision time: 39.25313930892944
Best scored revision CLL: -0.665152


Results 

CLL : -0.756829 

AUC ROC : 0.536133 

AUC PR : 0.345341 

Precision : 0.353813 

Recall : 0.956367 

F1 : 0.516532 

Total Learning Time : 44.378475240707395 

Total Inference Time : 1.3686399459838867 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.68
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19457047534270364;  // std dev = 19.635, 1,727.000 (wgt'ed) examples reached here.  /* #neg=1,146 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16382999976450605;  // std dev = 19.714, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.142418479855363;  // std dev = 19.675, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12329154384757142;  // std dev = 19.618, 1,721.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0935729997623375;  // std dev = 19.739, 1,764.000 (wgt'ed) examples reached here.  /* #neg=1,183 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07592418183953278;  // std dev = 19.745, 1,766.000 (wgt'ed) examples reached here.  /* #neg=1,185 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06374535825617351;  // std dev = 19.709, 1,753.000 (wgt'ed) examples reached here.  /* #neg=1,172 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04769726216230513;  // std dev = 19.758, 1,771.000 (wgt'ed) examples reached here.  /* #neg=1,190 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04305276144853914;  // std dev = 19.684, 1,744.000 (wgt'ed) examples reached here.  /* #neg=1,163 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03410711882858776;  // std dev = 19.684, 1,744.000 (wgt'ed) examples reached here.  /* #neg=1,163 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.109', 'seconds']
Parameter learned model CLL:-0.535129 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.635, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.714, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.675, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.618, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.739, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.745, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.709, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.758, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.684, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.684, 1, 581]}]
{'': [nan, 0.2232420875035775]}
{'': [nan, 0.22145729336614325]}
{'': [nan, 0.22234971615735655]}
{'': [nan, 0.2236244281850441]}
{'': [nan, 0.22088372385991425]}
{'': [nan, 0.2207562887253756]}
{'': [nan, 0.2215847724493949]}
{'': [nan, 0.2204377509412799]}
{'': [nan, 0.2221584751914908]}
{'': [nan, 0.22215847519148055]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 26.314
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2157604836559378;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.058148935099512376;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.04661296966239256;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0363667568816906;  // std dev = 3.846, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.12980409915972835;  // std dev = 3.240, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.07980409915972808;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.1869951862630389;  // std dev = 0.479, 1,481.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.04150568789016177;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.03271500549576706;  // std dev = 1.326, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.022754712822089723;  // std dev = 5.154, 189.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.13676706711350703;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return 0.06823507134914053;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.16136554779377557;  // std dev = 0.480, 1,471.000 (wgt'ed) examples reached here.  /* #neg=942 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.031062876659774783;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.027860445361472634;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.013853346802252165;  // std dev = 3.884, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.14416183484299075;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14013409665108847;  // std dev = 0.481, 1,494.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04836893093734066;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.021667610857152974;  // std dev = 3.637, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 4.069697772075987E-4;  // std dev = 3.900, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10619703646546227;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.03826171843392863;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.017004671025143032;  // std dev = 3.862, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return 0.0061578170090933766;  // std dev = 3.664, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07991678773473812;  // std dev = 0.477, 1,555.000 (wgt'ed) examples reached here.  /* #neg=1,010 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.05075416811504697;  // std dev = 3.559, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.01272597862443603;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.06737159735831737;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.024947582227825067;  // std dev = 3.620, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.3430195020889658;  // std dev = 1.079, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.08071974375439317;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05502988280343345;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0.07300836005029136;  // std dev = 18.171, 1,433.000 (wgt'ed) examples reached here.  /* #neg=917 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.0429409394587249;  // std dev = 3.579, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.06261998159499117;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.003497381217917795;  // std dev = 3.874, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.1270880102450246;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.058443866401657954;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.021632302609635654;  // std dev = 3.607, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.02552256168602825;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.12699184573714128;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.005785711463411098;  // std dev = 3.896, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.017734600402935768;  // std dev = 3.172, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return 0.003400543942948383;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.04599793670712836;  // std dev = 0.480, 1,467.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03218864847648668;  // std dev = 3.590, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.06201912893661983;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.007906778073069774;  // std dev = 3.858, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.12063806373835041;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.15429541586283865;  // std dev = 1.213, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.004213381735895258;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.03850991162076667;  // std dev = 0.481, 1,459.000 (wgt'ed) examples reached here.  /* #neg=930 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.05119144942311564;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.042315341693488884;  // std dev = 1.320, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return -0.008196362370392438;  // std dev = 5.189, 209.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=32 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.872', 'seconds']
Refined model CLL: -0.528356


******************************************
Best model found
******************************************
Results 

CLL : -0.728855 

AUC ROC : 0.550282 

AUC PR : 0.500848 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 26.314 

Total Inference Time : 1.5789730548858643 

Total revision time: 30.472532552719116
Best scored revision CLL: -0.528356


Results 

CLL : -0.728855 

AUC ROC : 0.550282 

AUC PR : 0.500848 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 35.59786848449707 

Total Inference Time : 1.5789730548858643 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.271
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.170', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 80.277
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0803711573217346;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1762671721046229;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04789385243275259;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.15150238996222307;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04161364193995419;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.292014351437432;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12787545250346505;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03598745608932591;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.10621981933357758;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03099336090453001;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896769;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18465088482152195;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08704211527084456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026595858635667033;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07865195988799582;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1401501348100049;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07053494519933444;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022750626979808865;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.05337173011871802;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11580583554988458;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05664736817908415;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019408516180768408;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03949443209299556;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08838528210282069;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.04517190030288224;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016518703664966692;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.025145885999215432;  // std dev = 3.496, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07453058718410033;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.020072910891958753;  // std dev = 3.280, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.021062438288986785;  // std dev = 1.431, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.01403103126101996;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.222', 'seconds']
Refined model CLL: -0.670446


******************************************
Best model found
******************************************
Results 

CLL : -0.642434 

AUC ROC : 0.564268 

AUC PR : 0.422241 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 80.277 

Total Inference Time : 1.497560977935791 

Total revision time: 83.85595288085938
Best scored revision CLL: -0.670446


Results 

CLL : -0.642434 

AUC ROC : 0.564268 

AUC PR : 0.422241 

Precision : 0.65625 

Recall : 0.037004 

F1 : 0.070058 

Total Learning Time : 88.98128881263733 

Total Inference Time : 1.497560977935791 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.041
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.282', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 31.783
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.7263997659160313;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.608456896213577;  // std dev = 0.134, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.30837723775582815;  // std dev = 13.942, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | | else return 0.4684679260950658;  // std dev = 1.838, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.21870212528902105;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08920786616446087;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.12358095880871146;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.5114297178263392;  // std dev = 0.218, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.036759933888721424;  // std dev = 3.406, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.05420624802834623;  // std dev = 3.369, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.27439319458340866;  // std dev = 13.058, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.16876667082068503;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07962838644597323;  // std dev = 2.950, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.01776896601112305;  // std dev = 3.136, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07947518809665366;  // std dev = 4.201, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.38787244133030707;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.026568514376211376;  // std dev = 3.411, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.19669547839117701;  // std dev = 13.426, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.3078991758918562;  // std dev = 1.597, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.1734348496644615;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06273385664271343;  // std dev = 2.940, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.006675985250898483;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0718926383961498;  // std dev = 4.198, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14145787138948254;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.21232389454741316;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.34576567558512206;  // std dev = 0.218, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.14161954474513444;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05214520573056076;  // std dev = 2.940, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0616978506606362;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0037534293573495826;  // std dev = 3.141, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.12705456436661278;  // std dev = 2.627, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.14314430012944807;  // std dev = 2.076, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11575138501257647;  // std dev = 13.405, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.19808616896732392;  // std dev = 1.577, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.11892137743823335;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.045530136778242934;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05619346838003482;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.0053634597949257425;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.2651822534563601;  // std dev = 0.159, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.054233796363474786;  // std dev = 3.311, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.08688364400236366;  // std dev = 13.404, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.1561511026514352;  // std dev = 1.578, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.09429272693018098;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03744482744880655;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.0048473983312699075;  // std dev = 3.134, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04800839413847708;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05934904628563157;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1115636158086267;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.22564799629489551;  // std dev = 0.198, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.1929471047788484;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.07035675517848902;  // std dev = 4.263, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06396889692514023;  // std dev = 4.263, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.21885093815785917;  // std dev = 0.095, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.09242867011598167;  // std dev = 2.598, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.17356206784672285;  // std dev = 2.059, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.051774938104958645;  // std dev = 13.374, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.11371777593548332;  // std dev = 1.577, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return -0.025797044720139304;  // std dev = 1.184, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.04569649965880723;  // std dev = 3.055, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.015001092531801508;  // std dev = 3.105, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.038317507373994066;  // std dev = 4.156, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.475', 'seconds']
Refined model CLL: -0.631514


******************************************
Best model found
******************************************
Results 

CLL : -0.705024 

AUC ROC : 0.554603 

AUC PR : 0.403786 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 31.783 

Total Inference Time : 1.1598973274230957 

Total revision time: 34.75249326133728
Best scored revision CLL: -0.631514


Results 

CLL : -0.705024 

AUC ROC : 0.554603 

AUC PR : 0.403786 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 39.87782919311523 

Total Inference Time : 1.1598973274230957 

Run: 4
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.312
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.385', 'seconds']
Parameter learned model CLL:-0.554626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [3.7007434154171886e-16, 0.20305555555554874]}
{'': [1.7393494052460785e-15, 0.20305555555554408]}
{'': [5.181040781584064e-16, 0.20305555555556368]}
{'': [1.850371707708594e-17, 0.20305555555556454]}
{'': [-4.625929269271486e-17, 0.20305555555555405]}
{'': [1.6653345369377348e-16, 0.203055555555546]}
{'': [6.013708050052931e-17, 0.2030555555555644]}
{'': [-6.013708050052931e-17, 0.20305555555555183]}
{'': [1.3877787807814457e-17, 0.2030555555555464]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 41.47
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15012155747461325;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09274792770397192;  // std dev = 1.878, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520728;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091853;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12847188454287883;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3771445713199655;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07868050850172133;  // std dev = 1.873, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917126;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004881411392881223;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10824721129565915;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.36083835357047567;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.051944324790213076;  // std dev = 1.830, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0026771818010361327;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11768949475621579;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08997584741791546;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2942393630870249;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04197304976303219;  // std dev = 1.825, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.101075658957185;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037648061742770592;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07393338514194783;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.28015187619970455;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.021189099110885252;  // std dev = 1.791, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00230167550768375;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0964812599723447;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033030781440662295;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06017658097237018;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2235363995256824;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.015533594356430314;  // std dev = 1.786, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0019260416844976921;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09833786609300987;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037178497326556107;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04860309219801762;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21272575770335544;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0014365477939673552;  // std dev = 1.763, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08425142153944591;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032617880988637673;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003274283132391999;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03901353060306443;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16945130188547677;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -9.963215462416794E-4;  // std dev = 1.759, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07797477644461982;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028606737211375128;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028716549759030957;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.031162595632041806;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16145148996050276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.009744847419998875;  // std dev = 1.744, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07255010093946412;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025081179807338624;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025177629046380513;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.176', 'seconds']
Refined model CLL: -0.538963


******************************************
Best model found
******************************************
Results 

CLL : -0.617567 

AUC ROC : 0.618184 

AUC PR : 0.569661 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 41.47 

Total Inference Time : 1.1941514015197754 

Total revision time: 44.79291575622558
Best scored revision CLL: -0.538963


Results 

CLL : -0.617567 

AUC ROC : 0.618184 

AUC PR : 0.569661 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 44.81328027915954 

Total Inference Time : 1.1941514015197754 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.534
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.476', 'seconds']
Parameter learned model CLL:-0.645914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [-3.4492365813597096e-16, 0.24738315415699694]}
{'': [1.793603022307049e-15, 0.24738315415698806]}
{'': [6.553549504583448e-16, 0.2473831541570005]}
{'': [-2.4144656069517967e-16, 0.24738315415699036]}
{'': [-5.1738548720395646e-17, 0.24738315415699547]}
{'': [2.0695419488158259e-16, 0.2473831541570034]}
{'': [2.5869274360197823e-17, 0.24738315415699816]}
{'': [-1.2503482607428947e-16, 0.24738315415699647]}
{'': [4.527123013034619e-17, 0.24738315415700443]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 43.347
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952967;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1748018520118576;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24345913760804222;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.21202320704313737;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4347012070665525;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.13579081172090268;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.26454691323419927;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.13126746347189114;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.17164134178954515;  // std dev = 2.683, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.21003275240803626;  // std dev = 1.826, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10082332467967116;  // std dev = 0.497, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.14565570743381498;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11174564408180727;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06568277885928464;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3019873869520114;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17768389498944528;  // std dev = 1.256, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07426534566988352;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.09876313641819943;  // std dev = 2.683, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18263666018985042;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05039052966373969;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.22842597205355997;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13694670548561577;  // std dev = 1.256, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05575266921748007;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.07587821981907944;  // std dev = 2.683, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.15693376808783466;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03849073543416359;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04275882447332619;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0734583109140395;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.04227826089551802;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.13726959235897412;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.029311532445449345;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.857', 'seconds']
Refined model CLL: -0.632426


******************************************
Best model found
******************************************
Results 

CLL : -0.704473 

AUC ROC : 0.610976 

AUC PR : 0.486584 

Precision : 0.353492 

Recall : 0.957703 

F1 : 0.516385 

Total Learning Time : 43.347 

Total Inference Time : 1.1157705783843994 

Total revision time: 46.8537087020874
Best scored revision CLL: -0.632426


Results 

CLL : -0.704473 

AUC ROC : 0.610976 

AUC PR : 0.486584 

Precision : 0.353492 

Recall : 0.957703 

F1 : 0.516385 

Total Learning Time : 46.87407322502136 

Total Inference Time : 1.1157705783843994 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.015
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.16072269530038621;  // std dev = 18.335, 1,593.000 (wgt'ed) examples reached here.  /* #neg=1,111 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1331420976327155;  // std dev = 18.425, 1,630.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.10955054024174227;  // std dev = 18.485, 1,656.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.10157913962391969;  // std dev = 18.369, 1,607.000 (wgt'ed) examples reached here.  /* #neg=1,125 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08215721657212727;  // std dev = 18.406, 1,622.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.0599447083099966;  // std dev = 18.510, 1,667.000 (wgt'ed) examples reached here.  /* #neg=1,185 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.05793951236537406;  // std dev = 18.396, 1,618.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.041613701699643305;  // std dev = 18.469, 1,649.000 (wgt'ed) examples reached here.  /* #neg=1,167 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.0407966284962562;  // std dev = 18.377, 1,610.000 (wgt'ed) examples reached here.  /* #neg=1,128 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.023009116125428473;  // std dev = 18.506, 1,665.000 (wgt'ed) examples reached here.  /* #neg=1,183 #pos=482 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.306', 'seconds']
Parameter learned model CLL:-0.479564 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.335, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.425, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.485, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.369, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.406, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.51, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.396, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.469, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.377, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.506, 1, 482]}]
{'': [1.4354398702224246e-15, 0.21102287983876333]}
{'': [1.4354398702224247e-16, 0.2082637660431292]}
{'': [1.794299837778031e-15, 0.20634524726365144]}
{'': [6.100619448445304e-16, 0.20997510502626526]}
{'': [0.0, 0.20885755510315412]}
{'': [-4.485749594445077e-17, 0.20553897618797307]}
{'': [1.8840148296669324e-16, 0.20915504040606175]}
{'': [4.9343245538895844e-17, 0.20686002983963878]}
{'': [-1.1214373986112693e-16, 0.20975116700744226]}
{'': [4.261462114722823e-17, 0.20568532496460604]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 20.08
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16658600287267475;  // std dev = 0.462, 1,446.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.02481560176617905;  // std dev = 3.873, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return 0.0010060779566552149;  // std dev = 3.703, 112.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15183113185420397;  // std dev = 0.465, 1,415.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04564846267645205;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.044898782474260934;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.020599852627630824;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.14197357824080598;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13406709172013195;  // std dev = 0.466, 1,397.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.03555136486081192;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.03339043616556799;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.018316152627821745;  // std dev = 3.868, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.1250846782844013;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10981107174436913;  // std dev = 0.465, 1,411.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.06112078315923883;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05079003108598848;  // std dev = 3.578, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return 0.012974234204913494;  // std dev = 3.873, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0859656254372634;  // std dev = 0.463, 1,435.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03390366167910123;  // std dev = 3.602, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.032109683147484566;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.011530249780991852;  // std dev = 3.878, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.11236559924665876;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06976587954431086;  // std dev = 0.462, 1,439.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.012148807894336899;  // std dev = 0.349, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.026570919138752154;  // std dev = 3.839, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.01164817390638925;  // std dev = 3.643, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06888887151626864;  // std dev = 0.467, 1,385.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.027400250862773725;  // std dev = 0.371, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.012079404883225672;  // std dev = 3.861, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.0017416057462418624;  // std dev = 3.667, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04682556987418343;  // std dev = 0.464, 1,424.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 3.5378563399766417E-4;  // std dev = 3.656, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.08002691146594611;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0038261799026672832;  // std dev = 3.883, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.10210655598490312;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return -0.27562683932468385;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0035926636952290387;  // std dev = 0.428, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09580173210388783;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | | else return 0.03874441816035241;  // std dev = 16.970, 1,336.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=420 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.033911506540566363;  // std dev = 3.812, 94.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=18 */
%   | | | else return 0.0062555925000883665;  // std dev = 3.643, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return -0.2241079412203523;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.02984078614776206;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.05698861677901956;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.03644886808659439;  // std dev = 16.901, 1,313.000 (wgt'ed) examples reached here.  /* #neg=893 #pos=420 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.025708409535527017;  // std dev = 3.603, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.04852793355077296;  // std dev = 1.335, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.017876396840080116;  // std dev = 0.349, 126.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '2.426', 'seconds']
Refined model CLL: -0.475029


******************************************
Best model found
******************************************
Results 

CLL : -0.676088 

AUC ROC : 0.616711 

AUC PR : 0.637312 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 20.08 

Total Inference Time : 1.2557103633880615 

Total revision time: 24.356085987091063
Best scored revision CLL: -0.475029


Results 

CLL : -0.676088 

AUC ROC : 0.616711 

AUC PR : 0.637312 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 24.376450510025023 

Total Inference Time : 1.2557103633880615 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.734
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11460351721530632;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09210948752888284;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07318345847215395;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.057634348439473126;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.045085934115190816;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.035092443397827175;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.400', 'seconds']
Parameter learned model CLL:-0.627637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [19.926, 1, 632]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [-1.0503675224279742e-15, 0.23355570934255973]}
{'': [1.853589745461131e-15, 0.23355570934256867]}
{'': [9.267948727305654e-16, 0.23355570934254272]}
{'': [2.934850430313457e-16, 0.2335557093425736]}
{'': [-4.633974363652827e-17, 0.23355570934255332]}
{'': [2.703151712130816e-16, 0.23355570934257525]}
{'': [-2.703151712130816e-17, 0.23355570934256772]}
{'': [-1.5832745742480493e-16, 0.2335557093425776]}
{'': [5.0201388939572296e-17, 0.23355570934255943]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 67.727
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.30586882122284165;  // std dev = 3.532, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2.444, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25333960844573283;  // std dev = 3.531, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2.445, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713774;  // std dev = 3.527, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.2392265087963707;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4892265087963705;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11490218447205226;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.16602510613918653;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09385311470831026;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11776859164178947;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14780460040509422;  // std dev = 2.450, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0743913317097016;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08679747172194953;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11789281366539173;  // std dev = 2.453, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.15350487536395235;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.34495346850534037;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05677002952807655;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.07316562105540578;  // std dev = 4.293, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04557865573969209;  // std dev = 0.484, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.047041466632561625;  // std dev = 3.521, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07182457959296036;  // std dev = 2.454, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03539451047779302;  // std dev = 0.484, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.033186693531294414;  // std dev = 3.519, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05845711240468571;  // std dev = 2.456, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.672', 'seconds']
Refined model CLL: -0.620933


******************************************
Best model found
******************************************
Results 

CLL : -0.593441 

AUC ROC : 0.628699 

AUC PR : 0.566551 

Precision : 0.818363 

Recall : 0.180617 

F1 : 0.295922 

Total Learning Time : 67.727 

Total Inference Time : 1.285614252090454 

Total revision time: 71.76480606651306
Best scored revision CLL: -0.620933


Results 

CLL : -0.593441 

AUC ROC : 0.628699 

AUC PR : 0.566551 

Precision : 0.818363 

Recall : 0.180617 

F1 : 0.295922 

Total Learning Time : 71.78517058944702 

Total Inference Time : 1.285614252090454 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.335
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15608333952704592;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.12083487756737883;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0924698618250928;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.07024281341416025;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05311363022664483;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.04004756889870338;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.534', 'seconds']
Parameter learned model CLL:-0.650109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.48e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 82], 'false': [15.548, 500, 468]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [8.665155314147563e-16, 0.2497267946178503]}
{'': [1.4730764034050857e-15, 0.24972679461786704]}
{'': [1.2997732971221344e-16, 0.2497267946178606]}
{'': [-3.4660621256590254e-16, 0.24972679461785535]}
{'': [-5.415722071342227e-17, 0.24972679461785033]}
{'': [-1.408087738548979e-16, 0.2497267946178522]}
{'': [2.166288828536891e-17, 0.24972679461784802]}
{'': [-5.144935967775116e-17, 0.24972679461785843]}
{'': [4.06179155350667e-17, 0.24972679461785577]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 28.311
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2849765791485283;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.482811302773096;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4383152226811825;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23471588815993344;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.05438784935667124;  // std dev = 2.093, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.07369192414982592;  // std dev = 3.361, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.25305643964275626;  // std dev = 12.596, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02644133491846654;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.5705917800869045;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.03714053878831905;  // std dev = 3.344, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | | else return 0.18612078550697814;  // std dev = 13.069, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012287199930136963;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340941;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1316247676490349;  // std dev = 0.495, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3397700950345559;  // std dev = 0.896, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2343507811509905;  // std dev = 1.550, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 5.258890547054293E-4;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07849983607364949;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.058558669466739856;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250073;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.13262831790232346;  // std dev = 2.640, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.10379696789269784;  // std dev = 1.961, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.10892314497418079;  // std dev = 0.494, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.19006980435756377;  // std dev = 0.097, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.08539636282875358;  // std dev = 4.270, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07564888825673945;  // std dev = 4.267, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.21271197485451102;  // std dev = 0.114, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07350302264768835;  // std dev = 0.494, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.282474575189099;  // std dev = 0.896, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.15267869453802374;  // std dev = 1.550, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.15156203092066192;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02937511799088535;  // std dev = 2.897, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.010061573815337052;  // std dev = 3.104, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0487507807399943;  // std dev = 4.158, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.08201110127060472;  // std dev = 2.640, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.10996221608487021;  // std dev = 1.901, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.06584093094002118;  // std dev = 3.346, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07295751939845711;  // std dev = 12.593, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.12220977973843519;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02394552400445136;  // std dev = 2.896, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04102863937355415;  // std dev = 4.150, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.009687044195300955;  // std dev = 3.112, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4354786903775788;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24088221750250902;  // std dev = 2.308, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2908473277727755;  // std dev = 1.476, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.06667214414348212;  // std dev = 3.181, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.020090949884550346;  // std dev = 3.175, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.054764929579541564;  // std dev = 12.593, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.011065432215134442;  // std dev = 3.112, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03700031723027836;  // std dev = 4.153, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.051', 'seconds']
Refined model CLL: -0.599216


******************************************
Best model found
******************************************
Results 

CLL : -0.654115 

AUC ROC : 0.619332 

AUC PR : 0.554756 

Precision : 0.375436 

Recall : 0.915687 

F1 : 0.532532 

Total Learning Time : 28.311 

Total Inference Time : 1.1322922706604004 

Total revision time: 31.621954532623292
Best scored revision CLL: -0.599216


Results 

CLL : -0.654115 

AUC ROC : 0.619332 

AUC PR : 0.554756 

Precision : 0.375436 

Recall : 0.915687 

F1 : 0.532532 

Total Learning Time : 31.64231905555725 

Total Inference Time : 1.1322922706604004 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.05
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.190', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 46.278
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3974484051691344;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.371767847690907;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.003663753705113708;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.14148167170420273;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0055561304250918405;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.39107968864188797;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30040266398009907;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12502585645554135;  // std dev = 6.02e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004881411392881223;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0048883536164695115;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.30670965566297825;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23718535411670635;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11197745008152321;  // std dev = 5.48e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004292526622817867;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2132671793519844;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18249624986711135;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10131691520058754;  // std dev = 5.01e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037676025986480744;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.199064245151517;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13637796680479367;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09245727583522927;  // std dev = 4.62e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0033008012454352645;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0033055424376910794;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1490418543548083;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10265639920083482;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0020608297774327967;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09112075935191243;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028991256183165904;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.12011286944844335;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0763498884870272;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08149405757381385;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025418890912303404;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032763375672990947;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08438147438069268;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05620099831691978;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07559915183031927;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002228064967412363;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028734647128550264;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06909300427136192;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04134963240867492;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07048324434118407;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019525189636049327;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025193561084536765;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.426', 'seconds']
Refined model CLL: -0.621888


******************************************
Best model found
******************************************
Results 

CLL : -0.658974 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.278 

Total Inference Time : 1.1289410591125488 

Total revision time: 49.19888370323181
Best scored revision CLL: -0.621888


Results 

CLL : -0.658974 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.22634260940551 

Total Inference Time : 1.1289410591125488 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.094
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.211', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 43.118
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10459348710461978;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.2399523433083081;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.3176515255108324;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3332419990230316;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4558153748715591;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05157238135134464;  // std dev = 1.640, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.18399979254852572;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.238573099981812;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10823437731842023;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.342920742307169;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1389358316447843;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12060493620398888;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.13926872746792018;  // std dev = 17.054, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.17953952851033522;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20592683854299967;  // std dev = 1.851, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10610997306508033;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11635537338082627;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.153752983854767;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.22943593361693812;  // std dev = 3.33e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04112000303413894;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2804015563717338;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.09831239889516924;  // std dev = 1.641, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07809223809713937;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.10484820738784567;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.19140061571290698;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03139065155046974;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05982988919946715;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06428080298296802;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09624479562741697;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.16351067015188128;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02390880532163572;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04495351185192912;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.045677530467116846;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07953379195319797;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14235745859931287;  // std dev = 2.24e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.01818074378783761;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.588', 'seconds']
Refined model CLL: -0.666283


******************************************
Best model found
******************************************
Results 

CLL : -0.755674 

AUC ROC : 0.536968 

AUC PR : 0.344187 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 43.118 

Total Inference Time : 1.1292335987091064 

Total revision time: 46.140256511688236
Best scored revision CLL: -0.666283


Results 

CLL : -0.755674 

AUC ROC : 0.536968 

AUC PR : 0.344187 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 46.16771541786194 

Total Inference Time : 1.1292335987091064 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.595
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19129113693436972;  // std dev = 19.684, 1,744.000 (wgt'ed) examples reached here.  /* #neg=1,163 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17968404948282463;  // std dev = 19.486, 1,677.000 (wgt'ed) examples reached here.  /* #neg=1,096 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14473652681288657;  // std dev = 19.612, 1,719.000 (wgt'ed) examples reached here.  /* #neg=1,138 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10921701288191818;  // std dev = 19.788, 1,782.000 (wgt'ed) examples reached here.  /* #neg=1,201 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10442365904177633;  // std dev = 19.577, 1,707.000 (wgt'ed) examples reached here.  /* #neg=1,126 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07464623306159383;  // std dev = 19.731, 1,761.000 (wgt'ed) examples reached here.  /* #neg=1,180 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06189268115644463;  // std dev = 19.706, 1,752.000 (wgt'ed) examples reached here.  /* #neg=1,171 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04915098124407988;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04761460978403061;  // std dev = 19.586, 1,710.000 (wgt'ed) examples reached here.  /* #neg=1,129 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03354948562470248;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.159', 'seconds']
Parameter learned model CLL:-0.536535 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.684, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.486, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.612, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.788, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.577, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.731, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.706, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.586, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
{'': [nan, 0.2221584751914678]}
{'': [nan, 0.2264230109635031]}
{'': [nan, 0.2237518532393537]}
{'': [nan, 0.21973727800514853]}
{'': [nan, 0.22451609537761763]}
{'': [nan, 0.22107489517498816]}
{'': [nan, 0.22164851389672577]}
{'': [nan, 0.22152103223256786]}
{'': [nan, 0.22432509148114962]}
{'': [nan, 0.2229871500797168]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 50.928
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22124020758451737;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.030191945852200554;  // std dev = 3.640, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.05094197399139689;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.006909265678024765;  // std dev = 3.914, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18734569940033657;  // std dev = 0.480, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.011375577925501517;  // std dev = 0.360, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.018232706909793138;  // std dev = 1.324, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.037753712954629294;  // std dev = 5.117, 177.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.22938932766091286;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.10314348048483296;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.10314348048483296;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.16522467875051758;  // std dev = 18.110, 1,416.000 (wgt'ed) examples reached here.  /* #neg=900 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.032087956689184564;  // std dev = 3.624, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.05646621641338105;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.005879616010531677;  // std dev = 3.899, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.14220597055374828;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.19027185913481334;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.09337813809097222;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.12490909330576075;  // std dev = 0.477, 1,505.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.018366893472064424;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03934619993601712;  // std dev = 3.600, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return 0.029945996361887738;  // std dev = 3.841, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11187349329285555;  // std dev = 0.480, 1,511.000 (wgt'ed) examples reached here.  /* #neg=966 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.05355617596036354;  // std dev = 3.558, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.04579590182480953;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.01388238548986355;  // std dev = 3.868, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.13254851238851914;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09296185007335857;  // std dev = 0.481, 1,500.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.023365330656922888;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.023764598869014046;  // std dev = 3.832, 99.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=18 */
%   | | | else return 0.011356035274454827;  // std dev = 3.644, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0694570760676646;  // std dev = 0.480, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02720961387281453;  // std dev = 3.612, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.029567255740416572;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.15282366765448033;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.005116354786233085;  // std dev = 3.863, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05019926195004006;  // std dev = 0.478, 1,541.000 (wgt'ed) examples reached here.  /* #neg=996 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.035657107871662465;  // std dev = 0.311, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.022164279333065754;  // std dev = 3.837, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.002675445350911293;  // std dev = 3.644, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.006997572176293516;  // std dev = 3.216, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | | else return -0.09360697917480121;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.046953445518186594;  // std dev = 0.480, 1,463.000 (wgt'ed) examples reached here.  /* #neg=934 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03338230160865348;  // std dev = 3.580, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.041024195424027333;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.0075780537792763045;  // std dev = 3.893, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
%   | | | else return -0.12121252559684689;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5590845783121037;  // std dev = 7.015, 452.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=396 */
%   | | | else return -0.2898367902366849;  // std dev = 4.141, 853.000 (wgt'ed) examples reached here.  /* #neg=837 #pos=16 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.21712278588124848;  // std dev = 1.889, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | | else return 0.19628010114003752;  // std dev = 7.939, 258.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=132 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.014937419917514749;  // std dev = 3.706, 91.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=17 */
%   | | | else return 0.09190693819254157;  // std dev = 1.624, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.47493021090123017;  // std dev = 1.550, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.10124140980536674;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.431', 'seconds']
Refined model CLL: -0.436164


******************************************
Best model found
******************************************
Results 

CLL : -0.583803 

AUC ROC : 0.83932 

AUC PR : 0.770172 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 50.928 

Total Inference Time : 2.044069766998291 

Total revision time: 55.45323085594177
Best scored revision CLL: -0.436164


Results 

CLL : -0.583803 

AUC ROC : 0.83932 

AUC PR : 0.770172 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 55.480689762115475 

Total Inference Time : 2.044069766998291 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.311
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.239', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 65.686
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977217;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374321;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183322;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.21845275277390386;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.103255439591714;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.13384279860471526;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6591527993661581;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.31732227802811486;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.44445526353414;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.08010896491987761;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10132836123613345;  // std dev = 4.376, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03728292940755493;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0635507725301216;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.04731951897154023;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.12645558464034648;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.05740972969085724;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019796590608793248;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04884950438281525;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03510657961342559;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0959102440913588;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.045793611684258405;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01685429065480076;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.11487452281780917;  // std dev = 1.479, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.31027875787203485;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03579235564141583;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04320917028524921;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.03632180444617924;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01432004306487171;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.660', 'seconds']
Refined model CLL: -0.667629


******************************************
Best model found
******************************************
Results 

CLL : -0.643386 

AUC ROC : 0.566463 

AUC PR : 0.423698 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 65.686 

Total Inference Time : 1.4428651332855225 

Total revision time: 69.24060418319704
Best scored revision CLL: -0.667629


Results 

CLL : -0.643386 

AUC ROC : 0.566463 

AUC PR : 0.423698 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 69.26806308937074 

Total Inference Time : 1.4428651332855225 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.077
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.232', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 36.353
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.6674283310648041;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10890834029897223;  // std dev = 3.434, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.12253181265650104;  // std dev = 3.382, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3408865878733577;  // std dev = 13.067, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.07021666259881186;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.12066161007252178;  // std dev = 3.115, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.12358095880871146;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24375307078421193;  // std dev = 0.490, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.33482407778217244;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4412495338650187;  // std dev = 1.307, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.16765551348587976;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08042801467578085;  // std dev = 2.955, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10345256835459972;  // std dev = 3.119, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1879139451531492;  // std dev = 0.489, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25277928323007404;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4058252843537536;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.008250926890470155;  // std dev = 1.191, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09290853872982598;  // std dev = 3.115, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.012925671427516078;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06871437846489671;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.38369814633010124;  // std dev = 0.336, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.020420008309555076;  // std dev = 3.400, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.0033272401899132244;  // std dev = 3.354, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.1634182500524778;  // std dev = 13.052, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.17831177069808296;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04298504795948165;  // std dev = 2.939, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0628100888895388;  // std dev = 4.186, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0023370896213099797;  // std dev = 3.138, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10521399256748237;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.166298075166372;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2340497780868413;  // std dev = 1.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1181333599010499;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04312002746922063;  // std dev = 2.940, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05316292282540467;  // std dev = 4.182, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 8.036357930576038E-4;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.14050713204975585;  // std dev = 2.646, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.1390095299097795;  // std dev = 2.059, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.08592760088464632;  // std dev = 13.403, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.1662957158148836;  // std dev = 1.566, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.012170166711513074;  // std dev = 1.209, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.053584538023329936;  // std dev = 3.100, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.0073801706365575785;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.050006025030159176;  // std dev = 4.181, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.059003176394632616;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12792103357001852;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.22140671414069282;  // std dev = 0.177, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.08634222006919863;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02760333175791094;  // std dev = 2.936, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04140846414394593;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.006435212038975671;  // std dev = 3.148, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.24820186799788196;  // std dev = 2.227, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.20522595501244748;  // std dev = 1.242, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2799191835245262;  // std dev = 1.589, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.06662771899405753;  // std dev = 3.204, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.048799837256283056;  // std dev = 3.266, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.05957117972437707;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.006362221534386494;  // std dev = 3.145, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.035563544990380974;  // std dev = 4.176, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.727', 'seconds']
Refined model CLL: -0.631229


******************************************
Best model found
******************************************
Results 

CLL : -0.704761 

AUC ROC : 0.555234 

AUC PR : 0.404368 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 36.353 

Total Inference Time : 1.1711735725402832 

Total revision time: 39.34853833198547
Best scored revision CLL: -0.631229


Results 

CLL : -0.704761 

AUC ROC : 0.555234 

AUC PR : 0.404368 

Precision : 0.376852 

Recall : 0.927848 

F1 : 0.536003 

Total Learning Time : 39.37599723815918 

Total Inference Time : 1.1711735725402832 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.072
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.292', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 46.386
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3679730071352011;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520728;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091865;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3315399042152861;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3038812748962419;  // std dev = 2.836, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917126;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0048814113928811334;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30673828929496505;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.237192474933753;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.002677181801036134;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11768949475621578;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24410028066691347;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18161980493644952;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.101075658957185;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003764806174277053;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18333557349171836;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13771500383237095;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09225524615239629;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0033008012454352645;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003303078144066235;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1354506487170716;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10191393617746725;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0848146452964047;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028949568237196313;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028969555414296412;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.12035465810885386;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0763359406668986;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07845891650900623;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025382258678852574;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002539979289416472;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0840385306841244;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.056258151149160135;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07297047885411713;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022248477584885153;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002226385139490766;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06854065901824749;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04143720316856618;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.06818559552324606;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.001949694817582405;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0019510421234728236;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.548', 'seconds']
Refined model CLL: -0.621876


******************************************
Best model found
******************************************
Results 

CLL : -0.659182 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.386 

Total Inference Time : 1.1905100345611572 

Total revision time: 49.40828519630433
Best scored revision CLL: -0.621876


Results 

CLL : -0.659182 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.43175655174256 

Total Inference Time : 1.1905100345611572 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.102
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.192', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 41.695
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4513849731813856;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.03469293307320376;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.24042272651457108;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.31765811729537347;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3337043240067806;  // std dev = 2.015, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | | else return 0.15862414845603107;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18607260502369363;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22052868700693865;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2541502039163848;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3674830626152011;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10183264543670403;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10046830580817732;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14103593812166904;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.15946437550872491;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1968756328359393;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2868949074503533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0790491450754914;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.07807026602216056;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2592046364015669;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06279368950697795;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.09113755131223401;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.10492516989779145;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13642844764594084;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1733146344497232;  // std dev = 1.845, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.060870033991458225;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0797156636682791;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08774078721785465;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11961919619595575;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.202503161153416;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04660747569805666;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.022778209141536217;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.059845136384781485;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06334522656345537;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09708837214159033;  // std dev = 1.953, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.17175705227741117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03554611554298846;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.01733418588041908;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.31094491099420174;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.012535730662574407;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.29483470352753083;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.04280130489487589;  // std dev = 17.026, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06385714122049889;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11374691565617184;  // std dev = 1.815, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.013177087499079773;  // std dev = 1.815, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.139', 'seconds']
Refined model CLL: -0.666395


******************************************
Best model found
******************************************
Results 

CLL : -0.755301 

AUC ROC : 0.535997 

AUC PR : 0.345294 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 41.695 

Total Inference Time : 1.195997953414917 

Total revision time: 44.796543905258176
Best scored revision CLL: -0.666395


Results 

CLL : -0.755301 

AUC ROC : 0.535997 

AUC PR : 0.345294 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 44.82001526069641 

Total Inference Time : 1.195997953414917 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.735
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18676884460176976;  // std dev = 19.750, 1,768.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16989189536582328;  // std dev = 19.641, 1,729.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13796329490857953;  // std dev = 19.745, 1,766.000 (wgt'ed) examples reached here.  /* #neg=1,185 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12315989907468981;  // std dev = 19.635, 1,727.000 (wgt'ed) examples reached here.  /* #neg=1,146 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09359461193265309;  // std dev = 19.756, 1,770.000 (wgt'ed) examples reached here.  /* #neg=1,189 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07581521896338556;  // std dev = 19.764, 1,773.000 (wgt'ed) examples reached here.  /* #neg=1,192 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06481184816637925;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.059487164432504215;  // std dev = 19.600, 1,715.000 (wgt'ed) examples reached here.  /* #neg=1,134 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03925931050769212;  // std dev = 19.720, 1,757.000 (wgt'ed) examples reached here.  /* #neg=1,176 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.028657938638216758;  // std dev = 19.756, 1,770.000 (wgt'ed) examples reached here.  /* #neg=1,189 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.108', 'seconds']
Parameter learned model CLL:-0.534853 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.75, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.641, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.745, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.635, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.756, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.764, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.6, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.72, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.756, 1, 581]}]
{'': [nan, 0.2206288645809727]}
{'': [nan, 0.22311462243274133]}
{'': [nan, 0.22075628872539765]}
{'': [nan, 0.22324208750360325]}
{'': [nan, 0.22050145232852267]}
{'': [nan, 0.22031035819933015]}
{'': [nan, 0.2215210322325638]}
{'': [nan, 0.22400666389002985]}
{'': [nan, 0.22132982016157374]}
{'': [nan, 0.22050145232851462]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 50.952
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.18423589162125148;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.21011167628380545;  // std dev = 0.478, 1,503.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.020311097261674547;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return 0.002293079243656503;  // std dev = 3.700, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18647943143173143;  // std dev = 0.479, 1,532.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06107546162059624;  // std dev = 3.565, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
%   | | | else return -0.019341552550310594;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.019340701022729393;  // std dev = 3.886, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.1403644586356714;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16669372515321695;  // std dev = 0.481, 1,498.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06165719092714146;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.00811486780175639;  // std dev = 1.308, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.023358579556209284;  // std dev = 5.148, 188.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10127346662485408;  // std dev = 3.181, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return 0.133714428196933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.13399460261937793;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0267195406283539;  // std dev = 3.635, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.036305589684281735;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.012701691667068808;  // std dev = 3.872, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.12776306631426562;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11422328632100558;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.039080999564135535;  // std dev = 3.588, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.0214187353513142;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.03501653032667669;  // std dev = 1.275, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.012608468016110739;  // std dev = 3.659, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08375887534649731;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.027216364870984788;  // std dev = 3.622, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04922504821831816;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.007753952576266047;  // std dev = 3.904, 120.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=18 */
%   | | | else return -0.11638761750994471;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07228881563483681;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04730333050648139;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03023815236076145;  // std dev = 3.830, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | | else return 0.009566736572197284;  // std dev = 3.643, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.579710015839324;  // std dev = 7.004, 452.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=396 */
%   | | | else return -0.2714380005293202;  // std dev = 4.093, 867.000 (wgt'ed) examples reached here.  /* #neg=851 #pos=16 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14928121326373472;  // std dev = 1.840, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | | else return 0.21002183182582326;  // std dev = 8.014, 261.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=132 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.07576834359719492;  // std dev = 1.361, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.6223469164021629;  // std dev = 0.964, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04748937469758793;  // std dev = 3.776, 88.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=18 */
%   | | | else return -0.10450132698907429;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03809889802230793;  // std dev = 0.418, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -4.52474645597048E-4;  // std dev = 3.647, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.07228413912554389;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0022413797155465243;  // std dev = 3.503, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.09463099587676932;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.037082764199309975;  // std dev = 0.418, 1,485.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.029959620124932435;  // std dev = 3.195, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.06506807808530303;  // std dev = 1.329, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.0093223219590487;  // std dev = 3.892, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.0883910281500436;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.892', 'seconds']
Refined model CLL: -0.435577


******************************************
Best model found
******************************************
Results 

CLL : -0.58365 

AUC ROC : 0.837677 

AUC PR : 0.760536 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 50.952 

Total Inference Time : 1.9326910972595215 

Total revision time: 55.56434508514404
Best scored revision CLL: -0.435577


Results 

CLL : -0.58365 

AUC ROC : 0.837677 

AUC PR : 0.760536 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 55.58781644058227 

Total Inference Time : 1.9326910972595215 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.35
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.234', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 74.899
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374321;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183317;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896773;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18465088482152192;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.0786519598879958;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14015013481000493;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.053371730118717986;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11580583554988458;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.34781984983750647;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.046661810116601865;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.057441706147235046;  // std dev = 4.363, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.026415613930038422;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.037345904282926314;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.02531541628982108;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07420193765315596;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03577772367201456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014704125438060349;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.744', 'seconds']
Refined model CLL: -0.668194


******************************************
Best model found
******************************************
Results 

CLL : -0.641305 

AUC ROC : 0.568525 

AUC PR : 0.429595 

Precision : 0.721212 

Recall : 0.052423 

F1 : 0.097741 

Total Learning Time : 74.899 

Total Inference Time : 1.2465176582336426 

Total revision time: 78.31603066825866
Best scored revision CLL: -0.668194


Results 

CLL : -0.641305 

AUC ROC : 0.568525 

AUC PR : 0.429595 

Precision : 0.721212 

Recall : 0.052423 

F1 : 0.097741 

Total Learning Time : 78.3395020236969 

Total Inference Time : 1.2465176582336426 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.03
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.217', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 37.261
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137361;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.31145849966207595;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.6080322453757985;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4642306642433693;  // std dev = 1.828, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.02479868411363952;  // std dev = 3.137, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08931411673328139;  // std dev = 4.209, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.5303862940560788;  // std dev = 0.209, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03763304671453363;  // std dev = 3.408, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.05281535255379237;  // std dev = 3.364, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2741914106759237;  // std dev = 13.056, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.20779034601181484;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07541851145852158;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.012253491997194091;  // std dev = 3.126, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08143504099767349;  // std dev = 4.204, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.401473825396039;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.02905937267242116;  // std dev = 3.408, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.04075260019839356;  // std dev = 3.363, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.21023227881711937;  // std dev = 13.056, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.14450871853544117;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07105822791670063;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.09308562456721912;  // std dev = 3.113, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.025323873286395647;  // std dev = 4.212, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14018763333593792;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.21265848427476097;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.291119791399304;  // std dev = 1.308, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.15753697257382826;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04725344403855429;  // std dev = 2.937, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.06231319757113063;  // std dev = 4.187, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0035281753192990374;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.15364526294993552;  // std dev = 2.621, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.10413819595788532;  // std dev = 13.640, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.16315658285273954;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.29526898005661834;  // std dev = 0.199, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.005610523487069419;  // std dev = 1.179, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07189713658241106;  // std dev = 3.100, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.05556264003472103;  // std dev = 4.181, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.005591126408396413;  // std dev = 3.142, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.1173317994979195;  // std dev = 2.623, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.1379342808046467;  // std dev = 2.070, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.02479237716322982;  // std dev = 3.346, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09692281252299202;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1003238371524986;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03792180863701937;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0047521433432314245;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04725040505304377;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05794269781860932;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12196435831512453;  // std dev = 1.253, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1857807951619457;  // std dev = 1.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.051499330132991565;  // std dev = 4.317, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.19336501299476108;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06458798946839922;  // std dev = 4.260, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22093728275738705;  // std dev = 0.099, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04363521640815311;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.09360791977799501;  // std dev = 1.255, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.15227954254929038;  // std dev = 1.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.06617005325446393;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.030680471319374684;  // std dev = 2.897, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.009335797875417797;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.03368284096877567;  // std dev = 4.155, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.641', 'seconds']
Refined model CLL: -0.632914


******************************************
Best model found
******************************************
Results 

CLL : -0.704344 

AUC ROC : 0.554688 

AUC PR : 0.404051 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 37.261 

Total Inference Time : 1.275160312652588 

Total revision time: 40.29675137138367
Best scored revision CLL: -0.632914


Results 

CLL : -0.704344 

AUC ROC : 0.554688 

AUC PR : 0.404051 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 40.3202227268219 

Total Inference Time : 1.275160312652588 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.978
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.199', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 42.863
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.37277259202160834;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3019275376167881;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0031576158915441006;  // std dev = 3.073, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11669340332070104;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3016108791985967;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23757287391464013;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.002744840244454416;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11648892961503492;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004275198200142493;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.22941495929376102;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18285426751207076;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.10093867490707488;  // std dev = 3.27e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037523389461441205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003771185019422078;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16956946705698298;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13704037980131614;  // std dev = 2.833, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0921403558265854;  // std dev = 3.02e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003292108330407014;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003308690613879663;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13570274086222792;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10189628955945562;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.08471699170150164;  // std dev = 2.80e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028873101104008913;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0029018902122998347;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.11304503242026154;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07697772300675361;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0018686165900188092;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08587818521779887;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025443153172091527;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08260051941620143;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05648755977455697;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07531582003662957;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022301930667507283;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028851763693176686;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07168561386126238;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03661174542507164;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.04272485205655444;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.07023605456075004;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.001954384666700075;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.002529641431540244;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.288', 'seconds']
Refined model CLL: -0.621755


******************************************
Best model found
******************************************
Results 

CLL : -0.659273 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 42.863 

Total Inference Time : 1.142016887664795 

Total revision time: 45.70899955368042
Best scored revision CLL: -0.621755


Results 

CLL : -0.659273 

AUC ROC : 0.555617 

AUC PR : 0.427938 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 50.834436574935914 

Total Inference Time : 1.142016887664795 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.07
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.220', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 42.004
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3980165213163664;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4318624987684384;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.29755757856572124;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33500538878161046;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15807064722459824;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.18403810314669028;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.23857432272066534;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.26118801425970334;  // std dev = 1.847, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14102433069627682;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16262988451557217;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.19415112598833553;  // std dev = 1.955, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.26664917052066356;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08620364979038606;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3105826242702873;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.047853739342412785;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.15284266608755134;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.10450032025908873;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.13644278143882638;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.16867164638278634;  // std dev = 1.831, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.34712737529557786;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.15265413458863134;  // std dev = 1.647, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12964812900694545;  // std dev = 2.153, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.0772655939561757;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.19046197156675104;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03151404858526503;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2615066516485726;  // std dev = 1.590, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.11471177555533503;  // std dev = 1.647, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05794634542687793;  // std dev = 17.034, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08752820297522683;  // std dev = 2.745, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1628091819436516;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02400037613026226;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04479900770069113;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.050315756988802106;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08408008672382375;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14181669774521405;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.01824832872162271;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.418', 'seconds']
Refined model CLL: -0.66626


******************************************
Best model found
******************************************
Results 

CLL : -0.756117 

AUC ROC : 0.537138 

AUC PR : 0.344304 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 42.004 

Total Inference Time : 1.3094367980957031 

Total revision time: 45.094514011383055
Best scored revision CLL: -0.66626


Results 

CLL : -0.756117 

AUC ROC : 0.537138 

AUC PR : 0.344304 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 50.21995103263855 

Total Inference Time : 1.3094367980957031 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.686
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188075113407287;  // std dev = 19.731, 1,761.000 (wgt'ed) examples reached here.  /* #neg=1,180 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1604501136692026;  // std dev = 19.777, 1,778.000 (wgt'ed) examples reached here.  /* #neg=1,197 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14109090285539416;  // std dev = 19.717, 1,756.000 (wgt'ed) examples reached here.  /* #neg=1,175 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12033797978796076;  // std dev = 19.689, 1,746.000 (wgt'ed) examples reached here.  /* #neg=1,165 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10513016848140803;  // std dev = 19.606, 1,717.000 (wgt'ed) examples reached here.  /* #neg=1,136 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07493156582893722;  // std dev = 19.767, 1,774.000 (wgt'ed) examples reached here.  /* #neg=1,193 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06904943718916558;  // std dev = 19.641, 1,729.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.055709967824359205;  // std dev = 19.635, 1,727.000 (wgt'ed) examples reached here.  /* #neg=1,146 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.042003804211173744;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.034206587801390194;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.112', 'seconds']
Parameter learned model CLL:-0.536005 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.731, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.777, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.717, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.689, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.606, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.767, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.641, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.635, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
{'': [nan, 0.2210748951749883]}
{'': [nan, 0.21999193998388633]}
{'': [nan, 0.22139355596950958]}
{'': [nan, 0.2220309816317112]}
{'': [nan, 0.22387926551743512]}
{'': [nan, 0.22024666706490648]}
{'': [nan, 0.22311462243275826]}
{'': [nan, 0.22324208750360194]}
{'': [nan, 0.2224772090799269]}
{'': [nan, 0.2227959302317906]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 28.74
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2159952909760668;  // std dev = 0.479, 1,523.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.027960255854229364;  // std dev = 3.866, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return 0.013488740924755091;  // std dev = 3.676, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2583423634998903;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.18112228627981306;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.19086308509913258;  // std dev = 0.480, 1,465.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.02050308839293294;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.04473430796581532;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return 0.022952157875740547;  // std dev = 3.869, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D), haswordvenue(A, E) )
%   | | | then return 0.4567888973556992;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08568809954852032;  // std dev = 3.164, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | else return 0.1542680200017683;  // std dev = 0.478, 1,498.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03603159794549756;  // std dev = 3.612, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.05292422179018698;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.007467150003862304;  // std dev = 3.900, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.14634514764282122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2400353816576676;  // std dev = 1.199, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.09413308623329603;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.13579590253593657;  // std dev = 0.480, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.04266536936764317;  // std dev = 3.587, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.008273011908839568;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.024072999950625076;  // std dev = 3.860, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.12899160967227968;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.17849948657968198;  // std dev = 1.228, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.11479585931225998;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12143960665051982;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.10743619163862969;  // std dev = 18.221, 1,447.000 (wgt'ed) examples reached here.  /* #neg=931 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.039184134953664046;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.030065326892736156;  // std dev = 3.838, 99.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=18 */
%   | | | else return 0.009937468073117524;  // std dev = 3.648, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2610129692976155;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.032959715086580674;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.03754491288384765;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0.08754150515982417;  // std dev = 18.210, 1,444.000 (wgt'ed) examples reached here.  /* #neg=928 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.02645444900722141;  // std dev = 0.323, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.03280288882889444;  // std dev = 1.325, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.007343167262738081;  // std dev = 5.167, 196.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07015144580779578;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04930112529649053;  // std dev = 3.567, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
%   | | | else return -0.04040039747579477;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.022174220565980743;  // std dev = 3.840, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
%   | | | else return -0.11277557015386228;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.048474882072668264;  // std dev = 3.109, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return -0.04649546229348293;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.03802047375394714;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | | else return 0.055126408549014516;  // std dev = 18.214, 1,445.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return -0.03371824363801251;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.02912594106458991;  // std dev = 3.816, 95.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=18 */
%   | | | else return -0.001867785270244704;  // std dev = 3.660, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04648540497726674;  // std dev = 0.479, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.02661068185792275;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.00639059018252353;  // std dev = 3.858, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.0017883534958148437;  // std dev = 3.661, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06283725551133605;  // std dev = 2.994, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | | else return -0.04649309320618603;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.0368235343092209;  // std dev = 0.480, 1,470.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0016739325608776299;  // std dev = 3.646, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.04628754146536624;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.011816225031040349;  // std dev = 3.914, 124.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=18 */
%   | | | else return -0.10203656898001422;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.174', 'seconds']
Refined model CLL: -0.52775


******************************************
Best model found
******************************************
Results 

CLL : -0.728943 

AUC ROC : 0.550401 

AUC PR : 0.500878 

Precision : 0.875 

Recall : 0.005747 

F1 : 0.011419 

Total Learning Time : 28.74 

Total Inference Time : 1.426853895187378 

Total revision time: 32.759439588546755
Best scored revision CLL: -0.52775


Results 

CLL : -0.728943 

AUC ROC : 0.550401 

AUC PR : 0.500878 

Precision : 0.875 

Recall : 0.005747 

F1 : 0.011419 

Total Learning Time : 37.88487660980225 

Total Inference Time : 1.426853895187378 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.299
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.179', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 60.151
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.0803711573217346;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.17626717210462295;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04789385243275258;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.3158346306230407;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.2006373174408249;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.2851297848161342;  // std dev = 4.405, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.15150238996222307;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04161364193995419;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16637475827136666;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19018432385311876;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2900471196945369;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12787545250346496;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.035987456089325895;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13358543781190366;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13821763447798716;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.24021895502966012;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.10621981933357763;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03099336090453001;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10550624512746852;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1051849151811951;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18344790090669846;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08704211527084454;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.026595858635667033;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08231667928485283;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07197444087214508;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15163808753688843;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07053494519933444;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022750626979808883;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.15029810075433236;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.352312428699552;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.06193292622693981;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.07622859859928369;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.05664736817908415;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01940851618076842;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.623397379852396;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3469925338459622;  // std dev = 0.176, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.3964743079614543;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.04676334804934931;  // std dev = 19.646, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05737210342254048;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.027391256509697273;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.016518703664966706;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.11374599709039017;  // std dev = 1.477, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3003502659301003;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03578635103951624;  // std dev = 19.646, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.04315266247380575;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.03952262016836298;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.014557156971681143;  // std dev = 2.964, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014031031261019945;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.340', 'seconds']
Refined model CLL: -0.667471


******************************************
Best model found
******************************************
Results 

CLL : -0.644498 

AUC ROC : 0.565946 

AUC PR : 0.416918 

Precision : 0.461326 

Recall : 0.073568 

F1 : 0.1269 

Total Learning Time : 60.151 

Total Inference Time : 1.4099233150482178 

Total revision time: 63.66251916885376
Best scored revision CLL: -0.667471


Results 

CLL : -0.644498 

AUC ROC : 0.565946 

AUC PR : 0.416918 

Precision : 0.461326 

Recall : 0.073568 

F1 : 0.1269 

Total Learning Time : 68.78795619010926 

Total Inference Time : 1.4099233150482178 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.094
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.246', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 32.496
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.24083117708588225;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11041804280190058;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.6674283310648041;  // std dev = 0.229, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10699722258824736;  // std dev = 3.426, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.48209840385016406;  // std dev = 1.599, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.20590530498894818;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09484043847161304;  // std dev = 2.952, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0247986841136395;  // std dev = 3.137, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08931411673328139;  // std dev = 4.209, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.5114794311235649;  // std dev = 0.253, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03739218873398646;  // std dev = 3.403, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.10035279146597549;  // std dev = 3.380, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2711763891485111;  // std dev = 13.058, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.20703856565679737;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07620908669220651;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.10556331586652883;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.031575894816619834;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.3886855766787732;  // std dev = 0.236, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.028865370092780684;  // std dev = 3.402, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.195966001116598;  // std dev = 13.408, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.3227900599487655;  // std dev = 1.598, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.17274371864627;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0639007304595594;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.007433282477959634;  // std dev = 3.129, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07101751888760935;  // std dev = 4.197, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1414495443461482;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20835544597666839;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.34657413592188036;  // std dev = 0.257, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.1409956601440559;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05315014811383342;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.06106409786334345;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.00421237205595229;  // std dev = 3.143, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10652003620518978;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16047819787805262;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.27447020071944533;  // std dev = 0.226, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1357331138263545;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04173943282793294;  // std dev = 2.931, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0560365121320286;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.005084073181424481;  // std dev = 3.139, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.3017179516754006;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.07805542701664614;  // std dev = 13.824, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12529506153724307;  // std dev = 1.250, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1797897643115444;  // std dev = 1.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.10576153684608572;  // std dev = 1.547, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0351028505820864;  // std dev = 2.933, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.004601994900206685;  // std dev = 3.133, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04775678311801143;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4350027303548866;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2256812028852316;  // std dev = 2.331, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2690715413163289;  // std dev = 1.529, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07622012934553071;  // std dev = 3.201, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.06710847403509489;  // std dev = 13.405, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.12427753021970861;  // std dev = 1.566, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.040268212352070815;  // std dev = 4.174, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.005179672436953895;  // std dev = 3.145, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.08940632473160837;  // std dev = 2.588, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.17552582031875907;  // std dev = 2.064, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05292999207077718;  // std dev = 13.319, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.10453549034888053;  // std dev = 1.568, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.204722750749433;  // std dev = 0.128, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.06489674547429054;  // std dev = 4.255, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.056705688583709044;  // std dev = 4.253, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22527159118982482;  // std dev = 0.117, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.486', 'seconds']
Refined model CLL: -0.628272


******************************************
Best model found
******************************************
Results 

CLL : -0.706201 

AUC ROC : 0.554505 

AUC PR : 0.403414 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 32.496 

Total Inference Time : 1.1919903755187988 

Total revision time: 35.523059692382816
Best scored revision CLL: -0.628272


Results 

CLL : -0.706201 

AUC ROC : 0.554505 

AUC PR : 0.403414 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 40.64849671363831 

Total Inference Time : 1.1919903755187988 

Run: 5
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.28
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.439', 'seconds']
Parameter learned model CLL:-0.554626 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]
{'': [1.1842378929335002e-15, 0.20305555555555715]}
{'': [3.7007434154171886e-16, 0.20305555555554874]}
{'': [1.7393494052460785e-15, 0.20305555555554408]}
{'': [5.181040781584064e-16, 0.20305555555556368]}
{'': [1.850371707708594e-17, 0.20305555555556454]}
{'': [-4.625929269271486e-17, 0.20305555555555405]}
{'': [1.6653345369377348e-16, 0.203055555555546]}
{'': [6.013708050052931e-17, 0.2030555555555644]}
{'': [-6.013708050052931e-17, 0.20305555555555183]}
{'': [1.3877787807814457e-17, 0.2030555555555464]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 40.906
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1724346493852219;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15012155747461325;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.44273140774930175;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09274792770397196;  // std dev = 1.878, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.003663753705113716;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12847188454287883;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3748603184562167;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07928162767639207;  // std dev = 1.875, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11855890509857496;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416284;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10824721129565915;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.30289072617432067;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.06713110274254587;  // std dev = 1.873, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10672285341134423;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0042748193215849835;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08997584741791546;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3507638673015972;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.02618650731021187;  // std dev = 1.793, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0023907297668857392;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10831914427658614;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003752007200638478;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07393338514194783;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2795983374957195;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.02157261874378608;  // std dev = 1.791, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09210314282191571;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032918181024600467;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003316663872608999;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.06911435447183008;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.06181775963704756;  // std dev = 12.866, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.03703351867819203;  // std dev = 1.983, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0846854296412558;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002887056395745621;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002908899871338635;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04841145613356815;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21619244871430823;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.010413932708405649;  // std dev = 1.789, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07834786529697726;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025312819642845205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0025504739873283477;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03885597742030849;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2046505787071259;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.0021937475464226647;  // std dev = 1.768, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07287406842591006;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022187478909486556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.00223560109699938;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03103442552409605;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16449355519841938;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.0043306117221020264;  // std dev = 1.764, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.019876015374355117;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.0077171075002028106;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 6.92614191604298E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.782', 'seconds']
Refined model CLL: -0.539007


******************************************
Best model found
******************************************
Results 

CLL : -0.617787 

AUC ROC : 0.618329 

AUC PR : 0.569697 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 40.906 

Total Inference Time : 1.1517045497894287 

Total revision time: 44.20834864234924
Best scored revision CLL: -0.539007


Results 

CLL : -0.617787 

AUC ROC : 0.618329 

AUC PR : 0.569697 

Precision : 0.954442 

Recall : 0.158173 

F1 : 0.271373 

Total Learning Time : 44.228298793792725 

Total Inference Time : 1.1517045497894287 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.574
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.571', 'seconds']
Parameter learned model CLL:-0.645914 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]
{'': [1.9315724855614373e-15, 0.2473831541569956]}
{'': [-3.4492365813597096e-16, 0.24738315415699694]}
{'': [1.793603022307049e-15, 0.24738315415698806]}
{'': [6.553549504583448e-16, 0.2473831541570005]}
{'': [-2.4144656069517967e-16, 0.24738315415699036]}
{'': [-5.1738548720395646e-17, 0.24738315415699547]}
{'': [2.0695419488158259e-16, 0.2473831541570034]}
{'': [2.5869274360197823e-17, 0.24738315415699816]}
{'': [-1.2503482607428947e-16, 0.24738315415699647]}
{'': [4.527123013034619e-17, 0.24738315415700443]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 47.329
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952967;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4761269733257933;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.16597828983210133;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.17269322973112616;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.22861439261905941;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13332166880607083;  // std dev = 0.497, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.18648409910313152;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1550461812274263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.40267984333076595;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2232272147908549;  // std dev = 1.243, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.09852943363698496;  // std dev = 16.493, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.12964332899983777;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07581999526765452;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1147385131951437;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08090373323204297;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05694184332165705;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.09059618161564954;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.05943079265665198;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04273079215861745;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07404263910145316;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.04164516169296019;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.099', 'seconds']
Refined model CLL: -0.632414


******************************************
Best model found
******************************************
Results 

CLL : -0.70315 

AUC ROC : 0.605507 

AUC PR : 0.421957 

Precision : 0.354397 

Recall : 0.956367 

F1 : 0.517154 

Total Learning Time : 47.329 

Total Inference Time : 1.3797023296356201 

Total revision time: 51.11991560745239
Best scored revision CLL: -0.632414


Results 

CLL : -0.70315 

AUC ROC : 0.605507 

AUC PR : 0.421957 

Precision : 0.354397 

Recall : 0.956367 

F1 : 0.517154 

Total Learning Time : 51.13986575889587 

Total Inference Time : 1.3797023296356201 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 2.173
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15295015834109757;  // std dev = 18.437, 1,635.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1358392458247524;  // std dev = 18.403, 1,621.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.11494606926477044;  // std dev = 18.425, 1,630.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08713547986044827;  // std dev = 18.557, 1,688.000 (wgt'ed) examples reached here.  /* #neg=1,206 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08508201604683163;  // std dev = 18.398, 1,619.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07048960603848194;  // std dev = 18.398, 1,619.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.050696562837000726;  // std dev = 18.492, 1,659.000 (wgt'ed) examples reached here.  /* #neg=1,177 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.047776660619183224;  // std dev = 18.408, 1,623.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.03745553104951379;  // std dev = 18.425, 1,630.000 (wgt'ed) examples reached here.  /* #neg=1,148 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.022615636091174188;  // std dev = 18.524, 1,673.000 (wgt'ed) examples reached here.  /* #neg=1,191 #pos=482 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.301', 'seconds']
Parameter learned model CLL:-0.479078 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.437, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.403, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.425, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.557, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.398, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.398, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.492, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.408, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.425, 1, 482]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.524, 1, 482]}]
{'': [1.4354398702224246e-15, 0.20789346201683542]}
{'': [1.4354398702224247e-16, 0.20893188985863068]}
{'': [1.794299837778031e-15, 0.2082637660431181]}
{'': [6.100619448445304e-16, 0.20400906313876208]}
{'': [0.0, 0.20908063258989065]}
{'': [-4.485749594445077e-17, 0.20908063258991263]}
{'': [1.8840148296669324e-16, 0.20612502865804166]}
{'': [4.9343245538895844e-17, 0.20878324486007377]}
{'': [-1.1214373986112693e-16, 0.2082637660431503]}
{'': [4.261462114722823e-17, 0.20510059383429774]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 50.805
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16679945413064926;  // std dev = 0.462, 1,445.000 (wgt'ed) examples reached here.  /* #neg=999 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03592671287729016;  // std dev = 3.627, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.020311097261674547;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15886194513356933;  // std dev = 0.467, 1,384.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.051249941219599866;  // std dev = 3.583, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.026344223662905873;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.01782060961185186;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1352732544235138;  // std dev = 0.467, 1,387.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.021864548970262777;  // std dev = 3.648, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.18677682967201678;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.022317941932808536;  // std dev = 3.855, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.20766380403590023;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06316952929743332;  // std dev = 3.079, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | | else return 0.1063318449851286;  // std dev = 0.464, 1,379.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=433 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.05581574617414983;  // std dev = 3.566, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
%   | | | else return -0.07489207194333826;  // std dev = 1.338, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.012852243290625372;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.006559077910255817;  // std dev = 3.691, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return -0.17555918263418577;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09136981354153001;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.09406837295076143;  // std dev = 0.466, 1,355.000 (wgt'ed) examples reached here.  /* #neg=922 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.0421568271858139;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.018573026296465112;  // std dev = 3.860, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return 0.0042727254990717915;  // std dev = 3.658, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.028763259067682484;  // std dev = 3.079, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | | | else return -0.15157664667255308;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.08083214149243768;  // std dev = 0.468, 1,340.000 (wgt'ed) examples reached here.  /* #neg=907 #pos=433 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.036680606569871786;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.014153778121193587;  // std dev = 3.637, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return 0.008040973541418977;  // std dev = 3.877, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06445800744399957;  // std dev = 2.979, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return -0.13309514525580782;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.041502482702889684;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.05854126877855274;  // std dev = 16.946, 1,328.000 (wgt'ed) examples reached here.  /* #neg=908 #pos=420 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.035599529181387216;  // std dev = 3.593, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.03592975005930459;  // std dev = 1.314, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.011636865006847456;  // std dev = 3.868, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.10200766515345232;  // std dev = 0.000515, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return -0.1366677344551035;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.11623423014879485;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return 0.04671810156400688;  // std dev = 0.465, 1,372.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=433 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.007387769776640856;  // std dev = 3.646, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.10923158633739787;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -1.388171467017108E-4;  // std dev = 3.880, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.0906686487080588;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03091975846383183;  // std dev = 0.462, 1,445.000 (wgt'ed) examples reached here.  /* #neg=999 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04125863938529985;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.005305097855195585;  // std dev = 3.872, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -5.2165124238404E-5;  // std dev = 3.652, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.570544215774986;  // std dev = 7.097, 394.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=334 */
%   | | | else return -0.2554043868260188;  // std dev = 4.053, 867.000 (wgt'ed) examples reached here.  /* #neg=851 #pos=16 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1703353149128845;  // std dev = 1.882, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | | else return 0.14676784934085105;  // std dev = 7.730, 247.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=105 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.019341922450212642;  // std dev = 0.357, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.2709345263569568;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.014334566926706482;  // std dev = 3.619, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.061', 'seconds']
Refined model CLL: -0.398008


******************************************
Best model found
******************************************
Results 

CLL : -0.547535 

AUC ROC : 0.872308 

AUC PR : 0.841889 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 50.805 

Total Inference Time : 1.9406359195709229 

Total revision time: 56.007226779937746
Best scored revision CLL: -0.398008


Results 

CLL : -0.547535 

AUC ROC : 0.872308 

AUC PR : 0.841889 

Precision : 1.0 

Recall : 0.162562 

F1 : 0.279661 

Total Learning Time : 56.02717693138123 

Total Inference Time : 1.9406359195709229 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.76
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11460351721530632;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09210948752888284;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07318345847215395;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.057634348439473126;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.045085934115190816;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.035092443397827175;  // std dev = 19.926, 1,700.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=632 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.464', 'seconds']
Parameter learned model CLL:-0.627637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [19.926, 1, 632]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [19.926, 1, 632]}]
{'': [3.3364615418300357e-15, 0.23355570934254818]}
{'': [-1.0503675224279742e-15, 0.23355570934255973]}
{'': [1.853589745461131e-15, 0.23355570934256867]}
{'': [9.267948727305654e-16, 0.23355570934254272]}
{'': [2.934850430313457e-16, 0.2335557093425736]}
{'': [-4.633974363652827e-17, 0.23355570934255332]}
{'': [2.703151712130816e-16, 0.23355570934257525]}
{'': [-2.703151712130816e-17, 0.23355570934256772]}
{'': [-1.5832745742480493e-16, 0.2335557093425776]}
{'': [5.0201388939572296e-17, 0.23355570934255943]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 61.117
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.30586882122284154;  // std dev = 3.532, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2.444, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25333960844573283;  // std dev = 3.531, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2.445, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0.485, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713766;  // std dev = 3.527, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.2392265087963707;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4892265087963705;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11490218447205226;  // std dev = 18.631, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.16602510613918658;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7164764146199721;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.2695212489668094;  // std dev = 0.105, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46647641461997197;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.09168607457424896;  // std dev = 18.623, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.12750999988934764;  // std dev = 4.295, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04421574458269947;  // std dev = 3.576, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07427526682283683;  // std dev = 0.483, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08725491339348562;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1169921622241875;  // std dev = 2.450, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07181784372780638;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.022872931520347868;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05836020692461444;  // std dev = 0.483, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0631476978239359;  // std dev = 3.522, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09406128938244045;  // std dev = 2.453, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05771248621408866;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.019515190348444168;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045550912114862285;  // std dev = 0.483, 1,498.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.04701658452460175;  // std dev = 3.521, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0718577096073686;  // std dev = 2.454, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.046042071014197015;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016611306045685427;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5080960961918332;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.2501272034974545;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.3201313841883253;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.03379350617099565;  // std dev = 18.623, 1,480.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=556 */
%   | | | else return 0.04137787559473136;  // std dev = 4.292, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.021904864140837258;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.971', 'seconds']
Refined model CLL: -0.617838


******************************************
Best model found
******************************************
Results 

CLL : -0.591316 

AUC ROC : 0.63392 

AUC PR : 0.573521 

Precision : 0.824074 

Recall : 0.196035 

F1 : 0.316726 

Total Learning Time : 61.117 

Total Inference Time : 1.3845946788787842 

Total revision time: 65.1884218711853
Best scored revision CLL: -0.617838


Results 

CLL : -0.591316 

AUC ROC : 0.63392 

AUC PR : 0.573521 

Precision : 0.824074 

Recall : 0.196035 

F1 : 0.316726 

Total Learning Time : 65.20837202262878 

Total Inference Time : 1.3845946788787842 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.41
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15608333952704592;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.12083487756737883;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0924698618250928;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.07024281341416025;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05311363022664483;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.04004756889870338;  // std dev = 15.548, 968.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.488', 'seconds']
Parameter learned model CLL:-0.650109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.48e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 82], 'false': [15.548, 500, 468]}]
['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 82], 'false': [15.548, 500, 468]}]
{'': [-6.932124251318051e-16, 0.24972679461784425]}
{'': [8.665155314147563e-16, 0.2497267946178503]}
{'': [1.4730764034050857e-15, 0.24972679461786704]}
{'': [1.2997732971221344e-16, 0.2497267946178606]}
{'': [-3.4660621256590254e-16, 0.24972679461785535]}
{'': [-5.415722071342227e-17, 0.24972679461785033]}
{'': [-1.408087738548979e-16, 0.2497267946178522]}
{'': [2.166288828536891e-17, 0.24972679461784802]}
{'': [-5.144935967775116e-17, 0.24972679461785843]}
{'': [4.06179155350667e-17, 0.24972679461785577]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Model training time 24.397
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.12345505754849105;  // std dev = 4.371, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1438632208137971;  // std dev = 4.309, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0.498, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.24108260603100837;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11829816576030877;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.15138394734995228;  // std dev = 3.100, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.037354708586509904;  // std dev = 4.198, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.48e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.29298487008503804;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.017809323961701328;  // std dev = 2.170, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.29985359047336546;  // std dev = 0.495, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.20615644013212142;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10223320870742336;  // std dev = 2.930, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.1307480033175962;  // std dev = 3.098, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03238647344004468;  // std dev = 4.197, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.03e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2250441870948438;  // std dev = 0.497, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.4785468959119282;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.36670702426997187;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2016104759622503;  // std dev = 1.550, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08131183272790815;  // std dev = 2.917, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.11048295282208985;  // std dev = 3.096, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.027975980355515483;  // std dev = 4.197, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1743484549966808;  // std dev = 0.497, 732.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3614035862970784;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.27546661084969204;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.1675976217126197;  // std dev = 1.551, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06843873830753834;  // std dev = 2.916, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.09268050494492892;  // std dev = 3.094, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.024088403762071515;  // std dev = 4.197, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.14153852814162268;  // std dev = 2.666, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.15520384140971638;  // std dev = 2.069, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.14627138442568138;  // std dev = 0.494, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.13637502863154713;  // std dev = 1.551, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05711467950080332;  // std dev = 2.914, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0031027219524596356;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06051200910183452;  // std dev = 4.168, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.49859823982810086;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0449424522381144;  // std dev = 3.303, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else return 0.11097292679596242;  // std dev = 0.494, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return -0.01921695838135055;  // std dev = 1.194, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.0723164411101968;  // std dev = 3.072, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.0026486545718994907;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.05090503948279865;  // std dev = 4.166, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.07403138568606235;  // std dev = 2.629, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.15004522429485376;  // std dev = 2.019, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else return 0.08564083638127025;  // std dev = 0.493, 699.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1196328074007936;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.036260183207588434;  // std dev = 2.908, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.012685968523057862;  // std dev = 3.111, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.051025674121699366;  // std dev = 4.163, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3858407894115383;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | | then return -0.32633130572794655;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.007148188904023531;  // std dev = 4.639, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.036604250254627206;  // std dev = 3.053, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.022530148153485835;  // std dev = 3.284, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | | then return 0.07228861955000354;  // std dev = 12.594, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | | else return 0.009706713943010337;  // std dev = 4.194, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4585860747956794;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2266388041906337;  // std dev = 2.257, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2512430747389364;  // std dev = 1.441, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.07656867396270811;  // std dev = 3.181, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.027815306247647713;  // std dev = 3.053, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.01800617749838608;  // std dev = 3.284, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.054255662826129765;  // std dev = 12.594, 650.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | | | else return 0.008250803962989954;  // std dev = 4.194, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.700', 'seconds']
Refined model CLL: -0.599471


******************************************
Best model found
******************************************
Results 

CLL : -0.65425 

AUC ROC : 0.619423 

AUC PR : 0.554437 

Precision : 0.375327 

Recall : 0.93109 

F1 : 0.534995 

Total Learning Time : 24.397 

Total Inference Time : 1.1191091537475586 

Total revision time: 27.82275469970703
Best scored revision CLL: -0.599471


Results 

CLL : -0.65425 

AUC ROC : 0.619423 

AUC PR : 0.554437 

Precision : 0.375327 

Recall : 0.93109 

F1 : 0.534995 

Total Learning Time : 27.84270485115051 

Total Inference Time : 1.1191091537475586 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.962
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.373', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 46.382
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.45884191663785473;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36797300713520104;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0036637537051137105;  // std dev = 3.076, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.37336879228699843;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3018764347368976;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.003139479865922457;  // std dev = 3.073, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1276021468791805;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004868266800416283;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.26831481283721625;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23873717036189157;  // std dev = 2.834, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11174991086260015;  // std dev = 4.37e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004274819321584994;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004289313698984164;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24405188001396558;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18163660284592842;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.002459548330052831;  // std dev = 3.071, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10505523411498459;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037647707390493354;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18296613219155056;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13775731724597934;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09643832178053341;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003303048452361006;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.00420021800140808;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1456427614380538;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10296541483696717;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08835741343852893;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002896930746020989;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.003686343712340549;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10986785510698108;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07527734793108112;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.0814956217082737;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025399586565182167;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032340676915229684;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08366120835829283;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05631712983647408;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07560076990352034;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002226368035707192;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028363010363807216;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.07626792397835092;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.042325019506099605;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07048487254330378;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019510280037551616;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0024867018176770424;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.289', 'seconds']
Refined model CLL: -0.621889


******************************************
Best model found
******************************************
Results 

CLL : -0.658973 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 46.382 

Total Inference Time : 1.2313899993896484 

Total revision time: 49.344882387161256
Best scored revision CLL: -0.621889


Results 

CLL : -0.658973 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 49.372805017471315 

Total Inference Time : 1.2313899993896484 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.195
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.137', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 39.822
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.43170309793098227;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10417536869907289;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.23989562422735553;  // std dev = 17.053, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.31765811729537335;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3516330930685386;  // std dev = 1.924, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.1320938869396352;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3893380901605745;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08079283695241732;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.25285681447891195;  // std dev = 2.270, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.18483255835653167;  // std dev = 17.122, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2714208172227738;  // std dev = 1.913, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10446094245665015;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.325276215192533;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10793428239695535;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13430541987443778;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.1393379901933239;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.1927000227636002;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2260032979874245;  // std dev = 1.880, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.046761641925190674;  // std dev = 1.819, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10583443721416487;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1279172146191434;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.16164852864408832;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2576186530083785;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03575969286972728;  // std dev = 1.818, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03358651713688302;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07948860643794911;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09187109520633696;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.12921173845268885;  // std dev = 1.957, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.21148434116398684;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.027273136080183304;  // std dev = 1.818, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.025601355907904515;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.21263310026393248;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.03628111865280427;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1298512170063796;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.05837881036956229;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.0867030144804619;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.12420985511966359;  // std dev = 1.838, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.019480463144582072;  // std dev = 1.818, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.044916496177608414;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05059991929523076;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08266993393395472;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1608799291771179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.014804372952507916;  // std dev = 1.818, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.005950507101854542;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.092', 'seconds']
Refined model CLL: -0.665469


******************************************
Best model found
******************************************
Results 

CLL : -0.755557 

AUC ROC : 0.537018 

AUC PR : 0.345904 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 39.822 

Total Inference Time : 1.2263879776000977 

Total revision time: 43.05857710075379
Best scored revision CLL: -0.665469


Results 

CLL : -0.755557 

AUC ROC : 0.537018 

AUC PR : 0.345904 

Precision : 0.353871 

Recall : 0.956367 

F1 : 0.516595 

Total Learning Time : 43.086499731063846 

Total Inference Time : 1.2263879776000977 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.659
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1893918085316624;  // std dev = 19.712, 1,754.000 (wgt'ed) examples reached here.  /* #neg=1,173 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16644709808734187;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1514670799326932;  // std dev = 19.547, 1,697.000 (wgt'ed) examples reached here.  /* #neg=1,116 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12160979039368722;  // std dev = 19.626, 1,724.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0925194084781224;  // std dev = 19.742, 1,765.000 (wgt'ed) examples reached here.  /* #neg=1,184 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08539333670241168;  // std dev = 19.594, 1,713.000 (wgt'ed) examples reached here.  /* #neg=1,132 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05796248086012091;  // std dev = 19.756, 1,770.000 (wgt'ed) examples reached here.  /* #neg=1,189 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04453537644343597;  // std dev = 19.783, 1,780.000 (wgt'ed) examples reached here.  /* #neg=1,199 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03933047220287785;  // std dev = 19.725, 1,759.000 (wgt'ed) examples reached here.  /* #neg=1,178 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03649295890939063;  // std dev = 19.647, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,150 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.152', 'seconds']
Parameter learned model CLL:-0.535421 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.712, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.547, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.626, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.742, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.594, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.756, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.783, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.725, 1, 581]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.647, 1, 581]}]
{'': [nan, 0.22152103223254987]}
{'': [nan, 0.22209472828629154]}
{'': [nan, 0.22515243198421772]}
{'': [nan, 0.22343326909308145]}
{'': [nan, 0.22082000497556759]}
{'': [nan, 0.22413404721763772]}
{'': [nan, 0.22050145232849686]}
{'': [nan, 0.2198646004292559]}
{'': [nan, 0.2212023537845365]}
{'': [nan, 0.2229871500797153]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 48.374
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20750790945848172;  // std dev = 0.477, 1,560.000 (wgt'ed) examples reached here.  /* #neg=1,015 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.016043671941617644;  // std dev = 3.893, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18371724297531844;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.053213778524555264;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.02572140632896389;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.02926162819499968;  // std dev = 3.858, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16024802568526605;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.0483741436634201;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.024586973708626024;  // std dev = 3.640, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 0.008533165367476557;  // std dev = 3.883, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13372013548755224;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.051995979518845235;  // std dev = 0.299, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03976159956372526;  // std dev = 3.820, 95.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=18 */
%   | | | else return 0.0043869811381372515;  // std dev = 3.669, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.35302413995028925;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07009731068199677;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.03563283560246336;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0.10669103508395024;  // std dev = 18.262, 1,459.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=516 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.013884694041669329;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.010351240733401317;  // std dev = 3.877, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return 0.005374135764744378;  // std dev = 3.666, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.4317406187434458;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.05586141995846409;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.09219036067401809;  // std dev = 0.480, 1,472.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.032531988450180176;  // std dev = 3.603, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.051832988188647316;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.013264366849812454;  // std dev = 3.870, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.11167708180643415;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07723496223100083;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04294149081057218;  // std dev = 3.569, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.06702059058424951;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.015351843075344096;  // std dev = 3.863, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.10094620977122329;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.053393473618765674;  // std dev = 0.478, 1,535.000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.013896336556733413;  // std dev = 3.618, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return 0.10800870163891778;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.015636003744902236;  // std dev = 3.856, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.09214746162122528;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.042609878971505574;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.05323329315205048;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012369991917428038;  // std dev = 3.862, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.021097367934636353;  // std dev = 3.687, 114.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5614271506041448;  // std dev = 6.939, 453.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=396 */
%   | | | else return -0.29067874989442594;  // std dev = 4.110, 863.000 (wgt'ed) examples reached here.  /* #neg=847 #pos=16 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.17012045764320888;  // std dev = 8.184, 268.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=132 */
%   | | | else return 0.042498140583098094;  // std dev = 1.670, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15450608344434835;  // std dev = 1.286, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.5248358324535036;  // std dev = 1.301, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.014538442968550015;  // std dev = 3.851, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.08343866932249908;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.055', 'seconds']
Refined model CLL: -0.436697


******************************************
Best model found
******************************************
Results 

CLL : -0.583654 

AUC ROC : 0.839798 

AUC PR : 0.772085 

Precision : 1.0 

Recall : 0.006568 

F1 : 0.013051 

Total Learning Time : 48.374 

Total Inference Time : 1.7878892421722412 

Total revision time: 52.74502874183655
Best scored revision CLL: -0.436697


Results 

CLL : -0.583654 

AUC ROC : 0.839798 

AUC PR : 0.772085 

Precision : 1.0 

Recall : 0.006568 

F1 : 0.013051 

Total Learning Time : 52.77295137214661 

Total Inference Time : 1.7878892421722412 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.318
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.133', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 73.52
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.42475617506381624;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2476070167497723;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.34982421251676;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.2793356173487745;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.16413830416657968;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.22657146233053777;  // std dev = 4.394, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13358021511936716;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13823254152952388;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.24034755207521258;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10550186348622431;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1054396294178051;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18313817705699761;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08231311461641516;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07198916049555897;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1517169458204801;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.17533858843188418;  // std dev = 1.926, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.42549713026192715;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.061463094071895284;  // std dev = 19.649, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.07625896773728084;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04890712120865272;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03493945355483421;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0961143683474939;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03742181816495382;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.020207126952115448;  // std dev = 3.499, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08280206233575753;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.227', 'seconds']
Refined model CLL: -0.669622


******************************************
Best model found
******************************************
Results 

CLL : -0.644339 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 73.52 

Total Inference Time : 1.3744559288024902 

Total revision time: 76.99847596931457
Best scored revision CLL: -0.669622


Results 

CLL : -0.644339 

AUC ROC : 0.562449 

AUC PR : 0.417752 

Precision : 0.652778 

Recall : 0.04141 

F1 : 0.077879 

Total Learning Time : 77.02639859962463 

Total Inference Time : 1.3744559288024902 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.042
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.200', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
2;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
3;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
4;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
5;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
6;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
7;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
8;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
9;;samevenue(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
Model training time 36.062
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.31263919827319875;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.5794119437364615;  // std dev = 0.320, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.03803948203831724;  // std dev = 3.411, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.053733355776855334;  // std dev = 3.368, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2734741684206237;  // std dev = 13.055, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.02644133491846655;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3.114, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.018192328705489667;  // std dev = 3.139, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07848058847685298;  // std dev = 4.202, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.44153454115890883;  // std dev = 0.314, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.026159789987399578;  // std dev = 3.411, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.19586459464421643;  // std dev = 13.426, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.313650397071669;  // std dev = 1.564, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.18988424101568085;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05833304417748357;  // std dev = 2.941, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.00779611826654324;  // std dev = 3.128, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.07154545515204902;  // std dev = 4.197, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1416777502418343;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2245827709432719;  // std dev = 1.251, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3165027768542027;  // std dev = 0.205, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.13313219320103223;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.055586547484613044;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06110505839681381;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0038711334239900485;  // std dev = 3.147, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16656551842477893;  // std dev = 2.646, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.10646710387112933;  // std dev = 2.088, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11288322665562787;  // std dev = 13.424, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.18903292222140913;  // std dev = 1.556, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.148588114874625;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.038569324697340084;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05561185531141492;  // std dev = 4.183, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004163475931049679;  // std dev = 3.137, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2944475110907607;  // std dev = 0.234, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08144431787400011;  // std dev = 3.377, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.010020779099104697;  // std dev = 3.289, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09700392217234244;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.11962115386117311;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.031588841136639866;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.003889338307522319;  // std dev = 3.132, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.0475306484327908;  // std dev = 4.184, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4361572567299134;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.23350308202971787;  // std dev = 2.321, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2677912789608005;  // std dev = 1.560, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.07706062884820987;  // std dev = 3.202, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.06507898350854859;  // std dev = 13.368, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.16330964879606552;  // std dev = 1.582, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03993156247320328;  // std dev = 4.175, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.004351283634992304;  // std dev = 3.143, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.044624861195081994;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1230337527918099;  // std dev = 1.271, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.19451439471491463;  // std dev = 0.201, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.20535925983478798;  // std dev = 0.133, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.06472922787653479;  // std dev = 4.252, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05689034391232474;  // std dev = 4.254, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.22554895146294177;  // std dev = 0.121, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.502', 'seconds']
Refined model CLL: -0.627968


******************************************
Best model found
******************************************
Results 

CLL : -0.706755 

AUC ROC : 0.554515 

AUC PR : 0.403762 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 36.062 

Total Inference Time : 1.2076504230499268 

Total revision time: 39.01859274291992
Best scored revision CLL: -0.627968


Results 

CLL : -0.706755 

AUC ROC : 0.554515 

AUC PR : 0.403762 

Precision : 0.373829 

Recall : 0.921767 

F1 : 0.53193 

Total Learning Time : 39.04651537322998 

Total Inference Time : 1.2076504230499268 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.002
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.230', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 45.286
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.433906510857088;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.004351064900487665;  // std dev = 3.080, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.46341493136240836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3676119673930714;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13338343804520725;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.005556130425091865;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3910064939368783;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.30040272227663645;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.11871212882917126;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0048814113928811334;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.30664252570447526;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23718539783209985;  // std dev = 2.929, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0026771818010361366;  // std dev = 3.070, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11768949475621578;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004286407673482556;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.24387427529249903;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1816264674752957;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.101075658957185;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037622142316740643;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003764806174277056;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.18327419126982888;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1377102824195472;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.09225524615239629;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0033008012454352645;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003303078144066235;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.1454835263591456;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10296276923609336;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0848146452964047;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028949568237196313;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028969555414296412;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10964727319931625;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07529735548813905;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.07845891650900623;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025382258678852574;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002539979289416472;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08476824014348497;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0561391169290217;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0018382655487193457;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08024584578074545;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0022263851394907688;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06363578516673477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.042173606288531895;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07031025697987636;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019510421234728177;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002565382012546994;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.388', 'seconds']
Refined model CLL: -0.621891


******************************************
Best model found
******************************************
Results 

CLL : -0.658997 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 45.286 

Total Inference Time : 1.1194555759429932 

Total revision time: 48.11650480079651
Best scored revision CLL: -0.621891


Results 

CLL : -0.658997 

AUC ROC : 0.55578 

AUC PR : 0.427993 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 48.13977063941956 

Total Inference Time : 1.1194555759429932 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.088
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.243', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 43.962
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558625;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5118627986468952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10417536869907289;  // std dev = 1.236, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.23989562422735558;  // std dev = 17.053, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.31765811729537363;  // std dev = 2.747, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.35163309306853874;  // std dev = 1.924, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.1320938869396352;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1861197577734811;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.22052868700693865;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2541502039163847;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10446094245665015;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10390055191315252;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3435615391703909;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.03659050881015422;  // std dev = 1.615, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.2077232229648701;  // std dev = 2.263, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.13927791551167987;  // std dev = 17.120, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.2840857557415314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08123321789614901;  // std dev = 1.832, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08078498109920405;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10579755008366191;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12589849135083017;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.16327359307519895;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.22998958852745188;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06264925604649443;  // std dev = 1.831, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06229831139735499;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.23349604284461659;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.08036931953949412;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13798193022681005;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.07818042673871317;  // std dev = 17.049, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.11185766638030567;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1453028513443382;  // std dev = 1.828, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.047766207628000955;  // std dev = 1.830, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05968337056479243;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06949965760694214;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10147736516298526;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.17027741706575522;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03647676031176513;  // std dev = 1.830, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.017486496992444152;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0448463950781414;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.04965124519625533;  // std dev = 1.926, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08346703350599512;  // std dev = 1.954, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1475509562452098;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.02777691709934463;  // std dev = 1.829, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.013277912632855814;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.773', 'seconds']
Refined model CLL: -0.666304


******************************************
Best model found
******************************************
Results 

CLL : -0.755474 

AUC ROC : 0.537167 

AUC PR : 0.34601 

Precision : 0.354174 

Recall : 0.955922 

F1 : 0.516851 

Total Learning Time : 43.962 

Total Inference Time : 1.2643747329711914 

Total revision time: 47.092119026184086
Best scored revision CLL: -0.666304


Results 

CLL : -0.755474 

AUC ROC : 0.537167 

AUC PR : 0.34601 

Precision : 0.354174 

Recall : 0.955922 

F1 : 0.516851 

Total Learning Time : 47.11538486480713 

Total Inference Time : 1.2643747329711914 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.678
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19672702367759592;  // std dev = 19.603, 1,716.000 (wgt'ed) examples reached here.  /* #neg=1,135 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1706592665571203;  // std dev = 19.609, 1,718.000 (wgt'ed) examples reached here.  /* #neg=1,137 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15129876231758901;  // std dev = 19.523, 1,689.000 (wgt'ed) examples reached here.  /* #neg=1,108 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11677358394018429;  // std dev = 19.669, 1,739.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0958731796939381;  // std dev = 19.675, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,160 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08018170900850966;  // std dev = 19.644, 1,730.000 (wgt'ed) examples reached here.  /* #neg=1,149 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05300761915059082;  // std dev = 19.815, 1,792.000 (wgt'ed) examples reached here.  /* #neg=1,211 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0511367927381922;  // std dev = 19.686, 1,745.000 (wgt'ed) examples reached here.  /* #neg=1,164 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03486083412694531;  // std dev = 19.772, 1,776.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.030384485359529607;  // std dev = 19.731, 1,761.000 (wgt'ed) examples reached here.  /* #neg=1,180 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.180', 'seconds']
Parameter learned model CLL:-0.535 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.603, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.609, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.523, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.669, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.675, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.644, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.815, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.686, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.772, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.731, 1, 581]}]
{'': [nan, 0.2239429665128824]}
{'': [nan, 0.2238155610457414]}
{'': [nan, 0.22566104431523867]}
{'': [nan, 0.22247720907992669]}
{'': [nan, 0.22234971615738794]}
{'': [nan, 0.22305088709946708]}
{'': [nan, 0.21910095214842204]}
{'': [nan, 0.2220947282862875]}
{'': [nan, 0.22011929581606857]}
{'': [nan, 0.2210748951749863]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 52.636
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.18423589162125148;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.21034600567207729;  // std dev = 0.478, 1,502.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.015784403079807142;  // std dev = 5.192, 203.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1717125856571223;  // std dev = 0.474, 1,598.000 (wgt'ed) examples reached here.  /* #neg=1,053 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.01481214937855653;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0402953229122897;  // std dev = 3.833, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | | else return 0.022924660165451454;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16510889727084896;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.038040256218347376;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.031283602431573125;  // std dev = 3.626, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return 0.0068897177582938314;  // std dev = 3.899, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14006241297261277;  // std dev = 0.481, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04657189289871719;  // std dev = 3.586, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.044427344071663925;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.010434337321642822;  // std dev = 3.891, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.14492530452291708;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2568071384892668;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.09080731868106308;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.09475044580556541;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0.10752826380310081;  // std dev = 18.245, 1,454.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.034835268298309276;  // std dev = 3.611, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.05192617251500762;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -4.896915149469431E-5;  // std dev = 3.900, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
%   | | | else return -0.1260149884647008;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.13517909058888833;  // std dev = 1.310, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.017195367999850296;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | else return 0.09142786830933677;  // std dev = 0.480, 1,473.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.008768841029658359;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.026412642041876898;  // std dev = 3.840, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
%   | | | else return 0.009939711936097866;  // std dev = 3.652, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06853522050583286;  // std dev = 3.129, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return 0.010252126029411687;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.07884075224662336;  // std dev = 0.481, 1,450.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.02239325957995599;  // std dev = 3.624, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.045347545842847704;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.0013935705686723325;  // std dev = 0.360, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0568907843862779;  // std dev = 0.480, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.030959402051191257;  // std dev = 3.603, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.057582619850039096;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0020872478888445296;  // std dev = 3.886, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | | else return -0.11412012002734018;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04413705181804222;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.027792198570981697;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.014935073220627416;  // std dev = 3.859, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return 7.269271723649886E-4;  // std dev = 3.654, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5647230601806684;  // std dev = 6.841, 450.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=396 */
%   | | | else return -0.2907615307047015;  // std dev = 4.137, 873.000 (wgt'ed) examples reached here.  /* #neg=857 #pos=16 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.13400379411147967;  // std dev = 8.456, 288.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=132 */
%   | | | else return 0.08864436984498815;  // std dev = 1.605, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.029851756812824086;  // std dev = 3.776, 89.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=18 */
%   | | | else return -0.040515348223856266;  // std dev = 1.560, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.5311310877535166;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.10030556830782861;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.124', 'seconds']
Refined model CLL: -0.436704


******************************************
Best model found
******************************************
Results 

CLL : -0.583412 

AUC ROC : 0.839268 

AUC PR : 0.770873 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 52.636 

Total Inference Time : 1.8258273601531982 

Total revision time: 57.08533870124817
Best scored revision CLL: -0.436704


Results 

CLL : -0.583412 

AUC ROC : 0.839268 

AUC PR : 0.770873 

Precision : nan 

Recall : 0.0 

F1 : nan 

Total Learning Time : 57.108604539871216 

Total Inference Time : 1.8258273601531982 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.269
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.163', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 68.168
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.42475617506381624;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977226;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374321;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14640266421832263;  // std dev = 3.511, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.22574316832183317;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10437410859896765;  // std dev = 3.504, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.18465088482152214;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3177650311402712;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.08006052311436539;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.10122723928974582;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.03728292940755498;  // std dev = 3.575, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.14153620917288587;  // std dev = 1.494, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.35229746711606474;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.061919050150514736;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.0763398668626433;  // std dev = 4.370, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.05740972969085724;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01979752613598379;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.15197324071742252;  // std dev = 1.899, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.3964633409253656;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.046777090804442735;  // std dev = 19.609, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05745903224742533;  // std dev = 4.369, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.045793611684258405;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.016855099865528484;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03737126125644365;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.020881645189970346;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08173507392334685;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.03632180444617924;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.01432074012613523;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.594', 'seconds']
Refined model CLL: -0.667632


******************************************
Best model found
******************************************
Results 

CLL : -0.643453 

AUC ROC : 0.566207 

AUC PR : 0.418738 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 68.168 

Total Inference Time : 1.2620408535003662 

Total revision time: 71.4777042503357
Best scored revision CLL: -0.667632


Results 

CLL : -0.643453 

AUC ROC : 0.566207 

AUC PR : 0.418738 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 71.50097008895875 

Total Inference Time : 1.2620408535003662 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.974
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.276', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 34.623
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5382879672063556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6524457612137362;  // std dev = 1.330, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.032078136196191376;  // std dev = 3.135, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.10106546954416976;  // std dev = 4.218, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.7263997659160313;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3088997659160284;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.6080322453757985;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4642306642433692;  // std dev = 1.828, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.22643086319039477;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09526168725802414;  // std dev = 2.945, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.12358095880871148;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.0362969166501079;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23926829399447896;  // std dev = 2.713, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.015304776654464735;  // std dev = 2.311, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.05298982453002521;  // std dev = 3.364, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2741726636074897;  // std dev = 13.056, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.19152468573986167;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08093303602859625;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.012245500808286004;  // std dev = 3.127, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.08071097691968311;  // std dev = 4.203, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.5026910749665108;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1844094021855426;  // std dev = 13.876, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.4617649622154234;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3056467967922619;  // std dev = 1.818, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.15816501499161512;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06807998117177146;  // std dev = 2.944, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.09315386907334833;  // std dev = 3.111, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.025240397853704064;  // std dev = 4.212, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.12609724092665314;  // std dev = 2.669, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.14225044224668862;  // std dev = 13.684, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19226839694581;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.35126308438067777;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.12800165206591257;  // std dev = 1.548, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.056781398649071835;  // std dev = 2.943, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06113265208659295;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.0033511090386630286;  // std dev = 3.144, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10643891845867776;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1547170405311477;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.27608840774473475;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03875323987025144;  // std dev = 1.176, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.06098370207239812;  // std dev = 3.110, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.056696250436708444;  // std dev = 4.184, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.005434848808684935;  // std dev = 3.137, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4971703196517408;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2016838439596113;  // std dev = 2.322, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.25486088458179185;  // std dev = 1.698, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.09000114769812588;  // std dev = 3.212, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.05607858707151863;  // std dev = 3.064, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.04952275881935262;  // std dev = 3.397, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.101888488877105;  // std dev = 13.048, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.013036153741023106;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.28370712419913624;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.00931016656200925;  // std dev = 1.151, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.045705604359050724;  // std dev = 2.900, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | | | else return -0.03906454117454105;  // std dev = 3.363, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.07238425452931924;  // std dev = 3.316, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.07661892562710709;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.006236134875272603;  // std dev = 3.131, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.048810679828562714;  // std dev = 4.188, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4149000001143662;  // std dev = 1.275, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.4190670363182501;  // std dev = 0.364, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.2557034979212105;  // std dev = 1.041, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.07523287142046585;  // std dev = 3.063, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.06658791694829656;  // std dev = 2.707, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.033976130543209596;  // std dev = 3.653, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.05774157759288394;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.00802741445755818;  // std dev = 4.213, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.419', 'seconds']
Refined model CLL: -0.623636


******************************************
Best model found
******************************************
Results 

CLL : -0.706834 

AUC ROC : 0.553693 

AUC PR : 0.402458 

Precision : 0.373333 

Recall : 0.919335 

F1 : 0.531023 

Total Learning Time : 34.623 

Total Inference Time : 1.2267940044403076 

Total revision time: 37.62927615356445
Best scored revision CLL: -0.623636


Results 

CLL : -0.706834 

AUC ROC : 0.553693 

AUC PR : 0.402458 

Precision : 0.373333 

Recall : 0.919335 

F1 : 0.531023 

Total Learning Time : 37.652541992187494 

Total Inference Time : 1.2267940044403076 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos examples: 2649
Target test neg examples: 4334

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.015
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.206633783584356;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1795740276662767;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.15284823090715774;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12767341054974374;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10492681035702939;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08507951720187693;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06824339126365285;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05427420138764069;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04287965381087566;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03370506435366491;  // std dev = 15.484, 1,056.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.248', 'seconds']
Parameter learned model CLL:-0.648077 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [15.484, 688, 368]}]
{'': [nan, 0.2270431588613241]}
{'': [nan, 0.2270431588613309]}
{'': [nan, 0.22704315886134546]}
{'': [nan, 0.22704315886134624]}
{'': [nan, 0.22704315886133983]}
{'': [nan, 0.22704315886134535]}
{'': [nan, 0.22704315886133772]}
{'': [nan, 0.22704315886134457]}
{'': [nan, 0.2270431588613467]}
{'': [nan, 0.22704315886133364]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 43.582
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3974484051691344;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3717678476909069;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3307939837252071;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.30404128444251804;  // std dev = 2.837, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.32649939129120925;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23552264623199629;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.24993504285964638;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1811402081613061;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0024772644701173616;  // std dev = 3.069, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09999413152221179;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.19894595209656085;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13637308207443627;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08855026142782672;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0033144850730382884;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.14933178860667964;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10261996747908463;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.001987382509567004;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09376561762785525;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002906983090284634;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11226052556543216;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05984201257766986;  // std dev = 14.136, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | | else return 0.07701414285757359;  // std dev = 2.930, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.07806971510647852;  // std dev = 0.000715, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0025487887653019873;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.002585937202996273;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.045816398181049774;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08407108141676392;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05623974654582321;  // std dev = 2.832, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.0726325255864324;  // std dev = 0.000670, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022341202704727822;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0022667461133234488;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03554203749134575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.08421166603515406;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04163281998961954;  // std dev = 2.931, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.019826870859281597;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.007676287683143718;  // std dev = 3.071, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 7.15956409636896E-4;  // std dev = 2.919, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.128', 'seconds']
Refined model CLL: -0.621804


******************************************
Best model found
******************************************
Results 

CLL : -0.659159 

AUC ROC : 0.555648 

AUC PR : 0.427947 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 43.582 

Total Inference Time : 1.1754815578460693 

Total revision time: 46.50122916412354
Best scored revision CLL: -0.621804


Results 

CLL : -0.659159 

AUC ROC : 0.555648 

AUC PR : 0.427947 

Precision : 0.637427 

Recall : 0.041148 

F1 : 0.077305 

Total Learning Time : 51.62744128417969 

Total Inference Time : 1.1754815578460693 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos examples: 2246
Target test neg examples: 4478

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.226
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.44446072217175076;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3813455440277053;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3122663953203656;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2460049923919207;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.188818879614478;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.14284488312562882;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10736397936396141;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08053569503438149;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06042468230471383;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04538710202635832;  // std dev = 17.859, 1,315.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.168', 'seconds']
Parameter learned model CLL:-0.680543 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [17.859, 544, 771]}]
{'': [nan, 0.2425502754124175]}
{'': [nan, 0.2425502754123804]}
{'': [nan, 0.24255027541238958]}
{'': [nan, 0.24255027541238616]}
{'': [nan, 0.24255027541240273]}
{'': [nan, 0.24255027541239554]}
{'': [nan, 0.24255027541239307]}
{'': [nan, 0.24255027541239338]}
{'': [nan, 0.24255027541239849]}
{'': [nan, 0.24255027541239885]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 36.854
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5005053426630848;  // std dev = 1.921, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5406810030211525;  // std dev = 1.962, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04297102932558626;  // std dev = 1.239, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.3045453081923796;  // std dev = 17.080, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.4161777775101614;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4317030979309822;  // std dev = 2.002, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24202242160359355;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29960167906608665;  // std dev = 1.922, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.33325231394793914;  // std dev = 1.960, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.1320938869396352;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4558251098703149;  // std dev = 1.592, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05156272417014592;  // std dev = 1.640, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.18401378084152503;  // std dev = 17.052, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.2385714361497943;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.3413723950665916;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10390055191315252;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14101774536048542;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1594613655167904;  // std dev = 1.924, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.19687737356900537;  // std dev = 1.956, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2692252801573361;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08078498109920405;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.30780334783569147;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10581677151268652;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1505041090862628;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.16578126720997663;  // std dev = 2.291, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.10406885098726221;  // std dev = 17.119, 1,208.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.16774438481933265;  // std dev = 1.835, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2661236808917006;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.10856379536821838;  // std dev = 1.647, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0781679855035906;  // std dev = 17.035, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.11222953003076372;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1922390680893543;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02719213751262617;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2128153860336615;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10647257748803994;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1327772827139006;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.05811492120800793;  // std dev = 17.039, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08693517514750176;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11693244039766738;  // std dev = 1.881, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | | else return 0.04128729777231607;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.16527496300172562;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.08079460730785726;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10317138048728747;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.04363973817537396;  // std dev = 17.039, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06798348109614666;  // std dev = 2.746, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10242107094706267;  // std dev = 1.827, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.021612054140067716;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.001', 'seconds']
Refined model CLL: -0.665562


******************************************
Best model found
******************************************
Results 

CLL : -0.756537 

AUC ROC : 0.535444 

AUC PR : 0.342791 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 36.854 

Total Inference Time : 1.3226497173309326 

Total revision time: 40.167586164474486
Best scored revision CLL: -0.665562


Results 

CLL : -0.756537 

AUC ROC : 0.535444 

AUC PR : 0.342791 

Precision : 0.353755 

Recall : 0.956367 

F1 : 0.51647 

Total Learning Time : 45.29379828453064 

Total Inference Time : 1.3226497173309326 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos examples: 2436
Target test neg examples: 2800

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.774
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.197518093978012;  // std dev = 19.591, 1,712.000 (wgt'ed) examples reached here.  /* #neg=1,131 #pos=581 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16191688011556524;  // std dev = 19.737, 1,763.000 (wgt'ed) examples reached here.  /* #neg=1,182 #pos=581 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1465293355490135;  // std dev = 19.612, 1,719.000 (wgt'ed) examples reached here.  /* #neg=1,138 #pos=581 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11969980530422149;  // std dev = 19.658, 1,735.000 (wgt'ed) examples reached here.  /* #neg=1,154 #pos=581 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09726118624776792;  // std dev = 19.681, 1,743.000 (wgt'ed) examples reached here.  /* #neg=1,162 #pos=581 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07307963781765614;  // std dev = 19.772, 1,776.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=581 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06690676699158958;  // std dev = 19.655, 1,734.000 (wgt'ed) examples reached here.  /* #neg=1,153 #pos=581 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.049565262389293735;  // std dev = 19.714, 1,755.000 (wgt'ed) examples reached here.  /* #neg=1,174 #pos=581 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03314118600100256;  // std dev = 19.807, 1,789.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=581 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0377123778466184;  // std dev = 19.638, 1,728.000 (wgt'ed) examples reached here.  /* #neg=1,147 #pos=581 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.124', 'seconds']
Parameter learned model CLL:-0.53524 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.591, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.737, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.612, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.658, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.681, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.772, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.655, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.714, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.807, 1, 581]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [19.638, 1, 581]}]
{'': [nan, 0.22419773288058678]}
{'': [nan, 0.2209474452644206]}
{'': [nan, 0.22375185323935118]}
{'': [nan, 0.22273218779327977]}
{'': [nan, 0.22222222222222424]}
{'': [nan, 0.22011929581609904]}
{'': [nan, 0.22279593023177624]}
{'': [nan, 0.22145729336613865]}
{'': [nan, 0.21929179655437364]}
{'': [nan, 0.22317835594563942]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 50.296
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22318577367954756;  // std dev = 0.481, 1,493.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03290621665291044;  // std dev = 3.854, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return 0.011995088945666216;  // std dev = 3.679, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18449698676247023;  // std dev = 0.479, 1,532.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.02050308839293294;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.027172805300986723;  // std dev = 3.858, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return 0.013545243663408346;  // std dev = 3.673, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.40096191958487043;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.15231327093622146;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.15386385420796664;  // std dev = 0.478, 1,499.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=529 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.03046385777413351;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.01662755961408;  // std dev = 3.663, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.0087618687267184;  // std dev = 3.892, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.2293555402878087;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1266460402243669;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.10056470506437765;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0.1358816909694577;  // std dev = 18.164, 1,431.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=516 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.041232108729171164;  // std dev = 3.607, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.06010553920511058;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.015367831753488674;  // std dev = 3.874, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.1437639613793388;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10244426998891022;  // std dev = 0.478, 1,549.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.01014962154200202;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.019014503101047887;  // std dev = 3.862, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return 0.00583074908522103;  // std dev = 3.671, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10236536221570998;  // std dev = 3.043, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | | else return -0.0075061338634222485;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08750615336468236;  // std dev = 0.479, 1,485.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.028845111895131097;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.0403836808141925;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.003783258870640464;  // std dev = 3.890, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.12733396184559698;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07777632198081785;  // std dev = 0.481, 1,496.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.01317357161620445;  // std dev = 3.647, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.06441926035104249;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.007680133738500015;  // std dev = 0.353, 123.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05117672608483848;  // std dev = 0.478, 1,540.000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.048161256179399696;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.01173902552043346;  // std dev = 3.870, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.008380470244305107;  // std dev = 3.693, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04619183439727658;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.03255012917415459;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.02904227332343836;  // std dev = 1.327, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.013458462231118578;  // std dev = 5.150, 192.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5737814880813719;  // std dev = 6.599, 445.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=396 */
%   | | | else return -0.2908975002011131;  // std dev = 4.159, 886.000 (wgt'ed) examples reached here.  /* #neg=870 #pos=16 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.14619465527145736;  // std dev = 8.366, 281.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=132 */
%   | | | else return 0.08252580919277483;  // std dev = 1.628, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.014053576701989007;  // std dev = 3.747, 94.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=17 */
%   | | | else return 0.08142853991001489;  // std dev = 1.589, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else return 0.40348963529265414;  // std dev = 0.419, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.864', 'seconds']
Refined model CLL: -0.43654


******************************************
Best model found
******************************************
Results 

CLL : -0.581987 

AUC ROC : 0.840965 

AUC PR : 0.778818 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 50.296 

Total Inference Time : 1.8749125003814697 

Total revision time: 54.83126480102539
Best scored revision CLL: -0.43654


Results 

CLL : -0.581987 

AUC ROC : 0.840965 

AUC PR : 0.778818 

Precision : 1.0 

Recall : 0.005337 

F1 : 0.010617 

Total Learning Time : 59.95747692108154 

Total Inference Time : 1.8749125003814697 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos examples: 2270
Target test neg examples: 3954

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.249
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2697191830333916;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23361764530579346;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19684311261415063;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16179663649598802;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.13027047306504644;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10320071280183025;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08076653568517075;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06264930471254161;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.048285687593879655;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03704475693617238;  // std dev = 20.966, 1,815.000 (wgt'ed) examples reached here.  /* #neg=1,068 #pos=747 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.206', 'seconds']
Parameter learned model CLL:-0.679108 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [20.966, 1, 747]}]
{'': [nan, 0.24218017894954894]}
{'': [nan, 0.24218017894954783]}
{'': [nan, 0.24218017894953464]}
{'': [nan, 0.24218017894951252]}
{'': [nan, 0.24218017894953156]}
{'': [nan, 0.24218017894950766]}
{'': [nan, 0.2421801789495094]}
{'': [nan, 0.24218017894952684]}
{'': [nan, 0.24218017894952942]}
{'': [nan, 0.2421801789495138]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 71.57
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3002199788127198;  // std dev = 3.525, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.4247561750638162;  // std dev = 2.608, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24760701674977223;  // std dev = 3.523, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498242125167599;  // std dev = 2.607, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18861458664853883;  // std dev = 3.512, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2920143514374321;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.24653871610100803;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.131341402918815;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.17552765939556028;  // std dev = 4.383, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.0984134027840187;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10549686389332086;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10545908446084447;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.183223242635976;  // std dev = 2.602, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08230904723488831;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07213835268202302;  // std dev = 3.503, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15155366093559133;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.063654074495373;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.05375781042470198;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11512733043548656;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02084688910874009;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6018080562810032;  // std dev = 3.65e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3711978668114222;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.33651928354973776;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.047199610690621015;  // std dev = 19.656, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.05740358169882335;  // std dev = 4.366, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.026415613930038377;  // std dev = 3.573, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.037345735097577944;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.020309863555772818;  // std dev = 3.498, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08267779910615614;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03577772367201456;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015098879183171418;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.014753641956794421;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.743', 'seconds']
Refined model CLL: -0.667971


******************************************
Best model found
******************************************
Results 

CLL : -0.642399 

AUC ROC : 0.569004 

AUC PR : 0.421274 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 71.57 

Total Inference Time : 1.2882835865020752 

Total revision time: 74.9134263935089
Best scored revision CLL: -0.667971


Results 

CLL : -0.642399 

AUC ROC : 0.569004 

AUC PR : 0.421274 

Precision : 0.546125 

Recall : 0.065198 

F1 : 0.11649 

Total Learning Time : 80.03963851356505 

Total Inference Time : 1.2882835865020752 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos examples: 2467
Target test neg examples: 4522

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.042
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3819584589090313;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.32884073203746167;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.27204072267892837;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.21744269676867875;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16940117056975898;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12975869989867908;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09838832514850701;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07418037433956697;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05576312093600734;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.041858103224517315;  // std dev = 16.183, 1,050.000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '1.191', 'seconds']
Parameter learned model CLL:-0.693985 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [16.183, 500, 550]}]
{'': [nan, 0.2494331065759569]}
{'': [nan, 0.2494331065759634]}
{'': [nan, 0.2494331065759508]}
{'': [nan, 0.24943310657597204]}
{'': [nan, 0.24943310657595685]}
{'': [nan, 0.24943310657596054]}
{'': [nan, 0.2494331065759572]}
{'': [nan, 0.24943310657596562]}
{'': [nan, 0.24943310657596066]}
{'': [nan, 0.24943310657595963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
2;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
3;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
4;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
5;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
6;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
7;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
8;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
9;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true


Refining candidate
***************************
Model training time 36.864
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44064893509950764;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7100007869513637;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5454907572981614;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6490137408654373;  // std dev = 1.340, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.306595680483299;  // std dev = 2.718, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.3128507860571642;  // std dev = 13.761, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.4293558044710166;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.601984149523128;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.05265234800574577;  // std dev = 1.203, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.1259781806953634;  // std dev = 3.116, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.12131905159335965;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.5634021571292211;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24320488081334454;  // std dev = 13.948, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.458348670262003;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3587129703376863;  // std dev = 1.803, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.1735444492606042;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.08022839079689519;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10247683991352247;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4.214, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18878146859309908;  // std dev = 0.491, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.23661242270243438;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3627562929570294;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.08120365458693385;  // std dev = 0.454, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.012287199930137003;  // std dev = 3.141, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340936;  // std dev = 4.196, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.3602248398881426;  // std dev = 0.263, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0682972285704127;  // std dev = 3.393, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.05159292908954003;  // std dev = 3.353, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.17048636001235343;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.12586640582196135;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.053885834966663264;  // std dev = 2.951, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.05855866946674002;  // std dev = 4.185, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250056;  // std dev = 3.154, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.12550235408810206;  // std dev = 2.630, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.1312835929133275;  // std dev = 2.142, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.11548367246737219;  // std dev = 13.426, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.19250892826509383;  // std dev = 1.555, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.18976074482628177;  // std dev = 0.096, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.08630951829375463;  // std dev = 4.271, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.07440281768730025;  // std dev = 4.268, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return -0.2118706461304656;  // std dev = 0.112, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.2838922788221768;  // std dev = 0.246, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.05310032585587576;  // std dev = 3.326, 51.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.06906153270527629;  // std dev = 3.348, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.09913278312665233;  // std dev = 13.049, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.15204962863594446;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.028643639245520526;  // std dev = 2.896, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.010954510713010611;  // std dev = 3.105, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.049556435974151665;  // std dev = 4.159, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.2944434803481276;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20426624927147;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(E, G), haswordvenue(A, G) )
%   | | | then return -0.3524061485903387;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0028362200234025134;  // std dev = 4.703, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.06566837102653693;  // std dev = 13.375, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.15670049870256547;  // std dev = 1.568, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04168567984761165;  // std dev = 4.151, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.01041233975061793;  // std dev = 3.113, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04280311511361013;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.17726377195223156;  // std dev = 0.879, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11879436516706997;  // std dev = 1.563, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.12855243505835418;  // std dev = 1.533, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02442960433446171;  // std dev = 2.887, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03475652378684323;  // std dev = 4.150, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.008790876478441453;  // std dev = 3.113, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.768', 'seconds']
Refined model CLL: -0.632037


******************************************
Best model found
******************************************
Results 

CLL : -0.70457 

AUC ROC : 0.554634 

AUC PR : 0.403827 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 36.864 

Total Inference Time : 1.158717393875122 

Total revision time: 39.806409936904906
Best scored revision CLL: -0.632037


Results 

CLL : -0.70457 

AUC ROC : 0.554634 

AUC PR : 0.403827 

Precision : 0.375312 

Recall : 0.915687 

F1 : 0.532406 

Total Learning Time : 44.93262205696106 

Total Inference Time : 1.158717393875122 

