loading projection weights from resources/fasttext/wiki.en.vec
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T02:05:48.895631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T02:12:35.574614', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T02:20:51.310363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(27 unique tokens: ['under', 'work', 'genre', 'actor', 'movie']...) from 46 documents (total 86 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(27 unique tokens: ['under', 'work', 'genre', 'actor', 'movie']...) from 46 documents (total 86 corpus positions)", 'datetime': '2021-06-11T02:21:03.141985', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7efee4508080>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 4.801097% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.105861', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.108927', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.114018', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.114792', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.115529', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.116199', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.116878', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.117571', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.118244', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.118998', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.119671', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.120445', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.121129', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.121782', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.122551', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.123323', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.124072', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.124754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.125543', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.126324', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.127093', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.127850', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.128610', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.129358', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:08.130121', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.130858', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.131614', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.132290', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.132951', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.133713', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.134494', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:08.135272', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.137585', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:08.138422', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.194312', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.195477', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.198416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.199157', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.199827', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.200486', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.201167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.201826', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.202486', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.203259', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.203930', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.204705', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.205372', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.206022', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.206799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.207565', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.208306', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.208984', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.209778', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.210522', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.211289', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.212043', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.212793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.213534', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:10.214283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.215052', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.215773', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.216446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.217094', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.217828', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.218562', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:10.219305', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.221571', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:10.222398', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.366400', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.367462', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.370277', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.370981', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.371653', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.372320', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.373006', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.373683', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.374343', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.375125', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.375804', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.376588', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.377250', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.377895', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.378726', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.379496', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.380260', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.380921', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.381717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.382452', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.383224', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.383967', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.384743', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.385508', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:12.386271', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.387030', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.387753', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.388413', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.389076', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.389813', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.390565', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:12.391334', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.393619', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:12.394441', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.561827', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.562918', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.565793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.566496', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.567204', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.567852', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.568531', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.569203', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.569848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.570587', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.571283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.572070', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.572723', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.573372', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.574173', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.574931', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.575696', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.576363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.577161', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.577898', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.578638', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.579427', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.580187', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.580953', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:14.581702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.582434', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.583194', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.583855', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.584513', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.585257', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.586002', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:14.586734', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.589022', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:14.589839', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.646742', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.647878', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.650760', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.651484', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.652149', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.652819', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.653502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.654173', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.654856', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.655633', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.656300', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.657074', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.657740', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.658387', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.659184', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.659931', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.660686', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.661354', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.662154', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.662894', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.663655', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.664402', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.665166', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.665910', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:16.666668', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.667445', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.668192', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.668869', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.669522', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.670257', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.671016', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:16.671764', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.674050', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:16.674887', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.695386', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.696134', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.698750', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.699292', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.699750', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.700209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.700692', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.701185', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.701645', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.702172', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.702614', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.703185', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.703645', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.704109', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.704715', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.705254', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.705782', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.706279', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.706904', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.707491', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.707992', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.708534', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.709117', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.709640', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:18.710173', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.710714', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.711277', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.711694', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.712136', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.712661', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.713198', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:18.713726', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.715714', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:18.716305', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.877682', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.878404', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.881305', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.881848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.882337', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.882776', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.883262', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.883746', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.884209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.884745', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.885195', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.885765', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.886224', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.886653', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.887249', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.887783', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.888308', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.888754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.889371', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.889935', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.890446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.890991', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.891566', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.892087', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:20.892624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.893165', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.893668', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.894102', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.894561', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.895096', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.895626', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:20.896145', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.898355', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:20.898931', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.914352', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.915128', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.917813', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.918319', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.918766', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.919240', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.919708', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.920192', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.920647', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.921184', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.921610', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.922205', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.922641', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.923109', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.923687', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.924219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.924739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.925209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.925830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.926390', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.926878', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.927463', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.928036', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.928563', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:22.929103', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.929640', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.930152', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.930553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.930995', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.931549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.932066', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:22.932582', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.934745', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:22.935351', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.054901', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.055666', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.058332', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.058830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.059292', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.059738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.060203', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.060687', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.061142', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.061673', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.062102', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.062666', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.063144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.063596', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.064167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.064701', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.065221', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.065681', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.066293', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.066851', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.067363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.067907', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.068476', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.069005', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:25.069545', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.070116', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.070642', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.071094', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.071552', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.072091', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.072624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:25.073139', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.075254', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:25.075840', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.281229', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.281980', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.284738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.285240', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.285703', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.286139', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.286599', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.287106', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.287579', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.288100', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.288532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.289094', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.289551', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.289981', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.290549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.291122', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.291668', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.292111', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.292716', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.293273', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.293765', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.294294', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.294886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.295422', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:21:27.295955', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.296499', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.297014', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.297429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.297871', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.298387', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.298919', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:21:27.299446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.301532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:21:27.302109', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(25 unique tokens: ['course', 'level', 'advise', 'by', 'assistant']...) from 46 documents (total 86 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(25 unique tokens: ['course', 'level', 'advise', 'by', 'assistant']...) from 46 documents (total 86 corpus positions)", 'datetime': '2021-06-11T02:22:05.570886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7efee4508080>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 4.960000% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.904810', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.907623', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.910162', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.916946', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.919342', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.921613', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.923820', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:08.929198', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:08.931506', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:08.933752', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:08.936092', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.941317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.943631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.945892', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.948183', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.950848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.951627', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.952400', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.953179', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.957053', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.957891', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:08.958797', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.960699', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.961468', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.962231', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:08.962986', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.946865', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.948071', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.949043', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.952088', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.952952', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.953778', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.954602', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:11.956894', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:11.957744', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:11.958549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:11.959398', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.961502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.962369', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.963219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.964033', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.966054', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.966794', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.967553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.968302', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.972139', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.972991', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:11.973870', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.975820', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.976580', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.977340', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:11.978085', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.148350', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.149568', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.150578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.153653', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.154567', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.155421', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.156268', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:15.158707', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:15.159634', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:15.160506', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:15.161369', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.163771', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.164643', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.165491', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.166338', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.168593', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.169382', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.170146', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.170925', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.175187', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.176080', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:15.176997', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.179153', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.179932', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.180695', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:15.181470', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.292184', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.293369', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.294370', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.297390', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.298242', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.299078', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.299902', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:18.302250', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:18.303169', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:18.304035', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:18.304856', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.307011', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.307846', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.308685', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.309519', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.311613', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.312381', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.313136', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.313877', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.317987', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.318817', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:18.319727', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.321961', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.322741', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.323490', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:18.324210', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.346203', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.347415', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.348385', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.351381', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.352259', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.353105', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.353938', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:21.356245', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:21.357144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:21.358032', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:21.358922', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.361101', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.362007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.362893', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.363763', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.365775', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.366557', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.367388', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.368167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.372102', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.372972', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:21.373908', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.375920', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.376698', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.377465', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:21.378246', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.732290', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.733136', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.733886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.736667', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.737298', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.737974', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.738608', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:24.740628', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:24.741358', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:24.742076', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:24.742813', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.744683', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.745360', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.746079', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.746784', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.748508', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.749070', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.749631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.750229', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.753792', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.754401', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:24.755129', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.756820', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.757368', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.757924', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:24.758502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.713546', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.714421', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.715255', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.718124', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.718837', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.719532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.720200', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:28.722370', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:28.723181', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:28.723923', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:28.724654', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.726688', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.727420', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.728145', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.728898', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.730790', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.731476', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.732114', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.732703', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.736635', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.737291', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:28.738038', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.739937', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.740533', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.741135', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:28.741703', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.626623', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.627474', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.628222', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.630927', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.631641', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.632294', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.632909', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:32.634911', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:32.635613', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:32.636307', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:32.637040', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.638936', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.639679', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.640330', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.640998', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.642807', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.643416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.643987', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.644570', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.648382', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.649028', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:32.649745', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.651606', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.652196', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.652788', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:32.653394', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.848671', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.849466', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.850223', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.852954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.853526', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.854072', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.854649', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:36.856654', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:36.857334', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:36.857994', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:36.858599', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.860569', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.861242', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.861892', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.862589', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.864392', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.864949', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.865505', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.866088', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.869770', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.870381', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:36.871098', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.872848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.873410', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.873958', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:36.874555', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.765632', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.766451', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.767209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.769988', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.770641', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.771256', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.771852', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:40.773874', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:40.774623', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:40.775354', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:22:40.776040', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.778060', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.778741', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.779416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.780055', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.781847', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.782446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.783014', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.783567', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.787233', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.787848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:22:40.788530', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.790278', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.790837', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.791427', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['person', 'same', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:22:40.791978', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(14 unique tokens: ['under', 'work', 'genre', 'actor', 'movie']...) from 37 documents (total 67 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(14 unique tokens: ['under', 'work', 'genre', 'actor', 'movie']...) from 37 documents (total 67 corpus positions)", 'datetime': '2021-06-11T02:23:19.658531', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7efee4508080>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 7.142857% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.428394', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.431181', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.433612', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.436008', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.438308', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.440599', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.442830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.445104', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.447364', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.449579', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.451862', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.454105', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.456386', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.458220', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.459048', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.459847', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.460597', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.461429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.462235', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.463033', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.463799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.464553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.465352', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:21.466110', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.466874', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:21.467660', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:21.468466', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.410204', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.411389', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.412201', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.413041', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.413807', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.414585', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.415443', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.416283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.417104', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.417950', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.418784', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.419627', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.420454', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.421288', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.422103', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.422941', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.423798', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.424630', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.425446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.426281', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.427098', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.427920', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.428743', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:28.429516', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.430353', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:28.431199', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:28.431948', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.426866', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.428054', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.428866', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.429713', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.430508', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.431329', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.432119', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.432891', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.433650', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.434414', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.435231', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.435984', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.436732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.437486', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.438228', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.439024', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.439791', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.440521', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.441253', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.442003', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.442738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.443497', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.444253', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:35.445003', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.445744', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:35.446501', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:35.447256', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.744470', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.745588', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.746413', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.747299', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.748082', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.748849', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.749625', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.750379', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.751184', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.751953', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.752722', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.753464', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.754215', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.755036', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.755789', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.756535', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.757277', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.758001', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.758753', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.759550', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.760288', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.761015', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.761768', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:43.762525', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.763317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:43.764066', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:43.764825', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.634820', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.635947', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.636745', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.637567', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.638342', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.639139', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.639919', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.640676', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.641441', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.642203', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.642948', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.643723', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.644476', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.645219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.645961', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.646715', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.647512', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.648239', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.648959', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.649697', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.650463', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.651226', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.651991', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:50.652751', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.653485', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:50.654225', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:50.655011', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.514508', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.515303', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.515877', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.516526', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.517112', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.517696', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.518249', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.518797', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.519395', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.519912', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.520460', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.521016', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.521554', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.522047', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.522578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.523092', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.523636', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.524178', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.524650', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.525137', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.525683', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.526184', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.526687', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:23:57.527251', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.527798', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:23:57.528302', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:23:57.528842', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.704453', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.705238', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.705806', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.706411', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.707054', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.707637', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.708185', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.708754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.709317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.709858', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.710389', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.710935', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.711507', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.712008', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.712520', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.713027', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.713590', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.714122', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.714628', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.715140', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.715686', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.716169', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.716698', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:03.717219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.717768', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:03.718266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:03.718788', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.026996', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.027785', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.028357', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.028970', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.029571', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.030144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.030703', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.031268', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.031834', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.032342', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.032893', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.033437', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.033991', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.034513', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.035091', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.035590', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.036135', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.036669', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.037141', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.037645', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.038190', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.038684', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.039220', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:10.039757', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.040291', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:10.040782', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:10.041287', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.032038', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.032787', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.033363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.033959', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.034571', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.035156', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.035709', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.036261', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.036794', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.037330', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.037863', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.038413', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.038923', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.039455', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.039960', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.040456', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.041008', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.041544', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.042019', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.042503', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.043060', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.043570', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.044091', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:16.044603', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.045142', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:16.045630', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:16.046144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.027470', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.028241', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.028815', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.029426', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.030023', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.030604', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.031168', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.031717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.032260', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.032750', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.033275', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.033805', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.034321', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.034842', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.035367', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.035854', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.036398', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.036916', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.037391', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.037860', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.038390', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.038870', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.039427', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T02:24:22.039951', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.040482', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T02:24:22.040958', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T02:24:22.041466', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T02:30:30.687483', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9398643970489502
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5803711573217339;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.43e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5078472826406517;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4066437564806155;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.43e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.37982172398264763;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.1015963294878362;  // std dev = 6.14e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20355991568642262;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.09269127618926086;  // std dev = 7.30e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16673343211898672;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.58e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09964653610862068;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.07877675473109164;  // std dev = 5.67e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1099697674617132;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.07324622576333706;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06417735651192029;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 5.16e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0849452436906114;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
Inference time using transfer learning 0.8065218925476074
Parameter learned model CLL:-0.269901 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [8.43e-08, 123, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [0.0, 115, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [8.43e-08, 119, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [6.14e-08, 120, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [7.3e-08, 133, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [5.58e-08, 134, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [5.67e-08, 118, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [0.0, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [5.16e-08, 129, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [0.0, 136, 0]}]
{'': [0.20061728395061784, 5.77677020943171e-17], 'true': [nan, 0.20061728395061784]}
{'': [0.19437522249910924, -1.351575856065408e-17], 'true': [nan, 0.19437522249910924]}
{'': [0.1943752224991086, 5.970947359328573e-17], 'true': [nan, 0.1943752224991086]}
{'': [0.15750876820066065, 3.14563190310461e-17], 'true': [nan, 0.15750876820066065]}
{'': [0.20061728395061754, 4.0068199384968053e-17], 'true': [nan, 0.20061728395061754]}
{'': [0.19437522249911027, 2.3198690066794315e-17], 'true': [nan, 0.19437522249911027]}
{'': [0.20628099173553704, 2.7285142130618255e-17], 'true': [nan, 0.20628099173553704]}
{'': [0.1910204081632652, -2.5424954762408165e-18], 'true': [nan, 0.1910204081632652]}
{'': [0.20061728395061737, 2.0655312086049424e-17], 'true': [nan, 0.20061728395061737]}
{'': [0.18380620228108202, -8.163404592832034e-18], 'true': [nan, 0.18380620228108202]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 8.604570627212524
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, H, E), ta(G, F, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( publication(J, A) )
%   | | then if ( publication(J, K), professor(K) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( publication(L, B) )
%   | | | then return 0.6453829776527028;  // std dev = 2.806, 47.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=37 */
%   | | | else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.7240775253490539;  // std dev = 0.085, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.09226581259110081;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.5804989821262316;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( ta(F, A, G) )
%   | | | then return 0.45851883615966293;  // std dev = 2.732, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | | else return 0.6085712275490619;  // std dev = 1.571, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.1254446385283913;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then return 0.5615167907354102;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.38756256755910584;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return 0.06491158146613202;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.33121321407137144;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( publication(H, B) )
%   | | | then return 0.3964087073825149;  // std dev = 3.102, 50.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=37 */
%   | | | else return 0.23245753070228203;  // std dev = 1.201, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.11231637819360626;  // std dev = 7.88e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B) )
%   | | then if ( publication(F, A) )
%   | | | then return 0.4231501901167432;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.30808870979478714;  // std dev = 2.043, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | else return 0.7226734966943403;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(G, B) )
%   | | then if ( tempadvisedby(H, B) )
%   | | | then return 0.1612887571449928;  // std dev = 2.352, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return 0.3398976474867797;  // std dev = 2.436, 40.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=31 */
%   | | else if ( publication(I, A) )
%   | | | then return 0.02041593064317032;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07611216211958549;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783623;  // std dev = 5.58e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B), publication(G, A) )
%   | | then if ( ta(H, A, I) )
%   | | | then return 0.32983900539253846;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1348624973520285;  // std dev = 0.631, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(J, B), projectmember(K, B) )
%   | | | then return 0.15209005862253533;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4963594574624325;  // std dev = 0.212, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(L, A), publication(L, B) )
%   | | then return 0.3663532190946408;  // std dev = 0.122, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tempadvisedby(M, B) )
%   | | | then return 0.1417247184260072;  // std dev = 1.911, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.2183176256591828;  // std dev = 2.527, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   else return -0.09269127618926082;  // std dev = 7.74e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.28123168369195567;  // std dev = 0.137, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B) )
%   | | then if ( publication(E, D) )
%   | | | then return 0.4058327354186795;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07614873102040587;  // std dev = 2.990, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | else if ( publication(F, A) )
%   | | | then return 0.07077718398440182;  // std dev = 1.746, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.3783030691062026;  // std dev = 0.997, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.08518475138839683;  // std dev = 5.58e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, D), professor(D) )
%   | | then if ( tempadvisedby(E, B), publication(F, B) )
%   | | | then return 0.09107730594016562;  // std dev = 1.468, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return 0.2754062913567512;  // std dev = 0.899, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tempadvisedby(G, B) )
%   | | | then return 0.5280991433814166;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28166327043721184;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( publication(H, B), ta(I, A, J) )
%   | | then if ( ta(I, K, L), tempadvisedby(K, M) )
%   | | | then return 0.08873313423947257;  // std dev = 1.994, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.23021879896964323;  // std dev = 1.287, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( tempadvisedby(N, B), ta(P, N, Q) )
%   | | | then return 0.08506197134635929;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return -0.08894786383742315;  // std dev = 1.562, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   else return -0.07877675473109155;  // std dev = 7.15e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), ta(D, A, E) )
%   | then if ( publication(C, B) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.19642516715257508;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.02300863832641664;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(C, I), professor(I) )
%   | | | then return 0.25301532488481804;  // std dev = 1.038, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.39716758666551155;  // std dev = 0.000813, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(J, A, K) )
%   | | then if ( ta(L, M, K), tempadvisedby(M, B) )
%   | | | then return -0.1929536718138615;  // std dev = 1.200, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06352678793321027;  // std dev = 2.495, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   | | else if ( tempadvisedby(N, B), publication(P, B) )
%   | | | then return 0.0732587988692388;  // std dev = 1.678, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return 0.17806347026869215;  // std dev = 1.526, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else return -0.07324622576333707;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D) )
%   | then if ( tempadvisedby(E, B), publication(F, B) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.034698148330198526;  // std dev = 1.384, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.14679876625040778;  // std dev = 1.756, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else if ( publication(H, B) )
%   | | | then return -0.12431966006884385;  // std dev = 2.564, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return -0.35489717775921914;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, B) )
%   | | | then return 0.10931870897797143;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.3735922380900072;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( publication(K, B) )
%   | | | then return 0.169208395779634;  // std dev = 1.350, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return 0.3915771970532341;  // std dev = 0.190, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D), tempadvisedby(E, B) )
%   | then if ( ta(F, E, G), publication(H, A) )
%   | | then if ( samecourse(C, F) )
%   | | | then return 0.1544437487754845;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.045267432423257814;  // std dev = 0.989, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( ta(I, E, J) )
%   | | | then return 0.2956418776468158;  // std dev = 0.095, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.3800956800814821;  // std dev = 0.341, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( publication(K, A), publication(K, B) )
%   | | then return 0.1659767202548886;  // std dev = 0.128, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tempadvisedby(L, B), publication(M, L) )
%   | | | then return -0.3912744034453803;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.015113896297962493;  // std dev = 3.027, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   else return -0.06419184008202626;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
Inference time using transfer learning 0.9813082218170166
Refined model CLL: -0.215769


******************************************
Best model found
******************************************
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T11:32:40.748922', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T11:44:37.217513', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9415440559387207
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5608516378022145;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.16e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4478295326981605;  // std dev = 5.055, 116.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=78 */
%   else return -0.12544463852839133;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.39081714138100193;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 9.42e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3866869779827314;  // std dev = 4.068, 99.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=78 */
%   else return -0.10159632948783619;  // std dev = 6.66e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2534536226082479;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.09269127618926086;  // std dev = 7.30e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17622439359924688;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.37e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12647900978928667;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.0787767547310916;  // std dev = 6.50e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10349192492839222;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 3.16e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04663159739191278;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 6.32e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.049081090215765275;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
Inference time using transfer learning 0.7679986953735352
Parameter learned model CLL:-0.263004 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [8.16e-08, 121, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.055, 38, 78], 'false': [0.0, 133, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [9.42e-08, 145, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.068, 21, 78], 'false': [6.66e-08, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [7.3e-08, 131, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [5.37e-08, 128, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [6.5e-08, 124, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [3.16e-08, 106, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [6.32e-08, 157, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [0.0, 111, 0]}]
{'': [0.20891161431702027, 5.50523813863714e-17], 'true': [nan, 0.20891161431702027]}
{'': [0.22027348394768057, -3.3390166154140044e-18], 'true': [nan, 0.22027348394768057]}
{'': [0.2089116143170195, 6.125368411725002e-17], 'true': [nan, 0.2089116143170195]}
{'': [0.1671258034894388, 3.389993968321089e-17], 'true': [nan, 0.1671258034894388]}
{'': [0.18749999999999967, 4.0679927619853064e-17], 'true': [nan, 0.18749999999999967]}
{'': [0.1943752224991101, 2.2551405187698492e-17], 'true': [nan, 0.1943752224991101]}
{'': [0.19757184033540068, 3.40229636578677e-17], 'true': [nan, 0.19757184033540068]}
{'': [0.1943752224991101, 9.426421907194725e-18], 'true': [nan, 0.1943752224991101]}
{'': [0.20891161431701982, 2.5457343239812507e-17], 'true': [nan, 0.20891161431701982]}
{'': [0.2035182223718541, -6.00120553851436e-18], 'true': [nan, 0.2035182223718541]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.126076936721802
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.058148935099512286;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( projectmember(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6407576307516852;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=36 */
%   else return -0.1418510649004877;  // std dev = 5.96e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2194734122109545;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), ta(L, K, M) )
%   | | | then return 0.35895562443856155;  // std dev = 1.443, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.14907796748644583;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( publication(N, B) )
%   | | | then return 0.5153049576464029;  // std dev = 3.208, 56.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=42 */
%   | | | else return 0.30982935851199755;  // std dev = 1.303, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return -0.1254446385283911;  // std dev = 7.74e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( ta(F, E, G) )
%   | | | then return 0.4848214982545159;  // std dev = 3.119, 80.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=68 */
%   | | | else return 0.12137514959491798;  // std dev = 1.266, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return -0.031248272857689177;  // std dev = 0.677, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( ta(H, A, I) )
%   | | then return -0.09129957031861802;  // std dev = 0.985, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.2014487711983185;  // std dev = 0.906, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19550968645026734;  // std dev = 0.990, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.11231637819360625;  // std dev = 8.02e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B) )
%   | | | then return 0.45252708948278986;  // std dev = 0.115, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.22577798101188065;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.45194293919967143;  // std dev = 0.166, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(G, A), publication(H, B) )
%   | | then if ( publication(G, I), ta(J, I, K) )
%   | | | then return 0.14979417158027036;  // std dev = 1.798, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return -0.1504365407556079;  // std dev = 0.901, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( tempadvisedby(L, B), publication(M, L) )
%   | | | then return 0.5396952636817853;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23899682885997586;  // std dev = 3.460, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else return -0.10159632948783621;  // std dev = 6.66e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( ta(G, A, F) )
%   | | | then return -0.0048319562045529745;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.328565811918358;  // std dev = 0.000182, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( ta(H, A, I) )
%   | | | then return 0.4841174328008;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.349416006504842;  // std dev = 0.152, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( publication(J, B), publication(K, A) )
%   | | then if ( publication(K, L), professor(L) )
%   | | | then return -0.06071320223413868;  // std dev = 1.469, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return 0.49877814616114513;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tempadvisedby(M, B), ta(N, M, P) )
%   | | | then return 0.32333366313689926;  // std dev = 1.849, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.1678620055813898;  // std dev = 2.673, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   else return -0.09269127618926085;  // std dev = 7.60e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), ta(D, A, E) )
%   | then if ( tempadvisedby(F, B), publication(G, B) )
%   | | then if ( ta(H, F, I) )
%   | | | then return 0.28350147915822244;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.31557969593234814;  // std dev = 0.678, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.47602134003575314;  // std dev = 0.366, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( ta(J, A, K), tempadvisedby(L, B) )
%   | | then if ( ta(M, L, K) )
%   | | | then return -0.11105892063370686;  // std dev = 1.198, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.16857383449811403;  // std dev = 1.761, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else if ( tempadvisedby(N, B), ta(P, N, Q) )
%   | | | then return 0.32101755653437714;  // std dev = 0.572, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.18167849813314124;  // std dev = 2.439, 46.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=34 */
%   else return -0.08518475138839683;  // std dev = 5.16e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, B), ta(E, D, F) )
%   | | then return 0.21933692593851747;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( ta(G, D, H), publication(I, B) )
%   | | | then return -0.4596593750376199;  // std dev = 0.405, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.00412339366772792;  // std dev = 1.836, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( projectmember(J, B), ta(K, A, L) )
%   | | then return -0.269238103503432;  // std dev = 0.735, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( ta(M, A, N), tempadvisedby(P, B) )
%   | | | then return 0.2662873227834032;  // std dev = 1.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.14223459566997818;  // std dev = 2.799, 56.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=42 */
%   else return -0.07877675473109161;  // std dev = 5.67e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, A) )
%   | | then if ( publication(C, D), ta(E, D, F) )
%   | | | then return 0.13243906506521133;  // std dev = 0.978, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.21557646700716068;  // std dev = 0.161, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( publication(G, A) )
%   | | | then return -0.06208397797449827;  // std dev = 1.767, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.14441518045474797;  // std dev = 2.629, 46.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=37 */
%   | else if ( publication(H, A) )
%   | | then return 0.07792116638156915;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( ta(I, A, J) )
%   | | | then return -0.42854008610830546;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10655769241883999;  // std dev = 1.239, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.07324622576333707;  // std dev = 3.49e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D) )
%   | then if ( tempadvisedby(E, B), publication(F, E) )
%   | | then return -0.33248875811575995;  // std dev = 1.078, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( tempadvisedby(G, B), ta(H, G, D) )
%   | | | then return -0.22965017036463628;  // std dev = 1.385, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.040867934901107204;  // std dev = 2.972, 51.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=35 */
%   | else if ( publication(I, A) )
%   | | then if ( publication(I, J), professor(J) )
%   | | | then return 0.043330479327327025;  // std dev = 1.508, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   | | | else return 0.3684415588745911;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(K, B), publication(L, B) )
%   | | | then return 0.03480266877489337;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2685170719758401;  // std dev = 0.824, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.06842697784420267;  // std dev = 4.71e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D) )
%   | then if ( ta(E, F, D), publication(G, F) )
%   | | then if ( publication(G, B), publication(H, A) )
%   | | | then return 0.26031229828991365;  // std dev = 0.500, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.10016880100092442;  // std dev = 2.210, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | else return -0.1816913592945952;  // std dev = 1.177, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | then if ( publication(K, A), publication(K, B) )
%   | | | then return 0.16974165753428402;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.47945813717854124;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( publication(L, A), publication(L, B) )
%   | | | then return 0.11301794608254677;  // std dev = 0.981, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.0922074981931324;  // std dev = 2.543, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
Inference time using transfer learning 1.0203139781951904
Refined model CLL: -0.19975


******************************************
Best model found
******************************************
Total revision time: 12.103817462921143
Best scored revision CLL: -0.19975


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9630076885223389
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5871208977163341;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.43e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5355138588898983;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3414112631330697;  // std dev = 5.010, 115.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.69e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.33320736280811;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.10159632948783627;  // std dev = 4.21e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.22965861654829722;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.09269127618926083;  // std dev = 7.60e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23139294725327536;  // std dev = 4.068, 99.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=78 */
%   else return -0.08518475138839682;  // std dev = 6.32e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13024515750894342;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.07877675473109155;  // std dev = 7.67e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07918981913584834;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06122531664300114;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09012772186987571;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
Inference time using transfer learning 0.7663588523864746
Parameter learned model CLL:-0.271634 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [8.43e-08, 121, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [0.0, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.01, 37, 78], 'false': [8.69e-08, 127, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [4.21e-08, 99, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [7.6e-08, 132, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.068, 21, 78], 'false': [6.32e-08, 147, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [7.67e-08, 148, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [0.0, 136, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [5.05e-08, 119, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [0.0, 134, 0]}]
{'': [0.1975718403354011, 5.872254014546283e-17], 'true': [nan, 0.1975718403354011]}
{'': [0.1799307958477496, -1.3284719952779651e-17], 'true': [nan, 0.1799307958477496]}
{'': [0.21822306238185243, 5.944501234213437e-17], 'true': [nan, 0.21822306238185243]}
{'': [0.18749999999999997, 1.794299837778031e-17], 'true': [nan, 0.18749999999999997]}
{'': [0.19757184033540126, 4.37360585458395e-17], 'true': [nan, 0.19757184033540126]}
{'': [0.16712580348943998, 2.718913529694261e-17], 'true': [nan, 0.16712580348943998]}
{'': [0.19102040816326507, 3.9757986692657634e-17], 'true': [nan, 0.19102040816326507]}
{'': [0.20061728395061712, -4.081702296416017e-18], 'true': [nan, 0.20061728395061712]}
{'': [0.2006172839506176, 2.145809207258706e-17], 'true': [nan, 0.2006172839506176]}
{'': [0.1799307958477508, -1.0770820388154504e-17], 'true': [nan, 0.1799307958477508]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.370243787765503
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( publication(D, F), professor(F) )
%   | | | then return 0.10814893509951223;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | | then return 0.591482268432845;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.4642095411601184;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=20 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 5.96e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, A), publication(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.020938026071049685;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.5316289395752953;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tempadvisedby(I, B), ta(J, I, K) )
%   | | | then return 0.6079032940513258;  // std dev = 1.812, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.4518694806854559;  // std dev = 2.722, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   else return -0.1254446385283913;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07950267042586807;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.569675338518816;  // std dev = 0.152, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( publication(I, A), ta(J, A, K) )
%   | | then if ( publication(I, L), professor(L) )
%   | | | then return 0.7859121614160715;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.677772847374091;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(M, A), tempadvisedby(N, B) )
%   | | | then return -0.023872352067948844;  // std dev = 0.797, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.4152173499466559;  // std dev = 3.359, 59.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=43 */
%   else return -0.11231637819360621;  // std dev = 8.94e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, G, E), publication(H, G) )
%   | | then if ( publication(H, B) )
%   | | | then return 0.4326512862160046;  // std dev = 0.646, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.2680378194674297;  // std dev = 1.795, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else return 0.5247664028271176;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then if ( ta(J, A, K) )
%   | | | then return 0.20425393692867577;  // std dev = 0.922, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.42819997132401555;  // std dev = 0.130, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( ta(L, A, M) )
%   | | | then return 0.33103556664294526;  // std dev = 2.343, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | | else return 0.18067992262514984;  // std dev = 2.066, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   else return -0.1015963294878362;  // std dev = 6.32e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B) )
%   | | then if ( ta(E, D, F), ta(G, A, H) )
%   | | | then return 0.3202682373988694;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3743355306574035;  // std dev = 0.194, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( ta(I, A, J) )
%   | | | then return 0.032171162296816304;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3152910542793848;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tempadvisedby(K, B) )
%   | | then if ( ta(L, A, M), ta(N, K, P) )
%   | | | then return -0.036819553685632125;  // std dev = 2.291, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return 0.16129703112714994;  // std dev = 2.269, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | | else if ( hasposition(B, Q) )
%   | | | then return 0.283778753745614;  // std dev = 2.360, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | | else return -0.10753758995321865;  // std dev = 0.832, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926092;  // std dev = 6.32e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( publication(F, E), tempadvisedby(G, B) )
%   | | | then return 0.05459112765631379;  // std dev = 2.164, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return 0.2374283300435794;  // std dev = 2.873, 70.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=56 */
%   | | else return -0.2876789080008619;  // std dev = 0.628, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( ta(H, A, I) )
%   | | then return -0.3437025290890416;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.18689863721938546;  // std dev = 1.126, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.08518475138839683;  // std dev = 5.58e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, B) )
%   | | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | | then return 0.058605027509159635;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.237271289489879;  // std dev = 0.242, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( publication(C, F), professor(F) )
%   | | | then return -0.16328841469496225;  // std dev = 1.683, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.0755207419515638;  // std dev = 1.427, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( ta(G, A, H) )
%   | | then if ( ta(I, J, H), tempadvisedby(J, B) )
%   | | | then return 0.011195257927917934;  // std dev = 1.059, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17239620620907142;  // std dev = 2.283, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | else if ( tempadvisedby(K, B), publication(L, B) )
%   | | | then return 0.25695526750828507;  // std dev = 0.827, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4513980861698703;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0787767547310916;  // std dev = 6.50e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D), publication(E, B) )
%   | then if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(E, A) )
%   | | | then return 0.2100876653291889;  // std dev = 0.168, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08110798793147722;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( publication(E, H), ta(I, H, J) )
%   | | | then return 0.3644070076033204;  // std dev = 0.276, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14944872471588144;  // std dev = 1.637, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | else if ( publication(K, A), publication(K, B) )
%   | | then if ( publication(K, L), tempadvisedby(M, L) )
%   | | | then return 0.2070138674653088;  // std dev = 0.179, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.02089650916033649;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( ta(N, A, P) )
%   | | | then return -0.2991014676086266;  // std dev = 0.939, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.03481466677213457;  // std dev = 2.682, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return -0.07324622576333707;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( ta(G, H, F), publication(C, H) )
%   | | | then return 0.18484399398801588;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15361398553326508;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( ta(I, A, J) )
%   | | | then return 0.2343485778852971;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17778388454187594;  // std dev = 0.158, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( publication(K, B) )
%   | | then if ( publication(K, L), inphase(L, M) )
%   | | | then return 0.004429528228412671;  // std dev = 3.281, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */
%   | | | else return 0.19205031637911302;  // std dev = 1.239, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.28290274234205914;  // std dev = 0.867, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.06067834898205517;  // std dev = 1.754, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   | | | else return 0.3307297442892197;  // std dev = 0.295, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( ta(F, A, G) )
%   | | | then return 0.13938673100465732;  // std dev = 2.048, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.3138303256082699;  // std dev = 0.103, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tempadvisedby(H, B) )
%   | | then return 0.04226966494532665;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.2530114393642235;  // std dev = 1.107, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
Inference time using transfer learning 1.0155601501464844
Refined model CLL: -0.21492


******************************************
Best model found
******************************************
Total revision time: 12.334781169891357
Best scored revision CLL: -0.21492


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9445226192474365
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5803711573217339;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.69e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.42199822603687814;  // std dev = 5.225, 120.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=78 */
%   else return -0.12544463852839136;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3797329057753271;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.1123163781936062;  // std dev = 9.77e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3120709903504203;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.10159632948783617;  // std dev = 6.99e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.22913471910624952;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.09269127618926092;  // std dev = 6.14e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.24921200107764072;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.96e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1369042040526775;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.07877675473109155;  // std dev = 7.38e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07175708674636118;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 3.94e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.048926310789553326;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 5.48e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04391471137786879;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
Inference time using transfer learning 0.7938680648803711
Parameter learned model CLL:-0.255715 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [8.69e-08, 114, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.225, 42, 78], 'false': [0.0, 122, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [9.77e-08, 153, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [6.99e-08, 129, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [6.14e-08, 127, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [5.96e-08, 140, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [7.38e-08, 142, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [3.94e-08, 126, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [5.48e-08, 129, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [0.0, 118, 0]}]
{'': [0.20061728395061784, 6.622382953904442e-17], 'true': [nan, 0.20061728395061784]}
{'': [0.22749999999999904, -5.4601132358614255e-18], 'true': [nan, 0.22749999999999904]}
{'': [0.21379904456104665, 6.24046928874271e-17], 'true': [nan, 0.21379904456104665]}
{'': [0.20628099173553807, 3.7868072157757277e-17], 'true': [nan, 0.20628099173553807]}
{'': [0.2089116143170199, 2.9722506171067186e-17], 'true': [nan, 0.2089116143170199]}
{'': [0.17159999999999986, 2.5376526277146434e-17], 'true': [nan, 0.17159999999999986]}
{'': [0.19757184033540048, 3.83105128215723e-17], 'true': [nan, 0.19757184033540048]}
{'': [0.21141581632653045, 1.2335811384723961e-17], 'true': [nan, 0.21141581632653045]}
{'': [0.21379904456104648, 2.3237226096805603e-17], 'true': [nan, 0.21379904456104648]}
{'': [0.21141581632653056, -5.174768335117255e-18], 'true': [nan, 0.21141581632653056]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 8.232978582382202
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, E) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), professor(I) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | | then return 0.6842358916212513;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.5581489350995122;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   else return -0.14185106490048766;  // std dev = 8.94e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7246530394913161;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return 0.09446743783575551;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.4620720642963897;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( publication(H, B) )
%   | | | then return 0.5534673747350787;  // std dev = 2.797, 47.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=37 */
%   | | | else return 0.26454410576800763;  // std dev = 1.216, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.12544463852839136;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5668989542972346;  // std dev = 0.141, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, A) )
%   | | then if ( publication(E, F), ta(G, F, H) )
%   | | | then return 0.22691745734866864;  // std dev = 1.552, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.16834760679113828;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( ta(I, A, J), publication(K, B) )
%   | | | then return 0.41104797938137966;  // std dev = 2.603, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | | else return 0.31321043047193975;  // std dev = 2.490, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else return -0.11231637819360622;  // std dev = 8.30e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, B) )
%   | | then return 0.4265550731092158;  // std dev = 0.144, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( publication(C, D), professor(D) )
%   | | | then return 0.0069707379191068395;  // std dev = 1.747, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.5980287203601746;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | then if ( ta(E, H, F), tempadvisedby(H, I) )
%   | | | then return 0.2147911523343501;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4147911523343501;  // std dev = 1.310, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( publication(J, B) )
%   | | | then return 0.5720969308255669;  // std dev = 0.054, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3957646438267103;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.1015963294878362;  // std dev = 5.96e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B) )
%   | | then return 0.3353932676075082;  // std dev = 0.122, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( publication(C, E), ta(F, E, G) )
%   | | | then return 0.0651273637551768;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3151273637551768;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( publication(H, B), publication(I, A) )
%   | | then if ( publication(I, J), professor(J) )
%   | | | then return -0.006838676444711987;  // std dev = 1.531, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return 0.45057421184901153;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( ta(K, A, L) )
%   | | | then return 0.1798524375230214;  // std dev = 2.694, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | | else return 0.3009029709969233;  // std dev = 1.564, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   else return -0.09269127618926093;  // std dev = 5.96e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D), publication(E, A) )
%   | then if ( ta(C, F, G), tempadvisedby(F, H) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.2777633870476327;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22891374341319734;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( publication(E, B) )
%   | | | then return 0.27172341795783894;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5268945170844075;  // std dev = 0.574, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( publication(I, B) )
%   | | then if ( publication(I, J), tempadvisedby(K, J) )
%   | | | then return 0.08566970437230585;  // std dev = 3.829, 82.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=57 */
%   | | | else return -0.34144516007260584;  // std dev = 0.727, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.4469638533761121;  // std dev = 0.087, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839683;  // std dev = 5.05e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), publication(E, B) )
%   | then if ( tempadvisedby(F, B) )
%   | | then if ( ta(C, F, G) )
%   | | | then return -0.03845537007842311;  // std dev = 1.033, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.15520903821124735;  // std dev = 1.967, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   | | else if ( publication(E, H), student(H) )
%   | | | then return 0.3456905736891321;  // std dev = 0.392, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.12868965295952106;  // std dev = 0.575, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | | then return 0.051358862526102736;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2507306695197476;  // std dev = 0.102, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( hasposition(B, M) )
%   | | | then return -0.0329626951142141;  // std dev = 2.736, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | | | else return -0.27464986835389005;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109158;  // std dev = 7.30e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.1407563597977815;  // std dev = 0.836, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.341327678754512;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( publication(C, H), student(H) )
%   | | | then return 0.02025175791876141;  // std dev = 3.021, 54.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=36 */
%   | | | else return 0.22644078190937234;  // std dev = 0.840, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else if ( ta(I, A, J) )
%   | | then return -0.3403291888751958;  // std dev = 1.128, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( publication(K, A) )
%   | | | then return -0.1131025849228695;  // std dev = 0.492, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13270688192804053;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07324622576333707;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.1830705930092284;  // std dev = 0.996, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | | else return 0.07422919738749519;  // std dev = 1.885, 23.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | | else if ( publication(C, H), student(H) )
%   | | | then return -0.019976813456075205;  // std dev = 2.361, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | | | else return 0.19890020924479154;  // std dev = 0.683, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0.3138356905187406;  // std dev = 0.704, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420268;  // std dev = 4.34e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( tempadvisedby(D, B) )
%   | | then if ( publication(C, A) )
%   | | | then return 0.17592917333952848;  // std dev = 0.097, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.02729383372706572;  // std dev = 2.747, 42.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   | | else if ( publication(E, A) )
%   | | | then return 0.11683434761496636;  // std dev = 1.328, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return 0.28361240636337276;  // std dev = 0.133, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( publication(F, A) )
%   | | then return 0.16876603385762534;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( ta(G, A, H) )
%   | | | then return -0.592535076534778;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10382309396415183;  // std dev = 1.085, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
Inference time using transfer learning 1.054978847503662
Refined model CLL: -0.215913


******************************************
Best model found
******************************************
Total revision time: 11.23665976524353
Best scored revision CLL: -0.215913


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9435126781463623
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6381489350995114;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.69e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4975179568635246;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.12544463852839136;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3758294185663792;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.1123163781936062;  // std dev = 9.06e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2618952586662125;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.10159632948783621;  // std dev = 6.14e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20935441795246487;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.09269127618926103;  // std dev = 3.49e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11545717506336224;  // std dev = 5.142, 118.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.05e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14159312404022067;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.07877675473109162;  // std dev = 5.77e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19591322257239963;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.07324622576333706;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06181338396387336;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 5.58e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.035064365716242704;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
Inference time using transfer learning 0.7964298725128174
Parameter learned model CLL:-0.262025 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [8.69e-08, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [0.0, 118, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [9.06e-08, 129, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [6.14e-08, 125, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [3.49e-08, 109, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.142, 40, 78], 'false': [5.05e-08, 120, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [5.77e-08, 116, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [0.0, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [5.58e-08, 139, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [0.0, 103, 0]}]
{'': [0.1716000000000008, 6.452578262778688e-17], 'true': [nan, 0.1716000000000008]}
{'': [0.19437522249911213, -9.40866970021319e-18], 'true': [nan, 0.19437522249911213]}
{'': [0.20351822237185307, 6.368721226531906e-17], 'true': [nan, 0.20351822237185307]}
{'': [0.21379904456104598, 3.019806626980426e-17], 'true': [nan, 0.21379904456104598]}
{'': [0.20891161431701946, 1.1204085569611672e-17], 'true': [nan, 0.20891161431701946]}
{'': [0.22407354208560723, 2.1279274638648835e-17], 'true': [nan, 0.22407354208560723]}
{'': [0.20351822237185446, 2.871266442996095e-17], 'true': [nan, 0.20351822237185446]}
{'': [0.15750876820065857, -2.5424954762408165e-18], 'true': [nan, 0.15750876820065857]}
{'': [0.2035182223718541, 2.236420481259308e-17], 'true': [nan, 0.2035182223718541]}
{'': [0.20891161431701963, -5.389432158374546e-18], 'true': [nan, 0.20891161431701963]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 8.17988920211792
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(F, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(G, A), publication(H, B) )
%   | | then if ( publication(G, I), professor(I) )
%   | | | then return 0.07243464938522651;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.5338246107751872;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | | | else return 0.630876207826785;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else return -0.1418510649004878;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7315934360542167;  // std dev = 0.074, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( ta(D, A, E), publication(F, B) )
%   | | then if ( tempadvisedby(G, B) )
%   | | | then return 0.6392769850284843;  // std dev = 1.609, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.46575645678993416;  // std dev = 1.958, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | else if ( ta(H, A, I) )
%   | | | then return -0.11450179892755595;  // std dev = 0.949, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.3343173857894091;  // std dev = 2.853, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return -0.12544463852839108;  // std dev = 8.16e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.4409900790229621;  // std dev = 1.034, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.678824888214995;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( ta(H, A, I) )
%   | | | then return 0.46077460024444405;  // std dev = 2.166, 30.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | else return 0.3101665039902812;  // std dev = 2.477, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | else if ( ta(J, A, K) )
%   | | then return -0.010520324825383232;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( publication(L, A) )
%   | | | then return 0.04409147435123414;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.46243162627063167;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360622;  // std dev = 8.82e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.5265739120246101;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(F, B), ta(G, A, H) )
%   | | | then return 0.3340303263222372;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.47118821709510134;  // std dev = 0.064, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( publication(I, A), publication(J, B) )
%   | | then if ( publication(I, K), professor(K) )
%   | | | then return -0.12965624542143717;  // std dev = 1.576, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.16261276622239257;  // std dev = 1.599, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( ta(L, A, M), tempadvisedby(N, B) )
%   | | | then return 0.4084565225116039;  // std dev = 1.415, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.2322317332442636;  // std dev = 2.984, 41.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=26 */
%   else return -0.10159632948783621;  // std dev = 5.77e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), tempadvisedby(E, B) )
%   | then if ( publication(F, B), publication(G, A) )
%   | | then if ( publication(F, A) )
%   | | | then return 0.25294699905354;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5484490474358256;  // std dev = 0.162, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(H, E, I), publication(J, B) )
%   | | | then return 0.15612573723022918;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return -0.049448379094704786;  // std dev = 1.804, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( projectmember(K, B) )
%   | | then return 0.5410815179853166;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(L, A), publication(L, B) )
%   | | | then return 0.36338587008239676;  // std dev = 0.090, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2585588448374218;  // std dev = 2.764, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else return -0.09269127618926101;  // std dev = 3.65e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, A), publication(D, B) )
%   | | then if ( publication(E, C) )
%   | | | then return 0.059071574376250824;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3036668309257847;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(F, B), publication(G, A) )
%   | | | then return -0.0654818121454578;  // std dev = 1.316, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.09304522665678201;  // std dev = 2.820, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else if ( hasposition(B, H), ta(I, A, J) )
%   | | then if ( hasposition(K, H), tempadvisedby(L, K) )
%   | | | then return 0.4297641078463797;  // std dev = 0.345, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2441954199163448;  // std dev = 0.672, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.2585351963368318;  // std dev = 1.100, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.0835914823189243;  // std dev = 1.534, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   else return -0.08518475138839683;  // std dev = 5.27e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.24167920337125948;  // std dev = 0.154, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A), publication(E, B) )
%   | | then if ( publication(D, F), professor(F) )
%   | | | then return -0.19605708021717996;  // std dev = 1.531, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.18434141274185148;  // std dev = 1.121, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( ta(G, A, H), tempadvisedby(I, B) )
%   | | | then return 0.02436730381225236;  // std dev = 2.402, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.17072141534028992;  // std dev = 2.399, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else return -0.0787767547310916;  // std dev = 6.32e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, E) )
%   | | | then return -0.11775582214349407;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21491214925965751;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1951909672255762;  // std dev = 0.127, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | then if ( ta(K, A, L), ta(I, M, L) )
%   | | | then return 0.2022631883243864;  // std dev = 1.173, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.040145971079196055;  // std dev = 1.856, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | else if ( publication(N, B) )
%   | | | then return -0.014293868474344907;  // std dev = 3.376, 55.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=29 */
%   | | | else return -0.24256248631723146;  // std dev = 1.151, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07324622576333707;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( ta(F, A, G) )
%   | | | then return -0.6271508071777271;  // std dev = 0.305, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.035834844927277065;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( ta(H, A, I), tempadvisedby(J, B) )
%   | | | then return 0.2448629656791643;  // std dev = 0.864, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.05200321576871126;  // std dev = 2.079, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   | else if ( tempadvisedby(K, B), ta(L, K, M) )
%   | | then if ( publication(N, B), ta(P, A, Q) )
%   | | | then return 0.291850176157478;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13527889238995502;  // std dev = 1.357, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( tempadvisedby(R, B) )
%   | | | then return -0.008163606471489233;  // std dev = 1.459, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.1277994361792302;  // std dev = 1.981, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   else return -0.06842697784420265;  // std dev = 5.67e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, B), ta(E, D, F) )
%   | | then return 0.16207662579002075;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( ta(G, D, H), publication(I, B) )
%   | | | then return -0.5297016277779416;  // std dev = 0.354, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08743275640275947;  // std dev = 2.049, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else if ( ta(J, A, K), tempadvisedby(L, B) )
%   | | then if ( ta(M, L, N), ta(J, P, N) )
%   | | | then return 0.23393925944847418;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09059939963037064;  // std dev = 1.840, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( publication(Q, A) )
%   | | | then return 0.08366296492042721;  // std dev = 1.783, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return 0.22951209775122908;  // std dev = 1.620, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else return -0.06419184008202626;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
Inference time using transfer learning 1.0685803890228271
Refined model CLL: -0.205439


******************************************
Best model found
******************************************
Total revision time: 11.100106954574585
Best scored revision CLL: -0.205439


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9666752815246582
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5423594614153013;  // std dev = 4.963, 114.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=78 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5286196722477708;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.12544463852839133;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.403562334291684;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 9.06e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3765723265272185;  // std dev = 3.990, 98.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=78 */
%   else return -0.10159632948783627;  // std dev = 4.94e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20282066303059212;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.09269127618926098;  // std dev = 4.59e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20156121546837222;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.37e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11027714007177353;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.07877675473109155;  // std dev = 7.38e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08443501943120522;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 1.05e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07191466689646937;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 4.59e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(A, C), publication(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.049147987664824165;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
Inference time using transfer learning 0.7734720706939697
Parameter learned model CLL:-0.26628 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.963, 36, 78], 'false': [8.43e-08, 129, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [0.0, 145, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [9.06e-08, 133, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.99, 20, 78], 'false': [4.94e-08, 144, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [4.59e-08, 114, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [5.37e-08, 128, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [7.38e-08, 143, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [1.05e-08, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [4.59e-08, 108, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(A, C), publication(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [0.0, 137, 0]}]
{'': [0.2160664819944603, 5.508083222946513e-17], 'true': [nan, 0.2160664819944603]}
{'': [0.1874999999999988, -3.0626842058625008e-18], 'true': [nan, 0.1874999999999988]}
{'': [0.19757184033540198, 6.177180738515908e-17], 'true': [nan, 0.19757184033540198]}
{'': [0.16243231986672044, 1.696174065399545e-17], 'true': [nan, 0.16243231986672044]}
{'': [0.20351822237185357, 1.850371707708594e-17], 'true': [nan, 0.20351822237185357]}
{'': [0.17993079584775085, 2.2551405187698492e-17], 'true': [nan, 0.17993079584775085]}
{'': [0.20061728395061723, 3.8042607137505364e-17], 'true': [nan, 0.20061728395061723]}
{'': [0.20061728395061754, 9.489085680556894e-19], 'true': [nan, 0.20061728395061754]}
{'': [0.19757184033540023, 1.9531701359146273e-17], 'true': [nan, 0.19757184033540023]}
{'': [0.20061728395061706, -7.29343592819446e-18], 'true': [nan, 0.20061728395061706]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 7.870193243026733
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then if ( publication(G, A), publication(G, B) )
%   | | | then return 0.7381489350995118;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | | else return 0.5152917922423695;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=23 */
%   | | else if ( publication(C, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.41912454485560896;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=23 */
%   | else if ( ta(H, A, I) )
%   | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( publication(J, A), tempadvisedby(K, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048766;  // std dev = 8.43e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.7430441272674204;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3430441272674204;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7364967064184023;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), professor(K) )
%   | | | then return -0.028546118492695133;  // std dev = 1.317, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.7938377608207512;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(L, A, M) )
%   | | | then return 0.4756764770532633;  // std dev = 2.961, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.6431497168669424;  // std dev = 1.590, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   else return -0.12544463852839136;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( hasposition(B, C) )
%   | then if ( tempadvisedby(D, B) )
%   | | then if ( ta(E, A, F), publication(G, B) )
%   | | | then return 0.4641080543940481;  // std dev = 2.227, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | | else return 0.28235447668580477;  // std dev = 2.464, 33.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=20 */
%   | | else if ( ta(H, A, I), publication(J, A) )
%   | | | then return 0.6840795771748915;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4991058360521398;  // std dev = 2.003, 32.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   | else return -0.044512571997280426;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1123163781936062;  // std dev = 8.94e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, B) )
%   | | then if ( ta(D, A, E) )
%   | | | then return 0.2370188380809951;  // std dev = 1.490, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.423073513312223;  // std dev = 0.976, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( ta(F, A, G), tempadvisedby(H, B) )
%   | | | then return 0.48065151933958516;  // std dev = 0.777, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.06743422366780953;  // std dev = 2.004, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else if ( ta(I, A, J) )
%   | | then if ( tempadvisedby(K, B), publication(L, B) )
%   | | | then return 0.4813465745024317;  // std dev = 1.315, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.27932174360328565;  // std dev = 1.705, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else if ( projectmember(M, B) )
%   | | | then return 0.33289613675040197;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5802094781529259;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783619;  // std dev = 6.66e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then return 0.39997960148762174;  // std dev = 0.170, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.17941112231953293;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(F, A), publication(G, B) )
%   | | then if ( ta(H, A, I) )
%   | | | then return 0.059799328328221275;  // std dev = 1.659, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.183149663002697;  // std dev = 1.495, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( tempadvisedby(J, B), ta(K, A, L) )
%   | | | then return 0.09811502541791677;  // std dev = 2.518, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return 0.26509503346350555;  // std dev = 2.370, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   else return -0.09269127618926089;  // std dev = 6.99e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.19202326291496183;  // std dev = 0.926, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.37368834058271977;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.09484812580141484;  // std dev = 1.102, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( ta(H, A, I), publication(J, B) )
%   | | then if ( ta(K, L, I), publication(J, L) )
%   | | | then return 0.29906225179195384;  // std dev = 1.281, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.16277711009288956;  // std dev = 1.962, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | else if ( publication(M, A), publication(M, B) )
%   | | | then return 0.22771400203769146;  // std dev = 0.975, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.08524092954057294;  // std dev = 2.284, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   else return -0.08518475138839683;  // std dev = 6.50e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.26406631682931897;  // std dev = 0.127, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, B), publication(E, A) )
%   | | then if ( publication(E, F), professor(F) )
%   | | | then return -0.19878124866582222;  // std dev = 1.464, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0.21628648849694088;  // std dev = 1.349, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( hasposition(B, G) )
%   | | | then return 0.21430025424184607;  // std dev = 2.615, 50.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=41 */
%   | | | else return -0.1113011148582657;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109158;  // std dev = 6.99e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then if ( ta(G, A, F) )
%   | | | then return 0.24895420312335548;  // std dev = 1.120, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.09891604413924421;  // std dev = 2.025, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | else if ( publication(H, A) )
%   | | | then return -0.09411808372415222;  // std dev = 1.788, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.17001511672690653;  // std dev = 1.840, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | else if ( ta(I, A, J) )
%   | | then if ( ta(I, K, L), tempadvisedby(K, M) )
%   | | | then return -0.343901119958158;  // std dev = 0.148, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.03718488831939876;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.07049738271555887;  // std dev = 1.135, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07324622576333707;  // std dev = 1.05e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B) )
%   | | | then return 0.19120013593172633;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.13778508544200826;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19996306524480645;  // std dev = 0.067, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(G, B) )
%   | | then if ( publication(G, H), ta(I, H, J) )
%   | | | then return 0.08328534524835307;  // std dev = 2.235, 31.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=23 */
%   | | | else return -0.024235844120938547;  // std dev = 2.809, 41.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=23 */
%   | | else if ( projectmember(K, B) )
%   | | | then return 0.09974523446485005;  // std dev = 0.536, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.2263281140411059;  // std dev = 1.613, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else return -0.06842697784420265;  // std dev = 5.48e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), publication(D, A) )
%   | then if ( ta(E, C, F), ta(G, A, F) )
%   | | then return -0.2487177251341629;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(D, B) )
%   | | | then return 0.17364999717003457;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.006838769150022247;  // std dev = 1.445, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( projectmember(H, B) )
%   | | then return 0.29574564145275073;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(I, B) )
%   | | | then return 0.10820152796735075;  // std dev = 2.953, 63.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=51 */
%   | | | else return -0.10062293471437003;  // std dev = 1.172, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
Inference time using transfer learning 1.0301501750946045
Refined model CLL: -0.209456


******************************************
Best model found
******************************************
Total revision time: 10.878905534744263
Best scored revision CLL: -0.209456


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(27 unique tokens: ['genre', 'under', 'work', 'female', 'movie']...) from 46 documents (total 86 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(27 unique tokens: ['genre', 'under', 'work', 'female', 'movie']...) from 46 documents (total 86 corpus positions)", 'datetime': '2021-06-11T11:45:47.340756', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 4.801097% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.048927', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.051846', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.057884', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.058691', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.059591', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.060480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.061274', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.062072', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.062969', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.063729', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.064503', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.065356', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.066121', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.066904', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.067739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.068635', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.069506', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.070432', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.071371', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.072192', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.072917', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.073620', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.074435', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.075248', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.076142', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.077010', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.077809', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.078642', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.079565', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:45:52.080470', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.081294', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:45:52.082190', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.084648', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:45:52.085578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9612414836883545
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6622726464397176;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4931111906683556;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.1254446385283913;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3780184260047739;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.11231637819360618;  // std dev = 9.54e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.27534837352408587;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.10159632948783624;  // std dev = 5.16e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.30193606614061796;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.09269127618926087;  // std dev = 7.15e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1193757027938693;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 4.94e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15139298319053662;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.07877675473109155;  // std dev = 7.74e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13087500525244194;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   else return -0.07324622576333706;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13320782427441294;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04322679769446606;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
Inference time using transfer learning 0.8215827941894531
Parameter learned model CLL:-0.279618 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [7.88e-08, 125, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [0.0, 137, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [9.54e-08, 136, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [5.16e-08, 126, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [7.15e-08, 134, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [4.94e-08, 119, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [7.74e-08, 153, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.215, 23, 78], 'false': [0.0, 129, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [4.94e-08, 117, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [0.0, 139, 0]}]
{'': [0.1575087682006598, 4.9737991503207014e-17], 'true': [nan, 0.1575087682006598]}
{'': [0.19437522249910924, 0.0], 'true': [nan, 0.19437522249910924]}
{'': [0.20061728395061704, 6.693991766122267e-17], 'true': [nan, 0.20061728395061704]}
{'': [0.20628099173553724, 2.114710523095536e-17], 'true': [nan, 0.20628099173553724]}
{'': [0.15750876820065962, 3.811213368116209e-17], 'true': [nan, 0.15750876820065962]}
{'': [0.21141581632653011, 2.052513154769197e-17], 'true': [nan, 0.21141581632653011]}
{'': [0.1838062022810824, 3.918434204559376e-17], 'true': [nan, 0.1838062022810824]}
{'': [0.17586511126360158, -3.4425520143415706e-18], 'true': [nan, 0.17586511126360158]}
{'': [0.15750876820065884, 2.0875988497225166e-17], 'true': [nan, 0.15750876820065884]}
{'': [0.19102040816326557, -7.987216004497529e-18], 'true': [nan, 0.19102040816326557]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.376220703125
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A), tempadvisedby(E, B) )
%   | | then if ( publication(D, F), ta(G, F, H) )
%   | | | then return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(I, B), ta(J, A, K) )
%   | | | then return 0.6149056918562682;  // std dev = 2.610, 37.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=28 */
%   | | | else return 0.45814893509951227;  // std dev = 2.683, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   else return -0.14185106490048766;  // std dev = 8.16e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, A, E) )
%   | then if ( publication(F, B), ta(G, C, H) )
%   | | then if ( samecourse(D, G) )
%   | | | then return 0.31741005512338527;  // std dev = 1.264, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6161276246782555;  // std dev = 1.268, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( publication(I, A), publication(I, B) )
%   | | | then return 0.052806745544287846;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3461252396287646;  // std dev = 1.992, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( publication(J, A), publication(J, B) )
%   | | then if ( publication(J, K), ta(L, K, M) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( publication(N, A) )
%   | | | then return 0.33209347245260257;  // std dev = 1.761, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.616252579944957;  // std dev = 2.031, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   else return -0.1254446385283913;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5820478397534709;  // std dev = 0.205, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return -0.011600202041224379;  // std dev = 1.728, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.32425443046567165;  // std dev = 1.672, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( ta(F, A, G) )
%   | | | then return 0.31662415625695794;  // std dev = 2.882, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.6738386482348718;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1123163781936062;  // std dev = 9.42e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.21253228118918274;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tempadvisedby(F, B) )
%   | | | then return 0.45567998916616514;  // std dev = 0.186, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.34132571922310534;  // std dev = 0.931, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( tempadvisedby(G, B), ta(H, G, I) )
%   | | then if ( publication(J, B), publication(K, A) )
%   | | | then return -0.19193163706053185;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.37103257531721145;  // std dev = 1.856, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else if ( tempadvisedby(L, B), publication(M, L) )
%   | | | then return -0.055690224530221294;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.13799309439552906;  // std dev = 3.706, 58.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=30 */
%   else return -0.10159632948783619;  // std dev = 7.30e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), hasposition(B, E) )
%   | then if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(F, B) )
%   | | | then return 0.377819790273449;  // std dev = 0.125, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.676931699248714;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(H, B), ta(I, H, D) )
%   | | | then return 0.07036227283734289;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.30514454721106066;  // std dev = 2.472, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   | else if ( publication(J, A), publication(J, B) )
%   | | then return 0.3344846747218383;  // std dev = 0.104, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( publication(K, A), tempadvisedby(L, B) )
%   | | | then return -0.12288386986777174;  // std dev = 0.827, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.1640200562823507;  // std dev = 2.366, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else return -0.09269127618926085;  // std dev = 7.30e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( ta(F, E, G) )
%   | | | then return 0.25903802405468196;  // std dev = 2.949, 82.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=68 */
%   | | | else return -0.15171493375650877;  // std dev = 1.372, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.3005752155667216;  // std dev = 0.669, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( ta(H, A, I) )
%   | | then return -0.27674668328806024;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.1869492996220745;  // std dev = 0.476, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03567489083256713;  // std dev = 0.982, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839683;  // std dev = 5.48e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, D), professor(D) )
%   | | then if ( publication(C, B) )
%   | | | then return 0.2362785037145945;  // std dev = 0.172, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.024092961092780613;  // std dev = 1.474, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( ta(E, A, F) )
%   | | | then return 0.44084979024002774;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5807616104238337;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tempadvisedby(G, B) )
%   | | then if ( projectmember(H, B), ta(I, A, J) )
%   | | | then return -0.3559182458919786;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.07583574443456599;  // std dev = 2.593, 34.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=23 */
%   | | else if ( ta(K, A, L) )
%   | | | then return 0.22270406302398216;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.13206483385152185;  // std dev = 1.237, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07877675473109157;  // std dev = 6.99e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), ta(D, A, E) )
%   | then if ( publication(C, F), professor(F) )
%   | | then if ( tempadvisedby(G, B), ta(H, G, I) )
%   | | | then return 0.15974783799977552;  // std dev = 0.769, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.22524267995370637;  // std dev = 1.713, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else return 0.13644279595697933;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tempadvisedby(J, B), ta(K, A, L) )
%   | | then if ( ta(M, J, N), ta(K, P, N) )
%   | | | then return 0.24693706756053654;  // std dev = 0.856, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3261367235819693;  // std dev = 0.970, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( publication(Q, B) )
%   | | | then return 0.12388918403069266;  // std dev = 2.555, 53.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=43 */
%   | | | else return -0.04219719328019496;  // std dev = 1.199, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return -0.07324622576333707;  // std dev = 4.21e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then if ( publication(D, E), ta(F, E, G) )
%   | | then if ( publication(C, B) )
%   | | | then return 0.14360390143266696;  // std dev = 0.872, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.3351436936697276;  // std dev = 0.698, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( publication(C, B) )
%   | | | then return 0.19316799446183835;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12741155861198009;  // std dev = 1.329, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | then if ( ta(K, A, L), ta(K, M, J) )
%   | | | then return 0.0034667418453215304;  // std dev = 1.440, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.23754381783530357;  // std dev = 0.750, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( tempadvisedby(N, B) )
%   | | | then return -0.2064403330125662;  // std dev = 1.758, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.0017912858022846889;  // std dev = 2.319, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   else return -0.06842697784420268;  // std dev = 5.37e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(D, A), ta(E, A, F) )
%   | | then if ( ta(G, H, F), publication(C, H) )
%   | | | then return 0.04830858121977195;  // std dev = 1.670, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return -0.30469627954627115;  // std dev = 1.071, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( publication(C, I), tempadvisedby(J, I) )
%   | | | then return 0.05645905727756754;  // std dev = 3.351, 78.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=57 */
%   | | | else return -0.19840624524248796;  // std dev = 0.548, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( ta(K, A, L) )
%   | | then return -0.31234588040252403;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tempadvisedby(M, B) )
%   | | | then return -0.15936096166573752;  // std dev = 0.857, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.17916717117710426;  // std dev = 0.614, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
Inference time using transfer learning 1.0629048347473145
Refined model CLL: -0.195153


******************************************
Best model found
******************************************
Total revision time: 12.44152045249939
Best scored revision CLL: -0.195153


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.736152', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.737341', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.740279', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.741065', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.741911', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.742783', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.743618', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.744384', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.745245', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.746007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.746840', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.747746', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.748499', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.749271', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.750031', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.750864', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.751706', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.752584', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.753429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.754275', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.755090', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.755855', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.756702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.757541', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.758377', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.759233', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.760003', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.760757', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.761584', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:06.762429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.763219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:06.764053', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.766429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:06.767381', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9181327819824219
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5484144218251755;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.69e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5065461742796602;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.12544463852839133;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41394590735756437;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.43e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.332025417582472;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.10159632948783626;  // std dev = 5.37e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2356160763594177;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.09269127618926097;  // std dev = 4.94e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17010917966974137;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.08518475138839682;  // std dev = 6.32e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14257108043982405;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.07877675473109158;  // std dev = 7.22e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13074936002549614;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10854352587003846;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04833535337906018;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
Inference time using transfer learning 0.8137342929840088
Parameter learned model CLL:-0.273649 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [8.69e-08, 114, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [0.0, 121, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [8.43e-08, 117, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [5.37e-08, 127, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [4.94e-08, 121, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [6.32e-08, 147, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [7.22e-08, 146, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [0.0, 113, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.215, 23, 78], 'false': [4.94e-08, 117, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [0.0, 129, 0]}]
{'': [0.21379904456104679, 6.622382953904442e-17], 'true': [nan, 0.21379904456104679]}
{'': [0.1975718403353994, -3.670158759091427e-18], 'true': [nan, 0.1975718403353994]}
{'': [0.19437522249911193, 6.073014835556412e-17], 'true': [nan, 0.19437522249911193]}
{'': [0.18750000000000042, 2.272897530728667e-17], 'true': [nan, 0.18750000000000042]}
{'': [0.19437522249910974, 2.0185873175002847e-17], 'true': [nan, 0.19437522249910974]}
{'': [0.19757184033540068, 2.718913529694261e-17], 'true': [nan, 0.19757184033540068]}
{'': [0.1910204081632651, 3.57400562721797e-17], 'true': [nan, 0.1910204081632651]}
{'': [0.17993079584775037, -9.824982518806695e-19], 'true': [nan, 0.17993079584775037]}
{'': [0.17586511126360171, 2.0875988497225166e-17], 'true': [nan, 0.17586511126360171]}
{'': [0.19437522249911013, -1.0327656043024712e-17], 'true': [nan, 0.19437522249911013]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.880161046981812
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, A), publication(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.01604367194161748;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tempadvisedby(I, B), ta(J, A, K) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.6968586125188672;  // std dev = 2.048, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), publication(E, B) )
%   | then if ( ta(F, G, D), publication(H, G) )
%   | | then if ( samecourse(C, F) )
%   | | | then return 0.43102939352507025;  // std dev = 2.252, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return 0.5421325461360004;  // std dev = 2.151, 27.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=21 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then return 0.2711080304712916;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08418157746541872;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( publication(J, B), publication(J, A) )
%   | | then return 0.7274065038819155;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( publication(K, A), publication(L, B) )
%   | | | then return 0.2634544863915674;  // std dev = 1.246, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.6018612334490456;  // std dev = 1.599, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else return -0.12544463852839136;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, A) )
%   | | then return 0.5840109331290515;  // std dev = 0.179, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tempadvisedby(D, B) )
%   | | | then return 0.3865241462077212;  // std dev = 2.641, 37.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=26 */
%   | | | else return 0.5732153561473468;  // std dev = 1.424, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else if ( ta(E, A, F) )
%   | | then return -0.15659968632799037;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.4227601249560304;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360621;  // std dev = 9.06e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.43983394872686477;  // std dev = 0.182, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.14515727258962108;  // std dev = 0.810, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1734005022126115;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tempadvisedby(F, B), publication(G, A) )
%   | | | then return 0.05994579387434756;  // std dev = 1.722, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.3506333469134233;  // std dev = 2.848, 54.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=43 */
%   else return -0.10159632948783624;  // std dev = 6.14e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), tempadvisedby(E, B) )
%   | then if ( publication(F, B), ta(G, E, H) )
%   | | then if ( ta(C, I, H), publication(F, I) )
%   | | | then return 0.21921433484815153;  // std dev = 0.694, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4755100861354989;  // std dev = 0.174, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( ta(J, E, K) )
%   | | | then return 0.0035954914973203023;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.21079420690624606;  // std dev = 1.711, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | else if ( publication(L, A), publication(L, B) )
%   | | then return 0.32301516582444656;  // std dev = 0.117, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tempadvisedby(M, B), publication(N, A) )
%   | | | then return -0.15559458416119692;  // std dev = 0.887, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.16265734877698124;  // std dev = 2.940, 44.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=31 */
%   else return -0.09269127618926083;  // std dev = 7.60e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.23989062463071206;  // std dev = 0.501, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.39159704995995814;  // std dev = 0.105, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.024102440773497658;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( ta(H, A, I), hasposition(B, J) )
%   | | then if ( ta(H, K, L), publication(M, K) )
%   | | | then return 0.26967795362790065;  // std dev = 1.618, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | | else return 0.045730489647396;  // std dev = 1.558, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( publication(N, A), publication(N, B) )
%   | | | then return 0.18357719011715012;  // std dev = 0.975, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.02793575944924876;  // std dev = 2.094, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else return -0.08518475138839685;  // std dev = 4.21e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), publication(D, C) )
%   | then return 0.3430105651227006;  // std dev = 0.316, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( publication(E, B), publication(E, A) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.23972037778432811;  // std dev = 0.097, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16097590879455886;  // std dev = 0.923, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tempadvisedby(I, B), ta(J, I, K) )
%   | | | then return 0.024978278715026114;  // std dev = 2.182, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | | | else return 0.11560266770573925;  // std dev = 2.875, 45.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=30 */
%   else return -0.07877675473109158;  // std dev = 6.91e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( ta(E, D, F), ta(G, A, F) )
%   | | | then return -0.1039591981644797;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1935634977541521;  // std dev = 0.085, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( publication(C, H), ta(I, H, J) )
%   | | | then return -0.017661278704634086;  // std dev = 1.701, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return -0.4106333528342908;  // std dev = 0.205, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tempadvisedby(K, B), ta(L, K, M) )
%   | | then if ( ta(N, A, P) )
%   | | | then return 0.05200635169154345;  // std dev = 1.509, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.32076672446556537;  // std dev = 0.100, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tempadvisedby(Q, B), ta(R, A, S) )
%   | | | then return 0.38936791251160596;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05069542993901853;  // std dev = 2.863, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else return -0.07324622576333707;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D) )
%   | then if ( ta(E, F, D), publication(G, F) )
%   | | then if ( publication(G, A), publication(H, B) )
%   | | | then return 0.08545314624867525;  // std dev = 1.739, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return 0.2122920517014505;  // std dev = 1.453, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.39658887158877043;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then return 0.166597550452123;  // std dev = 0.059, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( projectmember(J, B) )
%   | | | then return 0.2870517520795301;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06733211928602056;  // std dev = 2.485, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D) )
%   | then if ( publication(E, B), publication(E, A) )
%   | | then return 0.19077840443973754;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( ta(F, G, D), publication(H, G) )
%   | | | then return -0.13595767764461128;  // std dev = 3.481, 54.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=29 */
%   | | | else return 0.3074349910294766;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(I, B) )
%   | | then if ( publication(J, A) )
%   | | | then return 0.136877916673475;  // std dev = 1.154, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.21539091116577086;  // std dev = 0.882, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( publication(K, A) )
%   | | | then return -0.25985988313092767;  // std dev = 0.760, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.06374118675230822;  // std dev = 0.800, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
Inference time using transfer learning 1.0215702056884766
Refined model CLL: -0.219774


******************************************
Best model found
******************************************
Total revision time: 12.870973825454712
Best scored revision CLL: -0.219774


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.796556', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.797737', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.800763', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.801570', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.802431', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.803357', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.804134', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.804898', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.805765', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.806528', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.807384', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.808267', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.809022', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.809809', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.810571', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.811418', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.812258', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.813148', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.813988', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.814850', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.815645', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.816406', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.817258', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.818091', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.818932', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.819821', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.820590', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.821356', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.822201', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:21.823080', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.823848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:21.824697', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.827068', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:21.828014', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9303162097930908
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5423594614153013;  // std dev = 4.963, 114.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.69e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4942160025230002;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4179458320424053;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.43e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.35022663109658136;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.10159632948783619;  // std dev = 6.66e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.22778498307732065;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.09269127618926093;  // std dev = 5.58e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1994088633474898;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.27e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08392823616141183;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.0787767547310916;  // std dev = 6.83e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14609569729538713;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09029818108330093;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.010593697907172548;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
Inference time using transfer learning 0.7949976921081543
Parameter learned model CLL:-0.265348 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.963, 36, 78], 'false': [8.69e-08, 114, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [0.0, 119, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [8.43e-08, 124, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [6.66e-08, 128, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [5.58e-08, 120, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [5.27e-08, 127, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [6.83e-08, 144, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.215, 23, 78], 'false': [0.0, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [4.94e-08, 119, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [0.0, 125, 0]}]
{'': [0.2160664819944603, 6.622382953904442e-17], 'true': [nan, 0.2160664819944603]}
{'': [0.20351822237185307, -9.329605248950896e-18], 'true': [nan, 0.20351822237185307]}
{'': [0.19437522249910963, 5.730183352904034e-17], 'true': [nan, 0.19437522249910963]}
{'': [0.1799307958477512, 3.469446951953614e-17], 'true': [nan, 0.1799307958477512]}
{'': [0.19757184033540062, 2.590520390792032e-17], 'true': [nan, 0.19757184033540062]}
{'': [0.183806202281082, 2.1854783949314106e-17], 'true': [nan, 0.183806202281082]}
{'': [0.21379904456104618, 3.23815048849004e-17], 'true': [nan, 0.21379904456104618]}
{'': [0.17586511126360124, 0.0], 'true': [nan, 0.17586511126360124]}
{'': [0.18750000000000003, 2.052513154769197e-17], 'true': [nan, 0.18750000000000003]}
{'': [0.2137990445610463, -8.881784197001253e-18], 'true': [nan, 0.2137990445610463]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 10.391774654388428
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return 0.058148935099512286;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | | then return 0.6842358916212513;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.4757959939230417;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return -0.14185106490048777;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7274065038819155;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(G, A) )
%   | | then if ( publication(G, H), professor(H) )
%   | | | then return 0.08621615016061304;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.5217753921225985;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( publication(I, B) )
%   | | | then return 0.561506618253247;  // std dev = 2.792, 47.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=37 */
%   | | | else return 0.7654282024139745;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1254446385283911;  // std dev = 8.16e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.5667328785175607;  // std dev = 0.140, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, A) )
%   | | then if ( publication(E, F), ta(G, F, H) )
%   | | | then return 0.30335836499540403;  // std dev = 1.413, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.1603488283122152;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( publication(I, B), ta(J, A, K) )
%   | | | then return 0.45583529355492824;  // std dev = 2.393, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.31521388748916784;  // std dev = 2.434, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   else return -0.11231637819360626;  // std dev = 8.02e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( ta(E, A, F) )
%   | | | then return 0.33949971748843033;  // std dev = 0.894, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.42309804918714;  // std dev = 0.097, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tempadvisedby(G, B), ta(H, G, I) )
%   | | | then return -0.2861279475213386;  // std dev = 0.286, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.08327856545682309;  // std dev = 2.152, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( ta(J, A, K), projectmember(L, B) )
%   | | then return -0.22936582020754484;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( ta(M, A, N) )
%   | | | then return 0.3719808904890949;  // std dev = 2.225, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | | else return 0.5124679005081926;  // std dev = 0.939, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.10159632948783627;  // std dev = 5.16e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D), publication(E, B) )
%   | then if ( publication(F, A) )
%   | | then if ( ta(G, H, D), publication(E, H) )
%   | | | then return 0.3270029421546365;  // std dev = 1.264, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.02203310618242015;  // std dev = 0.999, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then return 0.3982425144279942;  // std dev = 0.957, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.48372605128768653;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( publication(J, A) )
%   | | then if ( tempadvisedby(K, B), publication(L, B) )
%   | | | then return 0.21628078669731374;  // std dev = 0.846, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.40845628505468273;  // std dev = 0.577, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tempadvisedby(M, B) )
%   | | | then return 0.041312186805138484;  // std dev = 1.807, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.225459085941385;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.09269127618926092;  // std dev = 6.50e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( projectmember(C, B) )
%   | then return 0.41267121219154795;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E) )
%   | | then if ( ta(D, F, G), tempadvisedby(F, B) )
%   | | | then return -0.030880517195981505;  // std dev = 1.095, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.259913878836631;  // std dev = 2.207, 42.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | | else if ( tempadvisedby(H, B), publication(I, H) )
%   | | | then return 0.34746952806223;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14560695019893705;  // std dev = 2.334, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else return -0.08518475138839683;  // std dev = 5.58e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), projectmember(D, B) )
%   | then return -0.1324233080915878;  // std dev = 0.973, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( publication(E, B), ta(F, A, G) )
%   | | then if ( publication(H, A) )
%   | | | then return 0.31040484311624805;  // std dev = 0.811, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.19631225099839347;  // std dev = 1.600, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else if ( publication(I, A), publication(I, B) )
%   | | | then return 0.22752908811235953;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.026650016200704365;  // std dev = 2.561, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return -0.07877675473109162;  // std dev = 5.77e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, A) )
%   | | then if ( publication(F, B) )
%   | | | then return 0.19810069620495369;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11906296769090793;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( ta(G, A, H), ta(G, I, E) )
%   | | | then return 0.1398133930091293;  // std dev = 0.951, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.34591758331176153;  // std dev = 0.175, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( publication(J, A), publication(K, B) )
%   | | then if ( publication(K, L), ta(M, L, N) )
%   | | | then return 0.20015837513746235;  // std dev = 1.192, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.011253289909137706;  // std dev = 1.593, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( tempadvisedby(P, B) )
%   | | | then return -0.1270099333466594;  // std dev = 1.390, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.027478670147986325;  // std dev = 2.175, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else return -0.07324622576333707;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.16796805896135628;  // std dev = 0.102, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( ta(D, A, E), publication(F, B) )
%   | | then if ( publication(F, G), student(G) )
%   | | | then return 0.0417419494324711;  // std dev = 2.419, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | | else return 0.32689058320393755;  // std dev = 0.146, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( publication(H, B), publication(I, A) )
%   | | | then return -0.11990941923199253;  // std dev = 1.235, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return -0.0063414033959709295;  // std dev = 2.341, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   else return -0.06842697784420265;  // std dev = 5.27e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, A, E) )
%   | then if ( ta(F, C, E) )
%   | | then if ( publication(G, A), publication(G, B) )
%   | | | then return -0.19668431460592026;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.30824810677835535;  // std dev = 1.219, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( ta(D, H, E), publication(I, H) )
%   | | | then return -0.1082473132880692;  // std dev = 1.868, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.10729983835798826;  // std dev = 1.335, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else if ( publication(J, B), publication(K, A) )
%   | | then if ( publication(K, L), professor(L) )
%   | | | then return -0.03260145963191288;  // std dev = 1.943, 36.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=22 */
%   | | | else return 0.33374549048173485;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( projectmember(M, B) )
%   | | | then return 0.23705127262740897;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1250973499096995;  // std dev = 1.943, 28.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
Inference time using transfer learning 1.0632824897766113
Refined model CLL: -0.216646


******************************************
Best model found
******************************************
Total revision time: 13.299553632736206
Best scored revision CLL: -0.216646


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.476608', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.477845', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.480925', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.481747', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.482629', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.483570', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.484340', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.485104', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.485973', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.486739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.487597', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.488478', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.489237', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.490015', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.490777', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.491642', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.492473', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.493357', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.494195', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.495067', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.495871', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.496639', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.497493', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.498325', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.499191', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.500031', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.500799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.501564', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.502398', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:37.503254', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.504007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:37.504839', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.507335', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:37.508249', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0080249309539795
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6460277229782994;  // std dev = 4.068, 99.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.94e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4824579436748256;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.12544463852839133;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41184216079918357;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.1123163781936062;  // std dev = 9.06e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3074128457041664;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.1015963294878362;  // std dev = 6.50e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18449566948123872;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.09269127618926096;  // std dev = 5.16e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1711724224221859;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.48e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23028085770615309;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=78 */
%   else return -0.07877675473109161;  // std dev = 5.96e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14259276577845248;  // std dev = 3.990, 98.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.017824371685404444;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 5.05e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04025951189267842;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
Inference time using transfer learning 0.7948386669158936
Parameter learned model CLL:-0.273366 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.068, 21, 78], 'false': [8.94e-08, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [0.0, 130, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [9.06e-08, 128, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [6.5e-08, 127, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [5.16e-08, 123, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [5.48e-08, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.644, 16, 78], 'false': [5.96e-08, 119, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.99, 20, 78], 'false': [0.0, 147, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [5.05e-08, 125, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [0.0, 152, 0]}]
{'': [0.16712580348944073, 6.832141690000964e-17], 'true': [nan, 0.16712580348944073]}
{'': [0.2006172839506193, -6.832141690000964e-18], 'true': [nan, 0.2006172839506193]}
{'': [0.18749999999999994, 6.418476861114186e-17], 'true': [nan, 0.18749999999999994]}
{'': [0.1910204081632653, 3.321927160295744e-17], 'true': [nan, 0.1910204081632653]}
{'': [0.21141581632653042, 2.166288828536891e-17], 'true': [nan, 0.21141581632653042]}
{'': [0.19757184033540043, 2.288245928616735e-17], 'true': [nan, 0.19757184033540043]}
{'': [0.14124038026256214, 2.9854736796642864e-17], 'true': [nan, 0.14124038026256214]}
{'': [0.16243231986672216, -6.797283824235652e-18], 'true': [nan, 0.16243231986672216]}
{'': [0.20891161431701963, 2.042810365310288e-17], 'true': [nan, 0.20891161431701963]}
{'': [0.19757184033540046, -9.495328500083576e-18], 'true': [nan, 0.19757184033540046]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 8.296682596206665
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.6842358916212513;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.4757959939230417;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return -0.14185106490048766;  // std dev = 8.94e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return -0.0016864083180906419;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.7758860545469175;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then return 0.5135178828163374;  // std dev = 2.425, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   | | | else return 0.6127306180042057;  // std dev = 1.960, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   else return -0.12544463852839133;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.4293859508174645;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H), publication(I, B) )
%   | | | then return 0.3614524144698439;  // std dev = 2.182, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return 0.0970704800592409;  // std dev = 2.636, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | | else if ( publication(J, B) )
%   | | | then return 0.44875190656362557;  // std dev = 2.116, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | | else return 0.1850176963309595;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1123163781936062;  // std dev = 9.06e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( ta(E, A, F), ta(G, D, H) )
%   | | then if ( samecourse(E, G) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.521016192946879;  // std dev = 0.359, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( ta(I, A, J), publication(C, B) )
%   | | | then return -0.2491530825083567;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.14163610152070943;  // std dev = 1.920, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | else if ( tempadvisedby(K, B), ta(L, A, M) )
%   | | then if ( ta(N, K, P), publication(Q, B) )
%   | | | then return 0.32914003148049453;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.12142461794529225;  // std dev = 1.665, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( tempadvisedby(R, B), ta(S, R, T) )
%   | | | then return 0.574079398963002;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.33440082195529686;  // std dev = 2.514, 42.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=33 */
%   else return -0.10159632948783621;  // std dev = 5.77e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), ta(D, A, E) )
%   | then if ( tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H), ta(D, I, H) )
%   | | | then return 0.08620361424810541;  // std dev = 0.826, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5745270576072529;  // std dev = 0.413, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( publication(C, J), professor(J) )
%   | | | then return -0.0046684690992539095;  // std dev = 1.051, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.03843211392169865;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( ta(K, A, L), publication(M, B) )
%   | | then if ( publication(M, N), inphase(N, P) )
%   | | | then return 0.41608017800060665;  // std dev = 1.300, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.2911952745642917;  // std dev = 1.213, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( publication(Q, A), publication(Q, B) )
%   | | | then return 0.38027799463836165;  // std dev = 0.103, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.19515550966850131;  // std dev = 2.146, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   else return -0.09269127618926094;  // std dev = 5.58e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, A) )
%   | | then if ( ta(G, A, H), ta(D, I, H) )
%   | | | then return 0.3485132992991202;  // std dev = 0.301, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13498421030641697;  // std dev = 0.603, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( ta(J, K, E), publication(L, K) )
%   | | | then return 0.3848841859192678;  // std dev = 0.082, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2129169384782028;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(M, A), publication(M, B) )
%   | | then return 0.30298390203061387;  // std dev = 0.115, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tempadvisedby(N, B) )
%   | | | then return 0.03317966542183726;  // std dev = 2.074, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return 0.12111353600034382;  // std dev = 2.614, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   else return -0.08518475138839683;  // std dev = 4.83e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, F) )
%   | | | then return -0.11124883370905288;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22681012985054955;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24709901514934338;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), ta(J, I, K) )
%   | | | then return -0.015122986249007675;  // std dev = 2.131, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.27058670736646684;  // std dev = 1.210, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( ta(L, A, M), tempadvisedby(N, B) )
%   | | | then return 0.1728475318843195;  // std dev = 1.883, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.09835544674127568;  // std dev = 2.501, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else return -0.0787767547310916;  // std dev = 6.32e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( hasposition(B, C) )
%   | then if ( publication(D, B), publication(E, A) )
%   | | then if ( publication(D, A) )
%   | | | then return 0.2045123347956624;  // std dev = 0.133, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.012631206280633208;  // std dev = 2.104, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else if ( ta(F, A, G) )
%   | | | then return 0.25130957248083247;  // std dev = 1.669, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return 0.11138585039482951;  // std dev = 1.795, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return -0.22208050691973139;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333707;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then return 0.17584748220456584;  // std dev = 0.095, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tempadvisedby(G, B) )
%   | | | then return 0.05090396950558257;  // std dev = 0.946, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.16621328305133187;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( publication(H, B), ta(I, A, J) )
%   | | then if ( ta(K, L, J), publication(H, L) )
%   | | | then return 0.27822466200082363;  // std dev = 1.148, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.029870085252416443;  // std dev = 2.422, 34.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=23 */
%   | | else if ( tempadvisedby(M, B), ta(N, M, P) )
%   | | | then return 0.07032192482226808;  // std dev = 1.444, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return -0.05927318303833551;  // std dev = 2.169, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else return -0.06842697784420267;  // std dev = 4.94e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, A, E) )
%   | then if ( ta(F, C, G), publication(H, B) )
%   | | then if ( ta(F, I, E) )
%   | | | then return 0.056841719776987085;  // std dev = 1.236, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.18823616994394818;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( ta(D, J, K), publication(L, J) )
%   | | | then return 0.42748710423323844;  // std dev = 0.340, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.089513905035197;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( ta(M, A, N) )
%   | | then if ( publication(P, B) )
%   | | | then return 0.018046743844223438;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return -0.5242694084799652;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tempadvisedby(Q, B), publication(R, Q) )
%   | | | then return 0.04354872285214245;  // std dev = 0.611, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14678059628169265;  // std dev = 1.828, 40.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=33 */
%   else return -0.06419184008202626;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
Inference time using transfer learning 1.0551881790161133
Refined model CLL: -0.221624


******************************************
Best model found
******************************************
Total revision time: 11.421751022338867
Best scored revision CLL: -0.221624


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.098957', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.100085', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.102954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.103711', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.104475', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.105283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.105954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.106617', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.107424', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.108085', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.108806', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.109591', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.110255', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.110935', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.111631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.112363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.113104', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.113892', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.114653', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.115406', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.116074', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.116730', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.117480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.118227', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.119007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.119756', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.120428', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.121081', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.121822', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:46:51.122580', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.123273', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:46:51.124011', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.126272', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:46:51.127145', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9490578174591064
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6381489350995114;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.94e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5189504536578093;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.12544463852839136;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.398265995946505;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.43e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.29670451591547864;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.10159632948783619;  // std dev = 6.83e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.29110917655059426;  // std dev = 3.909, 97.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=78 */
%   else return -0.09269127618926087;  // std dev = 7.30e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19503744849370597;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.08518475138839685;  // std dev = 4.71e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09757452391090055;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.07877675473109161;  // std dev = 5.87e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.055289506196467095;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02405822808593002;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.06842697784420267;  // std dev = 4.94e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( courselevel(A, C), courselevel(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05743631534103788;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
Inference time using transfer learning 0.7843637466430664
Parameter learned model CLL:-0.266424 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [8.94e-08, 123, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [0.0, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [8.43e-08, 117, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [6.83e-08, 134, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.909, 19, 78], 'false': [7.3e-08, 134, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [4.71e-08, 112, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [5.87e-08, 118, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [0.0, 126, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [4.94e-08, 126, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'courselevel(A, C), courselevel(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [0.0, 139, 0]}]
{'': [0.1716000000000008, 6.498866485610672e-17], 'true': [nan, 0.1716000000000008]}
{'': [0.18380620228108424, -7.591268544445516e-18], 'true': [nan, 0.18380620228108424]}
{'': [0.19102040816326524, 6.073014835556412e-17], 'true': [nan, 0.19102040816326524]}
{'': [0.19437522249911107, 3.4798035100191475e-17], 'true': [nan, 0.19437522249911107]}
{'': [0.15750876820065826, 3.9769182971647396e-17], 'true': [nan, 0.15750876820065826]}
{'': [0.17159999999999967, 1.9825411154020653e-17], 'true': [nan, 0.17159999999999967]}
{'': [0.19757184033540048, 2.9166876070660895e-17], 'true': [nan, 0.19757184033540048]}
{'': [0.20628099173553727, -2.64338815386942e-18], 'true': [nan, 0.20628099173553727]}
{'': [0.2137990445610465, 1.938484646170908e-17], 'true': [nan, 0.2137990445610465]}
{'': [0.19757184033540026, -9.584659205397035e-18], 'true': [nan, 0.19757184033540026]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.973890781402588
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, E) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | then if ( ta(K, A, L), ta(K, M, J) )
%   | | | then return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tempadvisedby(N, B) )
%   | | | then return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.5456489350995116;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   else return -0.1418510649004877;  // std dev = 6.32e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then return 0.7251239146986216;  // std dev = 0.084, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(F, B), ta(G, A, H) )
%   | | then if ( ta(G, I, J), publication(F, I) )
%   | | | then return 0.7896276273290196;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5633146939505475;  // std dev = 2.476, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | else if ( publication(K, A) )
%   | | | then return 0.012121908000257036;  // std dev = 1.956, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.43215943437247495;  // std dev = 2.138, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   else return -0.12544463852839108;  // std dev = 7.88e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B) )
%   | | then if ( ta(G, A, E) )
%   | | | then return 0.4919259841161024;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.606637081205257;  // std dev = 0.213, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.6554962331457529;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(H, A), tempadvisedby(I, B) )
%   | | then if ( publication(H, J), ta(K, J, L) )
%   | | | then return 0.4348245526171943;  // std dev = 1.202, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.05776505295228256;  // std dev = 1.267, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( ta(M, A, N) )
%   | | | then return 0.3602364160484791;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.48255079300631804;  // std dev = 1.702, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   else return -0.11231637819360624;  // std dev = 8.16e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, H, E), ta(G, F, I) )
%   | | | then return 0.448055203125184;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.09837349697836584;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4633287917615284;  // std dev = 0.205, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( publication(J, A) )
%   | | then if ( publication(J, K), professor(K) )
%   | | | then return -0.15437304963195309;  // std dev = 1.731, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.32380754466631784;  // std dev = 1.513, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.21582615516019052;  // std dev = 2.629, 36.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=24 */
%   | | | else return 0.5238890419178511;  // std dev = 0.971, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.10159632948783653;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( hasposition(B, C) )
%   | then if ( hasposition(D, C), tempadvisedby(E, D) )
%   | | then if ( publication(F, B), publication(F, D) )
%   | | | then return 0.27015050930691553;  // std dev = 3.298, 85.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=68 */
%   | | | else return 0.02724335340856703;  // std dev = 1.472, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( publication(G, A) )
%   | | | then return -0.08232075665617096;  // std dev = 0.499, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04812284931026398;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.19229640121483835;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926083;  // std dev = 7.60e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(E, G, F), publication(H, G) )
%   | | | then return 0.07935267960997633;  // std dev = 1.600, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.4337053229408025;  // std dev = 0.230, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( publication(C, A) )
%   | | | then return 0.2504730395633012;  // std dev = 1.047, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.12367733669505142;  // std dev = 2.767, 42.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=28 */
%   | else if ( ta(I, A, J) )
%   | | then if ( ta(I, K, J), publication(L, K) )
%   | | | then return -0.10528387529947496;  // std dev = 0.866, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.5112010318868148;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1522918097284482;  // std dev = 1.147, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.08518475138839683;  // std dev = 5.77e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), ta(D, A, E) )
%   | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | then if ( ta(D, I, H) )
%   | | | then return 0.26947927211941436;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.07159389686651119;  // std dev = 0.985, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(C, B) )
%   | | | then return 0.27621953609398453;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.44818861897848233;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( publication(J, A) )
%   | | then if ( publication(J, B) )
%   | | | then return 0.2519095779908562;  // std dev = 0.168, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.15403865294548516;  // std dev = 1.667, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else if ( ta(K, A, L) )
%   | | | then return 0.14236788853804083;  // std dev = 2.256, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | | else return 0.2996950263903784;  // std dev = 0.850, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return -0.0787767547310916;  // std dev = 6.83e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), publication(D, B) )
%   | then if ( ta(E, C, F) )
%   | | then if ( ta(G, A, H), ta(G, I, F) )
%   | | | then return 0.18912503135362613;  // std dev = 0.980, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.047343171823950064;  // std dev = 1.512, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else if ( publication(D, A), ta(J, A, K) )
%   | | | then return -0.3862092129508583;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.035295545272966945;  // std dev = 2.157, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | else if ( publication(L, B), publication(M, A) )
%   | | then if ( publication(L, A) )
%   | | | then return 0.20645102972751211;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.04055962995132296;  // std dev = 1.554, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( ta(N, A, P), hasposition(B, Q) )
%   | | | then return 0.3709591090163831;  // std dev = 0.269, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.17989064162197066;  // std dev = 1.189, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07324622576333706;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( publication(F, E), sameperson(B, D) )
%   | | | then return 0.011041884433693638;  // std dev = 0.751, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19891939886995538;  // std dev = 0.247, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.016846572778282703;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tempadvisedby(G, B), publication(H, A) )
%   | | then if ( ta(I, G, J), publication(K, B) )
%   | | | then return -0.5395077548017316;  // std dev = 0.213, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07039032983434326;  // std dev = 1.581, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( publication(L, B), ta(M, A, N) )
%   | | | then return 0.021246916967295887;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=28 */
%   | | | else return -0.09092775070076248;  // std dev = 2.705, 33.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   else return -0.06842697784420265;  // std dev = 5.87e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, A) )
%   | | then return 0.17809367745486865;  // std dev = 0.255, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( publication(C, D), student(D) )
%   | | | then return -0.022283859076618364;  // std dev = 3.304, 59.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=36 */
%   | | | else return 0.22990486189017442;  // std dev = 0.962, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0.40979997570863846;  // std dev = 0.279, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
Inference time using transfer learning 1.0246222019195557
Refined model CLL: -0.216522


******************************************
Best model found
******************************************
Total revision time: 12.940454483032227
Best scored revision CLL: -0.216522


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.193141', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.193913', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.196696', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.197191', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.197717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.198266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.198726', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.199220', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.199758', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.200198', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.200694', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.201235', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.201686', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.202140', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.202596', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.203144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.203637', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.204204', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.204766', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.205299', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.205739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.206195', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.206730', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.207316', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.207837', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.208366', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.208807', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.209265', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.209779', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:06.210302', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.210764', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:06.211326', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.213416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:06.214024', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.0132434368133545
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5484144218251755;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.14185106490048768;  // std dev = 6.99e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5498514393856101;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   else return -0.1254446385283913;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41142928371729814;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.11231637819360622;  // std dev = 8.02e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2942929870841557;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.1015963294878362;  // std dev = 6.50e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15446515319238802;  // std dev = 5.184, 119.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=78 */
%   else return -0.09269127618926103;  // std dev = 3.49e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20332649642257217;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.08518475138839685;  // std dev = 4.08e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1261251296508737;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.0787767547310916;  // std dev = 6.32e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12324438392101185;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.07324622576333706;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08764612934818068;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 5.87e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05430157402442477;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
Inference time using transfer learning 0.7616162300109863
Parameter learned model CLL:-0.264272 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [6.99e-08, 135, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.215, 23, 78], 'false': [0.0, 135, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [8.02e-08, 118, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [6.5e-08, 121, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.184, 41, 78], 'false': [3.49e-08, 109, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [4.08e-08, 103, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [6.32e-08, 122, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [0.0, 139, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [5.87e-08, 135, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [0.0, 135, 0]}]
{'': [0.21379904456104679, 3.6185046728523623e-17], 'true': [nan, 0.21379904456104679]}
{'': [0.17586511126360055, 0.0], 'true': [nan, 0.17586511126360055]}
{'': [0.1910204081632655, 5.457028426123651e-17], 'true': [nan, 0.1910204081632655]}
{'': [0.20061728395061681, 3.4866508211368553e-17], 'true': [nan, 0.20061728395061681]}
{'': [0.22583150907421792, 1.1204085569611672e-17], 'true': [nan, 0.22583150907421792]}
{'': [0.19102040816326538, 1.6168296475123638e-17], 'true': [nan, 0.19102040816326538]}
{'': [0.2035182223718543, 3.276067941516855e-17], 'true': [nan, 0.2035182223718543]}
{'': [0.19102040816326565, -3.993608002248764e-18], 'true': [nan, 0.19102040816326565]}
{'': [0.19437522249910988, 2.5494010195096187e-17], 'true': [nan, 0.19437522249910988]}
{'': [0.2006172839506169, -6.579099405186113e-18], 'true': [nan, 0.2006172839506169]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 10.370579481124878
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.6081489350995123;  // std dev = 2.291, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.3194734122109545;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 5.96e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, B), ta(G, A, H) )
%   | | then if ( ta(I, J, H), publication(F, J) )
%   | | | then return 0.7882245394102434;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4595748916929081;  // std dev = 2.600, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( publication(K, A), publication(L, B) )
%   | | | then return 0.0814811431673592;  // std dev = 1.452, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.44240975376983344;  // std dev = 2.304, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else return -0.12544463852839133;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.565965623244456;  // std dev = 0.156, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B), publication(E, B) )
%   | | then if ( ta(F, D, G) )
%   | | | then return 0.3629535402521431;  // std dev = 2.110, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return 0.20852660892948002;  // std dev = 2.085, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | else if ( publication(H, B) )
%   | | | then return 0.4918178291923874;  // std dev = 1.853, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | | else return 0.31927623215998735;  // std dev = 1.363, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else return -0.11231637819360621;  // std dev = 8.43e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(D, A) )
%   | | then if ( publication(C, A) )
%   | | | then return 0.3898482968512127;  // std dev = 1.006, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.12757169920183475;  // std dev = 2.057, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else if ( tempadvisedby(E, B), ta(F, E, G) )
%   | | | then return 0.49497652483773336;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.37254352311264133;  // std dev = 1.944, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else if ( ta(H, A, I) )
%   | | then return -0.16341681839722821;  // std dev = 0.996, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.2627603894734823;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1015963294878362;  // std dev = 6.50e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), hasposition(B, D) )
%   | then if ( hasposition(E, D), publication(C, E) )
%   | | then if ( tempadvisedby(F, E) )
%   | | | then return 0.2702673877963199;  // std dev = 1.670, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   | | | else return 0.06432435407477398;  // std dev = 1.021, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( ta(G, A, H) )
%   | | | then return 0.5496267161722836;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4083574492774508;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tempadvisedby(I, B), publication(J, B) )
%   | | then if ( ta(K, I, L) )
%   | | | then return 0.1339339518271702;  // std dev = 2.244, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return -0.1156198556471969;  // std dev = 1.825, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( publication(M, B) )
%   | | | then return 0.2451847503406088;  // std dev = 1.754, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.057466523491249207;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.09269127618926103;  // std dev = 3.33e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( publication(D, B), publication(D, A) )
%   | | then if ( ta(E, C, F) )
%   | | | then return 0.27674215717429757;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1497232767662608;  // std dev = 0.957, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( ta(G, C, H), publication(I, A) )
%   | | | then return -0.24158351585278037;  // std dev = 1.027, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.11813785300144664;  // std dev = 3.053, 43.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=28 */
%   | else if ( publication(J, A) )
%   | | then if ( ta(K, A, L), publication(J, B) )
%   | | | then return -0.0651194713239391;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1351109205670395;  // std dev = 1.877, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else if ( ta(M, A, N) )
%   | | | then return 0.2210477499308723;  // std dev = 1.266, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.4303546480040161;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839683;  // std dev = 5.48e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, A, E) )
%   | | then if ( publication(G, A) )
%   | | | then return -0.11515030139580149;  // std dev = 0.687, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10172811032304685;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( publication(H, A) )
%   | | | then return 0.1707433103559148;  // std dev = 0.960, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.3347829614041923;  // std dev = 0.801, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( tempadvisedby(I, B) )
%   | | then if ( inphase(A, J), inphase(I, J) )
%   | | | then return -0.2384334282807569;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.05423431730147474;  // std dev = 2.072, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | else if ( publication(K, A), publication(K, B) )
%   | | | then return 0.1855483462831288;  // std dev = 0.945, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.08025505463660111;  // std dev = 2.446, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   else return -0.07877675473109158;  // std dev = 6.99e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( ta(F, E, G) )
%   | | | then return 0.13907527127398486;  // std dev = 3.315, 85.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=68 */
%   | | | else return -0.17074174350610843;  // std dev = 1.347, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return -0.19703501827887426;  // std dev = 0.547, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.330454148388627;  // std dev = 0.751, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333707;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( ta(D, A, E), publication(F, A) )
%   | | then if ( ta(G, H, E), publication(C, H) )
%   | | | then return 0.11753676395486132;  // std dev = 1.325, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.2027700783868726;  // std dev = 1.045, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tempadvisedby(I, B), publication(J, A) )
%   | | | then return 0.10864291006266297;  // std dev = 1.043, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.2392716856000526;  // std dev = 1.756, 52.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=48 */
%   | else if ( publication(K, A) )
%   | | then return 0.18903114902698093;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.16031974015414677;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.06842697784420265;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.1670869937171697;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.19060467661929684;  // std dev = 1.061, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(I, B) )
%   | | | then return 0.11651621018281241;  // std dev = 0.871, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.17629195765431835;  // std dev = 0.078, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( ta(J, A, K) )
%   | | then if ( publication(L, A), publication(M, B) )
%   | | | then return -0.04910190317161976;  // std dev = 1.479, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.09251912536692083;  // std dev = 2.338, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else if ( projectmember(N, B) )
%   | | | then return 0.3014654295579886;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13032164204206206;  // std dev = 2.495, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   else return -0.06419184008202626;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
Inference time using transfer learning 1.0443902015686035
Refined model CLL: -0.21015


******************************************
Best model found
******************************************
Total revision time: 13.486233472824097
Best scored revision CLL: -0.21015


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.829892', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.830679', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.833502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.834003', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.834565', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.835128', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.835605', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.836048', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.836605', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.837056', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.837570', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.838109', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.838565', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.839053', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.839553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.840059', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.840561', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.841143', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.841718', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.842246', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.842701', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.843170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.843707', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.844250', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.844788', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.845317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.845770', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.846221', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.846747', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:21.847317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.847797', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:21.848316', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.850469', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:21.851109', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9657387733459473
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5871208977163341;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5430852042597295;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=78 */
%   else return -0.12544463852839108;  // std dev = 8.16e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3397178775517018;  // std dev = 5.010, 115.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=78 */
%   else return -0.11231637819360625;  // std dev = 7.74e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3246350165359404;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.10159632948783619;  // std dev = 6.66e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1977888190568557;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.09269127618926092;  // std dev = 6.14e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10206075856111686;  // std dev = 5.225, 120.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=78 */
%   else return -0.08518475138839685;  // std dev = 4.83e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16277397604866303;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.0787767547310916;  // std dev = 6.58e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10987663604534699;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 3.80e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08413790114347824;  // std dev = 4.655, 108.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=78 */
%   else return -0.06842697784420268;  // std dev = 5.67e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05181073634159648;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
Inference time using transfer learning 0.8031196594238281
Parameter learned model CLL:-0.258818 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [0.0, 136, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.215, 23, 78], 'false': [8.16e-08, 128, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.01, 37, 78], 'false': [7.74e-08, 120, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [6.66e-08, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [6.14e-08, 120, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.225, 42, 78], 'false': [4.83e-08, 115, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [6.58e-08, 130, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [3.8e-08, 117, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.655, 30, 78], 'false': [5.67e-08, 138, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [0.0, 141, 0]}]
{'': [0.1975718403354011, 0.0], 'true': [nan, 0.1975718403354011]}
{'': [0.17586511126360033, 5.204170427930421e-17], 'true': [nan, 0.17586511126360033]}
{'': [0.21822306238185102, 4.9960036108132046e-17], 'true': [nan, 0.21822306238185102]}
{'': [0.19102040816326551, 3.389993968321089e-17], 'true': [nan, 0.19102040816326551]}
{'': [0.21141581632653078, 3.14563190310461e-17], 'true': [nan, 0.21141581632653078]}
{'': [0.2274999999999994, 2.027363784098112e-17], 'true': [nan, 0.2274999999999994]}
{'': [0.19437522249911016, 3.3306690738754695e-17], 'true': [nan, 0.19437522249911016]}
{'': [0.20061728395061762, 1.2335811384723961e-17], 'true': [nan, 0.20061728395061762]}
{'': [0.2006172839506171, 2.333077370589097e-17], 'true': [nan, 0.2006172839506171]}
{'': [0.20628099173553704, -1.2598275456739365e-17], 'true': [nan, 0.20628099173553704]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.930102348327637
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tempadvisedby(G, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( publication(H, A), publication(I, B) )
%   | | then if ( publication(H, J), professor(J) )
%   | | | then return 0.088918165868743;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tempadvisedby(K, B) )
%   | | | then return 0.5338246107751872;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.1418510649004878;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B) )
%   | | then return 0.7302027506445208;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( ta(E, A, F) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6194734122109542;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( publication(G, B), publication(H, A) )
%   | | then if ( publication(G, I), tempadvisedby(J, I) )
%   | | | then return 0.30824608828994565;  // std dev = 2.011, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return -0.20281975804012142;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( hasposition(B, K) )
%   | | | then return 0.5132193624895371;  // std dev = 3.192, 55.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=41 */
%   | | | else return -0.009779634167290843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1254446385283911;  // std dev = 7.88e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, H, F), ta(G, D, I) )
%   | | | then return 0.5527154429272496;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21938210959391627;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( publication(C, J), tempadvisedby(K, J) )
%   | | | then return 0.5853064867777789;  // std dev = 0.085, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4132369281223742;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( publication(L, A), tempadvisedby(M, B) )
%   | | then if ( ta(N, A, P) )
%   | | | then return 0.40959286312325355;  // std dev = 1.056, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.12606026024387462;  // std dev = 0.873, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( ta(Q, A, R) )
%   | | | then return 0.3000445452174384;  // std dev = 3.170, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.5020852813952071;  // std dev = 1.726, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   else return -0.11231637819360625;  // std dev = 7.45e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( ta(E, D, F), ta(G, A, F) )
%   | | | then return 0.08221694872980216;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3748827900510719;  // std dev = 0.913, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( ta(H, D, I) )
%   | | | then return -0.25016774230362737;  // std dev = 0.899, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.29830489563105417;  // std dev = 1.099, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | then if ( projectmember(M, B), publication(N, B) )
%   | | | then return 0.08686102537040584;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.48288577358068013;  // std dev = 1.344, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( publication(P, B), publication(P, A) )
%   | | | then return 0.38357370498719706;  // std dev = 0.934, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.23100047584003272;  // std dev = 3.038, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   else return -0.1015963294878362;  // std dev = 6.50e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(D, A) )
%   | | then if ( publication(C, A) )
%   | | | then return 0.3615437104509017;  // std dev = 0.142, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.05441560493098689;  // std dev = 2.153, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( publication(C, E), inphase(E, F) )
%   | | | then return 0.28728289290555187;  // std dev = 2.303, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | | else return 0.5086948194485605;  // std dev = 0.151, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( publication(G, A) )
%   | | then return -0.08222495224129651;  // std dev = 1.141, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.10750423103452708;  // std dev = 1.051, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.09269127618926094;  // std dev = 5.77e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B) )
%   | | | then return 0.2903846625789571;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.017872842580003285;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2766812258884256;  // std dev = 0.074, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( ta(G, A, H), publication(I, B) )
%   | | then if ( ta(G, J, K), tempadvisedby(J, B) )
%   | | | then return -0.2453223287268004;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16208543808753612;  // std dev = 2.886, 45.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=30 */
%   | | else if ( publication(L, A) )
%   | | | then return -0.10886122661830892;  // std dev = 1.824, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.08481917861402466;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   else return -0.08518475138839683;  // std dev = 5.67e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), ta(D, A, E) )
%   | then if ( ta(D, F, G), publication(C, F) )
%   | | then if ( publication(C, A) )
%   | | | then return 0.25342088917358285;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5362698568344957;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(C, H), student(H) )
%   | | | then return 0.21521595817790198;  // std dev = 2.036, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | else return 0.02332210509892745;  // std dev = 1.474, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( publication(I, A), publication(I, B) )
%   | | then return 0.2249113510536045;  // std dev = 0.065, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | | then return 0.19553678778279718;  // std dev = 1.321, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return -0.07812702441342431;  // std dev = 2.368, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   else return -0.0787767547310916;  // std dev = 6.83e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, E), professor(E) )
%   | | then if ( publication(C, B) )
%   | | | then return 0.12859405277960365;  // std dev = 0.943, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.13977550379087703;  // std dev = 1.190, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.31679159477611174;  // std dev = 0.761, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( publication(F, B) )
%   | | then if ( publication(F, G), projectmember(H, G) )
%   | | | then return -0.044029151589063176;  // std dev = 1.084, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23383876964485945;  // std dev = 2.099, 57.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=50 */
%   | | else return 0.4423324964823766;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.16944236463368725;  // std dev = 0.109, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( ta(D, A, E) )
%   | | then if ( publication(F, A), tempadvisedby(G, B) )
%   | | | then return 0.32681496346849787;  // std dev = 0.854, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.030038235029281327;  // std dev = 3.036, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | else if ( publication(H, A), tempadvisedby(I, B) )
%   | | | then return -0.13454331065544822;  // std dev = 0.801, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.21782235881355796;  // std dev = 1.358, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   else return -0.06842697784420265;  // std dev = 5.87e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.1469757500270319;  // std dev = 0.098, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( publication(G, B) )
%   | | | then return 0.15345561727885043;  // std dev = 1.396, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.05236299702877787;  // std dev = 1.147, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(H, A), publication(I, B) )
%   | | | then return 0.0523135909606183;  // std dev = 1.791, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return -0.029782985576811846;  // std dev = 2.689, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
Inference time using transfer learning 1.008213996887207
Refined model CLL: -0.215097


******************************************
Best model found
******************************************
Total revision time: 13.065784692764282
Best scored revision CLL: -0.215097


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.054143', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.054933', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.057661', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.058162', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.058703', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.059259', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.059730', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.060168', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.060721', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.061163', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.061672', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.062221', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.062669', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.063161', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.063647', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.064150', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.064646', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.065214', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.065786', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.066311', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.066766', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.067267', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.067809', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.068352', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.068884', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.069404', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.069869', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.070320', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.070848', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:37.071428', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.071898', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:37.072410', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.074452', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:37.075099', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9415154457092285
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6381489350995114;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.55758726760669;  // std dev = 3.990, 98.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=78 */
%   else return -0.12544463852839136;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4039127423223413;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.1123163781936062;  // std dev = 9.19e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.30720244111291134;  // std dev = 4.351, 103.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=78 */
%   else return -0.1015963294878362;  // std dev = 6.14e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17601524271764754;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.09269127618926092;  // std dev = 6.32e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14534745464392526;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.08518475138839682;  // std dev = 6.14e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14455287247479431;  // std dev = 4.416, 104.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=78 */
%   else return -0.0787767547310916;  // std dev = 6.32e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1253044920032729;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 4.21e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07509709410169571;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=78 */
%   else return -0.06842697784420268;  // std dev = 5.48e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09579408589002991;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
Inference time using transfer learning 0.780189037322998
Parameter learned model CLL:-0.277327 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [7.88e-08, 126, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.99, 20, 78], 'false': [0.0, 118, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [9.19e-08, 130, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.351, 25, 78], 'false': [6.14e-08, 120, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [6.32e-08, 123, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [6.14e-08, 144, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.416, 26, 78], 'false': [6.32e-08, 122, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [4.21e-08, 134, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.479, 27, 78], 'false': [5.48e-08, 135, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [0.0, 124, 0]}]
{'': [0.1716000000000008, 4.9343245538895844e-17], 'true': [nan, 0.1716000000000008]}
{'': [0.16243231986672435, -7.526935760170553e-18], 'true': [nan, 0.16243231986672435]}
{'': [0.1838062022810824, 6.490534605500916e-17], 'true': [nan, 0.1838062022810824]}
{'': [0.18380620228108202, 3.14563190310461e-17], 'true': [nan, 0.18380620228108202]}
{'': [0.20891161431701977, 3.249433242805336e-17], 'true': [nan, 0.20891161431701977]}
{'': [0.2035182223718539, 2.6213599192538418e-17], 'true': [nan, 0.2035182223718539]}
{'': [0.1875000000000001, 3.276067941516855e-17], 'true': [nan, 0.1875000000000001]}
{'': [0.1799307958477511, 1.3256394323882466e-17], 'true': [nan, 0.1799307958477511]}
{'': [0.19102040816326538, 2.2204460492503132e-17], 'true': [nan, 0.19102040816326538]}
{'': [0.17160000000000014, -8.058070340021298e-18], 'true': [nan, 0.17160000000000014]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 13.227375268936157
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(D, F, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | then if ( projectmember(K, B), publication(L, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( publication(M, A), tempadvisedby(N, B) )
%   | | | then return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.5686752508889855;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=27 */
%   else return -0.14185106490048766;  // std dev = 7.60e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.750551175893125;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.34433562315669086;  // std dev = 1.086, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( publication(I, A), publication(J, B) )
%   | | then if ( publication(I, K), professor(K) )
%   | | | then return -0.06385150729928774;  // std dev = 1.609, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | | else return 0.6547222845015082;  // std dev = 0.954, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tempadvisedby(L, B), ta(M, L, N) )
%   | | | then return 0.6982102622114277;  // std dev = 0.987, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.507383685571708;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   else return -0.1254446385283913;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5752499707918779;  // std dev = 0.218, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, B) )
%   | | then if ( publication(D, E), tempadvisedby(F, E) )
%   | | | then return 0.3958601207303988;  // std dev = 3.407, 63.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=46 */
%   | | | else return -0.28934313810617757;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( ta(G, A, H) )
%   | | | then return -0.14282544714384848;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.28120785532198506;  // std dev = 1.209, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1123163781936062;  // std dev = 9.06e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( publication(F, A), sameperson(B, D) )
%   | | | then return 0.4435009177623208;  // std dev = 0.923, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.2950640165917104;  // std dev = 3.448, 69.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=52 */
%   | | else return -0.07253638772694763;  // std dev = 0.566, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( publication(G, A) )
%   | | then return -0.06985321243110472;  // std dev = 1.188, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.3148475157046202;  // std dev = 0.807, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.10159632948783623;  // std dev = 5.37e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, B) )
%   | | then if ( ta(D, A, E) )
%   | | | then return 0.08973101397494562;  // std dev = 1.564, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.3319569965402867;  // std dev = 0.122, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( publication(C, F), professor(F) )
%   | | | then return -0.13965106312704378;  // std dev = 1.792, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.282858586815909;  // std dev = 1.308, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( publication(G, B) )
%   | | then if ( tempadvisedby(H, B) )
%   | | | then return 0.23375444873678947;  // std dev = 2.148, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | else return 0.3548835047320553;  // std dev = 1.468, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.019282464640676428;  // std dev = 1.107, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.09269127618926089;  // std dev = 6.99e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), student(D) )
%   | | then if ( ta(E, D, F), tempadvisedby(D, G) )
%   | | | then return 0.3286067135875098;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.16783478869874585;  // std dev = 3.243, 69.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=53 */
%   | | else if ( tempadvisedby(H, B), ta(I, A, J) )
%   | | | then return 0.2501825000579236;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.054538971403134566;  // std dev = 1.575, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.35728397272909435;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839683;  // std dev = 5.48e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), ta(D, A, E) )
%   | then if ( ta(F, G, E), publication(C, G) )
%   | | then if ( samecourse(D, F) )
%   | | | then return 0.3200119204660147;  // std dev = 0.165, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.44453415758312864;  // std dev = 0.371, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( publication(H, A) )
%   | | | then return -0.11249743265281972;  // std dev = 0.938, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3234803708331182;  // std dev = 0.932, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then return 0.22423815334912142;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( ta(J, A, K) )
%   | | | then return -0.14115358064923753;  // std dev = 0.890, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09336290060348287;  // std dev = 2.286, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   else return -0.07877675473109155;  // std dev = 7.38e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, A, G), ta(F, H, E) )
%   | | then if ( ta(D, H, I) )
%   | | | then return -0.18658630946092672;  // std dev = 1.219, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.24924735069712936;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( publication(J, B), publication(J, A) )
%   | | | then return 0.19004544071077834;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.33577251079066234;  // std dev = 0.316, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tempadvisedby(K, B), ta(L, A, M) )
%   | | then if ( publication(N, A) )
%   | | | then return 0.29258061476977343;  // std dev = 0.677, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.04012719222766149;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tempadvisedby(P, B) )
%   | | | then return -0.2087459995932447;  // std dev = 1.513, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.0496371056381633;  // std dev = 2.771, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   else return -0.07324622576333707;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B) )
%   | then if ( ta(D, A, E), ta(F, C, E) )
%   | | then if ( publication(G, A), publication(G, B) )
%   | | | then return -0.11682211640506368;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.3370578403430135;  // std dev = 1.196, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( ta(H, C, I), ta(J, A, K) )
%   | | | then return 0.2518151321587061;  // std dev = 0.310, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.0015918093546175942;  // std dev = 2.561, 42.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=28 */
%   | else if ( publication(L, A), ta(M, A, N) )
%   | | then return 0.1319030341504679;  // std dev = 0.303, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( publication(P, A), publication(Q, B) )
%   | | | then return 0.1969748959228087;  // std dev = 0.706, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.24098043227725596;  // std dev = 1.216, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.06842697784420265;  // std dev = 5.16e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return -0.04148704307253101;  // std dev = 0.790, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18895244947196047;  // std dev = 0.194, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tempadvisedby(F, B), publication(G, B) )
%   | | then if ( publication(G, H), ta(I, H, J) )
%   | | | then return -0.03609022835258281;  // std dev = 2.138, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.19899832205964707;  // std dev = 2.226, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( publication(K, A) )
%   | | | then return -0.07886292390586483;  // std dev = 1.672, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.04342961535958317;  // std dev = 1.997, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
Inference time using transfer learning 1.0461058616638184
Refined model CLL: -0.214742


******************************************
Best model found
******************************************
Total revision time: 16.260337114334106
Best scored revision CLL: -0.214742


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.484842', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.485574', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.488230', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.488735', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.489277', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.489825', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.490292', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.490731', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.491292', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.491729', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.492240', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.492776', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.493228', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.493689', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.494161', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.494681', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.495218', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.495793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.496355', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.496879', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.497333', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.497793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.498322', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.498859', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.499437', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.499963', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.500410', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.500861', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.501397', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:47:55.501950', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.502417', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:47:55.502928', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.505016', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:47:55.505615', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 0.9437472820281982
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5939979917032853;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.1418510649004879;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4851871164191521;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.12544463852839108;  // std dev = 8.16e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4017583991853091;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.11231637819360624;  // std dev = 7.45e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3669730828728953;  // std dev = 4.068, 99.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=78 */
%   else return -0.10159632948783619;  // std dev = 6.66e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.30052314393856233;  // std dev = 3.824, 96.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=78 */
%   else return -0.09269127618926096;  // std dev = 5.16e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14960988916227932;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.48e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10697108653694178;  // std dev = 4.598, 107.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   else return -0.07877675473109162;  // std dev = 5.77e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.037406402615444825;  // std dev = 4.963, 114.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=78 */
%   else return -0.07324622576333707;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0411266650077996;  // std dev = 4.866, 112.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 5.87e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03817130109578664;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
Inference time using transfer learning 0.8080189228057861
Parameter learned model CLL:-0.260842 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [0.0, 147, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [8.16e-08, 131, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [7.45e-08, 109, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.068, 21, 78], 'false': [6.66e-08, 125, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [3.824, 18, 78], 'false': [5.16e-08, 123, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [5.48e-08, 130, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.598, 29, 78], 'false': [5.77e-08, 120, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.963, 36, 78], 'false': [0.0, 132, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.866, 34, 78], 'false': [5.87e-08, 148, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.816, 33, 78], 'false': [0.0, 134, 0]}]
{'': [0.19437522249911068, -4.833624052789797e-17], 'true': [nan, 0.19437522249911068]}
{'': [0.20351822237185563, 5.084990952481633e-17], 'true': [nan, 0.20351822237185563]}
{'': [0.1975718403354014, 5.0927661680053055e-17], 'true': [nan, 0.1975718403354014]}
{'': [0.16712580348944028, 3.552713678800501e-17], 'true': [nan, 0.16712580348944028]}
{'': [0.15234375, 2.166288828536891e-17], 'true': [nan, 0.15234375]}
{'': [0.1943752224991106, 2.3058478203753253e-17], 'true': [nan, 0.1943752224991106]}
{'': [0.19757184033540023, 2.7755575615628914e-17], 'true': [nan, 0.19757184033540023]}
{'': [0.2160664819944601, -3.3643121958338078e-18], 'true': [nan, 0.2160664819944601]}
{'': [0.21141581632653078, 2.3254671461743144e-17], 'true': [nan, 0.21141581632653078]}
{'': [0.20891161431702, -9.113771097669196e-18], 'true': [nan, 0.20891161431702]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 7.779530048370361
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tempadvisedby(G, B), publication(H, G) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8025933795439566;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), professor(K) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( ta(L, A, M), publication(N, B) )
%   | | | then return 0.6581489350995116;  // std dev = 2.366, 35.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | else return 0.5010060779566552;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   else return -0.14185106490048766;  // std dev = 8.69e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7273181837743999;  // std dev = 0.025, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return 0.06621054192977789;  // std dev = 1.719, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.6467814243985285;  // std dev = 0.921, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( publication(H, B) )
%   | | | then return 0.6070966441657508;  // std dev = 2.440, 44.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=37 */
%   | | | else return 0.21423704164954602;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.1254446385283913;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A) )
%   | then if ( publication(C, B) )
%   | | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | | then return 0.48609631927508906;  // std dev = 0.870, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5775398816647851;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( publication(C, G), professor(G) )
%   | | | then return 0.04642274622589794;  // std dev = 1.743, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.4136191643413761;  // std dev = 1.252, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( hasposition(B, H) )
%   | | then if ( projectmember(I, B) )
%   | | | then return 0.697941604777534;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5201455637115032;  // std dev = 2.041, 40.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=35 */
%   | | else return 0.08072645614886442;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.11231637819360618;  // std dev = 9.54e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B) )
%   | | then return 0.45067601289637166;  // std dev = 0.161, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( ta(E, A, F) )
%   | | | then return 0.09040360048504885;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3237369338183821;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( publication(G, B), tempadvisedby(H, B) )
%   | | then if ( ta(I, A, J), ta(I, H, K) )
%   | | | then return -0.16301451736370784;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.15745874570146173;  // std dev = 2.963, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | else if ( publication(L, A) )
%   | | | then return 0.20605416941658733;  // std dev = 1.672, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.4521467962259438;  // std dev = 1.170, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.10159632948783623;  // std dev = 6.14e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), tempadvisedby(D, B) )
%   | then if ( publication(E, D), ta(F, A, G) )
%   | | then return -0.06334944884945062;  // std dev = 1.058, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(C, A) )
%   | | | then return 0.3439598052847269;  // std dev = 0.151, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16666124936591586;  // std dev = 2.690, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | else if ( ta(H, A, I) )
%   | | then if ( ta(H, J, K), publication(L, J) )
%   | | | then return 0.1749430045769171;  // std dev = 1.844, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.3923277851702639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(M, B) )
%   | | | then return 0.14831327343425477;  // std dev = 0.671, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.42527579935389404;  // std dev = 0.451, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.09269127618926105;  // std dev = 2.36e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), ta(E, D, F) )
%   | | then if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | | then return 0.1430028048395016;  // std dev = 0.828, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.31630010818719934;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2685283305572254;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tempadvisedby(H, B), ta(I, H, J) )
%   | | then if ( publication(K, A), publication(L, B) )
%   | | | then return -0.2769158134123666;  // std dev = 0.247, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.22243493939819547;  // std dev = 2.155, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else if ( ta(M, A, N), publication(P, A) )
%   | | | then return 0.2860649951885854;  // std dev = 1.275, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.017991083987999305;  // std dev = 2.932, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   else return -0.08518475138839683;  // std dev = 5.05e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(D, A, F) )
%   | | then return 0.11683653838923899;  // std dev = 0.772, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( publication(G, B) )
%   | | | then return 0.3383403674639075;  // std dev = 0.355, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.14321882861378973;  // std dev = 1.068, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(H, B), publication(H, A) )
%   | | then return 0.22529854105753658;  // std dev = 0.135, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tempadvisedby(I, B), ta(J, A, K) )
%   | | | then return 0.17421530272218802;  // std dev = 1.566, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.038156809919024946;  // std dev = 2.643, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   else return -0.07877675473109158;  // std dev = 6.83e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D), publication(E, A) )
%   | then if ( ta(C, F, G), tempadvisedby(F, H) )
%   | | then return 0.050400751872958505;  // std dev = 0.585, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(E, B) )
%   | | | then return 0.19039289976955784;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.48410066422598363;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tempadvisedby(I, B), ta(J, I, K) )
%   | | then if ( publication(L, A) )
%   | | | then return 0.03086649708810447;  // std dev = 0.666, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.22791290201893855;  // std dev = 1.307, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( publication(M, B), publication(M, A) )
%   | | | then return 0.1809827026084179;  // std dev = 0.081, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.012786498869039537;  // std dev = 2.982, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   else return -0.07324622576333707;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( ta(F, A, G) )
%   | | | then return -0.18581879583830524;  // std dev = 1.051, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.005222175767718921;  // std dev = 0.877, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(C, H), inphase(H, I) )
%   | | | then return 0.15423615051173217;  // std dev = 2.281, 62.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=54 */
%   | | | else return -0.01390612099563063;  // std dev = 1.918, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( tempadvisedby(J, B) )
%   | | then return 0.043019590092175986;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( hasposition(B, K) )
%   | | | then return -0.2875886813667414;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11745007617276433;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.06842697784420265;  // std dev = 5.27e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, A, G) )
%   | | then if ( publication(H, A), publication(H, B) )
%   | | | then return 0.15444597514424185;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2792076446697928;  // std dev = 0.363, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( ta(D, I, J), publication(K, I) )
%   | | | then return 0.11493485103853922;  // std dev = 0.927, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.025339058212134922;  // std dev = 1.151, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tempadvisedby(L, B) )
%   | | then if ( ta(M, A, N) )
%   | | | then return -0.03554354771517613;  // std dev = 1.802, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return -0.20983986510963243;  // std dev = 1.445, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( ta(P, A, Q) )
%   | | | then return -0.11136890321769068;  // std dev = 2.336, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return 0.1801786876568014;  // std dev = 1.297, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.06419184008202625;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
Inference time using transfer learning 1.0170435905456543
Refined model CLL: -0.217486


******************************************
Best model found
******************************************
Total revision time: 10.784539937973022
Best scored revision CLL: -0.217486


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.600186', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['director', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.601015', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.603766', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.604328', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.604957', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.605585', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.606123', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.606640', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.607261', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.607772', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.608352', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.608965', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'have', 'position']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.609481', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.610000', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.610543', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'publication']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.611143', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.611713', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.612347', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.612984', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.613584', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.614093', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.614653', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.615268', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'member', 'project']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.615885', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.616482', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'project', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.617062', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'in', 'program', 'years']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.617585', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'person', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.618108', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'in', 'phase']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.618704', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'advise', 'by', 'temporary']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:48:08.619336', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.619866', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'course', 'level']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:48:08.620448', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'professor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.622631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['actor', 'student']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:48:08.623341', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 1.004385232925415
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5672398441904208;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.14185106490048766;  // std dev = 8.43e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.48339221004005656;  // std dev = 4.763, 110.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=78 */
%   else return -0.1254446385283913;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4148900187323341;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.11231637819360621;  // std dev = 8.82e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3475544072515562;  // std dev = 4.284, 102.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   else return -0.10159632948783621;  // std dev = 6.32e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1691447196324764;  // std dev = 5.055, 116.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=78 */
%   else return -0.09269127618926096;  // std dev = 5.58e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19041939315042522;  // std dev = 4.539, 106.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=78 */
%   else return -0.08518475138839683;  // std dev = 5.58e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09816860235867261;  // std dev = 4.915, 113.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   else return -0.07877675473109161;  // std dev = 5.96e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10002106608675768;  // std dev = 4.710, 109.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   else return -0.07324622576333706;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1410452684363679;  // std dev = 4.142, 100.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=78 */
%   else return -0.06842697784420265;  // std dev = 5.58e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( sameperson(A, C), sameperson(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.013395075489868562;  // std dev = 4.963, 114.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=78 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
Inference time using transfer learning 0.8020198345184326
Parameter learned model CLL:-0.261228 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [8.43e-08, 127, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.763, 32, 78], 'false': [0.0, 137, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [8.82e-08, 130, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.284, 24, 78], 'false': [6.32e-08, 136, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [5.055, 38, 78], 'false': [5.58e-08, 129, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.539, 28, 78], 'false': [5.58e-08, 134, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.915, 35, 78], 'false': [5.96e-08, 116, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.71, 31, 78], 'false': [0.0, 129, 0]}]
['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.142, 22, 78], 'false': [5.58e-08, 134, 0]}]
['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'sameperson(A, C), sameperson(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [4.963, 36, 78], 'false': [0.0, 112, 0]}]
{'': [0.20628099173553774, 5.594824691024411e-17], 'true': [nan, 0.20628099173553774]}
{'': [0.20628099173553638, 0.0], 'true': [nan, 0.20628099173553638]}
{'': [0.19437522249911085, 5.978123978750843e-17], 'true': [nan, 0.19437522249911085]}
{'': [0.17993079584775015, 2.938825653419532e-17], 'true': [nan, 0.17993079584775015]}
{'': [0.2202734839476823, 2.4097864100390994e-17], 'true': [nan, 0.2202734839476823]}
{'': [0.19437522249910896, 2.3198690066794315e-17], 'true': [nan, 0.19437522249910896]}
{'': [0.21379904456104692, 3.062684205862501e-17], 'true': [nan, 0.21379904456104692]}
{'': [0.20351822237185413, -1.7212760071707853e-18], 'true': [nan, 0.20351822237185413]}
{'': [0.17159999999999992, 2.3198690066794315e-17], 'true': [nan, 0.17159999999999992]}
{'': [0.21606648199445982, -4.956352788505163e-18], 'true': [nan, 0.21606648199445982]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;advisedby(A, B) :- professor(B), student(A).;true;true
1;;advisedby(A, B) :- professor(B), student(A).;true;true
2;;advisedby(A, B) :- professor(B), student(A).;true;true
3;;advisedby(A, B) :- student(A), professor(B).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;true
5;;advisedby(A, B) :- student(A), professor(B).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;true
7;;advisedby(A, B) :- student(A), professor(B).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;true
9;;advisedby(A, B) :- student(A), professor(B).;true;true


Refining candidate
***************************
Model training time 9.853431224822998
WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E) )
%   | | then if ( ta(D, F, G), tempadvisedby(F, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41370449065506787;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( ta(I, A, J), publication(K, B) )
%   | | then if ( tempadvisedby(L, B) )
%   | | | then return 0.6081489350995123;  // std dev = 2.121, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.21529179224236947;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.41370449065506787;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048768;  // std dev = 6.99e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.734385777304471;  // std dev = 0.163, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.04198858018546689;  // std dev = 1.711, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.3271944866779399;  // std dev = 1.771, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( tempadvisedby(F, B), ta(G, A, H) )
%   | | | then return 0.3226275177922774;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return 0.5045046534346239;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else return -0.1254446385283913;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B) )
%   | | then if ( ta(G, A, H), ta(G, I, E) )
%   | | | then return 0.534384380847598;  // std dev = 1.281, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.5953919189265022;  // std dev = 0.955, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7460820390575705;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(J, B), publication(J, A) )
%   | | then return 0.5641233902445992;  // std dev = 0.140, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( ta(K, A, L) )
%   | | | then return 0.4673685102976671;  // std dev = 1.986, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | | else return 0.26004430916296334;  // std dev = 2.158, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   else return -0.11231637819360618;  // std dev = 9.88e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A) )
%   | then if ( publication(D, B) )
%   | | then if ( publication(C, E), professor(E) )
%   | | | then return 0.29721656291780274;  // std dev = 1.991, 38.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=30 */
%   | | | else return 0.6217840843149642;  // std dev = 0.198, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( ta(F, A, G) )
%   | | | then return -0.06109329543412964;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.06757344810582377;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( ta(H, A, I) )
%   | | then if ( ta(H, J, I), tempadvisedby(J, K) )
%   | | | then return 0.5581882208309126;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31381070251258647;  // std dev = 2.244, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | else return 0.5979496408855539;  // std dev = 0.173, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783619;  // std dev = 6.83e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), student(D) )
%   | | then if ( publication(E, A) )
%   | | | then return 0.24790866789008303;  // std dev = 1.995, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   | | | else return 0.37476425412205694;  // std dev = 1.577, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | else if ( ta(F, A, G), tempadvisedby(H, B) )
%   | | | then return 0.46780351018898514;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.03589155034549163;  // std dev = 1.590, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else if ( ta(I, A, J) )
%   | | then return -0.11612620412773836;  // std dev = 0.939, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.2121768727899734;  // std dev = 1.047, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.09269127618926086;  // std dev = 7.30e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.3069936687865462;  // std dev = 0.204, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( projectmember(D, B) )
%   | | then return 0.3519113349988936;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(E, B) )
%   | | | then return -0.015407254262795699;  // std dev = 3.127, 48.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=25 */
%   | | | else return 0.10167528738907515;  // std dev = 2.598, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   else return -0.08518475138839683;  // std dev = 5.27e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D) )
%   | then if ( ta(C, E, F), tempadvisedby(E, G) )
%   | | then if ( tempadvisedby(H, B), ta(I, H, F) )
%   | | | then return 0.21610600182070994;  // std dev = 0.884, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09722872530691912;  // std dev = 2.222, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.21365811897442058;  // std dev = 1.779, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.01081559277247658;  // std dev = 1.455, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( tempadvisedby(K, B), publication(L, A) )
%   | | then if ( publication(L, B) )
%   | | | then return 0.22747775903219372;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.2706239617591804;  // std dev = 0.892, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.32763718234426953;  // std dev = 0.591, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.19763856880073433;  // std dev = 1.589, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.0787767547310916;  // std dev = 6.58e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( tempadvisedby(E, B), ta(F, E, G) )
%   | | | then return 0.2170638839364826;  // std dev = 0.122, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14824241355096807;  // std dev = 0.915, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( publication(C, H), professor(H) )
%   | | | then return -0.26718403216198106;  // std dev = 1.547, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.15260076029703795;  // std dev = 1.150, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( projectmember(I, B) )
%   | | then return 0.05026219026250829;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( publication(J, A) )
%   | | | then return 0.32081194563529863;  // std dev = 0.757, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15930519328441395;  // std dev = 2.609, 45.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=36 */
%   else return -0.07324622576333707;  // std dev = 3.49e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( publication(F, E) )
%   | | | then return -0.01928536978294529;  // std dev = 3.019, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.13074771214981395;  // std dev = 2.275, 49.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=38 */
%   | | else return -0.2717097325177271;  // std dev = 0.554, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( publication(G, A) )
%   | | then return 0.08934462064286827;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( projectmember(H, B) )
%   | | | then return -0.16379762188693475;  // std dev = 0.765, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.3489505126461701;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.06842697784420268;  // std dev = 5.48e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, A) )
%   | | then if ( publication(F, B) )
%   | | | then return 0.17129957301793727;  // std dev = 0.124, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.2011861818522534;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( ta(G, A, H) )
%   | | | then return 0.29865011331135544;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1448201990301981;  // std dev = 0.957, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then if ( publication(I, J), tempadvisedby(K, J) )
%   | | | then return 0.18555431472268938;  // std dev = 0.151, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0046791550541103915;  // std dev = 0.938, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( ta(L, A, M) )
%   | | | then return 0.04204486337577411;  // std dev = 2.377, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | | | else return -0.07453844894901664;  // std dev = 2.110, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   else return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
Inference time using transfer learning 0.9700007438659668
Refined model CLL: -0.210524


******************************************
Best model found
******************************************
Total revision time: 12.89534330368042
Best scored revision CLL: -0.210524


******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.4725372791290283
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6799880155592797;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else return 0.08547812764609468;  // std dev = 11.891, 805.000 (wgt'ed) examples reached here.  /* #neg=622 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6102783645825796;  // std dev = 0.351, 167.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=143 */
%   else return 0.07645816780786492;  // std dev = 11.878, 799.000 (wgt'ed) examples reached here.  /* #neg=616 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.5020446401659815;  // std dev = 4.189, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06573571262415417;  // std dev = 11.882, 801.000 (wgt'ed) examples reached here.  /* #neg=618 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.33331758428997765;  // std dev = 0.374, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else return 0.04290396111250275;  // std dev = 11.987, 852.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032240797041445536;  // std dev = 6.419, 343.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=143 */
%   else return 0.1269220274177983;  // std dev = 0.460, 600.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2626658975819073;  // std dev = 4.613, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else return 0.032492673633410345;  // std dev = 11.846, 808.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.2163263824341538;  // std dev = 0.340, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03254303110874664;  // std dev = 11.807, 789.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12403524196760744;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else return 0.023324718355155066;  // std dev = 11.834, 804.000 (wgt'ed) examples reached here.  /* #neg=621 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.035441064830659064;  // std dev = 5.427, 345.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08432187173316764;  // std dev = 11.349, 618.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.11043712631608653;  // std dev = 0.379, 173.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.002218410778753965;  // std dev = 11.860, 849.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=183 */
Inference time using transfer learning 1.2667183876037598
Parameter learned model CLL:-0.304591 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.047, 31, 143], 'false': [11.891, 622, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.351, 24, 143], 'false': [11.878, 616, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.189, 20, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.882, 618, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.374, 29, 143], 'false': [11.987, 669, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.419, 200, 143], 'false': [0.46, 417, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.613, 25, 143], 'false': [11.846, 625, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.34, 22, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.807, 606, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.047, 31, 143], 'false': [11.834, 621, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.427, 202, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.349, 435, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.379, 30, 143], 'true,false': [0.0, 0, 0], 'false': [11.86, 666, 183]}]
{'': [0.14641960628881479, 0.17565063076270268], 'true': [nan, 0.14641960628881479], 'true,false': [nan, 0.14641960628881479], 'true,false,false': [nan, 0.14641960628881479]}
{'': [0.1230592706801948, 0.17657867077275882], 'true': [nan, 0.1230592706801948], 'true,false': [nan, 0.1230592706801948]}
{'': [0.1076442470548397, 0.176268428509307], 'true': [nan, 0.1076442470548397], 'true,false': [nan, 0.1076442470548397], 'true,false,false': [0.1076442470548397, nan]}
{'': [0.1401771227690659, 0.16865453283078713], 'true': [nan, 0.1401771227690659], 'true,false': [nan, 0.1401771227690659]}
{'': [0.12014257365718498, 0.21197500000000388], 'true': [nan, 0.12014257365718498], 'true,false': [nan, 0.12014257365718498], 'true,false,false': [nan, 0.12014257365718498]}
{'': [0.1266652494331074, 0.173675537023139], 'true': [nan, 0.1266652494331074], 'true,false': [nan, 0.1266652494331074], 'true,false,false': [nan, 0.1266652494331074]}
{'': [0.11555555555555597, 0.17668619922667522], 'true': [nan, 0.11555555555555597], 'true,false': [0.11555555555555597, nan]}
{'': [0.14641960628881015, 0.17418975702519363], 'true': [nan, 0.14641960628881015], 'true,false': [nan, 0.14641960628881015], 'true,false,false': [nan, 0.14641960628881015]}
{'': [0.08537329244482947, 0.2084315204072029], 'false': [nan, 0.20843152040720123], 'true': [0.08537329244482947, nan], 'true,true': [nan, 0.08537329244482947], 'true,true,false': [nan, 0.08537329244482947]}
{'': [0.14333923619232208, 0.16567253797437065], 'true': [0.14333923619232208, nan], 'true,true': [nan, 0.14333923619232208]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.527543306350708
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6799880155592797;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7539909394328784;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.24600906056712196;  // std dev = 5.77e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839133;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.47642378834086824;  // std dev = 3.598, 167.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.11231637819360586;  // std dev = 0.000, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.47242731489561907;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2911929465114477;  // std dev = 4.71e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.10159632948783562;  // std dev = 3.25e-07, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09166879863429245;  // std dev = 4.224, 339.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.09269127618926108;  // std dev = 9.88e-08, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2651866506753288;  // std dev = 2.468, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.09052274128255476;  // std dev = 0.187, 645.000 (wgt'ed) examples reached here.  /* #neg=645 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2809638729724384;  // std dev = 2.70e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.30492905979637386;  // std dev = 4.71e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.08241160181269283;  // std dev = 0.156, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
%   | else if ( movie(G, A), movie(G, B) )
%   | | then if ( actor(A) )
%   | | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.07839024157279587;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.07868686795009273;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14593900696530399;  // std dev = 2.351, 173.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07325232762140958;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.07667797924741403;  // std dev = 0.147, 574.000 (wgt'ed) examples reached here.  /* #neg=574 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027733781798345156;  // std dev = 2.884, 338.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06843231888432871;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.06765204432217507;  // std dev = 0.001, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.19871864352196741;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.27784206417008966;  // std dev = 2.98e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419655246504165;  // std dev = 7.45e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.06912486811954273;  // std dev = 0.211, 599.000 (wgt'ed) examples reached here.  /* #neg=599 */
Inference time using transfer learning 1.2543132305145264
Refined model CLL: -0.076615


******************************************
Best model found
******************************************
Total revision time: 12.991462469100952
Best scored revision CLL: -0.076615


******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.529019594192505
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7043027812533558;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.0939736773675522;  // std dev = 11.826, 776.000 (wgt'ed) examples reached here.  /* #neg=593 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5906294967485455;  // std dev = 0.366, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.07058487527747044;  // std dev = 11.915, 816.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.479936948665058;  // std dev = 4.533, 167.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06063008101748577;  // std dev = 11.919, 818.000 (wgt'ed) examples reached here.  /* #neg=635 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3524362088520525;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.06613076290222389;  // std dev = 11.811, 770.000 (wgt'ed) examples reached here.  /* #neg=587 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03422120210181364;  // std dev = 6.258, 352.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=143 */
%   else return 0.13168610284825394;  // std dev = 0.464, 585.000 (wgt'ed) examples reached here.  /* #neg=402 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2517665309106427;  // std dev = 4.766, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.025060362480675367;  // std dev = 11.870, 821.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.22325956765698632;  // std dev = 0.334, 164.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.005720646467682755;  // std dev = 11.990, 880.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18497736332715772;  // std dev = 4.095, 162.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=143 */
%   else return 0.03920890117308515;  // std dev = 11.720, 757.000 (wgt'ed) examples reached here.  /* #neg=574 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04886199874290895;  // std dev = 5.404, 362.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09405846366388887;  // std dev = 11.261, 596.000 (wgt'ed) examples reached here.  /* #neg=413 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10574436151835934;  // std dev = 0.374, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0013459214018214218;  // std dev = 11.809, 825.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=183 */
Inference time using transfer learning 1.1457488536834717
Parameter learned model CLL:-0.308124 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.69, 26, 143], 'false': [11.826, 593, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.366, 27, 143], 'false': [11.915, 633, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.533, 24, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.919, 635, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.361, 26, 143], 'false': [11.811, 587, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.258, 209, 143], 'false': [0.464, 402, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.766, 27, 143], 'false': [11.87, 638, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.334, 21, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.99, 697, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.095, 19, 143], 'false': [11.72, 574, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.404, 219, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.261, 413, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.374, 29, 143], 'true,false': [0.0, 0, 0], 'false': [11.809, 642, 183]}]
{'': [0.13017751479290463, 0.18021143320225377], 'true': [nan, 0.13017751479290463], 'true,false': [nan, 0.13017751479290463], 'true,false,false': [nan, 0.13017751479290463]}
{'': [0.13359861591695318, 0.17397004757785506], 'true': [nan, 0.13359861591695318], 'true,false': [nan, 0.13359861591695318]}
{'': [0.12305927068019654, 0.1736673621032869], 'true': [nan, 0.12305927068019654], 'true,false': [nan, 0.12305927068019654], 'true,false,false': [0.12305927068019654, nan]}
{'': [0.13017751479289894, 0.1811789509192094], 'true': [nan, 0.13017751479289894], 'true,false': [nan, 0.13017751479289894]}
{'': [0.1112488648567323, 0.21496383957922474], 'true': [nan, 0.1112488648567323], 'true,false': [nan, 0.1112488648567323], 'true,false,false': [nan, 0.1112488648567323]}
{'': [0.13359861591695643, 0.17162850288434456], 'true': [nan, 0.13359861591695643], 'true,false': [nan, 0.13359861591695643], 'true,false,false': [nan, 0.13359861591695643]}
{'': [0.11165229030339154, 0.16336875893266897], 'true': [nan, 0.11165229030339154], 'true,false': [0.11165229030339154, nan]}
{'': [0.10352842554488664, 0.18143708284555707], 'true': [nan, 0.10352842554488664], 'true,false': [nan, 0.10352842554488664], 'true,false,false': [nan, 0.10352842554488664]}
{'': [0.0806812847094977, 0.21276913202108103], 'false': [nan, 0.2127691320210805], 'true': [0.0806812847094977, nan], 'true,true': [nan, 0.0806812847094977], 'true,true,false': [nan, 0.0806812847094977]}
{'': [0.1401771227690644, 0.1690215215146805], 'true': [0.1401771227690644, nan], 'true,true': [nan, 0.1401771227690644]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.460065603256226
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7043027812533558;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7494530261603102;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.25054697383968977;  // std dev = 2.98e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4759450248945106;  // std dev = 3.526, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.11231637819360599;  // std dev = 0.000, 563.000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.46762017115025867;  // std dev = 4.00e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2951920552414659;  // std dev = 3.65e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.10159632948783558;  // std dev = 3.31e-07, 575.000 (wgt'ed) examples reached here.  /* #neg=575 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08043645231092451;  // std dev = 4.301, 353.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.0926912761892609;  // std dev = 1.44e-07, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24316528553744443;  // std dev = 2.808, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.08959474392131175;  // std dev = 0.169, 641.000 (wgt'ed) examples reached here.  /* #neg=641 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2847699167108993;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3011369858913107;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.08241548146499125;  // std dev = 0.151, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16750017888817412;  // std dev = 2.062, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.07669012708427757;  // std dev = 0.139, 561.000 (wgt'ed) examples reached here.  /* #neg=561 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02450505384002484;  // std dev = 2.893, 348.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.06769800753454294;  // std dev = 7.60e-08, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.19818167555943314;  // std dev = 1.98e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.27867948910017076;  // std dev = 3.94e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.06871595292430123;  // std dev = 0.191, 563.000 (wgt'ed) examples reached here.  /* #neg=563 */
Inference time using transfer learning 1.191727876663208
Refined model CLL: -0.076394


******************************************
Best model found
******************************************
Total revision time: 12.793437480926514
Best scored revision CLL: -0.076394


******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.513119697570801
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6706489350995095;  // std dev = 5.178, 176.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=143 */
%   else return 0.09067752468019706;  // std dev = 11.851, 787.000 (wgt'ed) examples reached here.  /* #neg=604 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6018729666929723;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.07898188805884257;  // std dev = 11.853, 788.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4602900754282508;  // std dev = 4.910, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05537796712151755;  // std dev = 11.954, 835.000 (wgt'ed) examples reached here.  /* #neg=652 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3782364728823418;  // std dev = 0.345, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   else return 0.05896850804260986;  // std dev = 11.867, 794.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008433544839454545;  // std dev = 6.570, 390.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=143 */
%   else return 0.12648049893310032;  // std dev = 0.461, 597.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.298102608334884;  // std dev = 4.189, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   else return 0.0263700149448542;  // std dev = 11.869, 827.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.22763160832539187;  // std dev = 0.328, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02636142079509806;  // std dev = 11.838, 811.000 (wgt'ed) examples reached here.  /* #neg=628 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10834693267930356;  // std dev = 5.241, 177.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=143 */
%   else return 0.018148133473816386;  // std dev = 11.866, 826.000 (wgt'ed) examples reached here.  /* #neg=643 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02148993619918978;  // std dev = 5.286, 329.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08082038596986806;  // std dev = 11.384, 627.000 (wgt'ed) examples reached here.  /* #neg=444 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.09500429489043735;  // std dev = 0.390, 176.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.013103207070544512;  // std dev = 11.755, 796.000 (wgt'ed) examples reached here.  /* #neg=613 #pos=183 */
Inference time using transfer learning 1.153357982635498
Parameter learned model CLL:-0.305447 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.178, 33, 143], 'false': [11.851, 604, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.361, 26, 143], 'false': [11.853, 605, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.91, 29, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.954, 652, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.345, 23, 143], 'false': [11.867, 611, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.57, 247, 143], 'false': [0.461, 414, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.189, 20, 143], 'false': [11.869, 644, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.328, 20, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.838, 628, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.241, 34, 143], 'false': [11.866, 643, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.286, 186, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.384, 444, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.39, 33, 143], 'true,false': [0.0, 0, 0], 'false': [11.755, 613, 183]}]
{'': [0.15234375000000516, 0.17845904460830359], 'true': [nan, 0.15234375000000516], 'true,false': [nan, 0.15234375000000516], 'true,false,false': [nan, 0.15234375000000516]}
{'': [0.13017751479289752, 0.17830110283696962], 'true': [nan, 0.13017751479289752], 'true,false': [nan, 0.13017751479289752]}
{'': [0.14017712276906236, 0.17112983613611252], 'true': [nan, 0.14017712276906236], 'true,false': [nan, 0.14017712276906236], 'true,false,false': [0.14017712276906236, nan]}
{'': [0.11935694585571267, 0.17735820923932064], 'true': [nan, 0.11935694585571267], 'true,false': [nan, 0.11935694585571267]}
{'': [0.1106949073617539, 0.21257038963662392], 'true': [nan, 0.1106949073617539], 'true,false': [nan, 0.1106949073617539], 'true,false,false': [nan, 0.1106949073617539]}
{'': [0.10764424705483829, 0.17035423679221437], 'true': [nan, 0.10764424705483829], 'true,false': [nan, 0.10764424705483829], 'true,false,false': [nan, 0.10764424705483829]}
{'': [0.10764424705483808, 0.1727874849954575], 'true': [nan, 0.10764424705483808], 'true,false': [0.10764424705483808, nan]}
{'': [0.1551916754444761, 0.1704757958830417], 'true': [nan, 0.1551916754444761], 'true,false': [nan, 0.1551916754444761], 'true,false,false': [nan, 0.1551916754444761]}
{'': [0.08492795633937024, 0.20668024999427598], 'false': [nan, 0.20668024999427767], 'true': [0.08492795633937024, nan], 'true,true': [nan, 0.08492795633937024], 'true,true,false': [nan, 0.08492795633937024]}
{'': [0.15234374999999994, 0.1735828728736793], 'true': [0.15234374999999994, nan], 'true,true': [nan, 0.15234374999999994]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.426292657852173
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7689769605772168;  // std dev = 3.571, 157.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.737114185286828;  // std dev = 5.33e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2628858147131706;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.44389987378248263;  // std dev = 3.814, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.11231637819360596;  // std dev = 0.000, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.4625723871639529;  // std dev = 2.23e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.29943097369533583;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.10159632948783569;  // std dev = 3.11e-07, 566.000 (wgt'ed) examples reached here.  /* #neg=566 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06321038255568841;  // std dev = 4.439, 378.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926094;  // std dev = 1.05e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.09269127618926058;  // std dev = 1.74e-07, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24650764076537934;  // std dev = 2.765, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 1.97e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.08962672168958709;  // std dev = 0.151, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2844932653344659;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3015933518319446;  // std dev = 2.58e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.08283261695857447;  // std dev = 0.136, 550.000 (wgt'ed) examples reached here.  /* #neg=550 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15063162223433282;  // std dev = 2.319, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07628652474499117;  // std dev = 0.126, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00934388475240147;  // std dev = 3.129, 385.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.06769513516975578;  // std dev = 0.000, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2031454075687301;  // std dev = 1.79e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2726260238038666;  // std dev = 4.94e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.06833221770539073;  // std dev = 0.172, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
Inference time using transfer learning 1.2170183658599854
Refined model CLL: -0.075587


******************************************
Best model found
******************************************
Total revision time: 12.667221784591675
Best scored revision CLL: -0.075587


******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.700687885284424
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7043027812533558;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.07193398182848257;  // std dev = 11.995, 856.000 (wgt'ed) examples reached here.  /* #neg=673 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5906294967485455;  // std dev = 0.366, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.0779148755777871;  // std dev = 11.880, 800.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4407923806582144;  // std dev = 5.114, 175.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07443271225155353;  // std dev = 11.828, 777.000 (wgt'ed) examples reached here.  /* #neg=594 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.35232061543662996;  // std dev = 0.370, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   else return 0.06503139686378769;  // std dev = 11.821, 774.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0545035171694659;  // std dev = 6.001, 347.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=143 */
%   else return 0.12416300285417857;  // std dev = 0.460, 600.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2766362614879641;  // std dev = 4.451, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   else return 0.020598561976520838;  // std dev = 11.925, 839.000 (wgt'ed) examples reached here.  /* #neg=656 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.26079484661444824;  // std dev = 0.285, 157.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.027175734741598987;  // std dev = 11.848, 803.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12457729310562816;  // std dev = 4.910, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else return 0.024878550567532704;  // std dev = 11.830, 796.000 (wgt'ed) examples reached here.  /* #neg=613 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.024854723521018012;  // std dev = 5.210, 321.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06585369888633914;  // std dev = 11.497, 659.000 (wgt'ed) examples reached here.  /* #neg=476 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.15025143780798056;  // std dev = 0.328, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0010590586830393257;  // std dev = 11.870, 841.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=183 */
Inference time using transfer learning 1.1930828094482422
Parameter learned model CLL:-0.307025 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.69, 26, 143], 'false': [11.995, 673, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.366, 27, 143], 'false': [11.88, 617, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.114, 32, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.828, 594, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.37, 28, 143], 'false': [11.821, 591, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.001, 204, 143], 'false': [0.46, 417, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.451, 23, 143], 'false': [11.925, 656, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.285, 14, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.848, 620, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.91, 29, 143], 'false': [11.83, 613, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.21, 178, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.497, 476, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.328, 20, 143], 'true,false': [0.0, 0, 0], 'false': [11.87, 658, 183]}]
{'': [0.13017751479290463, 0.16808100052406377], 'true': [nan, 0.13017751479290463], 'true,false': [nan, 0.13017751479290463], 'true,false,false': [nan, 0.13017751479290463]}
{'': [0.13359861591695318, 0.17642343749999922], 'true': [nan, 0.13359861591695318], 'true,false': [nan, 0.13359861591695318]}
{'': [0.14942040816326543, 0.18005098313978646], 'true': [nan, 0.14942040816326543], 'true,false': [nan, 0.14942040816326543], 'true,false,false': [0.14942040816326543, nan]}
{'': [0.1369310215108929, 0.18053302085211206], 'true': [nan, 0.1369310215108929], 'true,false': [nan, 0.1369310215108929]}
{'': [0.10377472871606758, 0.21197499999999825], 'true': [nan, 0.10377472871606758], 'true,false': [nan, 0.10377472871606758], 'true,false,false': [nan, 0.10377472871606758]}
{'': [0.1193569458557115, 0.16949596921278354], 'true': [nan, 0.1193569458557115], 'true,false': [nan, 0.1193569458557115], 'true,false,false': [nan, 0.1193569458557115]}
{'': [0.08122033348208901, 0.17481430991711253], 'true': [nan, 0.08122033348208901], 'true,false': [0.08122033348208901, nan]}
{'': [0.14017712276906424, 0.1758296579760148], 'true': [nan, 0.14017712276906424], 'true,false': [nan, 0.14017712276906424], 'true,false,false': [nan, 0.14017712276906424]}
{'': [0.08454582288369142, 0.2005798089255574], 'false': [nan, 0.20057980892555627], 'true': [0.08454582288369142, nan], 'true,true': [nan, 0.08454582288369142], 'true,true,false': [nan, 0.08454582288369142]}
{'': [0.1076442470548381, 0.1675488600795149], 'true': [0.1076442470548381, nan], 'true,true': [nan, 0.1076442470548381]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.566503524780273
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7807295802608002;  // std dev = 3.327, 155.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 557.000 (wgt'ed) examples reached here.  /* #neg=557 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7348304617154886;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2651695382845129;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( actor(B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
%   | else if ( movie(G, A), movie(G, B) )
%   | | then if ( actor(A) )
%   | | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.12544463852839124;  // std dev = 4.34e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4825987719341858;  // std dev = 3.148, 161.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.11231637819360575;  // std dev = 0.000, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
%   | else if ( movie(G, A), movie(G, B) )
%   | | then if ( actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.11231637819360632;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.4506217684475527;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3096318091371116;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.10159632948783552;  // std dev = 3.53e-07, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0730045115047481;  // std dev = 4.265, 351.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.09269127618926086;  // std dev = 1.56e-07, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24243297858491195;  // std dev = 2.668, 167.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.08957911517346696;  // std dev = 0.155, 576.000 (wgt'ed) examples reached here.  /* #neg=576 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2760344618233995;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3108742008410638;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.08225802275468984;  // std dev = 0.142, 585.000 (wgt'ed) examples reached here.  /* #neg=585 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1446690933977844;  // std dev = 2.322, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 9.13e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.07650546694982893;  // std dev = 0.132, 563.000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026761038658358615;  // std dev = 2.829, 344.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.06772059026160092;  // std dev = 2.11e-08, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.19596879136275291;  // std dev = 2.06e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.28181435128630355;  // std dev = 2.11e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.06901883553816912;  // std dev = 0.198, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
Inference time using transfer learning 1.2122218608856201
Refined model CLL: -0.076367


******************************************
Best model found
******************************************
Total revision time: 13.135076999664307
Best scored revision CLL: -0.076367


******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.64404559135437
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6660585396192835;  // std dev = 5.241, 177.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=143 */
%   else return 0.07943067633288436;  // std dev = 11.938, 827.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6447643057321413;  // std dev = 0.315, 161.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=143 */
%   else return 0.07440734588709212;  // std dev = 11.900, 809.000 (wgt'ed) examples reached here.  /* #neg=626 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4324125718580794;  // std dev = 5.178, 176.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05938614858873268;  // std dev = 11.940, 828.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3553638069330527;  // std dev = 0.366, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.056647149679415844;  // std dev = 11.898, 808.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04061188794027784;  // std dev = 6.196, 357.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=143 */
%   else return 0.10399740580494847;  // std dev = 0.450, 649.000 (wgt'ed) examples reached here.  /* #neg=466 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3153721892722791;  // std dev = 3.793, 159.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=143 */
%   else return 0.025521620665345926;  // std dev = 11.937, 843.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.18811129152181344;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04517232531834701;  // std dev = 11.755, 760.000 (wgt'ed) examples reached here.  /* #neg=577 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14214404585837134;  // std dev = 4.766, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.03112861603299171;  // std dev = 11.805, 783.000 (wgt'ed) examples reached here.  /* #neg=600 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06982996859206524;  // std dev = 5.846, 389.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09540685263566379;  // std dev = 11.274, 599.000 (wgt'ed) examples reached here.  /* #neg=416 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.12715247341877312;  // std dev = 0.366, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.013062383795414308;  // std dev = 11.745, 790.000 (wgt'ed) examples reached here.  /* #neg=607 #pos=183 */
Inference time using transfer learning 1.0889432430267334
Parameter learned model CLL:-0.307056 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.241, 34, 143], 'false': [11.938, 644, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.315, 18, 143], 'false': [11.9, 626, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.178, 33, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.94, 645, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.366, 27, 143], 'false': [11.898, 625, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.196, 214, 143], 'false': [0.45, 466, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [3.793, 16, 143], 'false': [11.937, 660, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.361, 26, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.755, 577, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.766, 27, 143], 'false': [11.805, 600, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.846, 246, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.274, 416, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.366, 27, 143], 'true,false': [0.0, 0, 0], 'false': [11.745, 607, 183]}]
{'': [0.1551916754444815, 0.17231613223010045], 'true': [nan, 0.1551916754444815], 'true,false': [nan, 0.1551916754444815], 'true,false,false': [nan, 0.1551916754444815]}
{'': [0.09930172447050917, 0.17503640289022954], 'true': [nan, 0.09930172447050917], 'true,false': [nan, 0.09930172447050917]}
{'': [0.1523437499999982, 0.1721670867464821], 'true': [nan, 0.1523437499999982], 'true,false': [nan, 0.1523437499999982], 'true,false,false': [0.1523437499999982, nan]}
{'': [0.13359861591695424, 0.175189626017057], 'true': [nan, 0.13359861591695424], 'true,false': [nan, 0.13359861591695424]}
{'': [0.10752034603848286, 0.20246390678084086], 'true': [nan, 0.10752034603848286], 'true,false': [nan, 0.10752034603848286], 'true,false,false': [nan, 0.10752034603848286]}
{'': [0.09050274910011574, 0.16904356433401632], 'true': [nan, 0.09050274910011574], 'true,false': [nan, 0.09050274910011574], 'true,false,false': [nan, 0.09050274910011574]}
{'': [0.13017751479289943, 0.18181382301052895], 'true': [nan, 0.13017751479289943], 'true,false': [0.13017751479289943, nan]}
{'': [0.1335986159169553, 0.17799212477032342], 'true': [nan, 0.1335986159169553], 'true,false': [nan, 0.1335986159169553], 'true,false,false': [nan, 0.1335986159169553]}
{'': [0.08786914489626546, 0.21217332170200237], 'false': [nan, 0.21217332170200262], 'true': [0.08786914489626546, nan], 'true,true': [nan, 0.08786914489626546], 'true,true,false': [nan, 0.08786914489626546]}
{'': [0.13359861591695504, 0.1746082962503465], 'true': [0.13359861591695504, nan], 'true,true': [nan, 0.13359861591695504]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.505043268203735
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7093394112899858;  // std dev = 4.613, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7485060943570688;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2514939056429312;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 556.000 (wgt'ed) examples reached here.  /* #neg=556 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.45505089618870953;  // std dev = 3.832, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.11231637819360579;  // std dev = 0.000, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.47180583913397056;  // std dev = 1.19e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2917079045333304;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.10159632948783573;  // std dev = 2.98e-07, 558.000 (wgt'ed) examples reached here.  /* #neg=558 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09794184461950307;  // std dev = 4.184, 326.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.09269127618926105;  // std dev = 1.05e-07, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25406120430660867;  // std dev = 2.622, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.09012182838189961;  // std dev = 0.183, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.281566338831861;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.30432032843841017;  // std dev = 2.98e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.08301552904893866;  // std dev = 0.169, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16528160774390513;  // std dev = 2.062, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.07715717309254345;  // std dev = 0.162, 618.000 (wgt'ed) examples reached here.  /* #neg=618 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013753561466300787;  // std dev = 3.005, 370.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.06759746032201971;  // std dev = 0.000, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.1982438297713003;  // std dev = 8.43e-08, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.27846397446709575;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.06896994369677664;  // std dev = 0.204, 595.000 (wgt'ed) examples reached here.  /* #neg=595 */
Inference time using transfer learning 1.1761856079101562
Refined model CLL: -0.076429


******************************************
Best model found
******************************************
Total revision time: 12.94240689277649
Best scored revision CLL: -0.076429


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(25 unique tokens: ['course', 'level', 'assistant', 'teach', 'advise']...) from 46 documents (total 86 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(25 unique tokens: ['course', 'level', 'assistant', 'teach', 'advise']...) from 46 documents (total 86 corpus positions)", 'datetime': '2021-06-11T11:49:59.528790', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 4.960000% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.836261', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.838763', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.840679', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.846772', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.847583', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.848350', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.849098', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:02.851308', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:02.852114', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:02.852881', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:02.853658', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.857619', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.858472', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:02.859243', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.861061', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.861752', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.862427', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.863111', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.865037', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.865803', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.866566', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:02.867347', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 1.9505786895751953
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return 0.2646327256231987;  // std dev = 13.910, 802.000 (wgt'ed) examples reached here.  /* #neg=476 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839163;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return 0.22328165423572663;  // std dev = 13.980, 814.000 (wgt'ed) examples reached here.  /* #neg=488 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(E, F) )
%   | | | then return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2042093281839939;  // std dev = 13.794, 783.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783652;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return 0.15124277857364005;  // std dev = 13.991, 816.000 (wgt'ed) examples reached here.  /* #neg=490 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, F), genre(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12318162629330422;  // std dev = 13.697, 903.000 (wgt'ed) examples reached here.  /* #neg=577 #pos=326 */
%   else return -0.2775527276113286;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D), genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1035835290790456;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return 0.1109999190694978;  // std dev = 13.719, 808.000 (wgt'ed) examples reached here.  /* #neg=482 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(D, E) )
%   | | then return -0.09435267731270051;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08977240299083916;  // std dev = 13.686, 803.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(A, C), genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08659296775267052;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return 0.0721030096334167;  // std dev = 13.655, 799.000 (wgt'ed) examples reached here.  /* #neg=473 #pos=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, D) )
%   | | | then return 0.5148754072613616;  // std dev = 5.701, 304.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=267 */
%   | | | else return -0.15903212184994192;  // std dev = 7.151, 548.000 (wgt'ed) examples reached here.  /* #neg=489 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( female(B), genre(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.27661580577810124;  // std dev = 7.30e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E), genre(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06903628407086872;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02878712194358397;  // std dev = 12.151, 799.000 (wgt'ed) examples reached here.  /* #neg=473 #pos=326 */
Inference time using transfer learning 1.1045050621032715
Parameter learned model CLL:-0.317461 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 183, 0], 'false': [13.91, 476, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 199, 0], 'false': [13.98, 488, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 184, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [13.794, 457, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 196, 0], 'false': [13.991, 490, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)', 'true,false,false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [13.697, 577, 326], 'false': [0.0, 99, 0]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'genre(A, D), genre(B, D)', 'true,false,false': 'genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 197, 0], 'false': [13.719, 482, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(A, C)', 'true,false': 'genre(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 189, 0], 'true,false,false': [0.0, 0, 0], 'false': [13.686, 477, 326]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(A, C), genre(B, C)', 'true,false': 'genre(B, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 189, 0], 'false': [13.655, 473, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E)', 'true,true,false': 'genre(B, D)', 'false': 'female(B), genre(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [5.701, 37, 267], 'true,true,false,false': [7.151, 489, 59], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.3e-08, 116, 0]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E), genre(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 204, 0], 'true,false': [0.0, 0, 0], 'false': [12.151, 473, 326]}]
{'': [-2.0627094446587609e-16, 0.2412547185651847], 'true': [nan, -2.0627094446587609e-16], 'true,false': [nan, -2.0627094446587609e-16], 'true,false,false': [nan, -2.0627094446587609e-16]}
{'': [-3.3474061043974566e-17, 0.2400980386238379], 'true': [nan, -3.3474061043974566e-17], 'true,false': [nan, -3.3474061043974566e-17]}
{'': [-2.172175482962263e-17, 0.24300223947909141], 'true': [nan, -2.172175482962263e-17], 'true,false': [nan, -2.172175482962263e-17], 'true,false,false': [-2.172175482962263e-17, nan]}
{'': [-9.289621226455392e-17, 0.2399017204921175], 'true': [nan, -9.289621226455392e-17], 'true,false': [nan, -9.289621226455392e-17]}
{'': [0.20777267384321668, -9.868649107779169e-17], 'true': [nan, 0.20777267384321324], 'true,false': [nan, 0.20777267384321324], 'true,false,false': [nan, 0.20777267384321668]}
{'': [-4.283093902107203e-17, 0.232948762327557], 'true': [nan, -4.283093902107203e-17], 'true,false': [nan, -4.283093902107203e-17], 'true,false,false': [nan, -4.283093902107203e-17]}
{'': [-5.0518084718393364e-17, 0.23326773242398224], 'true': [nan, -5.0518084718393364e-17], 'true,false': [-5.0518084718393364e-17, nan]}
{'': [0.0, 0.23337276985315752], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}
{'': [0.20238057028892745, 3.062684205862501e-16], 'true': [0.20238057028892745, nan], 'true,true': [nan, 0.20238057028892745], 'true,true,false': [0.10689707409971969, 0.09330490115392241], 'false': [nan, 4.594026308793751e-17]}
{'': [-1.5782582212808597e-17, 0.18480386957798597], 'true': [-1.5782582212808597e-17, nan], 'true,true': [nan, -1.5782582212808597e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- female(B), actor(A).;true;true
1;;workedunder(A, B) :- female(B), actor(A).;true;true
2;;workedunder(A, B) :- female(B), actor(A).;true;true
3;;workedunder(A, B) :- female(B), actor(A).;true;true
4;;workedunder(A, B) :- actor(A).;true;true
5;;workedunder(A, B) :- female(B), actor(A).;true;true
6;;workedunder(A, B) :- female(B), actor(A).;true;true
7;;workedunder(A, B) :- actor(A), female(B).;true;true
8;;workedunder(A, B) :- actor(A).;true;true
9;;workedunder(A, B) :- actor(A), female(B).;true;true


Refining candidate
***************************
Model training time 2.966214656829834
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.14185106490048782;  // std dev = 1.15e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.12544463852839205;  // std dev = 0.000, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.11231637819360639;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.11231637819360667;  // std dev = 0.000, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.10159632948783652;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783631;  // std dev = 1.83e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.09269127618926125;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926094;  // std dev = 1.05e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.08518475138839678;  // std dev = 6.66e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.07877675473109146;  // std dev = 8.30e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.07877675473109146;  // std dev = 5.58e-08, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07324622576333714;  // std dev = 5.16e-08, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06842697784420268;  // std dev = 2.24e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06842697784420261;  // std dev = 7.45e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.06419184008202623;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.0641918400820261;  // std dev = 7.88e-08, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
Inference time using transfer learning 0.9668900966644287
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.40081787109375
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.464419', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.465632', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.466451', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.469402', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.470196', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.470934', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.471712', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:13.473868', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:13.474700', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:13.475527', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:13.476304', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.480201', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.481042', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:13.481788', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.483683', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.484400', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.485067', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.485731', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.487738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.488502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.489253', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:13.489998', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.0669145584106445
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return 0.2671828121384037;  // std dev = 13.880, 797.000 (wgt'ed) examples reached here.  /* #neg=471 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1254446385283914;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return 0.23717639828652684;  // std dev = 13.813, 786.000 (wgt'ed) examples reached here.  /* #neg=460 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(E, F) )
%   | | | then return -0.1123163781936066;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.18217715664252399;  // std dev = 14.020, 821.000 (wgt'ed) examples reached here.  /* #neg=495 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783655;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   else return 0.15375828546751477;  // std dev = 13.974, 813.000 (wgt'ed) examples reached here.  /* #neg=487 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, F), genre(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13096553644921893;  // std dev = 13.592, 890.000 (wgt'ed) examples reached here.  /* #neg=564 #pos=326 */
%   else return -0.27693719310036263;  // std dev = 1.12e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D), genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10430852958114305;  // std dev = 1.13e-07, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else return 0.11041680423349287;  // std dev = 13.736, 803.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(D, E) )
%   | | then return -0.09495759252371423;  // std dev = 6.59e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09896125111323188;  // std dev = 13.568, 783.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(A, C), genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08710480790500705;  // std dev = 8.02e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return 0.05700234391764733;  // std dev = 13.816, 820.000 (wgt'ed) examples reached here.  /* #neg=494 #pos=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, D) )
%   | | | then return 0.5095473062870878;  // std dev = 5.833, 306.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=267 */
%   | | | else return -0.16975846433278888;  // std dev = 7.245, 589.000 (wgt'ed) examples reached here.  /* #neg=530 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( female(B), genre(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.27482825497198843;  // std dev = 2.98e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E), genre(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0687294362251455;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04902251109318082;  // std dev = 11.950, 756.000 (wgt'ed) examples reached here.  /* #neg=430 #pos=326 */
Inference time using transfer learning 1.0992379188537598
Parameter learned model CLL:-0.319285 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 161, 0], 'false': [13.88, 471, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 162, 0], 'false': [13.813, 460, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 193, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [14.02, 495, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 207, 0], 'false': [13.974, 487, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)', 'true,false,false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [13.592, 564, 326], 'false': [1.12e-08, 92, 0]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'genre(A, D), genre(B, D)', 'true,false,false': 'genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.13e-07, 204, 0], 'false': [13.736, 477, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(A, C)', 'true,false': 'genre(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [6.59e-09, 198, 0], 'true,false,false': [0.0, 0, 0], 'false': [13.568, 457, 326]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(A, C), genre(B, C)', 'true,false': 'genre(B, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.02e-08, 178, 0], 'false': [13.816, 494, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E)', 'true,true,false': 'genre(B, D)', 'false': 'female(B), genre(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [5.833, 39, 267], 'true,true,false,false': [7.245, 530, 59], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 89, 0]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E), genre(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 180, 0], 'true,false': [0.0, 0, 0], 'false': [11.95, 430, 326]}]
{'': [-1.5170749404815803e-16, 0.24172516447342698], 'true': [nan, -1.5170749404815803e-16], 'true,false': [nan, -1.5170749404815803e-16], 'true,false,false': [nan, -1.5170749404815803e-16]}
{'': [0.0, 0.24273384741888887], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}
{'': [-2.0708823257256806e-17, 0.23940680166339487], 'true': [nan, -2.0708823257256806e-17], 'true,false': [nan, -2.0708823257256806e-17], 'true,false,false': [-2.0708823257256806e-17, nan]}
{'': [-8.366898156595383e-17, 0.2401958336926497], 'true': [nan, -8.366898156595383e-17], 'true,false': [nan, -8.366898156595383e-17]}
{'': [0.20757408023451732, 1.2550347234893073e-16], 'true': [nan, 0.20757408023451568], 'true,false': [nan, 0.20757408023451568], 'true,false,false': [nan, 0.20757408023451732]}
{'': [6.313032885123439e-17, 0.23496836186385836], 'true': [nan, 6.313032885123439e-17], 'true,false': [nan, 6.313032885123439e-17], 'true,false,false': [nan, 6.313032885123439e-17]}
{'': [4.485749594445077e-17, 0.23511456162626707], 'true': [nan, 4.485749594445077e-17], 'true,false': [4.485749594445077e-17, nan]}
{'': [3.617580642037027e-17, 0.23277835929428659], 'true': [nan, 3.617580642037027e-17], 'true,false': [nan, 3.617580642037027e-17], 'true,false,false': [nan, 3.617580642037027e-17]}
{'': [0.20050610523121495, -1.29733926473052e-16], 'true': [0.20050610523121495, nan], 'true,true': [nan, 0.20050610523121495], 'true,true,false': [0.11120722798923548, 0.08912740888858436], 'false': [nan, 9.979532805619384e-18]}
{'': [-2.837236618486511e-17, 0.18889785984517973], 'true': [-2.837236618486511e-17, nan], 'true,true': [nan, -2.837236618486511e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- female(B), actor(A).;true;true
1;;workedunder(A, B) :- female(B), actor(A).;true;true
2;;workedunder(A, B) :- female(B), actor(A).;true;true
3;;workedunder(A, B) :- female(B), actor(A).;true;true
4;;workedunder(A, B) :- actor(A).;true;true
5;;workedunder(A, B) :- female(B), actor(A).;true;true
6;;workedunder(A, B) :- female(B), actor(A).;true;true
7;;workedunder(A, B) :- actor(A), female(B).;true;true
8;;workedunder(A, B) :- actor(A).;true;true
9;;workedunder(A, B) :- actor(A), female(B).;true;true


Refining candidate
***************************
Model training time 2.93794584274292
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.1418510649004878;  // std dev = 1.26e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1254446385283916;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.12544463852839213;  // std dev = 0.000, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.11231637819360651;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.11231637819360615;  // std dev = 0.000, 440.000 (wgt'ed) examples reached here.  /* #neg=440 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1015963294878365;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783624;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.10159632948783638;  // std dev = 5.16e-08, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.09269127618926132;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.0926912761892609;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.08518475138839678;  // std dev = 6.83e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.07877675473109144;  // std dev = 7.74e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.07877675473109147;  // std dev = 4.71e-08, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.07324622576333666;  // std dev = 1.16e-07, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.07324622576333713;  // std dev = 6.32e-08, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.06842697784420358;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.39e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06842697784420261;  // std dev = 1.05e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.06419184008202623;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06419184008202596;  // std dev = 1.27e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
Inference time using transfer learning 0.936229944229126
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.659370422363281
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.486291', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.487539', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.488353', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.491338', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.492136', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.492889', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.493634', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:24.495901', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:24.496720', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:24.497478', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:24.498244', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.502422', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.503346', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:24.504114', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.506073', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.506797', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.507483', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.508150', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.510290', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.511093', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.511857', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:24.512622', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.2120158672332764
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return 0.2566819424344712;  // std dev = 14.003, 818.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839155;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return 0.23712779764584108;  // std dev = 13.831, 789.000 (wgt'ed) examples reached here.  /* #neg=463 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(E, F) )
%   | | | then return -0.1123163781936067;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19901148624927067;  // std dev = 13.844, 791.000 (wgt'ed) examples reached here.  /* #neg=465 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783652;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return 0.1668893978061682;  // std dev = 13.806, 785.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, F), genre(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12269092735930288;  // std dev = 13.711, 882.000 (wgt'ed) examples reached here.  /* #neg=556 #pos=326 */
%   else return -0.2808418937136861;  // std dev = 2.07e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D), genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10353797459148961;  // std dev = 1.02e-07, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return 0.1254676247450302;  // std dev = 13.504, 774.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(D, E) )
%   | | then return -0.09431464647656394;  // std dev = 1.32e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.10826903626237609;  // std dev = 13.394, 754.000 (wgt'ed) examples reached here.  /* #neg=428 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(A, C), genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08656077267304416;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return 0.0731065424149139;  // std dev = 13.514, 775.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, D) )
%   | | | then return 0.47530197618855563;  // std dev = 6.322, 314.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=267 */
%   | | | else return -0.17561750301872342;  // std dev = 7.256, 580.000 (wgt'ed) examples reached here.  /* #neg=521 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( female(B), genre(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.28612316833609935;  // std dev = 5.96e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E), genre(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0679541762967726;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.0313764326967784;  // std dev = 12.104, 782.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=326 */
Inference time using transfer learning 1.1220216751098633
Parameter learned model CLL:-0.324527 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 174, 0], 'false': [14.003, 492, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 184, 0], 'false': [13.831, 463, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 210, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [13.844, 465, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 191, 0], 'false': [13.806, 459, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)', 'true,false,false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [13.711, 556, 326], 'false': [2.07e-08, 85, 0]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'genre(A, D), genre(B, D)', 'true,false,false': 'genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.02e-07, 166, 0], 'false': [13.504, 448, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(A, C)', 'true,false': 'genre(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.32e-09, 192, 0], 'true,false,false': [0.0, 0, 0], 'false': [13.394, 428, 326]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(A, C), genre(B, C)', 'true,false': 'genre(B, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 180, 0], 'false': [13.514, 449, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E)', 'true,true,false': 'genre(B, D)', 'false': 'female(B), genre(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [6.322, 47, 267], 'true,true,false,false': [7.256, 521, 59], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 98, 0]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E), genre(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 183, 0], 'true,false': [0.0, 0, 0], 'false': [12.104, 456, 326]}]
{'': [-1.8376105235175005e-16, 0.23970444939951507], 'true': [nan, -1.8376105235175005e-16], 'true,false': [nan, -1.8376105235175005e-16], 'true,false,false': [nan, -1.8376105235175005e-16]}
{'': [-1.9308226515220113e-17, 0.24246250327297442], 'true': [nan, -1.9308226515220113e-17], 'true,false': [nan, -1.9308226515220113e-17]}
{'': [-4.017949993881519e-17, 0.24228001169924196], 'true': [nan, -4.017949993881519e-17], 'true,false': [nan, -4.017949993881519e-17], 'true,false,false': [-4.017949993881519e-17, nan]}
{'': [-9.416551308339024e-17, 0.24282364396121103], 'true': [nan, -9.416551308339024e-17], 'true,false': [nan, -9.416551308339024e-17]}
{'': [0.21315752549725098, 4.3886463091065013e-16], 'true': [nan, 0.2131575254972508], 'true,false': [nan, 0.2131575254972508], 'true,false,false': [nan, 0.21315752549725098]}
{'': [6.286805079202694e-17, 0.2356168435201976], 'true': [nan, 6.286805079202694e-17], 'true,false': [nan, 6.286805079202694e-17], 'true,false,false': [nan, 6.286805079202694e-17]}
{'': [0.0, 0.23793438771299735], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [-3.454027187722709e-17, 0.2356639473728597], 'true': [nan, -3.454027187722709e-17], 'true,false': [nan, -3.454027187722709e-17], 'true,false,false': [nan, -3.454027187722709e-17]}
{'': [0.2001481205270613, -3.2626962356331133e-16], 'true': [0.2001481205270613, nan], 'true,true': [nan, 0.2001481205270613], 'true,true,false': [0.12727696863970656, 0.09078406915414143], 'false': [nan, 3.6252180395923476e-17]}
{'': [-3.033396242145237e-17, 0.1873549561803709], 'true': [-3.033396242145237e-17, nan], 'true,true': [nan, -3.033396242145237e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- female(B), actor(A).;true;true
1;;workedunder(A, B) :- female(B), actor(A).;true;true
2;;workedunder(A, B) :- female(B), actor(A).;true;true
3;;workedunder(A, B) :- female(B), actor(A).;true;true
4;;workedunder(A, B) :- actor(A).;true;true
5;;workedunder(A, B) :- female(B), actor(A).;true;true
6;;workedunder(A, B) :- female(B), actor(A).;true;true
7;;workedunder(A, B) :- actor(A), female(B).;true;true
8;;workedunder(A, B) :- actor(A).;true;true
9;;workedunder(A, B) :- actor(A), female(B).;true;true


Refining candidate
***************************
Model training time 3.1513373851776123
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.1418510649004878;  // std dev = 1.33e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.12544463852839208;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1123163781936063;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.11231637819360653;  // std dev = 0.000, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783626;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.09269127618926143;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926092;  // std dev = 3.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.08518475138839675;  // std dev = 7.15e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.08518475138839678;  // std dev = 1.10e-07, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.07877675473109144;  // std dev = 7.45e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.07877675473109141;  // std dev = 7.60e-08, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.07324622576333666;  // std dev = 1.15e-07, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.07324622576333716;  // std dev = 5.16e-08, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420261;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.06419184008202623;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.06419184008202596;  // std dev = 1.24e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
Inference time using transfer learning 0.9405152797698975
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.924129247665405
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.624967', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.626135', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.626928', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.630005', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.630802', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.631578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.632316', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:35.634444', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:35.635281', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:35.636057', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:35.636818', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.640675', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.641505', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:35.642297', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.644179', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.644877', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.645542', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.646209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.648146', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.648917', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.649685', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:35.650425', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.153271198272705
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return 0.26769667379297524;  // std dev = 13.874, 796.000 (wgt'ed) examples reached here.  /* #neg=470 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   else return 0.23447960444055743;  // std dev = 13.844, 791.000 (wgt'ed) examples reached here.  /* #neg=465 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(E, F) )
%   | | | then return -0.1123163781936065;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.19501622983903566;  // std dev = 13.874, 796.000 (wgt'ed) examples reached here.  /* #neg=470 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783648;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return 0.18200270655378337;  // std dev = 13.617, 756.000 (wgt'ed) examples reached here.  /* #neg=430 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, F), genre(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12277722739880637;  // std dev = 13.616, 888.000 (wgt'ed) examples reached here.  /* #neg=562 #pos=326 */
%   else return -0.28479394211478826;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D), genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10354598505075292;  // std dev = 7.30e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return 0.10598642268222272;  // std dev = 13.690, 803.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(D, E) )
%   | | then return -0.09432133413746292;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09163140156616773;  // std dev = 13.591, 785.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(A, C), genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08656643426158052;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return 0.07033282043155129;  // std dev = 13.606, 785.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, D) )
%   | | | then return 0.5020500702015127;  // std dev = 5.833, 306.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=267 */
%   | | | else return -0.1741680675930653;  // std dev = 7.271, 595.000 (wgt'ed) examples reached here.  /* #neg=536 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( female(B), genre(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.28137566361249167;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E), genre(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06805021761226142;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02825269313200918;  // std dev = 12.055, 800.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=326 */
Inference time using transfer learning 1.1308913230895996
Parameter learned model CLL:-0.320494 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 177, 0], 'false': [13.874, 470, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 203, 0], 'false': [13.844, 465, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 185, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [13.874, 470, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 168, 0], 'false': [13.617, 430, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)', 'true,false,false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [13.616, 562, 326], 'false': [0.0, 104, 0]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'genre(A, D), genre(B, D)', 'true,false,false': 'genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [7.3e-08, 189, 0], 'false': [13.69, 477, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(A, C)', 'true,false': 'genre(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.0, 0, 0], 'false': [13.591, 459, 326]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(A, C), genre(B, C)', 'true,false': 'genre(B, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 200, 0], 'false': [13.606, 459, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E)', 'true,true,false': 'genre(B, D)', 'false': 'female(B), genre(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [5.833, 39, 267], 'true,true,false,false': [7.271, 536, 59], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 93, 0]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E), genre(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 189, 0], 'true,false': [0.0, 0, 0], 'false': [12.055, 474, 326]}]
{'': [-1.9068237259098733e-16, 0.2418183884245364], 'true': [nan, -1.9068237259098733e-16], 'true,false': [nan, -1.9068237259098733e-16], 'true,false,false': [nan, -1.9068237259098733e-16]}
{'': [-3.500210520985715e-17, 0.24228001169925822], 'true': [nan, -3.500210520985715e-17], 'true,false': [nan, -3.500210520985715e-17]}
{'': [-2.400482215405744e-17, 0.24181838842453374], 'true': [nan, -2.400482215405744e-17], 'true,false': [nan, -2.400482215405744e-17], 'true,false,false': [-2.400482215405744e-17, nan]}
{'': [-7.930164461608261e-17, 0.24526888944878567], 'true': [nan, -7.930164461608261e-17], 'true,false': [nan, -7.930164461608261e-17]}
{'': [0.20877419021129734, -1.1956247957501685e-16], 'true': [nan, 0.20877419021129212], 'true,false': [nan, 0.20877419021129212], 'true,false,false': [nan, 0.20877419021129734]}
{'': [2.819614030794048e-17, 0.2333964564449784], 'true': [nan, 2.819614030794048e-17], 'true,false': [nan, 2.819614030794048e-17], 'true,false,false': [nan, 2.819614030794048e-17]}
{'': [-2.452818310218369e-17, 0.23531389229768065], 'true': [nan, -2.452818310218369e-17], 'true,false': [-2.452818310218369e-17, nan]}
{'': [-1.5543122344752193e-17, 0.23582368925987363], 'true': [nan, -1.5543122344752193e-17], 'true,false': [nan, -1.5543122344752193e-17], 'true,false,false': [nan, -1.5543122344752193e-17]}
{'': [0.19899649655149515, 3.3426069558606863e-16], 'true': [0.19899649655149515, nan], 'true,true': [nan, 0.19899649655149515], 'true,true,false': [0.11120722798923803, 0.08884568856362099], 'false': [nan, -8.59527502935605e-17]}
{'': [-8.22387425648264e-18, 0.18166059129673726], 'true': [-8.22387425648264e-18, nan], 'true,true': [nan, -8.22387425648264e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- female(B), actor(A).;true;true
1;;workedunder(A, B) :- female(B), actor(A).;true;true
2;;workedunder(A, B) :- female(B), actor(A).;true;true
3;;workedunder(A, B) :- female(B), actor(A).;true;true
4;;workedunder(A, B) :- actor(A).;true;true
5;;workedunder(A, B) :- female(B), actor(A).;true;true
6;;workedunder(A, B) :- female(B), actor(A).;true;true
7;;workedunder(A, B) :- actor(A), female(B).;true;true
8;;workedunder(A, B) :- actor(A).;true;true
9;;workedunder(A, B) :- actor(A), female(B).;true;true


Refining candidate
***************************
Model training time 2.9326038360595703
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.14185106490048774;  // std dev = 1.63e-07, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.1254446385283921;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.11231637819360614;  // std dev = 0.000, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.1015963294878365;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.09269127618926146;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926085;  // std dev = 5.67e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.08518475138839675;  // std dev = 7.88e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.08518475138839678;  // std dev = 1.19e-07, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.07877675473109146;  // std dev = 7.88e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.07877675473109146;  // std dev = 6.32e-08, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.07324622576333667;  // std dev = 1.12e-07, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return -0.0732462257633372;  // std dev = 2.11e-08, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06842697784420267;  // std dev = 2.89e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06842697784420261;  // std dev = 1.05e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.06419184008202623;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.06419184008202601;  // std dev = 1.10e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
Inference time using transfer learning 0.9551129341125488
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.647489547729492
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.509687', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.510892', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.511710', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.514627', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.515438', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.516200', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.516933', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:46.519170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:46.519953', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:46.520728', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:46.521485', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.525415', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.526253', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:46.527035', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.528878', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.529572', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.530242', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.530906', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.532872', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.533642', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.534394', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:46.535186', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.247495651245117
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return 0.26211423869306427;  // std dev = 13.939, 807.000 (wgt'ed) examples reached here.  /* #neg=481 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else return 0.25437409813172407;  // std dev = 13.617, 756.000 (wgt'ed) examples reached here.  /* #neg=430 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(E, F) )
%   | | | then return -0.11231637819360644;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1920808232981431;  // std dev = 13.880, 797.000 (wgt'ed) examples reached here.  /* #neg=471 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return 0.15513485284106832;  // std dev = 13.910, 802.000 (wgt'ed) examples reached here.  /* #neg=476 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(B, C), genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D), genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, F), genre(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1262121061736778;  // std dev = 13.616, 885.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=326 */
%   else return -0.28164914277325337;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, D), genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10386525943816592;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return 0.12603527673252748;  // std dev = 13.490, 768.000 (wgt'ed) examples reached here.  /* #neg=442 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then if ( genre(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(D, E) )
%   | | then return -0.09458782068755964;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.08088827982798967;  // std dev = 13.690, 804.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(A, C), genre(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08679198719471286;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return 0.07845081273973811;  // std dev = 13.500, 774.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=326 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, D) )
%   | | | then return 0.4867692468841129;  // std dev = 6.146, 311.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=267 */
%   | | | else return -0.17261603316836563;  // std dev = 7.263, 595.000 (wgt'ed) examples reached here.  /* #neg=536 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( female(B), genre(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2824034541084353;  // std dev = 6.66e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then if ( genre(C, D) )
%   | then if ( genre(A, E), genre(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06831550966411769;  // std dev = 4.17e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.026162299545272327;  // std dev = 12.120, 805.000 (wgt'ed) examples reached here.  /* #neg=479 #pos=326 */
Inference time using transfer learning 1.104295253753662
Parameter learned model CLL:-0.321191 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 179, 0], 'false': [13.939, 481, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 204, 0], 'false': [13.617, 430, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(A, D)', 'true,false,false': 'genre(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 178, 0], 'true,false,false,false': [0.0, 0, 0], 'false': [13.88, 471, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 185, 0], 'false': [13.91, 476, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(B, C), genre(A, C)', 'true,false': 'genre(B, D), genre(A, E)', 'true,false,false': 'genre(A, F), genre(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [13.616, 559, 326], 'false': [0.0, 83, 0]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(B, C)', 'true,false': 'genre(A, D), genre(B, D)', 'true,false,false': 'genre(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 192, 0], 'false': [13.49, 442, 326]}]
['workedunder(A, B)', {'': 'female(B), actor(A)', 'true': 'genre(A, C)', 'true,false': 'genre(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 188, 0], 'true,false,false': [0.0, 0, 0], 'false': [13.69, 478, 326]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(A, C), genre(B, C)', 'true,false': 'genre(B, D)', 'true,false,false': 'genre(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 197, 0], 'false': [13.5, 448, 326]}]
['workedunder(A, B)', {'': 'actor(A)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E)', 'true,true,false': 'genre(B, D)', 'false': 'female(B), genre(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [6.146, 44, 267], 'true,true,false,false': [7.263, 536, 59], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.66e-08, 90, 0]}]
['workedunder(A, B)', {'': 'actor(A), female(B)', 'true': 'genre(C, D)', 'true,true': 'genre(A, E), genre(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [4.17e-09, 182, 0], 'true,false': [0.0, 0, 0], 'false': [12.12, 479, 326]}]
{'': [-1.9847562451399445e-16, 0.24077733708612387], 'true': [nan, -1.9847562451399445e-16], 'true,false': [nan, -1.9847562451399445e-16], 'true,false,false': [nan, -1.9847562451399445e-16]}
{'': [-3.700743415417188e-17, 0.24526888944878], 'true': [nan, -3.700743415417188e-17], 'true,false': [nan, -3.700743415417188e-17]}
{'': [-1.247441600702423e-17, 0.2417251644734244], 'true': [nan, -1.247441600702423e-17], 'true,false': [nan, -1.247441600702423e-17], 'true,false,false': [-1.247441600702423e-17, nan]}
{'': [-9.121832418541827e-17, 0.24125471856517988], 'true': [nan, -9.121832418541827e-17], 'true,false': [nan, -9.121832418541827e-17]}
{'': [0.2094745563403731, -1.1771039297230576e-16], 'true': [nan, 0.2094745563403657], 'true,false': [nan, 0.2094745563403657], 'true,false,false': [nan, 0.2094745563403731]}
{'': [-9.25185853854297e-18, 0.23695338771509], 'true': [nan, -9.25185853854297e-18], 'true,false': [nan, -9.25185853854297e-18], 'true,false,false': [nan, -9.25185853854297e-18]}
{'': [1.1810883240693154e-18, 0.23311750768404907], 'true': [nan, 1.1810883240693154e-18], 'true,false': [1.1810883240693154e-18, nan]}
{'': [-4.5085198969549504e-17, 0.23544768992732024], 'true': [nan, -4.5085198969549504e-17], 'true,false': [nan, -4.5085198969549504e-17], 'true,false,false': [nan, -4.5085198969549504e-17]}
{'': [0.19793490404258718, -2.2697892947892088e-16], 'true': [0.19793490404258718, nan], 'true,true': [nan, 0.19793490404258718], 'true,true,false': [0.12146276403262636, 0.08865731152709572], 'false': [nan, 4.9343245538895844e-17]}
{'': [1.6470341574109465e-17, 0.18248804834537324], 'true': [1.6470341574109465e-17, nan], 'true,true': [nan, 1.6470341574109465e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- female(B), actor(A).;true;true
1;;workedunder(A, B) :- female(B), actor(A).;true;true
2;;workedunder(A, B) :- female(B), actor(A).;true;true
3;;workedunder(A, B) :- female(B), actor(A).;true;true
4;;workedunder(A, B) :- actor(A).;true;true
5;;workedunder(A, B) :- female(B), actor(A).;true;true
6;;workedunder(A, B) :- female(B), actor(A).;true;true
7;;workedunder(A, B) :- actor(A), female(B).;true;true
8;;workedunder(A, B) :- actor(A).;true;true
9;;workedunder(A, B) :- actor(A), female(B).;true;true


Refining candidate
***************************
Model training time 3.0548224449157715
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.14185106490048835;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else if ( actor(B) )
%   | then return -0.14185106490048738;  // std dev = 2.92e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then if ( female(A) )
%   | | | then return 0.8581489350995101;  // std dev = 8.68e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return 0.8367585607679585;  // std dev = 1.978, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | | else return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.7218854832576126;  // std dev = 0.038, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.12706163623146363;  // std dev = 0.300, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.5577329999231937;  // std dev = 0.047, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.11486876007671216;  // std dev = 0.390, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.10159632948783649;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.4192748717293903;  // std dev = 0.047, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1015963294878363;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.1044572699050184;  // std dev = 0.424, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.09232463051763028;  // std dev = 0.006, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.32190853514258455;  // std dev = 0.042, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.10225991687337871;  // std dev = 0.305, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.08521332781165339;  // std dev = 9.31e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.25599004718677465;  // std dev = 0.036, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.05e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.08477637367901558;  // std dev = 0.111, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B), actor(A) )
%   then return -0.07880129224093026;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.2103360878561601;  // std dev = 0.032, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109173;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.08080156529192535;  // std dev = 0.343, 435.000 (wgt'ed) examples reached here.  /* #neg=435 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.07326751152693722;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.1775211291203635;  // std dev = 0.028, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.0739328924615375;  // std dev = 0.240, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A) )
%   then if ( actor(B) )
%   | then return -0.06806596014977676;  // std dev = 0.006, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
%   | else if ( movie(C, A), movie(C, B) )
%   | | then return 0.15306626387583377;  // std dev = 0.025, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07392385532681371;  // std dev = 0.221, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), female(B) )
%   then return -0.06423109361974728;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(C, A), movie(C, B) )
%   | | then return 0.13425892273711906;  // std dev = 0.022, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.06475973350588851;  // std dev = 0.213, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
Inference time using transfer learning 0.9394092559814453
Refined model CLL: -0.064733


******************************************
Best model found
******************************************
Total revision time: 8.809670209884644
Best scored revision CLL: -0.064733


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.687799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.688657', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.689176', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.691937', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.692481', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.692982', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.693481', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:57.695534', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:57.696146', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:57.696717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:50:57.697273', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.700979', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.701562', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:50:57.702077', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.703732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.704218', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.704682', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.705118', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.706870', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.707473', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.708013', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:50:57.708551', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.5004072189331055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7867203636709384;  // std dev = 3.196, 154.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=143 */
%   else return 0.08104783887539382;  // std dev = 11.925, 821.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5699187985902274;  // std dev = 0.370, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   else return 0.07504096524312087;  // std dev = 11.893, 806.000 (wgt'ed) examples reached here.  /* #neg=623 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4810107785969328;  // std dev = 4.279, 164.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06539562470039786;  // std dev = 11.891, 805.000 (wgt'ed) examples reached here.  /* #neg=622 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.33674247264570734;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.04607603444480045;  // std dev = 11.970, 843.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035785639212118366;  // std dev = 5.961, 359.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=143 */
%   else return 0.10477037461385617;  // std dev = 0.450, 648.000 (wgt'ed) examples reached here.  /* #neg=465 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24502327437287552;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.04222268364166355;  // std dev = 11.807, 785.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.16840798460320602;  // std dev = 0.379, 173.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.030471198306239483;  // std dev = 11.848, 802.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12683712123462976;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else return 0.02419217955515145;  // std dev = 11.858, 807.000 (wgt'ed) examples reached here.  /* #neg=624 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021472952792896047;  // std dev = 5.166, 336.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08756657366892322;  // std dev = 11.346, 617.000 (wgt'ed) examples reached here.  /* #neg=434 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14457880266466286;  // std dev = 0.345, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.005763612489352426;  // std dev = 11.825, 822.000 (wgt'ed) examples reached here.  /* #neg=639 #pos=183 */
Inference time using transfer learning 1.1673121452331543
Parameter learned model CLL:-0.306451 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [3.196, 11, 143], 'false': [11.925, 638, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.37, 28, 143], 'false': [11.893, 623, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.279, 21, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.891, 622, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.361, 26, 143], 'false': [11.97, 660, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.961, 216, 143], 'false': [0.45, 465, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.69, 26, 143], 'false': [11.807, 602, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.379, 30, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.848, 619, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.047, 31, 143], 'false': [11.858, 624, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.166, 193, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.346, 434, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.345, 23, 143], 'true,false': [0.0, 0, 0], 'false': [11.825, 639, 183]}]
{'': [0.06632653061225022, 0.17321498247139328], 'true': [nan, 0.06632653061225022], 'true,false': [nan, 0.06632653061225022], 'true,false,false': [nan, 0.06632653061225022]}
{'': [0.13693102151089367, 0.17549673971269897], 'true': [nan, 0.13693102151089367], 'true,false': [nan, 0.13693102151089367]}
{'': [0.11165229030338998, 0.17565063076270243], 'true': [nan, 0.11165229030338998], 'true,false': [nan, 0.11165229030338998], 'true,false,false': [0.11165229030338998, nan]}
{'': [0.13017751479289816, 0.16995732070262495], 'true': [nan, 0.13017751479289816], 'true,false': [nan, 0.13017751479289816]}
{'': [0.0989742868250895, 0.20265346364883166], 'true': [nan, 0.0989742868250895], 'true,false': [nan, 0.0989742868250895], 'true,false,false': [nan, 0.0989742868250895]}
{'': [0.13017751479289918, 0.17760070907921877], 'true': [nan, 0.13017751479289918], 'true,false': [nan, 0.13017751479289918], 'true,false,false': [nan, 0.13017751479289918]}
{'': [0.14333923619232158, 0.17502626364991672], 'true': [nan, 0.14333923619232158], 'true,false': [0.14333923619232158, nan]}
{'': [0.14641960628880937, 0.1742374502782635], 'true': [nan, 0.14641960628880937], 'true,false': [nan, 0.14641960628880937], 'true,false,false': [nan, 0.14641960628880937]}
{'': [0.07944038972203174, 0.20862698948484987], 'false': [nan, 0.20862698948485364], 'true': [0.07944038972203174, nan], 'true,true': [nan, 0.07944038972203174], 'true,true,false': [nan, 0.07944038972203174]}
{'': [0.11935694585571213, 0.17009934357991188], 'true': [0.11935694585571213, nan], 'true,true': [nan, 0.11935694585571213]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.68241810798645
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7248156017661763;  // std dev = 4.367, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7455815941524448;  // std dev = 7.44e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2544184058475529;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 565.000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4445145558044458;  // std dev = 3.938, 173.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.11231637819360575;  // std dev = 0.000, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.4713036323912688;  // std dev = 2.86e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.29212447957654164;  // std dev = 3.94e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.10159632948783548;  // std dev = 3.64e-07, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08971878960755646;  // std dev = 4.306, 331.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.09269127618926075;  // std dev = 1.70e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24948188056902112;  // std dev = 2.718, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.08518475138839679;  // std dev = 2.24e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.09008902125504194;  // std dev = 0.171, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.28385562239379214;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3019536327409756;  // std dev = 4.94e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.0830184685760791;  // std dev = 0.164, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1595685451768097;  // std dev = 2.178, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 9.13e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.07666224627597742;  // std dev = 0.149, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021827974931335276;  // std dev = 2.985, 344.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.06763054459421633;  // std dev = 0.000, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.19930110446277663;  // std dev = 2.11e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2771647622548834;  // std dev = 3.65e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.06950784020351716;  // std dev = 0.207, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
Inference time using transfer learning 1.217869758605957
Refined model CLL: -0.076393


******************************************
Best model found
******************************************
Total revision time: 13.206482410430908
Best scored revision CLL: -0.076393


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.428389', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.429189', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.429719', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.432536', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.433060', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.433557', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.434037', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:13.435932', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:13.436533', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:13.437110', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:13.437658', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.441199', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.441786', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:13.442307', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.443910', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.444399', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.444843', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.445298', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.447007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.447568', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.448098', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:13.448624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.6592206954956055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7354495485964422;  // std dev = 4.189, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   else return 0.08604432737846476;  // std dev = 11.887, 803.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5897130278529832;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.0752440417987832;  // std dev = 11.887, 803.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.5102780687287978;  // std dev = 3.898, 160.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06272901069425277;  // std dev = 11.906, 812.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3962040571208042;  // std dev = 0.293, 158.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=143 */
%   else return 0.05045298814082142;  // std dev = 11.933, 825.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03121697746910643;  // std dev = 6.085, 335.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=143 */
%   else return 0.1331059890767502;  // std dev = 0.463, 587.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24259459897174;  // std dev = 4.533, 167.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=143 */
%   else return 0.03181596389381063;  // std dev = 11.836, 806.000 (wgt'ed) examples reached here.  /* #neg=623 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.14310361271455282;  // std dev = 0.390, 176.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02249714313326352;  // std dev = 11.873, 819.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14588888654234922;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.010892211841682787;  // std dev = 11.931, 851.000 (wgt'ed) examples reached here.  /* #neg=668 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.038579028578700054;  // std dev = 5.349, 352.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0719186022523786;  // std dev = 11.466, 650.000 (wgt'ed) examples reached here.  /* #neg=467 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.14437256811455917;  // std dev = 0.340, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.01029205889660221;  // std dev = 11.795, 819.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=183 */
Inference time using transfer learning 1.1374220848083496
Parameter learned model CLL:-0.303847 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.189, 20, 143], 'false': [11.887, 620, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.361, 26, 143], 'false': [11.887, 620, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [3.898, 17, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.906, 629, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.293, 15, 143], 'false': [11.933, 642, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.085, 192, 143], 'false': [0.463, 404, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.533, 24, 143], 'false': [11.836, 623, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.39, 33, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.873, 636, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.69, 26, 143], 'false': [11.931, 668, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.349, 209, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.466, 467, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.34, 22, 143], 'true,false': [0.0, 0, 0], 'false': [11.795, 636, 183]}]
{'': [0.10764424705484361, 0.17595908245697625], 'true': [nan, 0.10764424705484361], 'true,false': [nan, 0.10764424705484361], 'true,false,false': [nan, 0.10764424705484361]}
{'': [0.1301775147928967, 0.17595908245697475], 'true': [nan, 0.1301775147928967], 'true,false': [nan, 0.1301775147928967]}
{'': [0.09496093750000183, 0.17457806547113577], 'true': [nan, 0.09496093750000183], 'true,false': [nan, 0.09496093750000183], 'true,false,false': [0.09496093750000183, nan]}
{'': [0.08592373017144632, 0.17261487603305792], 'true': [nan, 0.08592373017144632], 'true,false': [nan, 0.08592373017144632]}
{'': [0.11054451333182533, 0.21456370131961874], 'true': [nan, 0.11054451333182533], 'true,false': [nan, 0.11054451333182533], 'true,false,false': [nan, 0.11054451333182533]}
{'': [0.12305927068019604, 0.17382106367542208], 'true': [nan, 0.12305927068019604], 'true,false': [nan, 0.12305927068019604], 'true,false,false': [nan, 0.12305927068019604]}
{'': [0.1523437499999995, 0.17212942928645217], 'true': [nan, 0.1523437499999995], 'true,false': [0.1523437499999995, nan]}
{'': [0.13017751479289924, 0.16726544440214489], 'true': [nan, 0.13017751479289924], 'true,false': [nan, 0.13017751479289924], 'true,false,false': [nan, 0.13017751479289924]}
{'': [0.08127525041766957, 0.20227455621301846], 'false': [nan, 0.20227455621301785], 'true': [0.08127525041766957, nan], 'true,true': [nan, 0.08127525041766957], 'true,true,false': [nan, 0.08127525041766957]}
{'': [0.11555555555555555, 0.1698816345639438], 'true': [0.11555555555555555, nan], 'true,true': [nan, 0.11555555555555555]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.662996768951416
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6799880155592797;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 558.000 (wgt'ed) examples reached here.  /* #neg=558 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7539909394328784;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.246009060567122;  // std dev = 4.47e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 571.000 (wgt'ed) examples reached here.  /* #neg=571 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.46838015218069756;  // std dev = 3.723, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.11231637819360626;  // std dev = 0.000, 667.000 (wgt'ed) examples reached here.  /* #neg=667 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.47443254265463974;  // std dev = 3.04e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2895355357796862;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.10159632948783551;  // std dev = 3.58e-07, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08397176937104066;  // std dev = 4.349, 347.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.09269127618926072;  // std dev = 1.72e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24690862540351233;  // std dev = 2.810, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.09014725147515487;  // std dev = 0.172, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.28747644504041076;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2981137907907856;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.08277845565597486;  // std dev = 0.161, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18218685478312652;  // std dev = 1.840, 160.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.07653915910741672;  // std dev = 0.143, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019031767054000955;  // std dev = 2.989, 352.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.06764977120227653;  // std dev = 0.000, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.19839322890894096;  // std dev = 9.88e-08, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.27824349839536217;  // std dev = 5.16e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(B) )
%   | then return -0.06911402677951016;  // std dev = 0.194, 558.000 (wgt'ed) examples reached here.  /* #neg=558 */
%   | else if ( movie(G, A), movie(G, B) )
%   | | then if ( actor(A) )
%   | | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06350566699165239;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06399971161672155;  // std dev = 0.002, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
Inference time using transfer learning 1.3616750240325928
Refined model CLL: -0.076286


******************************************
Best model found
******************************************
Total revision time: 12.885627746582031
Best scored revision CLL: -0.076286


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.962804', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.963682', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.964207', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.966936', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.967489', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.967990', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.968474', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:28.970392', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:28.971038', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:28.971635', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:28.972193', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.975958', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.976549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:28.977051', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.978668', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.979167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.979621', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.980055', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.981836', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.982403', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.982950', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:28.983535', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.7094898223876953
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6799880155592797;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else return 0.09674085165752927;  // std dev = 11.804, 767.000 (wgt'ed) examples reached here.  /* #neg=584 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6051814156233551;  // std dev = 0.356, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else return 0.06804729786375945;  // std dev = 11.931, 824.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.47209203422229207;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05978126346658234;  // std dev = 11.925, 821.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3568368537360338;  // std dev = 0.361, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.052546611938338095;  // std dev = 11.917, 817.000 (wgt'ed) examples reached here.  /* #neg=634 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03321565553326349;  // std dev = 6.440, 343.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=143 */
%   else return 0.10869861712055796;  // std dev = 0.453, 636.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24542927524992317;  // std dev = 4.910, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else return 0.035872998266224594;  // std dev = 11.839, 800.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.23330628673006717;  // std dev = 0.328, 163.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.016079717859413995;  // std dev = 11.947, 853.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1871970716149237;  // std dev = 4.095, 162.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=143 */
%   else return 0.015700278129853595;  // std dev = 11.930, 844.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03557753595318051;  // std dev = 5.236, 347.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09907131583271393;  // std dev = 11.274, 599.000 (wgt'ed) examples reached here.  /* #neg=416 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.145305754931851;  // std dev = 0.334, 164.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.02065138405723585;  // std dev = 11.713, 774.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=183 */
Inference time using transfer learning 1.1385998725891113
Parameter learned model CLL:-0.307954 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.047, 31, 143], 'false': [11.804, 584, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.356, 25, 143], 'false': [11.931, 641, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.69, 26, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.925, 638, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.361, 26, 143], 'false': [11.917, 634, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.44, 200, 143], 'false': [0.453, 453, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.91, 29, 143], 'false': [11.839, 617, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.328, 20, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.947, 670, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.095, 19, 143], 'false': [11.93, 661, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.236, 204, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.274, 416, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.334, 21, 143], 'true,false': [0.0, 0, 0], 'false': [11.713, 591, 183]}]
{'': [0.14641960628881479, 0.18166581391119055], 'true': [nan, 0.14641960628881479], 'true,false': [nan, 0.14641960628881479], 'true,false,false': [nan, 0.14641960628881479]}
{'': [0.12666524943310484, 0.17276457488924488], 'true': [nan, 0.12666524943310484], 'true,false': [nan, 0.12666524943310484]}
{'': [0.1301775147929012, 0.17321498247139316], 'true': [nan, 0.1301775147929012], 'true,false': [nan, 0.1301775147929012], 'true,false,false': [0.1301775147929012, nan]}
{'': [0.13017751479289968, 0.17381859476335978], 'true': [nan, 0.13017751479289968], 'true,false': [nan, 0.13017751479289968]}
{'': [0.12091808311723971, 0.2049439302242809], 'true': [nan, 0.12091808311723971], 'true,false': [nan, 0.12091808311723971], 'true,false,false': [nan, 0.12091808311723971]}
{'': [0.1401771227690647, 0.17521324030806584], 'true': [nan, 0.1401771227690647], 'true,false': [nan, 0.1401771227690647], 'true,false,false': [nan, 0.1401771227690647]}
{'': [0.10764424705483783, 0.1673250898803098], 'true': [nan, 0.10764424705483783], 'true,false': [0.10764424705483783, nan]}
{'': [0.10352842554488642, 0.16864314533923], 'true': [nan, 0.10352842554488642], 'true,false': [nan, 0.10352842554488642], 'true,false,false': [nan, 0.10352842554488642]}
{'': [0.07901982655499708, 0.2121733217020026], 'false': [nan, 0.21217332170200298], 'true': [0.07901982655499708, nan], 'true,true': [nan, 0.07901982655499708], 'true,true,false': [nan, 0.07901982655499708]}
{'': [0.1116522903033908, 0.17725227623533785], 'true': [0.1116522903033908, nan], 'true,true': [nan, 0.1116522903033908]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.5041656494140625
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.69440624504103;  // std dev = 4.839, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 584.000 (wgt'ed) examples reached here.  /* #neg=584 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7513067388835422;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.24869326111645854;  // std dev = 2.11e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4578371293252366;  // std dev = 3.836, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.11231637819360583;  // std dev = 0.000, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.47413557876792056;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.289780592736622;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.10159632948783548;  // std dev = 3.63e-07, 611.000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07271362445895775;  // std dev = 4.445, 367.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.09269127618926074;  // std dev = 1.71e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24917535089697765;  // std dev = 2.812, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.0851847513883968;  // std dev = 2.04e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.08971030879111182;  // std dev = 0.151, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2891379112022044;  // std dev = 3.13e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2964330798217358;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109179;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.08269585657824716;  // std dev = 0.151, 625.000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.158522047990099;  // std dev = 2.249, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.07689153258314727;  // std dev = 0.143, 630.000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030804130155361188;  // std dev = 2.870, 339.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.06766031581642194;  // std dev = 0.000, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.20132416872700168;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.27459189836353143;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.06901657025367709;  // std dev = 0.200, 599.000 (wgt'ed) examples reached here.  /* #neg=599 */
Inference time using transfer learning 1.1980862617492676
Refined model CLL: -0.076212


******************************************
Best model found
******************************************
Total revision time: 12.964909791946411
Best scored revision CLL: -0.076212


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.594449', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.595347', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.595895', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.598676', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.599266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.599778', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.600274', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:44.602199', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:44.602808', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:44.603405', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:51:44.603972', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.607624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.608211', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:51:44.608741', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.610337', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.610824', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.611306', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.611754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.613498', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.614059', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.614622', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:51:44.615191', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.723170042037964
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6895442839367188;  // std dev = 4.910, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else return 0.08604432737846476;  // std dev = 11.887, 803.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5693569183811938;  // std dev = 0.387, 175.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=143 */
%   else return 0.06997638674610668;  // std dev = 11.927, 822.000 (wgt'ed) examples reached here.  /* #neg=639 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4935137721725969;  // std dev = 4.451, 166.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06289139732395449;  // std dev = 11.910, 814.000 (wgt'ed) examples reached here.  /* #neg=631 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3481513220682674;  // std dev = 0.370, 171.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=143 */
%   else return 0.05064027558414699;  // std dev = 11.938, 827.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0599622788490407;  // std dev = 6.088, 326.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=143 */
%   else return 0.12305863799852863;  // std dev = 0.459, 608.000 (wgt'ed) examples reached here.  /* #neg=425 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.256985464918953;  // std dev = 4.690, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else return 0.023796023144948063;  // std dev = 11.929, 838.000 (wgt'ed) examples reached here.  /* #neg=655 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.2554103462076377;  // std dev = 0.293, 158.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.038373732011266495;  // std dev = 11.787, 773.000 (wgt'ed) examples reached here.  /* #neg=590 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16659738206629512;  // std dev = 4.279, 164.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=143 */
%   else return 0.0178247465928461;  // std dev = 11.895, 824.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04593643043774709;  // std dev = 5.334, 352.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09849013158739034;  // std dev = 11.253, 594.000 (wgt'ed) examples reached here.  /* #neg=411 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10159983701147207;  // std dev = 0.374, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.012175711488998747;  // std dev = 11.751, 793.000 (wgt'ed) examples reached here.  /* #neg=610 #pos=183 */
Inference time using transfer learning 1.1309962272644043
Parameter learned model CLL:-0.309321 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.91, 29, 143], 'false': [11.887, 620, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.387, 32, 143], 'false': [11.927, 639, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.451, 23, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.91, 631, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.37, 28, 143], 'false': [11.938, 644, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.088, 183, 143], 'false': [0.459, 425, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.69, 26, 143], 'false': [11.929, 655, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.293, 15, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.787, 590, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.279, 21, 143], 'false': [11.895, 641, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.334, 209, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.253, 411, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.374, 29, 143], 'true,false': [0.0, 0, 0], 'false': [11.751, 610, 183]}]
{'': [0.14017712276906957, 0.17595908245697625], 'true': [nan, 0.14017712276906957], 'true,false': [nan, 0.14017712276906957], 'true,false,false': [nan, 0.14017712276906957]}
{'': [0.14942040816326754, 0.173064627843784], 'true': [nan, 0.14942040816326754], 'true,false': [nan, 0.14942040816326754]}
{'': [0.11935694585571334, 0.17427361469130492], 'true': [nan, 0.11935694585571334], 'true,false': [nan, 0.11935694585571334], 'true,false,false': [0.11935694585571334, nan]}
{'': [0.13693102151089398, 0.17231613223009923], 'true': [nan, 0.13693102151089398], 'true,false': [nan, 0.13693102151089398]}
{'': [0.11370666503815798, 0.2103937629847637], 'true': [nan, 0.11370666503815798], 'true,false': [nan, 0.11370666503815798], 'true,false,false': [nan, 0.11370666503815798]}
{'': [0.13017751479289885, 0.1698025017084652], 'true': [nan, 0.13017751479289885], 'true,false': [nan, 0.13017751479289885], 'true,false,false': [nan, 0.13017751479289885]}
{'': [0.08592373017144686, 0.1797320215107838], 'true': [nan, 0.08592373017144686], 'true,false': [0.08592373017144686, nan]}
{'': [0.11165229030339084, 0.17172135910739741], 'true': [nan, 0.11165229030339084], 'true,false': [nan, 0.11165229030339084], 'true,false,false': [nan, 0.11165229030339084]}
{'': [0.08083332693955049, 0.21316702377308425], 'false': [nan, 0.21316702377308325], 'true': [0.08083332693955049, nan], 'true,true': [nan, 0.08083332693955049], 'true,true,false': [nan, 0.08083332693955049]}
{'': [0.14017712276906436, 0.1741302668791224], 'true': [0.14017712276906436, nan], 'true,true': [nan, 0.14017712276906436]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.491408109664917
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6752917922423667;  // std dev = 5.114, 175.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.1418510649004885;  // std dev = 0.000, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7548609959329734;  // std dev = 4.46e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2451390040670249;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.46530560022729683;  // std dev = 3.784, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.11231637819360578;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.4761535081898968;  // std dev = 3.37e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.28811808969242036;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.10159632948783552;  // std dev = 3.53e-07, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08563256625149551;  // std dev = 4.329, 348.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.0926912761892606;  // std dev = 1.55e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.26272095426161424;  // std dev = 2.575, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.08518475138839682;  // std dev = 1.75e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.08991147092128327;  // std dev = 0.169, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.28496494085451024;  // std dev = 1.84e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.3006286283802935;  // std dev = 3.94e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return -0.08268599323038459;  // std dev = 0.158, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1579816375433684;  // std dev = 2.214, 169.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.07655095919831265;  // std dev = 0.145, 597.000 (wgt'ed) examples reached here.  /* #neg=597 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01891551835022581;  // std dev = 2.953, 368.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(A), director(B) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06766973302397615;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.2007156533869602;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2752718122800743;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.06889778745944587;  // std dev = 0.197, 583.000 (wgt'ed) examples reached here.  /* #neg=583 */
Inference time using transfer learning 1.2326359748840332
Refined model CLL: -0.076265


******************************************
Best model found
******************************************
Total revision time: 12.901269912719727
Best scored revision CLL: -0.076265


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.010167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.011036', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['professor', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.011615', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.014377', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.014954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.015480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['publication', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.015970', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:52:00.017993', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:52:00.018603', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:52:00.019225', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['advise', 'by', 'temporary', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T11:52:00.019801', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'female']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.023628', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'actor']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.024214', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['student', 'director']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T11:52:00.024717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.026343', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.026833', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.027323', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['have', 'position', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.027786', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'genre']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.029555', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.030118', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.030663', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['member', 'project', 'movie']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T11:52:00.031211', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
0;true,true,false;tempadvisedby(G, B).;false;false
0;true,false;publication(H, A).;true;true
0;true,false,true;tempadvisedby(I, B), publication(J, I).;false;false
0;true,false,false;publication(K, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, B), publication(C, A).;true;true
1;true,true;tempadvisedby(D, B), publication(E, D).;true;false
1;true,true,true;publication(E, B).;false;false
1;true,false;publication(F, B), publication(G, A).;true;true
1;true,false,true;ta(H, A, I).;false;false
1;true,false,false;tempadvisedby(J, B), ta(K, J, L).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(E, D).;false;true
2;true,true,false;tempadvisedby(F, B).;false;false
2;true,false;publication(G, A).;true;true
2;true,false,true;publication(G, H), professor(H).;false;false
2;true,false,false;tempadvisedby(I, B), publication(J, I).;false;false
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true;publication(C, B), publication(C, A).;false;true
3;true,false;publication(D, B), publication(E, A).;true;true
3;true,false,true;tempadvisedby(F, B), ta(G, F, H).;false;false
3;true,false,false;tempadvisedby(I, B), ta(J, I, K).;false;false
4;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
4;true;hasposition(D, C), projectmember(E, D).;true;true
4;true,true;publication(F, B), publication(F, A).;false;true
4;true,true,false;publication(G, B), publication(H, A).;false;false
4;true,false;publication(I, A), publication(J, B).;false;true
4;true,false,false;tempadvisedby(K, B).;false;false
4;false;ta(L, A, M).;true;false
4;false,true;ta(L, N, M), tempadvisedby(N, P).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;ta(C, A, D), publication(E, B).;true;true
5;true,true;ta(F, G, D), publication(E, G).;true;true
5;true,true,true;publication(E, A).;false;false
5;true,true,false;ta(C, H, I), publication(E, H).;false;false
5;true,false;publication(J, A), publication(J, B).;true;true
5;true,false,true;publication(J, K), tempadvisedby(L, K).;false;false
5;true,false,false;publication(M, A).;false;false
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(D, B), tempadvisedby(E, B).;true;true
6;true,true,true;publication(C, B).;false;false
6;true,true,false;publication(C, F), ta(G, F, H).;false;false
6;true,false;tempadvisedby(I, B), publication(J, I).;true;true
6;true,false,true;ta(K, I, L).;false;false
6;true,false,false;publication(M, B).;false;false
7;;advisedby(A, B) :- student(A), professor(B).;true;false
7;true;publication(C, A), publication(C, B).;true;true
7;true,true;ta(D, A, E).;true;false
7;true,true,true;tempadvisedby(F, B), ta(G, F, H).;false;false
7;true,false;ta(I, A, J), publication(K, B).;true;true
7;true,false,true;tempadvisedby(L, B), ta(M, L, N).;false;false
7;true,false,false;tempadvisedby(P, B), publication(Q, B).;false;false
8;;advisedby(A, B) :- tempadvisedby(C, B), student(A).;true;true
8;true;publication(D, C).;true;true
8;true,true;ta(E, C, F), publication(G, A).;false;true
8;true,true,false;publication(D, B), ta(H, A, I).;false;false
8;true,false;ta(J, A, K).;true;true
8;true,false,true;projectmember(L, B), ta(M, C, N).;false;false
8;true,false,false;ta(P, C, Q), publication(R, A).;false;false
8;false;professor(B), publication(S, B).;false;false
9;;advisedby(A, B) :- student(A), professor(B).;true;false
9;true;tempadvisedby(C, B), publication(D, C).;true;true
9;true,true;publication(E, A), publication(E, B).;true;true
9;true,true,true;publication(D, A).;false;false
9;true,true,false;ta(F, C, G).;false;false
9;true,false;publication(H, B).;true;true
9;true,false,true;publication(H, I), tempadvisedby(J, I).;false;false
9;true,false,false;tempadvisedby(K, B), ta(L, K, M).;false;false


Model training time 2.484483242034912
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7463476928634849;  // std dev = 3.998, 161.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=143 */
%   else return 0.09799166118076923;  // std dev = 11.794, 763.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=183 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6523036508920309;  // std dev = 0.285, 157.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=143 */
%   else return 0.06548472867264618;  // std dev = 11.950, 833.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.42085072655701217;  // std dev = 5.047, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.06900051274004348;  // std dev = 11.856, 789.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3363011075299968;  // std dev = 0.366, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.061445564755735586;  // std dev = 11.840, 782.000 (wgt'ed) examples reached here.  /* #neg=599 #pos=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04221084088633059;  // std dev = 6.042, 343.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=143 */
%   else return 0.12246588068347988;  // std dev = 0.460, 602.000 (wgt'ed) examples reached here.  /* #neg=419 #pos=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23318493544559685;  // std dev = 4.910, 172.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=143 */
%   else return 0.029883429698248722;  // std dev = 11.848, 804.000 (wgt'ed) examples reached here.  /* #neg=621 #pos=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then return 0.19842920450570875;  // std dev = 0.356, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03646357736982073;  // std dev = 11.756, 767.000 (wgt'ed) examples reached here.  /* #neg=584 #pos=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14490017039623632;  // std dev = 4.766, 170.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=143 */
%   else return 0.0138930637104172;  // std dev = 11.887, 823.000 (wgt'ed) examples reached here.  /* #neg=640 #pos=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06421326243261458;  // std dev = 5.717, 390.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07189328743954039;  // std dev = 11.435, 641.000 (wgt'ed) examples reached here.  /* #neg=458 #pos=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.17513412695808916;  // std dev = 0.315, 161.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.010437623076651383;  // std dev = 11.764, 803.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=183 */
Inference time using transfer learning 1.1440696716308594
Parameter learned model CLL:-0.307782 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [3.998, 18, 143], 'false': [11.794, 580, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.285, 14, 143], 'false': [11.95, 650, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(A, D)', 'true,false,false': 'movie(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.047, 31, 143], 'true,false,false,false': [0.0, 0, 0], 'false': [11.856, 606, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.366, 27, 143], 'false': [11.84, 599, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(B, C), movie(A, C)', 'true,false': 'movie(B, D), movie(A, E)', 'true,false,false': 'movie(A, F), movie(B, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [6.042, 200, 143], 'false': [0.46, 419, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(B, C)', 'true,false': 'movie(A, D), movie(B, D)', 'true,false,false': 'movie(A, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.91, 29, 143], 'false': [11.848, 621, 183]}]
['workedunder(A, B)', {'': 'director(B), female(A)', 'true': 'movie(A, C)', 'true,false': 'movie(D, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.356, 25, 143], 'true,false,false': [0.0, 0, 0], 'false': [11.756, 584, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(A, C), movie(B, C)', 'true,false': 'movie(B, D)', 'true,false,false': 'movie(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [4.766, 27, 143], 'false': [11.887, 640, 183]}]
['workedunder(A, B)', {'': 'female(A)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E)', 'true,true,false': 'movie(B, D)', 'false': 'director(B), movie(B, F)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [5.717, 247, 143], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.435, 458, 183]}]
['workedunder(A, B)', {'': 'female(A), director(B)', 'true': 'movie(C, D)', 'true,true': 'movie(A, E), movie(B, E)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false': [0.315, 18, 143], 'true,false': [0.0, 0, 0], 'false': [11.764, 620, 183]}]
{'': [0.09930172447051182, 0.18231819282716938], 'true': [nan, 0.09930172447051182], 'true,false': [nan, 0.09930172447051182], 'true,false,false': [nan, 0.09930172447051182]}
{'': [0.0812203334820875, 0.17142511266211163], 'true': [nan, 0.0812203334820875], 'true,false': [nan, 0.0812203334820875]}
{'': [0.14641960628881118, 0.1781433879338996], 'true': [nan, 0.14641960628881118], 'true,false': [nan, 0.14641960628881118], 'true,false,false': [0.14641960628881118, nan]}
{'': [0.13359861591695457, 0.17925216344738729], 'true': [nan, 0.13359861591695457], 'true,false': [nan, 0.13359861591695457]}
{'': [0.10643096529289198, 0.21157879052108064], 'true': [nan, 0.10643096529289198], 'true,false': [nan, 0.10643096529289198], 'true,false,false': [nan, 0.10643096529289198]}
{'': [0.14017712276906436, 0.17460176470552938], 'true': [nan, 0.14017712276906436], 'true,false': [nan, 0.14017712276906436], 'true,false,false': [nan, 0.14017712276906436]}
{'': [0.126665249433106, 0.180200943742831], 'true': [nan, 0.126665249433106], 'true,false': [0.126665249433106, nan]}
{'': [0.1335986159169549, 0.17169384142391098], 'true': [nan, 0.1335986159169549], 'true,false': [nan, 0.1335986159169549], 'true,false,false': [nan, 0.1335986159169549]}
{'': [0.08380142299932108, 0.2039860689591408], 'false': [nan, 0.20398606895913807], 'true': [0.08380142299932108, nan], 'true,true': [nan, 0.08380142299932108], 'true,true,false': [nan, 0.08380142299932108]}
{'': [0.09930172447050667, 0.17233040336377398], 'true': [0.09930172447050667, nan], 'true,true': [nan, 0.09930172447050667]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;workedunder(A, B) :- director(B), female(A).;true;true
0;true;movie(B, C), movie(A, C).;true;true
0;true,false;movie(A, D).;true;true
0;true,false,false;movie(B, E).;true;true
1;;workedunder(A, B) :- director(B), female(A).;true;true
1;true;movie(B, C), movie(A, C).;true;true
1;true,false;movie(B, D), movie(A, E).;true;true
2;;workedunder(A, B) :- director(B), female(A).;true;true
2;true;movie(B, C), movie(A, C).;true;true
2;true,false;movie(A, D).;true;true
2;true,false,false;movie(E, F).;true;true
3;;workedunder(A, B) :- director(B), female(A).;true;true
3;true;movie(B, C), movie(A, C).;true;true
3;true,false;movie(B, D), movie(A, E).;true;true
4;;workedunder(A, B) :- female(A).;true;true
4;true;movie(B, C), movie(A, C).;true;true
4;true,false;movie(B, D), movie(A, E).;true;true
4;true,false,false;movie(A, F), movie(B, G).;true;true
5;;workedunder(A, B) :- director(B), female(A).;true;true
5;true;movie(B, C).;true;true
5;true,false;movie(A, D), movie(B, D).;true;true
5;true,false,false;movie(A, E).;true;true
6;;workedunder(A, B) :- director(B), female(A).;true;true
6;true;movie(A, C).;true;true
6;true,false;movie(D, E).;true;true
7;;workedunder(A, B) :- female(A), director(B).;true;true
7;true;movie(A, C), movie(B, C).;true;true
7;true,false;movie(B, D).;true;true
7;true,false,false;movie(B, E).;true;true
8;;workedunder(A, B) :- female(A).;true;true
8;true;movie(C, D).;true;true
8;true,true;movie(A, E).;true;true
8;true,true,false;movie(B, D).;true;true
8;false;director(B), movie(B, F).;true;true
9;;workedunder(A, B) :- female(A), director(B).;true;true
9;true;movie(C, D).;true;true
9;true,true;movie(A, E), movie(B, E).;true;true


Refining candidate
***************************
Model training time 4.4601616859436035
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7248156017661763;  // std dev = 4.367, 165.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.1418510649004884;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.7455815941524448;  // std dev = 7.44e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.25441840584755293;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 571.000 (wgt'ed) examples reached here.  /* #neg=571 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(E, F) )
%   | | | then return 0.4226014955987657;  // std dev = 4.241, 179.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=143 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.5553664367462833;  // std dev = 5.96e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.11231637819360589;  // std dev = 0.000, 565.000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.47676706937103036;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.28761385400947526;  // std dev = 3.94e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.10159632948783547;  // std dev = 3.60e-07, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(B, C), movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D), movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, F), movie(B, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0687593691578692;  // std dev = 4.496, 377.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(H, A), movie(H, B) )
%   | | then return 0.3207118471601491;  // std dev = 3.67e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.0926912761892609;  // std dev = 1.44e-07, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(A, D), movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(A, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24037479122394634;  // std dev = 2.981, 174.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=143 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.2551722425694887;  // std dev = 3.82e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.08895959489141714;  // std dev = 0.150, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then if ( movie(A, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(D, E) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.29340579410211115;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.29204326951931875;  // std dev = 4.71e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.20975771563253506;  // std dev = 3.04e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.08235543941342402;  // std dev = 0.138, 568.000 (wgt'ed) examples reached here.  /* #neg=568 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(A, C), movie(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(B, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16620988211818719;  // std dev = 2.177, 168.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=143 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(F, A), movie(F, B) )
%   | | then return 0.17709649774527822;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.07669865609755669;  // std dev = 0.134, 585.000 (wgt'ed) examples reached here.  /* #neg=585 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(B, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018702069202803477;  // std dev = 2.969, 382.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=143 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( director(B), movie(B, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( director(B), actor(A) )
%   | | then if ( movie(G, A), movie(G, B) )
%   | | | then return 0.15274385809367153;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.0677413590692628;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then if ( movie(C, D) )
%   | then if ( movie(A, E), movie(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A), movie(F, B) )
%   | | | then return 0.20469287647918952;  // std dev = 1.76e-07, 143.000 (wgt'ed) examples reached here.  /* #pos=143 */
%   | | | else return -0.2703964043755534;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( actor(A), director(B) )
%   | then if ( movie(G, A), movie(G, B) )
%   | | then return 0.13400703000801095;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.06860349154255095;  // std dev = 0.185, 597.000 (wgt'ed) examples reached here.  /* #neg=597 */
Inference time using transfer learning 1.1975910663604736
Refined model CLL: -0.075865


******************************************
Best model found
******************************************
Total revision time: 12.528632164001465
Best scored revision CLL: -0.075865


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.276907205581665
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.683375358581543
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 1028.4937300682068
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.2539926591227823;  // std dev = 37.928, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2220633564849339;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19602667325123493;  // std dev = 8.348, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1430950943192866;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.038139440494516716;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18763022371069774;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16425365428538508;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.409605459669476;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.12414864300004128;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03325401102763202;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031226012289466983;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15479516642115204;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13588446470752574;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903785;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735984;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11908733057402576;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.027779231969854323;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10071049980613894;  // std dev = 0.955, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.027413238102116596;  // std dev = 5.849, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12525894258349415;  // std dev = 37.053, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.10939193872873582;  // std dev = 8.361, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235596;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19125494210527297;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.026615895618747273;  // std dev = 8.390, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.06831490434069828;  // std dev = 3.624, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.10429800159180262;  // std dev = 0.955, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.024117056454726362;  // std dev = 5.848, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09973157970455437;  // std dev = 37.052, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08764880636880423;  // std dev = 8.362, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3872831094520758;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1420746001431661;  // std dev = 6.062, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10054219198539638;  // std dev = 3.346, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.019808415958281266;  // std dev = 8.490, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.020056233518601186;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10142828881471896;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07849960428421808;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.068614175150084;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07166823130220004;  // std dev = 4.729, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.16900712428725903;  // std dev = 3.878, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08457393287113739;  // std dev = 3.344, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01703909821883739;  // std dev = 8.490, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09158149968500286;  // std dev = 0.955, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.01817194227194077;  // std dev = 5.845, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.06120203977152254;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05391364460663911;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.041402968668914436;  // std dev = 4.723, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.14294307240156942;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.09682031719720362;  // std dev = 3.325, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.08817845432175606;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013541127843351807;  // std dev = 8.472, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.01761002651417621;  // std dev = 5.769, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04742423557964973;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04168276597703188;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2534916147048486;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.056859819261271025;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.06825811077466028;  // std dev = 3.333, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.011764586987868609;  // std dev = 8.481, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07765780775067638;  // std dev = 1.346, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.01649363740461085;  // std dev = 5.763, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.03655631090010594;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03237446393409193;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012444898700237735;  // std dev = 4.711, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.0965982499170058;  // std dev = 3.859, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.07925337522739162;  // std dev = 3.317, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.007830099027159424;  // std dev = 8.473, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11398324656166267;  // std dev = 0.949, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.013720484551186489;  // std dev = 5.840, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.7617321014404297
Refined model CLL: -0.650248


******************************************
Best model found
******************************************
Total revision time: 1060.9947559833527
Best scored revision CLL: -0.650248


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.236310005187988
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7341437339782715
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 1001.9085431098938
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3578878444734629;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.043688297190162366;  // std dev = 8.421, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.08180409716690136;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.4393880538727892;  // std dev = 1.963, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.1857645581047491;  // std dev = 37.926, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.40960545966947587;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13750710216629658;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07786764027423052;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03447307574390936;  // std dev = 8.438, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.030307509037482066;  // std dev = 5.853, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15480115263444946;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13572886531592765;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903788;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189736;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11927868629299593;  // std dev = 3.359, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02814489547486655;  // std dev = 8.496, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.026712042566051346;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11310454482878504;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12526593958895943;  // std dev = 37.053, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.10922249334604668;  // std dev = 8.361, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107547;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2558166315289217;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11425056730678536;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07162814060869631;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.03577417166458523;  // std dev = 3.515, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.02288120295660784;  // std dev = 9.640, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09973751232413543;  // std dev = 37.052, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08750539274540471;  // std dev = 8.362, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4109643820675696;  // std dev = 0.894, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14086348930500864;  // std dev = 6.059, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03841448786384023;  // std dev = 7.639, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.0070858567451113135;  // std dev = 5.008, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09999655762356771;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.020303598045720926;  // std dev = 5.849, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07850386330462822;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.06850789928699294;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07044381976865605;  // std dev = 4.736, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1705147581123305;  // std dev = 3.870, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09541877051929244;  // std dev = 3.341, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.016661823793484496;  // std dev = 8.488, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.016447633015693866;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10280155665412356;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.061205471718792925;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05382770088555268;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3286263922061926;  // std dev = 0.881, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.07532474983013007;  // std dev = 6.034, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.0799863709945018;  // std dev = 3.340, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.014300331253859771;  // std dev = 8.487, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.014145097360951457;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.0937113623144608;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04742841554329407;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04158619874766474;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2513992615495001;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.05695794647587504;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.030807754432483674;  // std dev = 7.643, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.009275806299589379;  // std dev = 4.972, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11040848984823688;  // std dev = 0.949, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.0146706623028211;  // std dev = 5.836, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.03655852061981771;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03231886011375453;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012170644545949804;  // std dev = 4.711, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09692914523632626;  // std dev = 3.860, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.010396297106879981;  // std dev = 8.361, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.05486011631437802;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.10476950828780769;  // std dev = 0.950, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.010282354871963252;  // std dev = 5.844, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.6819126605987549
Refined model CLL: -0.650293


******************************************
Best model found
******************************************
Total revision time: 1033.62322473526
Best scored revision CLL: -0.650293


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.345890283584595
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7144651412963867
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 1064.351956129074
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14131665839554822;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.1685236708029212;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.13590836049502245;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03177575488726608;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031521891583258486;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1546464444443679;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309696;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903783;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735995;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11738179536827281;  // std dev = 3.359, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.027601543438925416;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.027323483948747503;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083845;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107553;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.25581663152892165;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.02652736061699994;  // std dev = 8.401, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.0656111636845989;  // std dev = 3.624, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.07004136474868489;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.02591231182069728;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151819;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0899163307009866;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.4136148104086191;  // std dev = 0.897, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14073340693244185;  // std dev = 6.058, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.10883499829163011;  // std dev = 3.353, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07690738695893473;  // std dev = 1.366, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.019725449788546606;  // std dev = 8.483, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.022456441563787875;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.078357571362453;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07114248376188394;  // std dev = 4.741, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.169654204209657;  // std dev = 3.865, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.034694837331579895;  // std dev = 7.636, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.0023248585615229162;  // std dev = 5.010, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10274382613368273;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.018498615627307428;  // std dev = 5.846, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171412;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.055718088778832366;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.050868238614851076;  // std dev = 4.736, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.13149792909045088;  // std dev = 3.870, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.09098637144166852;  // std dev = 3.339, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06841064918530193;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.026807351641802823;  // std dev = 3.514, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.013218582046130415;  // std dev = 9.638, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.04732794080126446;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715669;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.029631487868902757;  // std dev = 4.738, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.11072577363948365;  // std dev = 3.854, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0760484738853363;  // std dev = 3.338, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06042170941701207;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.02271995788915727;  // std dev = 3.514, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.011345805718460972;  // std dev = 9.638, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03649459855108187;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0335667799474137;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.019747748316384976;  // std dev = 4.733, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.08801175145907754;  // std dev = 3.859, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08393666614292125;  // std dev = 3.336, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.007566768612045949;  // std dev = 8.472, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.0854176696548631;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.014610320445155598;  // std dev = 5.765, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.771454095840454
Refined model CLL: -0.650494


******************************************
Best model found
******************************************
Total revision time: 1098.0812077522278
Best scored revision CLL: -0.650494


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.284563779830933
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.8145046234130859
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 1131.3826305866241
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.22191983436381657;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3578878444734629;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1413166583955482;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.1685236708029212;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13590836049502245;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07762444073070456;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.034181811723169114;  // std dev = 8.440, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.03120547545768999;  // std dev = 5.853, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436795;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309696;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2127671555190377;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.3352913018973599;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11787838328886344;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02785947827028519;  // std dev = 8.499, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.02757195954492662;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1131814685169142;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802828;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083852;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.45876476685087614;  // std dev = 0.900, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19126976018982178;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11271236962403208;  // std dev = 3.353, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07139138819427707;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.024074591220200222;  // std dev = 8.486, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.024962020121449956;  // std dev = 5.774, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151821;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08991633070098663;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11011378719134574;  // std dev = 4.742, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2065682212062339;  // std dev = 3.887, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03848209259455741;  // std dev = 7.641, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.005855927257565574;  // std dev = 5.006, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09898465950540672;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.021017204823615934;  // std dev = 5.849, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245307;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07108354374935068;  // std dev = 4.741, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1697015129063716;  // std dev = 3.865, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.09394780358962825;  // std dev = 3.339, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06423536487517023;  // std dev = 1.359, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.018006592561611752;  // std dev = 8.485, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.016596614940483555;  // std dev = 5.773, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171417;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.055718088778832275;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3292427893926867;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.07528682224693006;  // std dev = 6.034, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.07867823348802572;  // std dev = 3.338, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.014245830092732167;  // std dev = 8.489, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.015224978232273097;  // std dev = 5.919, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10310535810772027;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.04732794080126448;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.043536294977156574;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25182675138768407;  // std dev = 0.883, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.05692988004220274;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.011644928596739;  // std dev = 8.366, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.0554646343674996;  // std dev = 3.627, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08074174169392882;  // std dev = 1.351, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.016321944835994587;  // std dev = 5.765, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.036494598551081905;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03356677994741381;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012828340676499453;  // std dev = 4.714, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09611279931721689;  // std dev = 3.857, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0872932089527925;  // std dev = 3.334, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.08702590397668519;  // std dev = 1.370, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.008462055974029716;  // std dev = 8.464, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.014048242303062597;  // std dev = 5.765, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.6449062824249268
Refined model CLL: -0.650428


******************************************
Best model found
******************************************
Total revision time: 1164.9498834609985
Best scored revision CLL: -0.650428


******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.183553457260132
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7433216571807861
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'author(C, A), author(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'author(A, C), author(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- author(C, A), author(C, B).;true;true
1;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
2;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
3;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
4;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
5;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
6;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
7;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
8;;samevenue(A, B) :- author(A, C), author(B, C).;true;true
9;;samevenue(A, B) :- author(A, C), author(B, C).;true;true


Refining candidate
***************************
Model training time 968.5978419780731
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.22191983436381657;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151715;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1430950943192866;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.0381394404945167;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675653;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292122;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.40960545966947604;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.03711211154702532;  // std dev = 8.412, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.07693231806277193;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.031226012289466983;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436798;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309696;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903763;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.3352913018973598;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.031711769663738676;  // std dev = 8.409, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.07208194380010913;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02638082006689723;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083849;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235596;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1912549421052729;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11427650035411349;  // std dev = 3.363, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.022788639547069903;  // std dev = 8.496, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09421761390433042;  // std dev = 0.958, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.023952271466748224;  // std dev = 5.846, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151819;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08991633070098654;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11082226745851505;  // std dev = 4.747, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2057030072448362;  // std dev = 3.883, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11330369308744598;  // std dev = 3.348, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.08496424353647937;  // std dev = 1.360, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.03271660113007615;  // std dev = 3.513, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.01913381401389286;  // std dev = 9.637, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245315;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07043470907702593;  // std dev = 4.736, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.17049971170696065;  // std dev = 3.870, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.09615729696091316;  // std dev = 3.346, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07413492997302694;  // std dev = 1.360, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.027840632347452137;  // std dev = 3.513, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.016493088201211332;  // std dev = 9.637, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171412;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05571808877883251;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.28773301346334484;  // std dev = 0.892, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.0773225648938786;  // std dev = 6.045, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08823737708373001;  // std dev = 3.343, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.013131666612904274;  // std dev = 8.479, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.014500402891319056;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09308288081186533;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.047327940801264484;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715663;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.29347580280063196;  // std dev = 0.880, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.054908914515056965;  // std dev = 6.029, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.029322000191080822;  // std dev = 7.630, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.006650140580381167;  // std dev = 4.989, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.08212249692169517;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.016461735765877346;  // std dev = 5.764, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( author(A, C), author(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03649459855108192;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.033566779947413694;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012689545588835718;  // std dev = 4.715, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09628984333706166;  // std dev = 3.857, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.027637837607828515;  // std dev = 7.626, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.009302373020304532;  // std dev = 4.985, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11944398319718452;  // std dev = 0.948, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.013230109394313138;  // std dev = 5.837, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.817781686782837
Refined model CLL: -0.650423


******************************************
Best model found
******************************************
Total revision time: 1002.3702104091644
Best scored revision CLL: -0.650423


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(14 unique tokens: ['genre', 'under', 'work', 'female', 'movie']...) from 37 documents (total 67 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(14 unique tokens: ['genre', 'under', 'work', 'female', 'movie']...) from 37 documents (total 67 corpus positions)", 'datetime': '2021-06-11T13:21:53.113572', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 7.142857% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.879637', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.882123', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.884254', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.886195', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.888067', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.889923', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.891798', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.893642', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.894701', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.895485', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.896235', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.896988', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.897735', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.898469', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.899228', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.899977', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.900724', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.901458', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.902197', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.902935', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.903694', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.904433', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.905179', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.905923', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:21:54.906655', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:21:54.907422', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:21:54.908170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.128776788711548
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.769301176071167
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sametitle(C, A), sametitle(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sametitle(C, A), sametitle(C, B).;true;true
1;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
2;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
3;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
4;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
5;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
6;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
7;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
8;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
9;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true


Refining candidate
***************************
Model training time 1147.5944023132324
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.05742828982964905;  // std dev = 7.665, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.03017111190737738;  // std dev = 5.041, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675653;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292122;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.05284992116913144;  // std dev = 7.665, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.023578412715142424;  // std dev = 5.037, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.02972048696584879;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436804;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309694;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2127671555190377;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189736;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13064124507449784;  // std dev = 3.365, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.08097143726536252;  // std dev = 1.357, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.056020065549232015;  // std dev = 3.535, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.024969942229249423;  // std dev = 9.640, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083849;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235596;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1912549421052729;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1236335560305182;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.022720069888526307;  // std dev = 8.495, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.021660533710053678;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10249869799034927;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.0996134242315182;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0899163307009867;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3872831094520758;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14207460014316603;  // std dev = 6.062, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10570129119212593;  // std dev = 3.355, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.019584146139107826;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07719236734397171;  // std dev = 1.347, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.02196201438842521;  // std dev = 5.768, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245328;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07166823130219976;  // std dev = 4.729, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.16900712428725903;  // std dev = 3.878, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.10537059305613149;  // std dev = 3.350, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07773335206061864;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.027749794119812717;  // std dev = 3.502, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.015886946147711946;  // std dev = 9.639, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171401;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.055718088778832484;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0414029686689144;  // std dev = 4.723, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1429430724015695;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.08892353753419889;  // std dev = 3.349, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06817126662927069;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.014305384349703945;  // std dev = 8.428, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.01556622922177847;  // std dev = 5.843, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.047327940801264436;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715674;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029292331775800824;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.11094291260130708;  // std dev = 3.861, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08282343618435167;  // std dev = 3.337, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.011014940557088057;  // std dev = 8.480, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07458436076791534;  // std dev = 1.351, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.014177509432247484;  // std dev = 5.768, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03649459855108197;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03356677994741363;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.012699080466652232;  // std dev = 4.719, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09640935282865373;  // std dev = 3.851, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.06886363662448895;  // std dev = 3.335, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.009417413808256087;  // std dev = 8.480, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.010572192265166867;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09312856847280616;  // std dev = 0.035, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning 1.9383373260498047
Refined model CLL: -0.650457


******************************************
Best model found
******************************************
Total revision time: 1181.4461731910706
Best scored revision CLL: -0.650457


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.435847', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.437011', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.437874', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.438654', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.439457', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.440207', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.440964', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.441706', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.442442', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.443229', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.443998', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.444775', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.445524', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.446266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.447042', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.447786', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.448535', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.449266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.450012', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.450739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.451511', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.452250', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.452978', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.453711', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T13:41:39.454464', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T13:41:39.455234', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T13:41:39.456015', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.065094470977783
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7030026912689209
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sametitle(C, A), sametitle(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sametitle(C, A), sametitle(C, B).;true;true
1;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
2;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
3;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
4;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
5;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
6;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
7;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
8;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
9;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true


Refining candidate
***************************
Model training time 1091.1422917842865
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14131665839554822;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675653;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292127;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13590836049502242;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07762444073070456;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03418181172316912;  // std dev = 8.440, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.03120547545768993;  // std dev = 5.853, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.4080576727251897;  // std dev = 1.959, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.15314378660683778;  // std dev = 37.926, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903774;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735984;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11787838328886349;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.027859478270285263;  // std dev = 8.499, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.027571959544926604;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11318146851691421;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12526662670730088;  // std dev = 37.053, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.10919548512677825;  // std dev = 8.361, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107528;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2558166315289217;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11271236962403205;  // std dev = 3.353, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07139138819427707;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.03508374749477338;  // std dev = 3.511, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.023066709151528454;  // std dev = 9.644, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09973810004616358;  // std dev = 37.052, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.087482570627973;  // std dev = 8.362, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.10960654337929135;  // std dev = 4.757, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2070837498130332;  // std dev = 3.877, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.038596834126510465;  // std dev = 7.641, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.005569258604475757;  // std dev = 5.004, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09898465950540672;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.021007127385929435;  // std dev = 5.849, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07850524352674385;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0684719386954688;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0806632960903337;  // std dev = 4.757, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.15811656424851994;  // std dev = 3.876, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09394085853074904;  // std dev = 3.339, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.016636824937601418;  // std dev = 8.490, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.01681207007706717;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10293610886970281;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.061206587361767206;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.053798650040825166;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.051493263168693744;  // std dev = 4.754, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.13096078914647838;  // std dev = 3.866, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.032899558199895866;  // std dev = 7.642, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.004104310663588965;  // std dev = 4.986, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.014462291074874241;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09382385086855848;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0474286390769385;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04157584174853854;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3339831179964738;  // std dev = 0.886, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.053131434603496557;  // std dev = 6.028, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08592671826382625;  // std dev = 3.338, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.010767102443983363;  // std dev = 8.480, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.08199573495341407;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.014917556759390467;  // std dev = 5.763, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.03655941521780425;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03229691550421447;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2973046700725312;  // std dev = 0.878, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.038289035200325616;  // std dev = 6.017, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.07601794525889898;  // std dev = 3.333, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.0690824715623626;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.009783678453728318;  // std dev = 8.423, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.011634123067827594;  // std dev = 5.841, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.6294779777526855
Refined model CLL: -0.650295


******************************************
Best model found
******************************************
Total revision time: 1123.8744237422943
Best scored revision CLL: -0.650295


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.034521', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.035692', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.036552', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.037325', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.038083', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.038830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.039603', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.040338', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.041072', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.041811', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.042545', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.043317', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.044060', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.044793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.045534', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.046262', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.047012', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.047750', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.048480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.049211', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.049934', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.050664', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.051399', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.052131', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:00:26.052858', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:00:26.053588', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:00:26.054308', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.264483213424683
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7444939613342285
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sametitle(C, A), sametitle(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sametitle(C, A), sametitle(C, B).;true;true
1;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
2;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
3;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
4;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
5;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
6;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
7;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
8;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
9;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true


Refining candidate
***************************
Model training time 1065.2871069908142
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.22191983436381657;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3578878444734629;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14309509431928658;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.038139440494516744;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292127;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.12414864300004128;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.033254011027631925;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031226012289466983;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436806;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309696;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2127671555190377;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735995;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11908733057402575;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.027779231969854296;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.026371161776164734;  // std dev = 5.929, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802828;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083856;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235597;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1912549421052729;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10147787156109826;  // std dev = 3.355, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.024034907228854187;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07034535483845097;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.025606608078599945;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.0996134242315182;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0899163307009866;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3872831094520758;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14207460014316603;  // std dev = 6.062, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09770446972675344;  // std dev = 3.347, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02002722028722106;  // std dev = 8.486, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.1116647358976936;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.021311508382417545;  // std dev = 5.846, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245315;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012979;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0716682313022003;  // std dev = 4.729, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1690071242872591;  // std dev = 3.878, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.01782434257120626;  // std dev = 8.374, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.0617544193398768;  // std dev = 3.627, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.017229091734077395;  // std dev = 5.928, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09280549376606091;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171415;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05571808877883203;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04140296866891448;  // std dev = 4.723, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1429430724015693;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.01429580904962873;  // std dev = 8.372, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.05925340874343755;  // std dev = 3.627, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.07680583909112272;  // std dev = 1.349, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.018253180495551285;  // std dev = 5.766, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.047327940801264526;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715658;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029292331775800793;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.11094291260130704;  // std dev = 3.861, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.0800727004234984;  // std dev = 3.336, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.010617452625652078;  // std dev = 8.479, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.012754757367616925;  // std dev = 5.928, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.08510929796290752;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.5705216540348139;  // std dev = 0.304, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22836132243026852;  // std dev = 2.135, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.03534934035369399;  // std dev = 37.902, 6,009.000 (wgt'ed) examples reached here.  /* #neg=3,632 #pos=2,377 */
%   | | | else return 0.04653440488899719;  // std dev = 6.103, 168.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=106 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.06645858959849126;  // std dev = 3.335, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.009074316242708236;  // std dev = 8.479, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.11636238160184112;  // std dev = 0.953, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.014309280579697648;  // std dev = 5.838, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.6874923706054688
Refined model CLL: -0.650198


******************************************
Best model found
******************************************
Total revision time: 1096.927148103714
Best scored revision CLL: -0.650198


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.792013', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.793177', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.794018', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.794809', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.795599', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.796332', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.797083', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.797823', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.798552', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.799320', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.800058', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.800804', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.801553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.802271', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.803031', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.803770', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.804505', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.805224', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.805952', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.806679', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.807447', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.808170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.808895', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.809621', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:18:45.810335', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:18:45.811076', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:18:45.811808', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.106714487075806
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7445619106292725
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sametitle(C, A), sametitle(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sametitle(C, A), sametitle(C, B).;true;true
1;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
2;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
3;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
4;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
5;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
6;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
7;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
8;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
9;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true


Refining candidate
***************************
Model training time 1058.7029802799225
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14131665839554822;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292122;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.40960545966947587;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.13590836049502245;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.031775754887266125;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031521891583258486;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436793;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309694;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903777;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.3352913018973599;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.0463951794068708;  // std dev = 7.655, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.016974827785749567;  // std dev = 5.024, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.02732348394874747;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083846;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.458764766850876;  // std dev = 0.900, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19126976018982192;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.043111904608191545;  // std dev = 7.655, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.01149621507463527;  // std dev = 5.019, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07099184529392705;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.02411343492704491;  // std dev = 5.769, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151819;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0899163307009867;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11011378719134576;  // std dev = 4.742, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2065682212062339;  // std dev = 3.887, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.023413080333148553;  // std dev = 8.406, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.06268187088667473;  // std dev = 3.614, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.07421303294482429;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.020910265665376588;  // std dev = 5.769, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.6236785273047198;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27683004198566497;  // std dev = 2.143, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.07701438599243399;  // std dev = 37.902, 6,009.000 (wgt'ed) examples reached here.  /* #neg=3,632 #pos=2,377 */
%   | | | else return 0.11070979375217331;  // std dev = 6.133, 168.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=106 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.1054847167533801;  // std dev = 3.358, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01564510168443174;  // std dev = 8.491, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.09785009903547982;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.017162374256679446;  // std dev = 5.842, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.061191991356411166;  // std dev = 37.046, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.053993912009965186;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04248608845607528;  // std dev = 4.735, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.14164728932104861;  // std dev = 3.863, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.031299871339898894;  // std dev = 7.638, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.0014534039047814369;  // std dev = 5.014, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013444832281651895;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09266065336680747;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04741709351444431;  // std dev = 37.045, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04174207868138276;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.030346618668898945;  // std dev = 4.734, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.10968971883221952;  // std dev = 3.864, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.10442646396784369;  // std dev = 3.343, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.08222309817612325;  // std dev = 1.364, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.024755887519582125;  // std dev = 3.498, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.009733381247066918;  // std dev = 9.633, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.0365507657232528;  // std dev = 37.045, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03242896810357406;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.013610196334460773;  // std dev = 4.732, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09534371786343947;  // std dev = 3.852, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08137462826873447;  // std dev = 3.344, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.00923168496589598;  // std dev = 8.482, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.09314988775693078;  // std dev = 0.950, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.009474454648152527;  // std dev = 5.841, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
Inference time using transfer learning 1.703935146331787
Refined model CLL: -0.65027


******************************************
Best model found
******************************************
Total revision time: 1090.3295998573303
Best scored revision CLL: -0.65027


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.961316', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.962505', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.963382', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.964166', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.964915', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.965670', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.966431', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.967201', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.967940', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.968691', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.969437', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.970201', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.970948', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.971709', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.972460', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.973200', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.973929', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.974687', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.975445', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.976180', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.976918', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.977658', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.978393', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.979142', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:36:58.979864', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:36:58.980604', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:36:58.981342', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.019283056259155
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7038452625274658
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sametitle(C, A), sametitle(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sametitle(A, C), sametitle(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sametitle(C, A), sametitle(C, B).;true;true
1;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
2;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
3;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
4;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
5;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
6;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
7;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
8;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true
9;;samevenue(A, B) :- sametitle(A, C), sametitle(B, C).;true;true


Refining candidate
***************************
Model training time 1115.1494235992432
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sametitle(C, A), sametitle(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3578878444734629;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14131665839554822;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675653;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.1685236708029212;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.13590836049502242;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03177575488726622;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031521891583258535;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436793;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309694;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903783;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735984;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04639517940687082;  // std dev = 7.655, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.016974827785749613;  // std dev = 5.024, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.027323483948747534;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083849;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107544;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2558166315289218;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1115597832833239;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.023819384845289192;  // std dev = 8.500, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07099184529392706;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.024113434927044864;  // std dev = 5.769, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151821;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08991633070098663;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.4136148104086191;  // std dev = 0.897, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.140733406932442;  // std dev = 6.058, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09455122554896385;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.020547952668845265;  // std dev = 8.500, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.09625991532903078;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.02037583532170816;  // std dev = 5.842, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245314;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.35159899143938156;  // std dev = 0.883, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10391395868862364;  // std dev = 6.048, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.1098671191204289;  // std dev = 3.339, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.0887938388918124;  // std dev = 1.364, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.02301975110818503;  // std dev = 3.490, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.016482898243577394;  // std dev = 9.641, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171412;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.055718088778832275;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04153381569571963;  // std dev = 4.723, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.14280526817604042;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.07574600168561701;  // std dev = 3.344, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.014607157874357223;  // std dev = 8.491, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.0902426897746995;  // std dev = 0.950, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.015274405860803017;  // std dev = 5.842, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.047327940801264415;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715656;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.25295676843416653;  // std dev = 0.883, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.056893541881333755;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09299316723404893;  // std dev = 3.325, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.009097057931838945;  // std dev = 8.476, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013003110803635457;  // std dev = 5.929, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09216301122719561;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sametitle(A, C), sametitle(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0364945985510819;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03356677994741378;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012552690277232608;  // std dev = 4.714, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.096478913917015;  // std dev = 3.857, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0778531514128745;  // std dev = 3.323, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07887707795078505;  // std dev = 1.365, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.009118042663967726;  // std dev = 8.469, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.013504034984055788;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.8579373359680176
Refined model CLL: -0.65043


******************************************
Best model found
******************************************
Total revision time: 1149.6185510158539
Best scored revision CLL: -0.65043


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.546702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.547534', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.548170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.548766', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.549275', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.549814', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.550351', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.550903', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.551458', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.551955', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.552493', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.552992', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.553525', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.554021', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.554568', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.555144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.555680', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.556209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.556701', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.557229', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.557711', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.558216', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.558754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.559256', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T14:56:11.559768', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T14:56:11.560278', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T14:56:11.560836', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.22859787940979
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7461848258972168
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
2;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
3;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
4;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
5;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
6;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
7;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
8;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
9;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true


Refining candidate
***************************
Model training time 1034.4931602478027
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.2539926591227823;  // std dev = 37.928, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.22206335648493383;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19602667325123488;  // std dev = 8.348, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3578878444734629;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1430950943192866;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03813944049451678;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1876302237106977;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16425365428538505;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1241486430000413;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03325401102763195;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031226012289466983;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15479516642115193;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13588446470752574;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2127671555190377;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735984;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11908733057402579;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02777923196985437;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10071049980613893;  // std dev = 0.955, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.027413238102116627;  // std dev = 5.849, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12525894258349418;  // std dev = 37.053, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.10939193872873594;  // std dev = 8.361, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107553;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2558166315289218;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10482738960563374;  // std dev = 3.345, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.024066827434566437;  // std dev = 8.493, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.10429800159180262;  // std dev = 0.955, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.0241170564547264;  // std dev = 5.848, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09973157970455433;  // std dev = 37.052, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0876488063688043;  // std dev = 8.362, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4109643820675696;  // std dev = 0.894, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14086348930500886;  // std dev = 6.059, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10070359569499673;  // std dev = 3.339, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01967777575391271;  // std dev = 8.487, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09798092143162146;  // std dev = 0.953, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.020756910761999637;  // std dev = 5.848, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07849960428421811;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0686141751500838;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3544559898943897;  // std dev = 0.886, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10377734671010967;  // std dev = 6.048, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08782986506021592;  // std dev = 3.328, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.016872848918189715;  // std dev = 8.486, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.10047381687901381;  // std dev = 0.953, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.018365941181676695;  // std dev = 5.847, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.06120203977152254;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05391364460663919;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04147675848566842;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1428745579880298;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08460654714377076;  // std dev = 3.323, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01344615578534112;  // std dev = 8.482, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.015226428811927113;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10074990133265575;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04742423557964961;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04168276597703187;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.25201183689768697;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.05693932787516473;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.07044463449998438;  // std dev = 3.321, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01151618132236595;  // std dev = 8.481, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013082300508268526;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09199268177016606;  // std dev = 0.038, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.03655631090010594;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.032374463934092025;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.012146126322500289;  // std dev = 4.711, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09697672577797868;  // std dev = 3.859, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.026500788550587722;  // std dev = 7.631, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.009561839122245919;  // std dev = 4.968, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07791437478347545;  // std dev = 1.347, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.014784349352868056;  // std dev = 5.763, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.649273157119751
Refined model CLL: -0.650264


******************************************
Best model found
******************************************
Total revision time: 1067.205304145813
Best scored revision CLL: -0.650264


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.529736', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.530568', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.531281', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.531941', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.532503', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.533081', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.533684', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.534278', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.534886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.535469', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.536063', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.536633', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.537219', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.537778', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.538367', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.538959', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.539553', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.540141', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.540686', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.541268', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.541810', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.542353', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.542955', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.543517', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:14:01.544084', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:14:01.544637', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:14:01.545224', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.029122352600098
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.6964521408081055
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
2;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
3;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
4;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
5;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
6;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
7;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
8;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
9;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true


Refining candidate
***************************
Model training time 1085.7856092453003
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.06760839455897227;  // std dev = 7.001, 296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=62 */
%   | | | else return 0.04035232493002018;  // std dev = 5.930, 236.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151715;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1413166583955482;  // std dev = 3.366, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03792704271485758;  // std dev = 8.509, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03673101633396252;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292122;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13590836049502247;  // std dev = 3.360, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07762444073070456;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.05197889587174928;  // std dev = 3.525, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.030925716345782155;  // std dev = 9.646, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1546464444443679;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309694;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903774;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735984;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11554599048128152;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02821826488597786;  // std dev = 8.499, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.02738032547534352;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1136234278258406;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083846;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107553;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.25581663152892165;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11269032522283232;  // std dev = 3.353, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07137940747381513;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.02395204961207704;  // std dev = 8.485, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.02517182409923071;  // std dev = 5.775, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.35556530063339636;  // std dev = 1.952, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.09840961446078775;  // std dev = 37.925, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.10960654337929142;  // std dev = 4.757, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.20708374981303304;  // std dev = 3.877, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.038687839436221144;  // std dev = 7.641, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.00561110213546168;  // std dev = 5.003, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07715128734312764;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.02277614623005308;  // std dev = 5.770, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07850740394752892;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.06841189496584142;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08066329609033321;  // std dev = 4.757, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.15811656424851994;  // std dev = 3.876, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.035735258575739594;  // std dev = 7.639, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.0013737446550290268;  // std dev = 5.002, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.01684926441174826;  // std dev = 5.922, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1033724914125843;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.06120833130563582;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05375011854219366;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3531669052561177;  // std dev = 0.889, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.07422706908029005;  // std dev = 6.036, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.08960866188492225;  // std dev = 3.349, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06809288118087703;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.026344961625167737;  // std dev = 3.502, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.013357788626725039;  // std dev = 9.638, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04743203462601783;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04149849631488439;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3092285892359485;  // std dev = 0.879, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.0541723472611519;  // std dev = 6.026, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08399161731948958;  // std dev = 3.337, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.011287959151075779;  // std dev = 8.479, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10846820853323909;  // std dev = 0.946, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.012798414854019568;  // std dev = 5.843, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03656135699826175;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03224983874113591;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.012401797624149941;  // std dev = 4.719, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09662858934709503;  // std dev = 3.851, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.07590073314352234;  // std dev = 3.333, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.0601770385818664;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.00958090385989056;  // std dev = 8.471, 473.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=89 */
%   | | | else return 0.011057384966966646;  // std dev = 5.773, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.7367463111877441
Refined model CLL: -0.650297


******************************************
Best model found
******************************************
Total revision time: 1117.200367450714
Best scored revision CLL: -0.650297


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.726276', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.727095', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.727738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.728335', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.728856', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.729386', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.729932', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.730494', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.731058', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.731567', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.732113', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.732621', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.733146', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.733646', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.734182', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.734744', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.735283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.735820', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.736302', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.736838', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.737329', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.737835', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.738374', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.738876', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:32:41.739446', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:32:41.739950', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:32:41.740488', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.2638397216796875
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7239704132080078
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
2;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
3;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
4;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
5;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
6;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
7;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
8;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
9;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true


Refining candidate
***************************
Model training time 1050.8405435085297
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( haswordauthor(F, D) )
%   | | | then return 0.4723963623785732;  // std dev = 1.967, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.22007296189803766;  // std dev = 37.927, 6,015.000 (wgt'ed) examples reached here.  /* #neg=3,634 #pos=2,381 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.043688297190162755;  // std dev = 8.421, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.08180409716690136;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1876329682974677;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16417717100423795;  // std dev = 8.354, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.409605459669476;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13750710216629658;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07786764027423052;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.052694590022659804;  // std dev = 3.529, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.030722231617225565;  // std dev = 9.642, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15479770693358336;  // std dev = 37.055, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.1358145297086938;  // std dev = 8.355, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903766;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189736;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11690579829576975;  // std dev = 3.359, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.028559721378393865;  // std dev = 8.496, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.026422875570003494;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1136225859206552;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12526420536301128;  // std dev = 37.053, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.10927243447800622;  // std dev = 8.361, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235596;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19125494210527297;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.11422528040923788;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07161836295141108;  // std dev = 1.362, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.033200738507367135;  // std dev = 3.515, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.023174879522365105;  // std dev = 9.640, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09973604017725016;  // std dev = 37.052, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08754765077178162;  // std dev = 8.362, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11082226745851517;  // std dev = 4.747, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.20570300724483606;  // std dev = 3.883, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09457205521358547;  // std dev = 3.349, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02076660896784423;  // std dev = 8.488, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07912998756743499;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.022060529471737925;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07850085204001533;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.06857734489805459;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3546321084197926;  // std dev = 0.886, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10375634102649106;  // std dev = 6.048, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.07923024742206121;  // std dev = 3.348, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01787641626169823;  // std dev = 8.487, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.1010090574152522;  // std dev = 0.949, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.018267583335003435;  // std dev = 5.846, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.06120304424145475;  // std dev = 37.051, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05388384549531031;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.041469891986457265;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.1428620693626102;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09378286900691267;  // std dev = 3.332, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.012230188372465898;  // std dev = 8.476, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.015565058198163628;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.10299356105956789;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.04742784764344537;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04160480893083374;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029004618838854735;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.11129303261195557;  // std dev = 3.861, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.07853884340865168;  // std dev = 3.331, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.06814356530075132;  // std dev = 1.364, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.011469395741117498;  // std dev = 8.423, 465.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=88 */
%   | | | else return 0.014584173054765748;  // std dev = 5.843, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03655806673065925;  // std dev = 37.050, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03233367056018145;  // std dev = 8.370, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.24162143022826826;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.041006327564142867;  // std dev = 6.026, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.026572679673329467;  // std dev = 7.624, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.00873136967952035;  // std dev = 4.981, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.011160865872577003;  // std dev = 5.923, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09391511573649271;  // std dev = 0.047, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning 1.620603322982788
Refined model CLL: -0.650278


******************************************
Best model found
******************************************
Total revision time: 1082.6069428920746
Best scored revision CLL: -0.650278


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.073252', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.074035', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.074691', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.075312', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.075815', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.076335', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.076866', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.077423', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.077951', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.078443', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.078988', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.079496', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.080010', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.080497', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.081011', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.081556', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.082060', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.082584', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.083105', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.083649', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.084122', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.084610', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.085129', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.085624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T15:50:47.086126', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T15:50:47.086614', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T15:50:47.087158', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.142354726791382
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7417612075805664
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
2;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
3;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
4;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
5;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
6;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
7;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
8;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
9;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true


Refining candidate
***************************
Model training time 987.5674779415131
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.2219198343638166;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.043688297190162664;  // std dev = 8.421, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.08180409716690137;  // std dev = 3.621, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1874125148267566;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.16852367080292113;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.13750710216629658;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07786764027423053;  // std dev = 1.361, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.052694590022659846;  // std dev = 3.529, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.03072223161722553;  // std dev = 9.642, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436812;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309696;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2127671555190377;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.3352913018973599;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1169057982957698;  // std dev = 3.359, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.028559721378394146;  // std dev = 8.496, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.026422875570003494;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11362258592065523;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083835;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4590666853235596;  // std dev = 0.901, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19125494210527294;  // std dev = 6.073, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04271211656282513;  // std dev = 7.651, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.010971782807764669;  // std dev = 5.007, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.073676409835631;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.02538674973810216;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151819;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08991633070098663;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.38728310945207584;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14207460014316603;  // std dev = 6.062, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10951038964501236;  // std dev = 3.350, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.01968285914835702;  // std dev = 8.487, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.01832648228624538;  // std dev = 5.925, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1030559520239916;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07835757136245315;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07166823130219993;  // std dev = 4.729, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.16900712428725903;  // std dev = 3.878, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.036003128177340464;  // std dev = 7.641, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return 0.001232755483191674;  // std dev = 5.000, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.015781627786780255;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09391377115223963;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171407;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05571808877883232;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.041402968668914415;  // std dev = 4.723, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.14294307240156956;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.015567159823655963;  // std dev = 8.383, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.059710411829462524;  // std dev = 3.617, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.10473039090804524;  // std dev = 0.949, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.014618347305687097;  // std dev = 5.841, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.04732794080126445;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.04353629497715662;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029292331775800814;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.11094291260130705;  // std dev = 3.861, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.09164656428584246;  // std dev = 3.344, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.07832582517190499;  // std dev = 1.359, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.025025901161894536;  // std dev = 3.504, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.01063364517724813;  // std dev = 9.631, 622.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=114 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03649459855108193;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.033566779947413826;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.012699080466652248;  // std dev = 4.719, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09640935282865369;  // std dev = 3.851, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08225041179137477;  // std dev = 3.342, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.008470786161708673;  // std dev = 8.474, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07403313280637427;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.012322483750449633;  // std dev = 5.763, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
Inference time using transfer learning 1.7810876369476318
Refined model CLL: -0.650438


******************************************
Best model found
******************************************
Total revision time: 1024.1123919487
Best scored revision CLL: -0.650438


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.104940', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.105794', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.106487', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.107170', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.107760', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'same', 'title']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.108348', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.108954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.109575', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.110187', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.110762', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.111399', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.111979', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.112577', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.113123', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.113712', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'author', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.114303', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.114915', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.115527', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'venue', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.116090', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.116691', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'title']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.117233', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'have', 'title', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.117790', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'author']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.118377', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.118941', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['movie', 'venue']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T16:07:54.119530', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['movie', 'author', 'have', 'word']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T16:07:54.120076', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(3 unique tokens: ['movie', 'bibliography', 'same']) from 2 documents (total 3 corpus positions)", 'datetime': '2021-06-11T16:07:54.120680', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Model training time 5.152718544006348
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.23749878473433458;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2060618178036594;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.17453024670666556;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1446407501339931;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.11767244800090106;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09430962074455004;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.074707177635281;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05865473052223055;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04574473720619161;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.03549889774086067;  // std dev = 40.548, 6,983.000 (wgt'ed) examples reached here.  /* #neg=4,334 #pos=2,649 */
Inference time using transfer learning 0.7736327648162842
Parameter learned model CLL:-0.665378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['samevenue(A, B)', {'': 'sameauthor(C, A), sameauthor(C, B)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
['samevenue(A, B)', {'': 'sameauthor(A, C), sameauthor(B, C)'}, {'true': [0.0, 0, 0], 'false': [40.548, 4, 2]}]
{'': [nan, 0.23544354121679714]}
{'': [nan, 0.23544354121687253]}
{'': [nan, 0.23544354121689864]}
{'': [nan, 0.23544354121683903]}
{'': [nan, 0.2354435412168111]}
{'': [nan, 0.235443541216926]}
{'': [nan, 0.23544354121692726]}
{'': [nan, 0.23544354121684707]}
{'': [nan, 0.23544354121692693]}
{'': [nan, 0.23544354121681993]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- sameauthor(C, A), sameauthor(C, B).;true;true
1;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
2;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
3;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
4;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
5;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
6;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
7;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
8;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true
9;;samevenue(A, B) :- sameauthor(A, C), sameauthor(B, C).;true;true


Refining candidate
***************************
Model training time 1118.3554747104645
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( sameauthor(C, A), sameauthor(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2559515161947286;  // std dev = 37.062, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.23063215657601857;  // std dev = 8.346, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4326170202058961;  // std dev = 4.794, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5724346493852271;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14905802600860327;  // std dev = 3.368, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.04473174432383054;  // std dev = 8.508, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04190961886019546;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.22191983436381657;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.19893044877511365;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.35788784447346306;  // std dev = 4.780, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.5042038727151713;  // std dev = 3.938, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1430950943192866;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.03813944049451665;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03579563578659918;  // std dev = 5.926, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.18741251482675658;  // std dev = 37.061, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.1685236708029212;  // std dev = 8.352, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2903869442291748;  // std dev = 4.777, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.4096054596694761;  // std dev = 3.930, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1241486430000413;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.033254011027631855;  // std dev = 8.501, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.031226012289466983;  // std dev = 5.927, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15464644444436798;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.13877229675309694;  // std dev = 8.358, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21276715551903774;  // std dev = 4.765, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.33529130189735995;  // std dev = 3.900, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.11908733057402582;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.027779231969854313;  // std dev = 8.494, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.026371161776164734;  // std dev = 5.929, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12507102235802825;  // std dev = 37.059, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.11301079645083838;  // std dev = 8.359, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16116179168107544;  // std dev = 4.763, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.2558166315289217;  // std dev = 3.895, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.026179938841979486;  // std dev = 8.393, 458.000 (wgt'ed) examples reached here.  /* #neg=370 #pos=88 */
%   | | | else return 0.06831786073509802;  // std dev = 3.624, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.07034535483845093;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.025606608078599935;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09961342423151819;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.08991633070098676;  // std dev = 8.363, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4109643820675695;  // std dev = 0.894, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14086348930500883;  // std dev = 6.059, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09756901062429528;  // std dev = 3.354, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.02013034444933911;  // std dev = 8.489, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07373931963297004;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.022185413527395885;  // std dev = 5.771, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.078357571362453;  // std dev = 37.058, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.07134003523012984;  // std dev = 8.364, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.35445598989438964;  // std dev = 0.886, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10377734671010969;  // std dev = 6.048, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09423330260581292;  // std dev = 3.347, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.015962649308278523;  // std dev = 8.484, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.11289605084458605;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.019518719540474388;  // std dev = 5.842, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06110814766171405;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.05571808877883215;  // std dev = 8.366, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04147675848566805;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.14287455798802973;  // std dev = 3.862, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.08241127363365615;  // std dev = 3.336, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.013796741024576318;  // std dev = 8.482, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.014585374139739208;  // std dev = 5.928, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.09278792353361044;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.047327940801264456;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.0435362949771565;  // std dev = 8.367, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.252011836897687;  // std dev = 0.882, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.05693932787516482;  // std dev = 6.035, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.028833433535958398;  // std dev = 7.632, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.005669840678145923;  // std dev = 4.983, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.06691578651505214;  // std dev = 1.352, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.014925916508021895;  // std dev = 5.770, 224.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=41 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( sameauthor(A, C), sameauthor(B, C) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03649459855108185;  // std dev = 37.057, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | | else return 0.03356677994741382;  // std dev = 8.369, 298.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=111 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.01214612632250023;  // std dev = 4.711, 94.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=54 */
%   | | | else return 0.09697672577797876;  // std dev = 3.859, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.027836644000898057;  // std dev = 7.627, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | | else return -0.00875061158966337;  // std dev = 4.985, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.00929713695420679;  // std dev = 5.924, 234.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=43 */
%   | | | else return -0.08527473615725713;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning 1.6942760944366455
Refined model CLL: -0.65045


******************************************
Best model found
******************************************
Total revision time: 1151.2110888957977
Best scored revision CLL: -0.65045


******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.201169729232788
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5194065415903802;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4143337249771322;  // std dev = 10.956, 516.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3482356054784317;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360593;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28928725140878575;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783544;  // std dev = 3.38e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2304899099036199;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926147;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.147673073780603;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14329737806045917;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109208;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10792179507135778;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333707;  // std dev = 1.03e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0454260889496353;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05289686421148521;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 1.1514501571655273
Parameter learned model CLL:-0.301773 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-08, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.956, 190, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.769, 180, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.38e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.316, 158, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.711, 177, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.204, 153, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.204, 153, 326], 'false,true': [1.03e-07, 469, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.769, 180, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.488, 166, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 492, 0]}]
{'': [0.22399598434883772, 1.4500872158369393e-17], 'true': [nan, 0.22399598434883772], 'true,false': [nan, 0.22399598434883772], 'true,false,false': [nan, 0.22399598434883772], 'false': [nan, 1.4500872158369393e-17]}
{'': [0.2326332552130346, -1.3791590368014366e-16], 'true': [nan, 0.2326332552130346], 'true,false': [nan, 0.2326332552130346], 'true,false,false': [0.2326332552130346, nan], 'false': [nan, -1.3791590368014366e-16]}
{'': [0.22918652064553335, -1.3341735918242224e-17], 'true': [nan, 0.22918652064553335], 'true,false': [nan, 0.22918652064553335], 'true,false,false': [nan, 0.22918652064553335], 'false': [nan, -1.3341735918242224e-17]}
{'': [0.22356071121686408, 2.3382656355370643e-16], 'true': [nan, 0.22356071121686408], 'true,false': [0.22356071121686408, nan], 'false': [nan, 2.3382656355370643e-16]}
{'': [0.21987910661839788, -3.18470349693272e-17], 'true': [nan, 0.21987910661839788], 'true,false': [nan, 0.21987910661839788], 'true,false,false': [nan, 0.21987910661839788], 'false': [nan, -3.18470349693272e-17]}
{'': [0.22806303333082814, 4.160509908982257e-17], 'true': [nan, 0.22806303333082814], 'true,false': [0.22806303333082814, nan], 'false': [nan, 4.160509908982257e-17]}
{'': [0.2173892198865962, -3.988825238174215e-17], 'true': [nan, 0.2173892198865962], 'true,false': [0.2173892198865962, nan], 'false': [nan, -3.988825238174215e-17]}
{'': [0.21738921988659118, 2.2725247412369942e-17], 'true': [nan, 0.21738921988659118], 'true,false': [nan, 0.21738921988659118], 'true,false,false': [nan, 0.21738921988659118], 'false': [2.2725247412369942e-17, nan]}
{'': [0.22918652064553408, -1.2837696644487892e-16], 'true': [nan, 0.22918652064553408], 'true,false': [0.22918652064553408, nan], 'false': [nan, -1.2837696644487892e-16]}
{'': [0.22356071121687002, 1.200485059147527e-16], 'true': [nan, 0.22356071121687002], 'true,false': [nan, 0.22356071121687002], 'true,false,false': [nan, 0.22356071121687002], 'false': [nan, 1.200485059147527e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.522169351577759
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.1418510649004877;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839138;  // std dev = 2.11e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.1254446385283923;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360621;  // std dev = 8.82e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.11231637819360592;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.10159632948783552;  // std dev = 3.18e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926079;  // std dev = 6.99e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.09269127618926136;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 6.91e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.07877675473109187;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333685;  // std dev = 7.81e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420264;  // std dev = 6.58e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
Inference time using transfer learning 0.9955193996429443
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.019395589828491
Best scored revision CLL: -0.064216


******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.24295711517334
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5127674089950903;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.92e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4558433566196633;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37020231498324313;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29530407681646653;  // std dev = 10.182, 478.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783551;  // std dev = 3.22e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18948720740371713;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.17044773048866294;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1251923588399617;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109172;  // std dev = 1.93e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06768528801835708;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333738;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08789477587998296;  // std dev = 10.159, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02647301002440005;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202533;  // std dev = 2.47e-07, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
Inference time using transfer learning 1.1032164096832275
Parameter learned model CLL:-0.302109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.92e-07, 452, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.338, 159, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.316, 158, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.182, 152, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.22e-07, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.711, 177, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.272, 156, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.93e-07, 445, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.73, 178, 326], 'false,true': [0.0, 488, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.159, 151, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.788, 181, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.47e-07, 531, 0]}]
{'': [0.22609312753020383, 1.8863966436108854e-16], 'true': [nan, 0.22609312753020383], 'true,false': [nan, 0.22609312753020383], 'true,false,false': [nan, 0.22609312753020383], 'false': [nan, 1.8863966436108854e-16]}
{'': [0.2203592305239736, -1.371982924740031e-16], 'true': [nan, 0.2203592305239736], 'true,false': [nan, 0.2203592305239736], 'true,false,false': [0.2203592305239736, nan], 'false': [nan, -1.371982924740031e-16]}
{'': [0.21987910661840301, -3.552713678800501e-18], 'true': [nan, 0.21987910661840301], 'true,false': [nan, 0.21987910661840301], 'true,false,false': [nan, 0.21987910661840301], 'false': [nan, -3.552713678800501e-18]}
{'': [0.21687295390487274, 2.1877236864192558e-16], 'true': [nan, 0.21687295390487274], 'true,false': [0.21687295390487274, nan], 'false': [nan, 2.1877236864192558e-16]}
{'': [0.22806303333082872, -2.6752362039160398e-17], 'true': [nan, 0.22806303333082872], 'true,false': [nan, 0.22806303333082872], 'true,false,false': [nan, 0.22806303333082872], 'false': [nan, -2.6752362039160398e-17]}
{'': [0.21890118971780878, 4.449616837397484e-17], 'true': [nan, 0.21890118971780878], 'true,false': [0.21890118971780878, nan], 'false': [nan, 4.449616837397484e-17]}
{'': [0.21987910661839977, 8.382807556720284e-17], 'true': [nan, 0.21987910661839977], 'true,false': [0.21987910661839977, nan], 'false': [nan, 8.382807556720284e-17]}
{'': [0.22844230284706327, -1.911039632551499e-17], 'true': [nan, 0.22844230284706327], 'true,false': [nan, 0.22844230284706327], 'true,false,false': [nan, 0.22844230284706327], 'false': [-1.911039632551499e-17, nan]}
{'': [0.2163504432402019, -1.1935994573045161e-16], 'true': [nan, 0.2163504432402019], 'true,false': [0.2163504432402019, nan], 'false': [nan, -1.1935994573045161e-16]}
{'': [0.22955156409867192, 1.145766887937073e-16], 'true': [nan, 0.22955156409867192], 'true,false': [nan, 0.22955156409867192], 'true,false,false': [nan, 0.22955156409867192], 'false': [nan, 1.145766887937073e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5174753665924072
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.12544463852839233;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360635;  // std dev = 7.60e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360579;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.10159632948783541;  // std dev = 3.48e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926074;  // std dev = 7.45e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 4.94e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.08518475138839678;  // std dev = 1.35e-07, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07877675473109197;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333677;  // std dev = 1.00e-07, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.07324622576333682;  // std dev = 1.78e-07, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420264;  // std dev = 6.50e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420357;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.06419184008202547;  // std dev = 2.26e-07, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
Inference time using transfer learning 1.0212066173553467
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.280218601226807
Best scored revision CLL: -0.064216


******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.166001081466675
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.510148935099508;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4387404531954756;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3489113987243825;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360579;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26344752782784003;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.25e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21666406331986252;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892613;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15492407141296605;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12409769878476883;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109219;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1014236336729732;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 1.33e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05057284492392241;  // std dev = 10.845, 510.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04090084790739568;  // std dev = 10.807, 508.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.38e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 1.1461262702941895
Parameter learned model CLL:-0.294756 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 174, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.611, 172, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.711, 177, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.826, 183, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.25e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.691, 176, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.57, 170, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 522, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [1.33e-07, 485, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.845, 184, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.807, 182, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.38e-07, 472, 0]}]
{'': [0.22689600000000268, -4.5818728000403283e-17], 'true': [nan, 0.22689600000000268], 'true,false': [nan, 0.22689600000000268], 'true,false,false': [nan, 0.22689600000000268], 'false': [nan, -4.5818728000403283e-17]}
{'': [0.22609312753019387, -1.2586959640460856e-16], 'true': [nan, 0.22609312753019387], 'true,false': [nan, 0.22609312753019387], 'true,false,false': [0.22609312753019387, nan], 'false': [nan, -1.2586959640460856e-16]}
{'': [0.22806303333083752, -8.741913579725642e-18], 'true': [nan, 0.22806303333083752], 'true,false': [nan, 0.22806303333083752], 'true,false,false': [nan, 0.22806303333083752], 'false': [nan, -8.741913579725642e-18]}
{'': [0.23026775410007586, 2.211155480006588e-16], 'true': [nan, 0.23026775410007586], 'true,false': [0.23026775410007586, nan], 'false': [nan, 2.211155480006588e-16]}
{'': [0.22526990114464, -7.591268544445516e-18], 'true': [nan, 0.22526990114464], 'true,false': [nan, 0.22526990114464], 'true,false,false': [nan, 0.22526990114464], 'false': [nan, -7.591268544445516e-18]}
{'': [0.22767892573133797, 4.0950849268960694e-17], 'true': [nan, 0.22767892573133797], 'true,false': [0.22767892573133797, nan], 'false': [nan, 4.0950849268960694e-17]}
{'': [0.22526990114464204, -5.3596973602593766e-17], 'true': [nan, 0.22526990114464204], 'true,false': [0.22526990114464204, nan], 'false': [nan, -5.3596973602593766e-17]}
{'': [0.2226738858808814, 3.6625914214438153e-17], 'true': [nan, 0.2226738858808814], 'true,false': [nan, 0.2226738858808814], 'true,false,false': [nan, 0.2226738858808814], 'false': [3.6625914214438153e-17, nan]}
{'': [0.2306189926951154, -1.2221782876125674e-16], 'true': [nan, 0.2306189926951154], 'true,false': [0.2306189926951154, nan], 'false': [nan, -1.2221782876125674e-16]}
{'': [0.22991195982392088, 1.1996053867771819e-16], 'true': [nan, 0.22991195982392088], 'true,false': [nan, 0.22991195982392088], 'true,false,false': [nan, 0.22991195982392088], 'false': [nan, 1.1996053867771819e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7334868907928467
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283913;  // std dev = 5.16e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.1254446385283923;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360633;  // std dev = 7.88e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.11231637819360582;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.10159632948783522;  // std dev = 3.96e-07, 546.000 (wgt'ed) examples reached here.  /* #neg=546 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0926912761892608;  // std dev = 6.83e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.09269127618926142;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.38e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07877675473109183;  // std dev = 1.75e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333689;  // std dev = 6.99e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07324622576333718;  // std dev = 5.16e-08, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 5.96e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06842697784420355;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06419184008202551;  // std dev = 2.16e-07, 433.000 (wgt'ed) examples reached here.  /* #neg=433 */
Inference time using transfer learning 1.022789716720581
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.624988317489624
Best scored revision CLL: -0.064216


******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2257306575775146
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.507551325537755;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4378679775779853;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3849653196327639;  // std dev = 10.159, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360592;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25450840358026344;  // std dev = 10.845, 510.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878353;  // std dev = 3.73e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2055703397293604;  // std dev = 10.651, 500.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926143;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18439250861704987;  // std dev = 10.182, 478.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0881800155924866;  // std dev = 10.956, 516.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109197;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09453659445251325;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.073246225763337;  // std dev = 1.32e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08095184314501194;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06564636751049543;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.36e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
Inference time using transfer learning 1.1390039920806885
Parameter learned model CLL:-0.302525 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.631, 173, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 543, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.159, 151, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.845, 184, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.73e-07, 523, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 174, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.182, 152, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.956, 190, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.529, 168, 326], 'false,true': [1.32e-07, 483, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.381, 161, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.316, 158, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.36e-07, 468, 0]}]
{'': [0.22767892573134024, -7.632783294297951e-17], 'true': [nan, 0.22767892573134024], 'true,false': [nan, 0.22767892573134024], 'true,false,false': [nan, 0.22767892573134024], 'false': [nan, -7.632783294297951e-17]}
{'': [0.22649708234104302, -1.8646839750610363e-16], 'true': [nan, 0.22649708234104302], 'true,false': [nan, 0.22649708234104302], 'true,false,false': [0.22649708234104302, nan], 'false': [nan, -1.8646839750610363e-16]}
{'': [0.21635044324019972, -1.3284719952779651e-17], 'true': [nan, 0.21635044324019972], 'true,false': [nan, 0.21635044324019972], 'true,false,false': [nan, 0.21635044324019972], 'false': [nan, -1.3284719952779651e-17]}
{'': [0.23061899269511438, 2.666233496996552e-16], 'true': [nan, 0.23061899269511438], 'true,false': [0.23061899269511438, nan], 'false': [nan, 2.666233496996552e-16]}
{'': [0.2268959999999997, -2.5222105224750006e-17], 'true': [nan, 0.2268959999999997], 'true,false': [nan, 0.2268959999999997], 'true,false,false': [nan, 0.2268959999999997], 'false': [nan, -2.5222105224750006e-17]}
{'': [0.2168729539048679, 4.0371746350005693e-17], 'true': [nan, 0.2168729539048679], 'true,false': [0.2168729539048679, nan], 'false': [nan, 4.0371746350005693e-17]}
{'': [0.23263325521302708, -2.8443730382958554e-17], 'true': [nan, 0.23263325521302708], 'true,false': [0.23263325521302708, nan], 'false': [nan, -2.8443730382958554e-17]}
{'': [0.22442590437476215, 3.5858134956837354e-17], 'true': [nan, 0.22442590437476215], 'true,false': [nan, 0.22442590437476215], 'true,false,false': [nan, 0.22442590437476215], 'false': [3.5858134956837354e-17, nan]}
{'': [0.22130210946624423, -1.2111523905001707e-16], 'true': [nan, 0.22130210946624423], 'true,false': [0.22130210946624423, nan], 'false': [nan, -1.2111523905001707e-16]}
{'': [0.21987910661840168, 1.1861357100696117e-16], 'true': [nan, 0.21987910661840168], 'true,false': [nan, 0.21987910661840168], 'true,false,false': [nan, 0.21987910661840168], 'false': [nan, 1.1861357100696117e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6086244583129883
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839133;  // std dev = 4.21e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.12544463852839233;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360635;  // std dev = 7.30e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.11231637819360588;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.10159632948783542;  // std dev = 3.44e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.30e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.09269127618926139;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109153;  // std dev = 8.16e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07877675473109202;  // std dev = 1.38e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333685;  // std dev = 7.96e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07324622576333702;  // std dev = 1.26e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.06419184008202532;  // std dev = 2.46e-07, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
Inference time using transfer learning 1.0400142669677734
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.458017349243164
Best scored revision CLL: -0.064216


******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2478725910186768
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5049743319249048;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44491564917870263;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3631918469552617;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360579;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.30859792314257756;  // std dev = 10.066, 473.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783538;  // std dev = 3.51e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19516090927316;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14648853717592938;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10099051421136465;  // std dev = 10.807, 508.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109198;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10925036556172245;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06893625398308835;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048401987477388844;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.32e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
Inference time using transfer learning 1.114109992980957
Parameter learned model CLL:-0.300611 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.73, 178, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 525, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.529, 168, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.488, 166, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.066, 147, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.51e-07, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 175, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.807, 182, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.294, 157, 326], 'false,true': [1.38e-07, 488, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.509, 167, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.32e-07, 461, 0]}]
{'': [0.22844230284706746, -1.2519086296725574e-16], 'true': [nan, 0.22844230284706746], 'true,false': [nan, 0.22844230284706746], 'true,false,false': [nan, 0.22844230284706746], 'false': [nan, -1.2519086296725574e-16]}
{'': [0.22442590437475995, -1.226355140171721e-16], 'true': [nan, 0.22442590437475995], 'true,false': [nan, 0.22442590437475995], 'true,false,false': [0.22442590437475995, nan], 'false': [nan, -1.226355140171721e-16]}
{'': [0.22356071121686366, -6.979791117486249e-18], 'true': [nan, 0.22356071121686366], 'true,false': [nan, 0.22356071121686366], 'true,false,false': [nan, 0.22356071121686366], 'false': [nan, -6.979791117486249e-18]}
{'': [0.21419663968461658, 2.464207591583182e-16], 'true': [nan, 0.21419663968461658], 'true,false': [0.21419663968461658, nan], 'false': [nan, 2.464207591583182e-16]}
{'': [0.22728993111581006, -7.57508247078998e-18], 'true': [nan, 0.22728993111581006], 'true,false': [nan, 0.22728993111581006], 'true,false,false': [nan, 0.22728993111581006], 'false': [nan, -7.57508247078998e-18]}
{'': [0.22728993111581353, 4.233535268998651e-17], 'true': [nan, 0.22728993111581353], 'true,false': [0.22728993111581353, nan], 'false': [nan, 4.233535268998651e-17]}
{'': [0.22991195982392212, -2.924044180082717e-17], 'true': [nan, 0.22991195982392212], 'true,false': [0.22991195982392212, nan], 'false': [nan, -2.924044180082717e-17]}
{'': [0.21939311326294877, 3.913081152367355e-17], 'true': [nan, 0.21939311326294877], 'true,false': [nan, 0.21939311326294877], 'true,false,false': [nan, 0.21939311326294877], 'false': [3.913081152367355e-17, nan]}
{'': [0.22399598434883217, -1.2029300389013917e-16], 'true': [nan, 0.22399598434883217], 'true,false': [0.22399598434883217, nan], 'false': [nan, -1.2029300389013917e-16]}
{'': [0.2252699011446386, 1.165613761211661e-16], 'true': [nan, 0.2252699011446386], 'true,false': [nan, 0.2252699011446386], 'true,false,false': [nan, 0.2252699011446386], 'false': [nan, 1.165613761211661e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.471015214920044
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.12544463852839233;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360626;  // std dev = 8.69e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360575;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.10159632948783553;  // std dev = 3.13e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926075;  // std dev = 7.45e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 6.66e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.0787767547310919;  // std dev = 1.65e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333689;  // std dev = 6.99e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07324622576333752;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.41e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06419184008202536;  // std dev = 2.46e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
Inference time using transfer learning 0.9997949600219727
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.313432931900024
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(12 unique tokens: ['same', 'title', 'author', 'have', 'word']...) from 37 documents (total 67 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(12 unique tokens: ['same', 'title', 'author', 'have', 'word']...) from 37 documents (total 67 corpus positions)", 'datetime': '2021-06-11T18:47:14.160327', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 8.333333% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.656206', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.658623', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.660619', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.662555', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.667818', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.668624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.669392', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.670155', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.672208', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.672962', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.673711', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.674492', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.676449', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.677226', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.677978', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:15.678738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.680660', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.681451', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.682197', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:15.682946', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8385121822357178
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19844121067362064;  // std dev = 14.665, 958.000 (wgt'ed) examples reached here.  /* #neg=632 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, H), movie(I, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1550084119290609;  // std dev = 14.859, 1,010.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13546696590376855;  // std dev = 14.823, 1,000.000 (wgt'ed) examples reached here.  /* #neg=674 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11500363029927545;  // std dev = 14.809, 996.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(B, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08837730350294545;  // std dev = 14.883, 1,017.000 (wgt'ed) examples reached here.  /* #neg=691 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07005990918776109;  // std dev = 14.907, 1,024.000 (wgt'ed) examples reached here.  /* #neg=698 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0608478988446719;  // std dev = 14.862, 1,011.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(B, I) )
%   | then return 0.5795068897310444;  // std dev = 6.264, 313.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=267 */
%   | else return -0.1849396654503369;  // std dev = 7.333, 666.000 (wgt'ed) examples reached here.  /* #neg=607 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05561135339402528;  // std dev = 12.881, 937.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02829385363639982;  // std dev = 13.040, 987.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=326 */
Inference time using transfer learning 1.0165314674377441
Parameter learned model CLL:-0.326528 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 4, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.665, 632, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E), movie(F, E)', 'true,false,false': 'genre(A, G)', 'false': 'genre(B, H), movie(I, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.859, 684, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.18e-08, 14, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.823, 674, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 10, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.809, 670, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 6, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.883, 691, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.907, 698, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 9, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.862, 685, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [3.73e-09, 15, 0], 'false,true': [6.264, 46, 267], 'false,false': [7.333, 607, 59]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.881, 611, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 8, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.04, 661, 326]}]
{'': [0.0, 0.22449344275870617], 'false': [nan, 0.22449344275870617], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}
{'': [-1.982541115402065e-18, 0.21859033428095376], 'false': [nan, 0.2185903342809525], 'true': [nan, -1.982541115402065e-18], 'true,false': [nan, -1.982541115402065e-18], 'true,false,false': [-1.982541115402065e-18, nan]}
{'': [9.912705577010326e-18, 0.21972399999999734], 'false': [nan, 0.21972399999999734], 'true': [nan, 9.912705577010326e-18], 'true,false': [nan, 9.912705577010326e-18], 'true,false,false': [nan, 9.912705577010326e-18]}
{'': [-5.551115123125783e-18, 0.22017790035644205], 'false': [nan, 0.22017790035644466], 'true': [nan, -5.551115123125783e-18], 'true,false': [-5.551115123125783e-18, nan]}
{'': [1.1564823173178713e-18, 0.2177979268850341], 'false': [nan, 0.2177979268850378], 'true': [nan, 1.1564823173178713e-18], 'true,false': [nan, 1.1564823173178713e-18], 'true,false,false': [nan, 1.1564823173178713e-18]}
{'': [4.270088556250602e-18, 0.2170066833496126], 'false': [nan, 0.2170066833496126], 'true': [nan, 4.270088556250602e-18], 'true,false': [4.270088556250602e-18, nan]}
{'': [0.0, 0.2184770687619208], 'false': [nan, 0.2184770687619208], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [9.251858538542971e-19, 0.22210861179770772], 'false': [0.1253661872633185, 0.08074065056046908], 'true': [nan, 9.251858538542971e-19], 'true,false': [nan, 9.251858538542971e-19], 'true,false,false': [nan, 9.251858538542971e-19]}
{'': [6.938893903907229e-19, 0.1770889375095509], 'false': [nan, 0.17708893750955104], 'true': [nan, 6.938893903907229e-19], 'true,false': [6.938893903907229e-19, nan]}
{'': [0.0, 0.1722865308588094], 'false': [nan, 0.1722865308588094], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 3.298945665359497
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 574.000 (wgt'ed) examples reached here.  /* #neg=574 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.12544463852839235;  // std dev = 0.000, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.11231637819360595;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1015963294878362;  // std dev = 4.21e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return -0.10159632948783567;  // std dev = 3.07e-07, 560.000 (wgt'ed) examples reached here.  /* #neg=560 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.09269127618926186;  // std dev = 0.000, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 2.24e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.07877675473109251;  // std dev = 0.000, 611.000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(B) )
%   | then return -0.07324622576333684;  // std dev = 1.37e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17557001772388253;  // std dev = 0.353, 328.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15294150944765772;  // std dev = 1.81e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.97e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.06854715996803089;  // std dev = 0.035, 588.000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1341613144522284;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.06421286931589912;  // std dev = 0.017, 590.000 (wgt'ed) examples reached here.  /* #neg=590 */
Inference time using transfer learning 0.9735090732574463
Refined model CLL: -0.064288


******************************************
Best model found
******************************************
Total revision time: 8.400211811065674
Best scored revision CLL: -0.064288


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.382230', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.383387', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.384185', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.384932', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.387907', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.388700', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.389457', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.390214', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.392368', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.393156', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.393904', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.394662', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.396777', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.397561', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.398320', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:26.399112', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.401191', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.401946', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.402695', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:26.403467', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.882887840270996
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18978677843623218;  // std dev = 14.761, 983.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, H), movie(I, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17804986682239615;  // std dev = 14.617, 946.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14576360904180866;  // std dev = 14.685, 963.000 (wgt'ed) examples reached here.  /* #neg=637 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12851073038220076;  // std dev = 14.613, 945.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(B, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10053225967479817;  // std dev = 14.673, 960.000 (wgt'ed) examples reached here.  /* #neg=634 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06916603675237934;  // std dev = 14.812, 997.000 (wgt'ed) examples reached here.  /* #neg=671 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06274680080918357;  // std dev = 14.735, 976.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(B, I) )
%   | then return 0.5719192725373775;  // std dev = 6.206, 312.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=267 */
%   | else return -0.19322015792463176;  // std dev = 7.325, 651.000 (wgt'ed) examples reached here.  /* #neg=592 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03938450196498079;  // std dev = 12.932, 962.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.027211790673779736;  // std dev = 12.954, 976.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=326 */
Inference time using transfer learning 1.0122637748718262
Parameter learned model CLL:-0.332712 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.761, 657, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E), movie(F, E)', 'true,false,false': 'genre(A, G)', 'false': 'genre(B, H), movie(I, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.617, 620, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 8, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.685, 637, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 5, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.613, 619, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 10, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.673, 634, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.812, 671, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.735, 650, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 10, 0], 'false,true': [6.206, 45, 267], 'false,false': [7.325, 592, 59]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.63e-09, 11, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.932, 636, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 8, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.954, 650, 326]}]
{'': [-1.0092936587501423e-17, 0.22165418420369196], 'false': [nan, 0.22165418420369196], 'true': [nan, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17], 'true,false,false': [nan, -1.0092936587501423e-17]}
{'': [-1.982541115402065e-18, 0.22585359966746346], 'false': [nan, 0.22585359966745577], 'true': [nan, -1.982541115402065e-18], 'true,false': [nan, -1.982541115402065e-18], 'true,false,false': [-1.982541115402065e-18, nan]}
{'': [-1.734723475976807e-18, 0.22392596690207162], 'false': [nan, 0.22392596690207162], 'true': [nan, -1.734723475976807e-18], 'true,false': [nan, -1.734723475976807e-18], 'true,false,false': [nan, -1.734723475976807e-18]}
{'': [0.0, 0.22596679824193458], 'false': [nan, 0.22596679824193253], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.0, 0.2242664930555609], 'false': [nan, 0.22426649305555538], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}
{'': [9.912705577010326e-19, 0.2200644058554724], 'false': [nan, 0.2200644058554724], 'true': [nan, 9.912705577010326e-19], 'true,false': [9.912705577010326e-19, nan]}
{'': [0.0, 0.22244944235419895], 'false': [nan, 0.22244944235419895], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [6.938893903907229e-19, 0.22392596690206037], 'false': [0.12342825443787128, 0.0824160396034943], 'true': [nan, 6.938893903907229e-19], 'true,false': [nan, 6.938893903907229e-19], 'true,false,false': [nan, 6.938893903907229e-19]}
{'': [6.30808536718839e-19, 0.17384139295960424], 'false': [nan, 0.17384139295960085], 'true': [nan, 6.30808536718839e-19], 'true,false': [6.30808536718839e-19, nan]}
{'': [0.0, 0.17192227730367762], 'false': [nan, 0.17192227730367762], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 3.3575408458709717
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.14185106490048852;  // std dev = 0.000, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 610.000 (wgt'ed) examples reached here.  /* #neg=610 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.11231637819360572;  // std dev = 0.000, 588.000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783626;  // std dev = 2.36e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.10159632948783544;  // std dev = 3.71e-07, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.09269127618926179;  // std dev = 0.000, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.49e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 588.000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109173;  // std dev = 1.67e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.07877675473109225;  // std dev = 0.000, 550.000 (wgt'ed) examples reached here.  /* #neg=550 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07324622576333706;  // std dev = 9.66e-08, 551.000 (wgt'ed) examples reached here.  /* #neg=551 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.39e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.06842697784420362;  // std dev = 0.000, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.06419184008202551;  // std dev = 2.36e-07, 556.000 (wgt'ed) examples reached here.  /* #neg=556 */
Inference time using transfer learning 0.9974076747894287
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.34103798866272
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.885340', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.886495', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.887338', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.888106', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.891101', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.891882', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.892639', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.893397', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.895615', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.896382', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.897129', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.897868', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.900064', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.900835', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.901578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:36.902330', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.904429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.905178', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.905908', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:36.906633', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.908416986465454
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1925079094584823;  // std dev = 14.731, 975.000 (wgt'ed) examples reached here.  /* #neg=649 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, G) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, H), movie(I, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1616919372342787;  // std dev = 14.794, 992.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15615974246834982;  // std dev = 14.592, 940.000 (wgt'ed) examples reached here.  /* #neg=614 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11404583293245664;  // std dev = 14.779, 988.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(B, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10985996898103009;  // std dev = 14.605, 943.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06623792726812143;  // std dev = 14.862, 1,011.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06361266995438793;  // std dev = 14.750, 980.000 (wgt'ed) examples reached here.  /* #neg=654 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( genre(B, I) )
%   | then return 0.6112440863126456;  // std dev = 5.346, 299.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=267 */
%   | else return -0.19193037141809502;  // std dev = 7.328, 657.000 (wgt'ed) examples reached here.  /* #neg=598 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.02846595579873412;  // std dev = 12.995, 987.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.029313104949050255;  // std dev = 12.907, 964.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=326 */
Inference time using transfer learning 0.9873943328857422
Parameter learned model CLL:-0.328987 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.731, 649, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E), movie(F, E)', 'true,false,false': 'genre(A, G)', 'false': 'genre(B, H), movie(I, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.794, 666, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 7, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.592, 614, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 7, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.779, 662, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 10, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.605, 617, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.862, 685, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 6, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.75, 654, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 10, 0], 'false,true': [5.346, 32, 267], 'false,false': [7.328, 598, 59]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.995, 661, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.907, 638, 326]}]
{'': [-1.0092936587501423e-17, 0.22256305062459036], 'false': [nan, 0.22256305062459036], 'true': [nan, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17], 'true,false,false': [nan, -1.0092936587501423e-17]}
{'': [2.7755575615628915e-18, 0.22063199141518783], 'false': [nan, 0.2206319914151938], 'true': [nan, 2.7755575615628915e-18], 'true,false': [nan, 2.7755575615628915e-18], 'true,false,false': [2.7755575615628915e-18, nan]}
{'': [-1.982541115402065e-18, 0.22653236758713788], 'false': [nan, 0.22653236758713788], 'true': [nan, -1.982541115402065e-18], 'true,false': [nan, -1.982541115402065e-18], 'true,false,false': [nan, -1.982541115402065e-18]}
{'': [0.0, 0.22108623317871012], 'false': [nan, 0.22108623317871232], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.0, 0.2261931135148828], 'false': [nan, 0.22619311351488722], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}
{'': [4.270088556250602e-18, 0.21847706876192327], 'false': [nan, 0.21847706876192327], 'true': [nan, 4.270088556250602e-18], 'true,false': [4.270088556250602e-18, nan]}
{'': [-1.1564823173178713e-18, 0.2219950020824615], 'false': [nan, 0.2219950020824615], 'true': [nan, -1.1564823173178713e-18], 'true,false': [-1.1564823173178713e-18, nan]}
{'': [6.938893903907229e-19, 0.22472033052642026], 'false': [0.09556940078970111, 0.08173770818419573], 'true': [nan, 6.938893903907229e-19], 'true,false': [nan, 6.938893903907229e-19], 'true,false,false': [nan, 6.938893903907229e-19]}
{'': [0.0, 0.171097635544587], 'false': [nan, 0.17109763554458254], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [2.523234146875356e-18, 0.17281327724949197], 'false': [nan, 0.17281327724949197], 'true': [nan, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18], 'true,false,false': [nan, 2.523234146875356e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 3.1508045196533203
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 574.000 (wgt'ed) examples reached here.  /* #neg=574 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.1254446385283923;  // std dev = 0.000, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.11231637819360567;  // std dev = 0.000, 578.000 (wgt'ed) examples reached here.  /* #neg=578 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783617;  // std dev = 4.71e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.10159632948783556;  // std dev = 3.38e-07, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.0926912761892618;  // std dev = 0.000, 598.000 (wgt'ed) examples reached here.  /* #neg=598 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.07877675473109245;  // std dev = 0.000, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.18e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.07324622576333714;  // std dev = 5.16e-08, 552.000 (wgt'ed) examples reached here.  /* #neg=552 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06842697784420267;  // std dev = 2.98e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return -0.0684269778442036;  // std dev = 0.000, 557.000 (wgt'ed) examples reached here.  /* #neg=557 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.06419184008202543;  // std dev = 2.48e-07, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
Inference time using transfer learning 1.0093421936035156
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.181885242462158
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.216684', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.217876', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.218724', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.219577', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.222532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.223390', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.224196', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.225001', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.227183', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.228018', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.228811', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.229596', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.231801', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.232622', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.233421', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:47.234239', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.236399', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.237205', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.237996', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:47.238776', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.9209866523742676
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1911417849462903;  // std dev = 14.746, 979.000 (wgt'ed) examples reached here.  /* #neg=653 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, G) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, H), movie(I, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1789580004320967;  // std dev = 14.605, 943.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14296824179974196;  // std dev = 14.712, 970.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11901838755541579;  // std dev = 14.719, 972.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( genre(B, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0910657660304731;  // std dev = 14.798, 993.000 (wgt'ed) examples reached here.  /* #neg=667 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07619081868922048;  // std dev = 14.776, 987.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07543271732712693;  // std dev = 14.621, 947.000 (wgt'ed) examples reached here.  /* #neg=621 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(B, I) )
%   | then return 0.5773957150392887;  // std dev = 6.086, 310.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=267 */
%   | else return -0.1972573094503148;  // std dev = 7.341, 681.000 (wgt'ed) examples reached here.  /* #neg=622 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0302818282572053;  // std dev = 13.031, 989.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.04334862155812295;  // std dev = 12.824, 922.000 (wgt'ed) examples reached here.  /* #neg=596 #pos=326 */
Inference time using transfer learning 1.0434210300445557
Parameter learned model CLL:-0.333642 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 15, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.746, 653, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E), movie(F, E)', 'true,false,false': 'genre(A, G)', 'false': 'genre(B, H), movie(I, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.605, 617, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.712, 644, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 5, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.719, 646, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [5.27e-09, 12, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.798, 667, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.776, 661, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.621, 621, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 9, 0], 'false,true': [6.086, 43, 267], 'false,false': [7.341, 622, 59]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.031, 663, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 7, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.824, 596, 326]}]
{'': [-1.4802973661668754e-17, 0.22210861179770194], 'false': [nan, 0.22210861179770194], 'true': [nan, -1.4802973661668754e-17], 'true,false': [nan, -1.4802973661668754e-17], 'true,false,false': [nan, -1.4802973661668754e-17]}
{'': [2.7755575615628915e-18, 0.22619311351488341], 'false': [nan, 0.22619311351488555], 'true': [nan, 2.7755575615628915e-18], 'true,false': [nan, 2.7755575615628915e-18], 'true,false,false': [2.7755575615628915e-18, nan]}
{'': [5.046468293750712e-18, 0.22313104474439963], 'false': [nan, 0.22313104474439963], 'true': [nan, 5.046468293750712e-18], 'true,false': [nan, 5.046468293750712e-18], 'true,false,false': [nan, 5.046468293750712e-18]}
{'': [0.0, 0.2229038595065068], 'false': [nan, 0.22290385950650912], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [2.3129646346357427e-18, 0.2205184529369195], 'false': [nan, 0.22051845293692335], 'true': [nan, 2.3129646346357427e-18], 'true,false': [nan, 2.3129646346357427e-18], 'true,false,false': [nan, 2.3129646346357427e-18]}
{'': [1.734723475976807e-18, 0.22119981235289174], 'false': [nan, 0.22119981235289174], 'true': [nan, 1.734723475976807e-18], 'true,false': [1.734723475976807e-18, nan]}
{'': [0.0, 0.22574037504084188], 'false': [nan, 0.22574037504084188], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [7.709882115452476e-19, 0.22074553931905966], 'false': [0.11946930280957349, 0.07913127667052756], 'true': [nan, 7.709882115452476e-19], 'true,false': [nan, 7.709882115452476e-19], 'true,false,false': [nan, 7.709882115452476e-19]}
{'': [0.0, 0.1716954170821479], 'false': [nan, 0.171695417082153], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [-4.956352788505163e-19, 0.17835623116751737], 'false': [nan, 0.17835623116751737], 'true': [nan, -4.956352788505163e-19], 'true,false': [nan, -4.956352788505163e-19], 'true,false,false': [nan, -4.956352788505163e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 3.2336788177490234
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 561.000 (wgt'ed) examples reached here.  /* #neg=561 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.11231637819360588;  // std dev = 0.000, 579.000 (wgt'ed) examples reached here.  /* #neg=579 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.1015963294878362;  // std dev = 4.08e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.10159632948783553;  // std dev = 3.46e-07, 576.000 (wgt'ed) examples reached here.  /* #neg=576 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.09269127618926169;  // std dev = 0.000, 578.000 (wgt'ed) examples reached here.  /* #neg=578 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109172;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.07877675473109248;  // std dev = 0.000, 599.000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return -0.07324622576333686;  // std dev = 1.71e-07, 619.000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.06842697784420365;  // std dev = 0.000, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.06419184008202551;  // std dev = 2.37e-07, 564.000 (wgt'ed) examples reached here.  /* #neg=564 */
Inference time using transfer learning 0.9864363670349121
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.254240274429321
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.654508', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.655744', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.656549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.657310', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.660278', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.661059', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.661823', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.662561', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.664684', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.665468', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.666221', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.666965', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.669176', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.669954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.670712', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:47:57.671481', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.673611', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.674368', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.675168', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:47:57.675912', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7974870204925537
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1966743764286876;  // std dev = 14.685, 963.000 (wgt'ed) examples reached here.  /* #neg=637 #pos=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(A, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, H), movie(I, H) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16311147705953613;  // std dev = 14.772, 986.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17232709677632468;  // std dev = 14.401, 896.000 (wgt'ed) examples reached here.  /* #neg=570 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11269479645919232;  // std dev = 14.753, 981.000 (wgt'ed) examples reached here.  /* #neg=655 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( genre(B, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09688733347561684;  // std dev = 14.708, 969.000 (wgt'ed) examples reached here.  /* #neg=643 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07949160930372766;  // std dev = 14.700, 967.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(A, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05918665309750854;  // std dev = 14.753, 981.000 (wgt'ed) examples reached here.  /* #neg=655 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( genre(B, I) )
%   | then return 0.5625850760848711;  // std dev = 6.379, 315.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=267 */
%   | else return -0.19826926565182423;  // std dev = 7.340, 680.000 (wgt'ed) examples reached here.  /* #neg=621 #pos=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(B, F), movie(G, F) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.03997204733795097;  // std dev = 12.960, 956.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then if ( movie(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E), movie(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(B, G), movie(H, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, I), movie(J, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.027564121708769682;  // std dev = 12.989, 969.000 (wgt'ed) examples reached here.  /* #neg=643 #pos=326 */
Inference time using transfer learning 1.0356431007385254
Parameter learned model CLL:-0.33306 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 6, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.685, 637, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E), movie(F, E)', 'true,false,false': 'genre(A, G)', 'false': 'genre(B, H), movie(I, H)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.772, 660, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 9, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.401, 570, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.753, 655, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.708, 643, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.7, 641, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(A, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.753, 655, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(B, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 8, 0], 'false,true': [6.379, 48, 267], 'false,false': [7.34, 621, 59]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(B, E)', 'false': 'genre(B, F), movie(G, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.86e-09, 6, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.96, 630, 326]}]
['workedunder(A, B)', {'': 'genre(A, C), genre(B, C)', 'true': 'movie(D, C)', 'true,false': 'genre(A, E), movie(F, E)', 'true,false,false': 'genre(B, G), movie(H, G)', 'false': 'genre(A, I), movie(J, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 7, 0], 'false,true': [0.0, 0, 0], 'false,false': [12.989, 643, 326]}]
{'': [-6.938893903907228e-18, 0.2239259669020651], 'false': [nan, 0.2239259669020651], 'true': [nan, -6.938893903907228e-18], 'true,false': [nan, -6.938893903907228e-18], 'true,false,false': [nan, -6.938893903907228e-18]}
{'': [0.0, 0.22131339770992556], 'false': [nan, 0.22131339770992658], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}
{'': [-1.5419764230904951e-18, 0.23146025988520463], 'false': [nan, 0.23146025988520463], 'true': [nan, -1.5419764230904951e-18], 'true,false': [nan, -1.5419764230904951e-18], 'true,false,false': [nan, -1.5419764230904951e-18]}
{'': [0.0, 0.2218813937805061], 'false': [nan, 0.22188139378050417], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [0.0, 0.22324462890364535], 'false': [nan, 0.22324462890365002], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}
{'': [4.270088556250602e-18, 0.2234717764833103], 'false': [nan, 0.2234717764833103], 'true': [nan, 4.270088556250602e-18], 'true,false': [4.270088556250602e-18, nan]}
{'': [0.0, 0.22188139378051264], 'false': [nan, 0.22188139378051264], 'true': [nan, 0.0], 'true,false': [0.0, nan]}
{'': [8.673617379884035e-19, 0.22029140678265968], 'false': [0.1291609977324239, 0.07923659169550212], 'true': [nan, 8.673617379884035e-19], 'true,false': [nan, 8.673617379884035e-19], 'true,false,false': [nan, 8.673617379884035e-19]}
{'': [5.782411586589357e-19, 0.17570480886580958], 'false': [nan, 0.1757048088658176], 'true': [nan, 5.782411586589357e-19], 'true,false': [5.782411586589357e-19, nan]}
{'': [-4.956352788505163e-19, 0.17411255004613893], 'false': [nan, 0.17411255004613893], 'true': [nan, -4.956352788505163e-19], 'true,false': [nan, -4.956352788505163e-19], 'true,false,false': [nan, -4.956352788505163e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
1;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
2;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
3;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
4;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
5;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
6;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
7;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
8;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true
9;;workedunder(A, B) :- genre(A, C), genre(B, C).;true;true


Refining candidate
***************************
Model training time 3.3794710636138916
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return -0.12544463852839233;  // std dev = 0.000, 572.000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return -0.11231637819360585;  // std dev = 0.000, 599.000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.10159632948783542;  // std dev = 3.65e-07, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return -0.0926912761892617;  // std dev = 0.000, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.07877675473109251;  // std dev = 0.000, 617.000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.07324622576333711;  // std dev = 6.66e-08, 557.000 (wgt'ed) examples reached here.  /* #neg=557 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.0684269778442027;  // std dev = 1.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.06842697784420358;  // std dev = 0.000, 547.000 (wgt'ed) examples reached here.  /* #neg=547 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(A, C), genre(B, C) )
%   then return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.0641918400820255;  // std dev = 2.40e-07, 575.000 (wgt'ed) examples reached here.  /* #neg=575 */
Inference time using transfer learning 1.006157636642456
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.350585699081421
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.381456', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.382348', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.383030', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.383668', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.386429', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.387092', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.387724', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.388345', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.390263', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.390864', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.391441', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.392007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.393775', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.394408', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.395077', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:08.395706', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.397426', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.398001', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.398563', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:08.399140', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2087740898132324
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5127674089950903;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4130220375096843;  // std dev = 10.992, 518.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38056931081732465;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27036623058075543;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23617256591924526;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.12369873316405743;  // std dev = 11.028, 520.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1464884781836115;  // std dev = 10.204, 479.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109205;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0843161414878513;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333728;  // std dev = 0.000, 434.000 (wgt'ed) examples reached here.  /* #neg=434 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08411744328776444;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03199785306381283;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 1.104426622390747
Parameter learned model CLL:-0.299549 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.992, 192, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.294, 157, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.691, 176, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.204, 153, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.028, 194, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.204, 153, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 434, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.294, 157, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.788, 181, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 492, 0]}]
{'': [0.22609312753020383, 4.0371746350005693e-17], 'true': [nan, 0.22609312753020383], 'true,false': [nan, 0.22609312753020383], 'true,false,false': [nan, 0.22609312753020383], 'false': [nan, 4.0371746350005693e-17]}
{'': [0.23327022554822519, -1.3621223663468308e-16], 'true': [nan, 0.23327022554822519], 'true,false': [nan, 0.23327022554822519], 'true,false,false': [0.23327022554822519, nan], 'false': [nan, -1.3621223663468308e-16]}
{'': [0.21939311326295796, -1.0897894720246936e-17], 'true': [nan, 0.21939311326295796], 'true,false': [nan, 0.21939311326295796], 'true,false,false': [nan, 0.21939311326295796], 'false': [nan, -1.0897894720246936e-17]}
{'': [0.22767892573133708, 2.2017868387524114e-16], 'true': [nan, 0.22767892573133708], 'true,false': [0.22767892573133708, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.2173892198865965, -1.8312957107219077e-17], 'true': [nan, 0.2173892198865965], 'true,false': [nan, 0.2173892198865965], 'true,false,false': [nan, 0.2173892198865965], 'false': [nan, -1.8312957107219077e-17]}
{'': [0.23389053254437972, 4.160509908982257e-17], 'true': [nan, 0.23389053254437972], 'true,false': [0.23389053254437972, nan], 'false': [nan, 4.160509908982257e-17]}
{'': [0.21738921988659637, -3.8345052256129907e-17], 'true': [nan, 0.21738921988659637], 'true,false': [0.21738921988659637, nan], 'false': [nan, -3.8345052256129907e-17]}
{'': [0.2260931275302004, -6.139482163825751e-18], 'true': [nan, 0.2260931275302004], 'true,false': [nan, 0.2260931275302004], 'true,false,false': [nan, 0.2260931275302004], 'false': [-6.139482163825751e-18, nan]}
{'': [0.21939311326295038, -1.2509555207044018e-16], 'true': [nan, 0.21939311326295038], 'true,false': [0.21939311326295038, nan], 'false': [nan, -1.2509555207044018e-16]}
{'': [0.22955156409867197, 1.200485059147527e-16], 'true': [nan, 0.22955156409867197], 'true,false': [nan, 0.22955156409867197], 'true,false,false': [nan, 0.22955156409867197], 'false': [nan, 1.200485059147527e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6970582008361816
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.14185106490048718;  // std dev = 2.98e-07, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839122;  // std dev = 6.66e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.12544463852839233;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360633;  // std dev = 7.88e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.11231637819360593;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.10159632948783537;  // std dev = 3.55e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.30e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.09269127618926143;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 7.15e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109158;  // std dev = 7.45e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07877675473109208;  // std dev = 1.25e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333688;  // std dev = 7.52e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333702;  // std dev = 1.26e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06842697784420351;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06419184008202541;  // std dev = 2.40e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
Inference time using transfer learning 1.0222208499908447
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.282415866851807
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.935871', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.936790', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.937456', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.938095', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.941007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.941650', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.942266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.942884', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.944898', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.945499', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.946062', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.946610', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.948594', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.949249', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.949874', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:18.950485', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.952475', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.953053', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.953603', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:18.954157', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3384175300598145
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062602671074603;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048724;  // std dev = 2.98e-07, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4500856275600961;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3755828019655751;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.282959945179662;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.49e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21831109205446542;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1556519489764269;  // std dev = 10.467, 491.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11552852722218702;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109222;  // std dev = 7.60e-08, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08574466167170773;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333724;  // std dev = 0.000, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.04795601543955942;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0351963779219879;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.37e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
Inference time using transfer learning 1.0671944618225098
Parameter learned model CLL:-0.298084 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.711, 177, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 424, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.446, 164, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.272, 156, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.403, 162, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.49e-07, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.467, 165, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.6e-08, 528, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.509, 167, 326], 'false,true': [0.0, 441, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.769, 180, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.788, 181, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.37e-07, 471, 0]}]
{'': [0.2280630333308328, 2.09476042382105e-16], 'true': [nan, 0.2280630333308328], 'true,false': [nan, 0.2280630333308328], 'true,false,false': [nan, 0.2280630333308328], 'false': [nan, 2.09476042382105e-16]}
{'': [0.22267388588087936, -1.3265002372144727e-16], 'true': [nan, 0.22267388588087936], 'true,false': [nan, 0.22267388588087936], 'true,false,false': [0.22267388588087936, nan], 'false': [nan, -1.3265002372144727e-16]}
{'': [0.2189011897178156, -3.6104813808948184e-18], 'true': [nan, 0.2189011897178156], 'true,false': [nan, 0.2189011897178156], 'true,false,false': [nan, 0.2189011897178156], 'false': [nan, -3.6104813808948184e-18]}
{'': [0.22176498253157859, 2.4433823995766495e-16], 'true': [nan, 0.22176498253157859], 'true,false': [0.22176498253157859, nan], 'false': [nan, 2.4433823995766495e-16]}
{'': [0.22035923052396952, -3.321927160295744e-17], 'true': [nan, 0.22035923052396952], 'true,false': [nan, 0.22035923052396952], 'true,false,false': [nan, 0.22035923052396952], 'false': [nan, -3.321927160295744e-17]}
{'': [0.22312003019732246, 4.4959444798869974e-17], 'true': [nan, 0.22312003019732246], 'true,false': [0.22312003019732246, nan], 'false': [nan, 4.4959444798869974e-17]}
{'': [0.22356071121686646, 1.0934014636459875e-17], 'true': [nan, 0.22356071121686646], 'true,false': [0.22356071121686646, nan], 'false': [nan, 1.0934014636459875e-17]}
{'': [0.22399598434883608, -2.014010021995749e-18], 'true': [nan, 0.22399598434883608], 'true,false': [nan, 0.22399598434883608], 'true,false,false': [nan, 0.22399598434883608], 'false': [-2.014010021995749e-18, nan]}
{'': [0.2291865206455345, -1.2187063555136854e-16], 'true': [nan, 0.2291865206455345], 'true,false': [0.2291865206455345, nan], 'false': [nan, -1.2187063555136854e-16]}
{'': [0.2295515640986719, 1.1927236740134378e-16], 'true': [nan, 0.2295515640986719], 'true,false': [nan, 0.2295515640986719], 'true,false,false': [nan, 0.2295515640986719], 'false': [nan, 1.1927236740134378e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.726714849472046
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.1418510649004877;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.12544463852839227;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360656;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.11231637819360589;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.10159632948783526;  // std dev = 3.85e-07, 535.000 (wgt'ed) examples reached here.  /* #neg=535 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926074;  // std dev = 7.45e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.22e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.07877675473109197;  // std dev = 1.50e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333685;  // std dev = 7.07e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07324622576333684;  // std dev = 1.74e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 7.07e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
Inference time using transfer learning 1.033639907836914
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.378123998641968
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.562351', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.563236', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.563835', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.564380', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.567182', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.567768', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.568314', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.568872', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.570712', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.571255', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.571754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.572243', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.573960', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.574562', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.575132', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:29.575680', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.577391', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.577896', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.578373', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:29.578858', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1869890689849854
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5049743319249048;  // std dev = 10.730, 504.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048782;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.47567458694031634;  // std dev = 10.042, 472.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36488046828878634;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360578;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26110402538814387;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.28e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2245401285822679;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926125;  // std dev = 2.98e-08, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14290584857959057;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.41e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0945544962975679;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06872008756584283;  // std dev = 10.901, 513.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333721;  // std dev = 3.65e-08, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08175849381222598;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03720066115998686;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 1.1661195755004883
Parameter learned model CLL:-0.295672 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.73, 178, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.042, 146, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.691, 176, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.28e-07, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.272, 156, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-08, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.864, 185, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.901, 187, 326], 'false,true': [3.65e-08, 447, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.446, 164, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.826, 183, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 488, 0]}]
{'': [0.22844230284706746, -5.944501234213437e-17], 'true': [nan, 0.22844230284706746], 'true,false': [nan, 0.22844230284706746], 'true,false,false': [nan, 0.22844230284706746], 'false': [nan, -5.944501234213437e-17]}
{'': [0.21364191324331602, -1.212013195326397e-16], 'true': [nan, 0.21364191324331602], 'true,false': [nan, 0.21364191324331602], 'true,false,false': [0.21364191324331602, nan], 'false': [nan, -1.212013195326397e-16]}
{'': [0.2208335450219365, -6.952472952642859e-18], 'true': [nan, 0.2208335450219365], 'true,false': [nan, 0.2208335450219365], 'true,false,false': [nan, 0.2208335450219365], 'false': [nan, -6.952472952642859e-18]}
{'': [0.22767892573134008, 2.238949766327399e-16], 'true': [nan, 0.22767892573134008], 'true,false': [0.22767892573134008, nan], 'false': [nan, 2.238949766327399e-16]}
{'': [0.2189011897178075, 1.935029236819445e-18], 'true': [nan, 0.2189011897178075], 'true,false': [nan, 0.2189011897178075], 'true,false,false': [nan, 0.2189011897178075], 'false': [nan, 1.935029236819445e-18]}
{'': [0.22728993111580867, 4.128928603977855e-17], 'true': [nan, 0.22728993111580867], 'true,false': [0.22728993111580867, nan], 'false': [nan, 4.128928603977855e-17]}
{'': [0.23096572087269948, -2.5851346935138782e-17], 'true': [nan, 0.23096572087269948], 'true,false': [0.23096572087269948, nan], 'false': [nan, -2.5851346935138782e-17]}
{'': [0.23164582454620683, 2.980464495638004e-18], 'true': [nan, 0.23164582454620683], 'true,false': [nan, 0.23164582454620683], 'true,false,false': [nan, 0.23164582454620683], 'false': [2.980464495638004e-18, nan]}
{'': [0.2226738858808831, -1.2038562917622179e-16], 'true': [nan, 0.2226738858808831], 'true,false': [0.2226738858808831, nan], 'false': [nan, -1.2038562917622179e-16]}
{'': [0.2302677541000691, 1.2285254780688208e-16], 'true': [nan, 0.2302677541000691], 'true,false': [nan, 0.2302677541000691], 'true,false,false': [nan, 0.2302677541000691], 'false': [nan, 1.2285254780688208e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.3589861392974854
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.1418510649004879;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.12544463852839224;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926079;  // std dev = 6.99e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.09269127618926137;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.14e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 7.45e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.07877675473109196;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333688;  // std dev = 7.22e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07324622576333721;  // std dev = 3.65e-08, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 5.37e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.0684269778442035;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06419184008202543;  // std dev = 2.38e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 1.01106858253479
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.100402355194092
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.158966', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.159830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.160426', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.160985', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.163767', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.164338', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.164897', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.165441', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.167326', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.167858', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.168355', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.168840', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.170573', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.171150', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.171702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:40.172240', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.173949', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.174460', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.174959', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:40.175452', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1560235023498535
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5275534525533068;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4589159465748473;  // std dev = 10.249, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839224;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34226373365985097;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2809896854543842;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.29e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21409295769954584;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926128;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15530394390814403;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1387775684250211;  // std dev = 10.159, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109205;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0811073084513192;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10262678851341965;  // std dev = 9.872, 465.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02785596666619934;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.41e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
Inference time using transfer learning 1.1401042938232422
Parameter learned model CLL:-0.306211 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.381, 161, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.249, 155, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.446, 164, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.29e-07, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 464, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.509, 167, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.159, 151, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.529, 168, 326], 'false,true': [1.53e-07, 498, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [9.872, 139, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 175, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.41e-07, 479, 0]}]
{'': [0.22130210946624834, -8.29427318007899e-17], 'true': [nan, 0.22130210946624834], 'true,false': [nan, 0.22130210946624834], 'true,false,false': [nan, 0.22130210946624834], 'false': [nan, -8.29427318007899e-17]}
{'': [0.21840327453632816, -1.2111523905001707e-16], 'true': [nan, 0.21840327453632816], 'true,false': [nan, 0.21840327453632816], 'true,false,false': [0.21840327453632816, nan], 'false': [nan, -1.2111523905001707e-16]}
{'': [0.22767892573134005, -1.0831444142684454e-17], 'true': [nan, 0.22767892573134005], 'true,false': [nan, 0.22767892573134005], 'true,false,false': [nan, 0.22767892573134005], 'false': [nan, -1.0831444142684454e-17]}
{'': [0.22267388588088027, 2.2527602329192367e-16], 'true': [nan, 0.22267388588088027], 'true,false': [0.22267388588088027, nan], 'false': [nan, 2.2527602329192367e-16]}
{'': [0.22222222222222487, -1.914177628664063e-18], 'true': [nan, 0.22222222222222487], 'true,false': [nan, 0.22222222222222487], 'true,false,false': [nan, 0.22222222222222487], 'false': [nan, -1.914177628664063e-18]}
{'': [0.22399598434883272, 4.085620730620576e-17], 'true': [nan, 0.22399598434883272], 'true,false': [0.22399598434883272, nan], 'false': [nan, 4.085620730620576e-17]}
{'': [0.2163504432402015, -3.752866562113205e-17], 'true': [nan, 0.2163504432402015], 'true,false': [0.2163504432402015, nan], 'false': [nan, -3.752866562113205e-17]}
{'': [0.22442590437476231, 4.726250626918337e-17], 'true': [nan, 0.22442590437476231], 'true,false': [nan, 0.22442590437476231], 'true,false,false': [nan, 0.22442590437476231], 'false': [4.726250626918337e-17, nan]}
{'': [0.2095687362700888, -1.2178116476300687e-16], 'true': [nan, 0.2095687362700888], 'true,false': [0.2095687362700888, nan], 'false': [nan, -1.2178116476300687e-16]}
{'': [0.22728993111581086, 1.2145237263122797e-16], 'true': [nan, 0.22728993111581086], 'true,false': [nan, 0.22728993111581086], 'true,false,false': [nan, 0.22728993111581086], 'false': [nan, 1.2145237263122797e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.587981939315796
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.14185106490048727;  // std dev = 2.67e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.12544463852839235;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360592;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.10159632948783551;  // std dev = 3.21e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0926912761892607;  // std dev = 8.16e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 6.41e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.07877675473109193;  // std dev = 1.59e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333688;  // std dev = 7.52e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333703;  // std dev = 1.19e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.05e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.06419184008202544;  // std dev = 2.33e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
Inference time using transfer learning 1.0111665725708008
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.201488256454468
Best scored revision CLL: -0.064216


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.656886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.657825', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.658480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'venue', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.659142', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.662078', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.662732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.663377', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['have', 'title', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.664017', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.666022', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.666631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.667225', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['title', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.667789', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'genre']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.669702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.670337', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.670982', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(4 unique tokens: ['author', 'have', 'word', 'movie']) from 2 documents (total 4 corpus positions)", 'datetime': '2021-06-11T18:48:50.671617', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'genre']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.673547', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.674114', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.674698', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['author', 'movie']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:48:50.675276', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.080453872680664
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5154069996156371;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.88e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4623972590509198;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35328809474590883;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360601;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2444688077664827;  // std dev = 10.992, 518.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783572;  // std dev = 2.70e-07, 433.000 (wgt'ed) examples reached here.  /* #neg=433 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20141991102903326;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892612;  // std dev = 6.32e-08, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14123206070199104;  // std dev = 10.901, 513.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09740416131734408;  // std dev = 11.028, 520.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109191;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1143363349756562;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07418751961225527;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044586566961845917;  // std dev = 10.769, 506.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202534;  // std dev = 2.45e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
Inference time using transfer learning 1.0976943969726562
Parameter learned model CLL:-0.2946 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.88e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.227, 154, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 447, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.992, 192, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.7e-07, 433, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.75, 179, 326], 'false,true': [0.0, 0, 0], 'false,false': [6.32e-08, 451, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.901, 187, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.028, 194, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 474, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.403, 162, 326], 'false,true': [1.38e-07, 488, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.591, 171, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.769, 180, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 520, 0]}]
{'': [0.2252699011446437, 7.463684199160717e-17], 'true': [nan, 0.2252699011446437], 'true,false': [nan, 0.2252699011446437], 'true,false,false': [nan, 0.2252699011446437], 'false': [nan, 7.463684199160717e-17]}
{'': [0.21789930555555648, -1.3678697181035685e-16], 'true': [nan, 0.21789930555555648], 'true,false': [nan, 0.21789930555555648], 'true,false,false': [0.21789930555555648, nan], 'false': [nan, -1.3678697181035685e-16]}
{'': [0.22485052545657697, -1.1921857982552016e-17], 'true': [nan, 0.22485052545657697], 'true,false': [nan, 0.22485052545657697], 'true,false,false': [nan, 0.22485052545657697], 'false': [nan, -1.1921857982552016e-17]}
{'': [0.2332702255482155, 1.6820007024344172e-16], 'true': [nan, 0.2332702255482155], 'true,false': [0.2332702255482155, nan], 'false': [nan, 1.6820007024344172e-16]}
{'': [0.228816782668367, 8.862090662196371e-18], 'true': [nan, 0.228816782668367], 'true,false': [nan, 0.228816782668367], 'true,false,false': [nan, 0.228816782668367], 'false': [nan, 8.862090662196371e-18]}
{'': [0.2316458245462037, 4.0371746350005693e-17], 'true': [nan, 0.2316458245462037], 'true,false': [0.2316458245462037, nan], 'false': [nan, 4.0371746350005693e-17]}
{'': [0.23389053254437864, -2.1548632545467172e-17], 'true': [nan, 0.23389053254437864], 'true,false': [0.23389053254437864, nan], 'false': [nan, -2.1548632545467172e-17]}
{'': [0.2217649825315775, 3.913081152367355e-17], 'true': [nan, 0.2217649825315775], 'true,false': [nan, 0.2217649825315775], 'true,false,false': [nan, 0.2217649825315775], 'false': [3.913081152367355e-17, nan]}
{'': [0.22568408438559112, -1.1990408665951691e-16], 'true': [nan, 0.22568408438559112], 'true,false': [0.22568408438559112, nan], 'false': [nan, -1.1990408665951691e-16]}
{'': [0.2291865206455345, 1.1529239101876627e-16], 'true': [nan, 0.2291865206455345], 'true,false': [nan, 0.2291865206455345], 'true,false,false': [nan, 0.2291865206455345], 'false': [nan, 1.1529239101876627e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.6346747875213623
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839133;  // std dev = 4.71e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.12544463852839235;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360626;  // std dev = 8.94e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360593;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.10159632948783538;  // std dev = 3.53e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.45e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.09269127618926139;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7.60e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07877675473109182;  // std dev = 1.79e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0732462257633368;  // std dev = 9.25e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07324622576333707;  // std dev = 1.05e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 5.96e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06842697784420354;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
Inference time using transfer learning 1.015699863433838
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Total revision time: 8.268510341644287
Best scored revision CLL: -0.064216


******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8493528366088867
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6982657356905919;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5341833593751857;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | | else return -0.11231637819360622;  // std dev = 6.50e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.407482406025885;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783658;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 5.48e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.31756915996164387;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.77e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2266298681966287;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19628073961177125;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 8.56e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18834040224947746;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.30e-07, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14799400450686587;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420299;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09850818018815403;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 2.36e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
Inference time using transfer learning 1.9555072784423828
Parameter learned model CLL:-0.087241 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 252, 0], 'false,false': [8.33e-09, 78, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 299, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 249, 0], 'false,false,false': [6.5e-08, 83, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 248, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.48e-08, 83, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.77e-09, 306, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 362, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.56e-08, 299, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.997, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 220, 0], 'false,false': [0.0, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 298, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.215, 8, 156], 'false,true': [2.36e-08, 238, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 89, 0]}]
{'': [0.018511925952302145, 1.049665405100148e-16], 'false': [-1.1983359630874705e-16, 7.401486830834377e-17], 'false,true': [nan, -1.1983359630874705e-16]}
{'': [0.024375000000001812, -8.911489160870822e-17], 'false': [nan, -8.911489160870822e-17]}
{'': [0.030091431657728773, -4.5479015466572676e-17], 'false': [nan, -4.5479015466572676e-17], 'false,false': [-9.095803093314535e-17, 5.0829487874404755e-17]}
{'': [0.02437500000000099, -9.391614709820056e-18], 'false': [nan, -9.391614709820056e-18], 'false,false': [-7.162729191130042e-17, 3.611568875286654e-17], 'false,false,false': [nan, 3.611568875286654e-17]}
{'': [0.01851192595229665, 9.288140336733336e-17], 'false': [nan, 9.288140336733336e-17], 'false,false': [nan, 9.288140336733336e-17]}
{'': [0.0411005306936657, 3.925650473812708e-17], 'false': [nan, 3.925650473812708e-17], 'false,false': [nan, 3.925650473812708e-17]}
{'': [0.030091431657729335, 2.450659519239476e-17], 'false': [nan, 2.450659519239476e-17], 'false,false': [nan, 2.450659519239476e-17], 'false,false,false': [nan, 2.450659519239476e-17]}
{'': [0.006328857154448399, 7.526935760170553e-18], 'true': [0.006328857154448399, nan], 'false': [7.670631806501082e-17, -5.921189464667502e-18]}
{'': [0.018511925952296174, -5.290324479757457e-17], 'false': [nan, -5.290324479757457e-17], 'false,false': [nan, -5.290324479757457e-17]}
{'': [0.04640095181439621, 6.247126499419841e-17], 'false': [2.332401312237724e-18, -1.1850695206673019e-17], 'false,false': [nan, -1.1850695206673019e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 43.924275159835815
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.6824363751739175;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.39086943769020516;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6678589889992188;  // std dev = 0.962, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7318879790939876;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7621134640304031;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.7260607334141967;  // std dev = 0.037, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.125444638528392;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.5607590538389268;  // std dev = 0.030, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.5058988437853664;  // std dev = 1.324, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else return 0.3821450885073207;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5757275990046732;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5680726900523654;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5553664367462843;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.5618994634946806;  // std dev = 0.046, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360672;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return -0.11231637819360625;  // std dev = 6.18e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4222119679563606;  // std dev = 0.033, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.3261695371528201;  // std dev = 1.350, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.434513686472854;  // std dev = 0.141, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.4830170841554466;  // std dev = 0.160, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.09486578322887067;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.371851160973735;  // std dev = 1.256, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43175838706462516;  // std dev = 3.65e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783623;  // std dev = 6.72e-09, 357.000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(D, F) )
%   | | | then return 0.3237384966339727;  // std dev = 0.029, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.3351634882547981;  // std dev = 0.047, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.2252075387099167;  // std dev = 0.927, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.33811181468105095;  // std dev = 0.120, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.28808148304073333;  // std dev = 0.970, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.15032791627164074;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.2221684573065229;  // std dev = 1.347, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.329639899458419;  // std dev = 0.019, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926042;  // std dev = 9.68e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.242376935043261;  // std dev = 0.957, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.28382568378317413;  // std dev = 0.097, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.31694187037209925;  // std dev = 0.233, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.270017387413426;  // std dev = 0.083, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2643961339342533;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.04830164390625369;  // std dev = 0.598, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.2647141242753055;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2603020538914836;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.21682797395288303;  // std dev = 0.037, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.22390365359333786;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.07361738695230748;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.23101422668464652;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.24079571044611173;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3216027579439297;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A), follows(K, J) )
%   | | | then return 0.21116901166229135;  // std dev = 0.045, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.21455284789527246;  // std dev = 0.048, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.07877675473109143;  // std dev = 5.43e-09, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1829829309547747;  // std dev = 0.044, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.09641921822466155;  // std dev = 1.350, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.12873572143393708;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.046700707830870596;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.19967637203296318;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2582735201669241;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), follows(I, H) )
%   | | | then return 0.1781468234200333;  // std dev = 0.039, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.18061550713430913;  // std dev = 0.042, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.07324622576333709;  // std dev = 3.84e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.11498393348246237;  // std dev = 1.383, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.15649882322601677;  // std dev = 0.104, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22307965754328948;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1789529322213893;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.15858730168514631;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.26290658936845446;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.15431110013125643;  // std dev = 0.011, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.07181486254211307;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), follows(F, D) )
%   | | | then return 0.14085443155869243;  // std dev = 0.063, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.16908575388507158;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.0721543365074305;  // std dev = 0.240, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.16657669955583992;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.009195139939868029;  // std dev = 2.094, 36.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11235044440511381;  // std dev = 0.637, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.14397099650606535;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, L) )
%   | then return -0.06419184008202625;  // std dev = 1.61e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
Inference time using transfer learning 4.667287349700928
Refined model CLL: -0.084684


******************************************
Best model found
******************************************
Total revision time: 54.271448373794556
Best scored revision CLL: -0.084684


******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.0956830978393555
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048852;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7080989358953832;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5408756800268166;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.11231637819360622;  // std dev = 6.50e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3943172409788163;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 4.83e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.332905873952802;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.68e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2634764464248035;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839676;  // std dev = 6.18e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19673893655558253;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 2.98e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17782373317220496;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.26e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14008810054567195;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420301;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09816481161218615;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
Inference time using transfer learning 2.0359020233154297
Parameter learned model CLL:-0.087742 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.997, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 225, 0], 'false,false': [8.33e-09, 72, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 337, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 235, 0], 'false,false,false': [6.5e-08, 83, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 231, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.83e-08, 88, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.68e-09, 311, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 293, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98e-08, 304, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.997, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 232, 0], 'false,false': [0.0, 82, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 303, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 83, 0]}]
{'': [0.006328857154454536, 2.392399783704041e-17], 'false': [-2.329001189435884e-16, 6.78469626159818e-17], 'false,true': [nan, -2.329001189435884e-16]}
{'': [0.012497997115844412, -1.0805731515639505e-16], 'false': [nan, -1.0805731515639505e-16]}
{'': [0.018511925952295758, -4.7481236273277137e-17], 'false': [nan, -4.7481236273277137e-17], 'false,false': [-8.31486180144798e-17, 5.0829487874404755e-17]}
{'': [0.030091431657730074, -3.341110042759092e-17], 'false': [nan, -3.341110042759092e-17], 'false,false': [-6.920870802858119e-17, 2.6493958542191237e-17], 'false,false,false': [nan, 2.6493958542191237e-17]}
{'': [-1.3664283380001927e-16, 9.424401237975605e-17], 'false': [nan, 9.424401237975605e-17], 'false,false': [nan, 9.424401237975605e-17]}
{'': [-1.1386902816668272e-17, 3.789157080631934e-17], 'false': [nan, 3.789157080631934e-17], 'false,false': [nan, 3.789157080631934e-17]}
{'': [0.01851192595229603, 2.921639538487254e-18], 'false': [nan, 2.921639538487254e-18], 'false,false': [nan, 2.921639538487254e-18], 'false,false,false': [nan, 2.921639538487254e-18]}
{'': [0.006328857154448399, 7.071484233281252e-18], 'true': [0.006328857154448399, nan], 'false': [6.795330581757423e-17, -6.0926873302600054e-18]}
{'': [0.018511925952296195, -5.789281778573423e-17], 'false': [nan, -5.789281778573423e-17], 'false,false': [nan, -5.789281778573423e-17]}
{'': [0.04110053069366549, 4.958277585704583e-17], 'false': [-1.964996503761339e-18, -1.070094481566416e-17], 'false,false': [nan, -1.070094481566416e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 35.17400097846985
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.7943191478654695;  // std dev = 1.676, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.7012915940291363;  // std dev = 0.991, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.5051876979252399;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.729754868586334;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.7312981297866948;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6361400788776209;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.12544463852839202;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5624405847800621;  // std dev = 0.049, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.46088531600576815;  // std dev = 1.305, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.10831017611183635;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.32397096984625906;  // std dev = 0.828, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5546043080469814;  // std dev = 0.006, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5668628466145074;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.5682729813664769;  // std dev = 0.000911, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.5758380177364986;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1123163781936067;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.4294380906504738;  // std dev = 0.212, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.3863092535061696;  // std dev = 0.916, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.4489412048434868;  // std dev = 0.151, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4285251769998984;  // std dev = 0.052, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.35063513450892536;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4167060892694005;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4328759091998847;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return -0.10159632948783616;  // std dev = 5.89e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.32053392072608883;  // std dev = 7.88e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.33356545810877825;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3680492041586457;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32912728452338363;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.23294724651887652;  // std dev = 1.302, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.356943493859474;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.3308829203166151;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.32690239538109617;  // std dev = 0.021, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.09269127618926042;  // std dev = 9.50e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2657968895551031;  // std dev = 0.216, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.1915266910740919;  // std dev = 0.966, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.06920174920716422;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.26135206140698897;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.3204366549989827;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.28487667633388997;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2571335002022254;  // std dev = 0.022, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2636925259979626;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(G, A) )
%   | | | then return 0.18151841206142855;  // std dev = 1.411, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.1351226694912945;  // std dev = 1.816, 42.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=38 */
%   | | else return 0.06376993986542569;  // std dev = 0.834, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.20789677839216397;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2376569369775001;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2174779352706583;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.21172999718490992;  // std dev = 0.018, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109144;  // std dev = 3.84e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return -0.07877675473109172;  // std dev = 1.86e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.1553989719775718;  // std dev = 0.976, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.20517887435814802;  // std dev = 0.156, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.2242442923999873;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10704462850265362;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.2094165224361651;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19114025800302084;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.18329869014418457;  // std dev = 0.002, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17884188810873564;  // std dev = 0.016, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.073246225763337;  // std dev = 5.27e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.13342758638841723;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16207645860088218;  // std dev = 0.024, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.17872560370479304;  // std dev = 0.187, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.1624942086244421;  // std dev = 0.042, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.1574327920263312;  // std dev = 0.002, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1498648868108398;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044213334434654625;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15654411471602092;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420297;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.14061981508184487;  // std dev = 0.023, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.16379988353851244;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.0894672291306117;  // std dev = 1.134, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.07682918007384683;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.14966123881395196;  // std dev = 0.116, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.14157662911220725;  // std dev = 0.038, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.13661562301587407;  // std dev = 0.009, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14595724250988515;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202586;  // std dev = 7.51e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
Inference time using transfer learning 4.672988176345825
Refined model CLL: -0.085345


******************************************
Best model found
******************************************
Total revision time: 45.50172710418701
Best scored revision CLL: -0.085345


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(10 unique tokens: ['phenotype', 'complex', 'enzyme', 'function', 'interaction']...) from 27 documents (total 30 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(10 unique tokens: ['phenotype', 'complex', 'enzyme', 'function', 'interaction']...) from 27 documents (total 30 corpus positions)", 'datetime': '2021-06-11T18:51:27.888505', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 10.000000% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.207159', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.209472', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.211549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.213386', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.215433', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.217421', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.224378', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.226287', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.228283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.230079', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.232064', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.234055', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.238648', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.240462', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.242407', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.244231', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.245171', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.245979', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.248016', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.248773', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.249580', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.250318', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.251137', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.251939', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.253816', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.254590', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.255410', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.256157', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.256948', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:51:29.257741', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8917465209960938
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.681546618225429;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839205;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5519782725693261;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360675;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | else return -0.11231637819360624;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.40872384744393697;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783656;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783616;  // std dev = 5.37e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3062333664385352;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926044;  // std dev = 9.03e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2475682696243931;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19526569541509417;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.31e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.12809430238610478;  // std dev = 3.206, 167.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16205870417083826;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.068426977844203;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13990746954142916;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
Inference time using transfer learning 1.8535940647125244
Parameter learned model CLL:-0.087241 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 237, 0], 'false,false': [8.54e-09, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 228, 0], 'false,false,false': [5.58e-08, 73, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 229, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 82, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.03e-09, 294, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 300, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.31e-08, 296, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [3.206, 11, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false': [0.0, 74, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 301, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 204, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 75, 0]}]
{'': [0.024375000000006076, 6.26279654916755e-17], 'false': [-1.7988423690129118e-16, 7.105427357601002e-17], 'false,true': [nan, -1.7988423690129118e-16]}
{'': [0.0411005306936653, -9.197964216959226e-17], 'false': [nan, -9.197964216959226e-17]}
{'': [0.018511925952296695, -8.114586890947988e-17], 'false': [nan, -8.114586890947988e-17], 'false,false': [-7.596262800066861e-17, 4.258389683493751e-17]}
{'': [0.024374999999999723, -4.997788535290094e-17], 'false': [nan, -4.997788535290094e-17], 'false,false': [-7.950942185088457e-17, 3.5202193463724476e-17], 'false,false,false': [nan, 3.5202193463724476e-17]}
{'': [0.030091431657729845, 8.005689837433102e-17], 'false': [nan, 8.005689837433102e-17], 'false,false': [nan, 8.005689837433102e-17]}
{'': [0.024374999999999723, 3.700743415417188e-17], 'false': [nan, 3.700743415417188e-17], 'false,false': [nan, 3.700743415417188e-17]}
{'': [0.0300914316577294, 2.92558770002575e-17], 'false': [nan, 2.92558770002575e-17], 'false,false': [nan, 2.92558770002575e-17], 'false,false,false': [nan, 2.92558770002575e-17]}
{'': [0.061529635340098164, 1.3016407874915628e-17], 'true': [0.061529635340098164, nan], 'false': [7.812680543658509e-17, -5.251054846200065e-18]}
{'': [0.01249799711584706, -5.680210823663592e-17], 'false': [nan, -5.680210823663592e-17], 'false,false': [nan, -5.680210823663592e-17]}
{'': [0.012497997115846995, 3.024263436254907e-17], 'false': [-1.0884539457109378e-18, -7.401486830834377e-18], 'false,false': [nan, -7.401486830834377e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 66.47697114944458
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.7045480390766261;  // std dev = 0.993, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.519473412210955;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.05280674554428825;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.46947341221095495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7194734122109554;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839208;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.5590489157278032;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.609357833410695;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.5553664367462847;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5553664367462847;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.5169823765445283;  // std dev = 0.831, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.07051141763079476;  // std dev = 0.971, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6055388484525576;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5553664367462846;  // std dev = 1.03e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.11231637819360679;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.39560413578398446;  // std dev = 1.380, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.3076644623811771;  // std dev = 1.334, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.4204284938821169;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.45585703539545797;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.4202503201290183;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.44966117934310534;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4224234112773962;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.4175135841583105;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.10159632948783663;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.32928081117249103;  // std dev = 0.153, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.3428876923453543;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3784313804431716;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2284597662060446;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3195728464375703;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.35912784166922657;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.30134373223281335;  // std dev = 0.974, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926051;  // std dev = 4.37e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.2636305277595662;  // std dev = 0.131, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.2532910575019379;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(E, G), follows(A, G) )
%   | | | then return 0.18768650183391364;  // std dev = 1.373, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.26780250184264454;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.26529676442400635;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2812558360424333;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.26402837525438183;  // std dev = 0.099, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2586579061732461;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839676;  // std dev = 6.11e-09, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.21520917437477508;  // std dev = 0.038, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.23489034656440633;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(E, A), follows(A, E) )
%   | | | then return -0.09058652083136383;  // std dev = 1.306, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.16373885021272552;  // std dev = 1.625, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return 0.22652377194504988;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24397524431223194;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.21402664845336417;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21157947030588178;  // std dev = 0.004, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.13831392909916065;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.19092107101784206;  // std dev = 0.112, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.007228930732073258;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.476245711357454;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(H, I), follows(A, H) )
%   | | | then return 0.22062798065923925;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19291776681727058;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.18375904723721595;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.17917602804478394;  // std dev = 0.029, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333702;  // std dev = 5.02e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.15758355347790745;  // std dev = 0.021, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.1817895106032558;  // std dev = 0.172, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.16293861072060184;  // std dev = 0.098, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.15337086132186514;  // std dev = 0.009, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.08994067968199942;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.15947670701615035;  // std dev = 0.840, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.04779841053474967;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15607190615291336;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.0684269778442031;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.1397790406760314;  // std dev = 0.068, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.15030151022768506;  // std dev = 0.128, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.19194302126802204;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.15705249213576203;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14711353086076265;  // std dev = 0.703, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1353161935379002;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.1411251256022173;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
Inference time using transfer learning 8.04045033454895
Refined model CLL: -0.08522


******************************************
Best model found
******************************************
Total revision time: 80.37849688529968
Best scored revision CLL: -0.08522


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.676291', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.677416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.678276', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.679056', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.679881', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.680692', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.683612', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.684380', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.685193', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.685930', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.686738', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.687578', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.689590', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.690358', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.691198', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.691940', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.692751', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.693557', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.695543', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.696304', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.697118', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.697864', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.698680', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.699506', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.701402', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.702155', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.702957', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.703719', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.704524', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:52:59.705326', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8780479431152344
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7006985383396418;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5487670655497072;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.11231637819360618;  // std dev = 8.16e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41863944500526507;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783648;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783615;  // std dev = 5.05e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.29584069600729745;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892604;  // std dev = 9.86e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2707069481066453;  // std dev = 2.80e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20180559681465765;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 8.56e-08, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16292476026072084;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.30e-07, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1454457498278398;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420308;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12030349284534245;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 2.58e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
Inference time using transfer learning 1.8748130798339844
Parameter learned model CLL:-0.08762 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.201, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 230, 0], 'false,false': [8.33e-09, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 327, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 240, 0], 'false,false,false': [8.16e-08, 106, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 199, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.05e-08, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.86e-09, 321, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.8e-07, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 289, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.56e-08, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 220, 0], 'false,false': [0.0, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 318, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [2.58e-08, 247, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 91, 0]}]
{'': [0.030091431657735174, 3.256654205567126e-17], 'false': [-2.0852884636437723e-16, 6.97854472621527e-17], 'false,true': [nan, -2.0852884636437723e-16]}
{'': [0.024374999999998082, -1.0049725238197135e-16], 'false': [nan, -1.0049725238197135e-16]}
{'': [0.018511925952296157, -4.107183443700001e-17], 'false': [nan, -4.107183443700001e-17], 'false,false': [-8.696747026230393e-17, 6.28428127146315e-17]}
{'': [0.01249799711584574, -5.756711979537848e-17], 'false': [nan, -5.756711979537848e-17], 'false,false': [-8.480095464473557e-17, 3.596497122025155e-17], 'false,false,false': [nan, 3.596497122025155e-17]}
{'': [0.035665294924554, 9.822533925032537e-17], 'false': [nan, 9.822533925032537e-17], 'false,false': [nan, 9.822533925032537e-17]}
{'': [5.01023723933404e-16, 3.6879380748794125e-17], 'false': [nan, 3.6879380748794125e-17], 'false,false': [nan, 3.6879380748794125e-17]}
{'': [0.018511925952296265, 2.3115053509545847e-17], 'false': [nan, 2.3115053509545847e-17], 'false,false': [nan, 2.3115053509545847e-17], 'false,false,false': [nan, 2.3115053509545847e-17]}
{'': [0.024375000000000015, 1.2208638071479384e-17], 'true': [0.024375000000000015, nan], 'false': [7.670631806501082e-17, -4.6910832026415064e-18]}
{'': [0.0185119259522964, -6.982534746070167e-17], 'false': [nan, -6.982534746070167e-17], 'false,false': [nan, -6.982534746070167e-17]}
{'': [0.024375000000000018, 6.700754349808637e-17], 'false': [2.696898035526696e-18, -1.2810265668751807e-17], 'false,false': [nan, -1.2810265668751807e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 83.75803399085999
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( tweets(A, H) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.7074867016196503;  // std dev = 1.001, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.6480448407823829;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.5766162693538114;  // std dev = 1.604, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.6918804386195204;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.719473412210955;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839205;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.536321996282303;  // std dev = 1.389, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.18318789851891637;  // std dev = 1.072, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.5880225610469463;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5610133929423964;  // std dev = 0.057, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.5082325449008407;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.22656832624823053;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4036134626702595;  // std dev = 1.304, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.11231637819360626;  // std dev = 5.74e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), tweets(A, F) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.42698911516702337;  // std dev = 0.059, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.4490960911557855;  // std dev = 0.176, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.42747435469358086;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41614091008429677;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.44425402073129755;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4705018004919421;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.46033187021893157;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.10159632948783626;  // std dev = 4.17e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2873927501020569;  // std dev = 1.368, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return -0.16998964656052204;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.3501874442533807;  // std dev = 0.149, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.30106602100467006;  // std dev = 0.979, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( follows(A, I) )
%   | | then return 0.3249198387869827;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.33892074491292035;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3527359597621823;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, K) )
%   | then return -0.09269127618926049;  // std dev = 5.10e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.2678932589151627;  // std dev = 0.043, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.1816776035076606;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, G), recursion_accounttype(D, B) )
%   | | | then return 0.29679339526987325;  // std dev = 0.093, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.267393215467527;  // std dev = 0.151, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.12784582571374545;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07522860648822378;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26177079125402763;  // std dev = 0.023, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.20660040079048445;  // std dev = 1.341, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1916988056895242;  // std dev = 0.988, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.2390378534422137;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.22919675259171984;  // std dev = 0.073, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21117106033121003;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), tweets(H, J) )
%   | | | then return 0.14217187631818903;  // std dev = 1.312, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.2475218200720509;  // std dev = 1.028, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.18018573377537558;  // std dev = 0.987, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.22413235918237046;  // std dev = 0.090, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.07877675473109141;  // std dev = 3.61e-09, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.15221808755901203;  // std dev = 0.984, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.18765401114445543;  // std dev = 0.107, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return -0.07865225119097721;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.15532483337245964;  // std dev = 1.373, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else if ( follows(A, G) )
%   | | then return 0.1800906830731436;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.19130105593964186;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2136575196784967;  // std dev = 0.159, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.1018087551698945;  // std dev = 1.609, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.1708225672270059;  // std dev = 0.128, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.13887067615055007;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16981186076384225;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.18598278568583632;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19980884443317412;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1579577570351283;  // std dev = 0.045, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.17126678867870246;  // std dev = 0.149, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.14877187621587207;  // std dev = 0.044, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.11438849124910204;  // std dev = 0.991, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.07891187271690495;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.16439255231593614;  // std dev = 0.121, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20764555114212532;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.1652241367626444;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14032466558917278;  // std dev = 0.030, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202625;  // std dev = 1.86e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
Inference time using transfer learning 8.09419298171997
Refined model CLL: -0.086066


******************************************
Best model found
******************************************
Total revision time: 98.58478307723999
Best scored revision CLL: -0.086066


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.415893', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.416750', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.417366', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.417900', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.418476', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.419088', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.421866', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.422386', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.422954', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.423468', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.424030', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.424582', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.426370', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.426891', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.427517', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.428017', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.428575', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.429125', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.430799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.431329', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.431908', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.432397', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.432958', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.433532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.435240', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.435758', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.436309', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.436799', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.437355', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:54:48.437907', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9479827880859375
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004884;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.14185106490048766;  // std dev = 8.54e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6897012631223665;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5097267960549742;  // std dev = 0.227, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360683;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | else return -0.11231637819360622;  // std dev = 6.05e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41865837341139617;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783658;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783619;  // std dev = 5.16e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2897463717090913;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.86e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2519558230568161;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.32e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21676547717474878;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.01e-07, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17449053491254873;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.22e-07, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12464248601175616;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420297;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11387487493477966;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
Inference time using transfer learning 1.7465052604675293
Parameter learned model CLL:-0.087109 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.997, 1, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 235, 0], 'false,false': [8.54e-09, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 294, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.227, 9, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 247, 0], 'false,false,false': [6.05e-08, 79, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 239, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.16e-08, 86, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.86e-09, 315, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.32e-09, 295, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.01e-07, 338, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 241, 0], 'false,false': [0.0, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 293, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 204, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 69, 0]}]
{'': [0.006328857154454536, 8.326672684688674e-17], 'false': [-1.8897413185109048e-16, 7.314410515177502e-17], 'false,true': [nan, -1.8897413185109048e-16]}
{'': [0.030091431657726788, -9.667248105579594e-17], 'false': [nan, -9.667248105579594e-17]}
{'': [0.05157024793388481, -4.904052624111121e-17], 'false': [nan, -4.904052624111121e-17], 'false,false': [-9.169453320790767e-17, 4.6376404826114135e-17]}
{'': [0.018511925952297253, -2.1862853408003083e-17], 'false': [nan, -2.1862853408003083e-17], 'false,false': [-7.432455394980127e-17, 3.0982968129074136e-17], 'false,false,false': [nan, 3.0982968129074136e-17]}
{'': [0.04640095181439664, 9.727668406239467e-17], 'false': [nan, 9.727668406239467e-17], 'false,false': [nan, 9.727668406239467e-17]}
{'': [0.024374999999999546, 3.9140065952886874e-17], 'false': [nan, 3.9140065952886874e-17], 'false,false': [nan, 3.9140065952886874e-17]}
{'': [0.012497997115846622, 3.021908824423503e-17], 'false': [nan, 3.021908824423503e-17], 'false,false': [nan, 3.021908824423503e-17], 'false,false,false': [nan, 3.021908824423503e-17]}
{'': [0.018511925952295987, 1.4465446574920607e-17], 'true': [0.018511925952295987, nan], 'false': [6.173024286297551e-17, -3.3643121958338078e-18]}
{'': [0.04110053069366565, -5.001687346434152e-17], 'false': [nan, -5.001687346434152e-17], 'false,false': [nan, -5.001687346434152e-17]}
{'': [0.03566529492455406, 2.2773805633336544e-17], 'false': [-4.353815782843751e-18, -5.6315660669392e-18], 'false,false': [nan, -5.6315660669392e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 50.8392767906189
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995122;  // std dev = 1.69e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( tweets(A, G) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.6909019836395263;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.719473412210955;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.12544463852839205;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5405924721467017;  // std dev = 0.988, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.46522637604091016;  // std dev = 1.334, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4839378653177132;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5553664367462844;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.33314421452406207;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360675;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.11231637819360621;  // std dev = 7.33e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.4278003272248483;  // std dev = 0.007, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.3926920804669209;  // std dev = 0.980, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.13340043908470026;  // std dev = 1.402, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3977058403716487;  // std dev = 0.996, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( follows(A, H) )
%   | | then return 0.4175135841583101;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4301283710242763;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.45588972168996583;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, J) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.10159632948783624;  // std dev = 4.56e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3354902448084205;  // std dev = 0.245, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.23723214415234026;  // std dev = 2.083, 53.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=48 */
%   | | else return -0.15876141711481;  // std dev = 1.029, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.3331208091586656;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3206220439044358;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.3124095266922801;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35283164290970137;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.09269127618926055;  // std dev = 4.37e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return -0.09269127618926094;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.259024484232231;  // std dev = 0.039, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.2733341290350766;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1997675215567703;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.37021489487233356;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.28984056100647293;  // std dev = 0.038, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2623548092262839;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.27251764970846987;  // std dev = 0.114, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.67e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.08518475138839676;  // std dev = 4.17e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.1696111564211172;  // std dev = 0.983, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.21336827300029335;  // std dev = 0.034, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return -0.0198189528477153;  // std dev = 1.687, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.26300241767016697;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.23297186136620235;  // std dev = 0.076, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.2209518500234403;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.22434357287530393;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16275993734228533;  // std dev = 0.986, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else return -0.07877675473109143;  // std dev = 1.32e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.16730271827238882;  // std dev = 0.977, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return -0.11343188817012417;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.05463978161637449;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2115414360068967;  // std dev = 0.182, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17534971355174164;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.17925402754091302;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.20664995145676135;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18969254050206552;  // std dev = 0.083, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.07324622576333706;  // std dev = 4.47e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15995480695283623;  // std dev = 0.036, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.04828140445548099;  // std dev = 0.833, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.18118807323643307;  // std dev = 0.135, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.1580444728876319;  // std dev = 0.086, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.03856872921752552;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.18448300049711597;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.16034312422397476;  // std dev = 0.062, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.08315607993377315;  // std dev = 0.972, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13994507149790922;  // std dev = 0.065, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.1700237653167142;  // std dev = 0.185, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(F, A), recursion_accounttype(D, B) )
%   | | | then return 0.031179239282149288;  // std dev = 0.880, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14576097966486734;  // std dev = 0.113, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.07732060607719458;  // std dev = 0.969, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1405561114273049;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.1338836785917701;  // std dev = 0.000978, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.03915746315424874;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06419184008202597;  // std dev = 6.38e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning 5.965582609176636
Refined model CLL: -0.085302


******************************************
Best model found
******************************************
Total revision time: 62.27522158622742
Best scored revision CLL: -0.085302


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.572732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.573504', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.574117', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.574641', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.575256', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['interaction', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.575822', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.578616', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.579167', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.579732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.580222', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.580791', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['location', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.581348', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.583148', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.583662', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.584217', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.584704', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.585251', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['enzyme', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.585798', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.587492', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.588002', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.588564', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.589047', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.589599', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['complex', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.590152', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.591851', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.592363', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.592926', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'follow']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.593416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.593962', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['phenotype', 'tweet']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T18:55:58.594537', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7887732982635498
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6994914035015026;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839202;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5664445912174083;  // std dev = 1.83e-08, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360665;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return -0.11231637819360621;  // std dev = 7.15e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4007811949236709;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 4.94e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2948048733311823;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892604;  // std dev = 1.04e-08, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25733222809884726;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21598413667046618;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.02e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15021168062648568;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.13e-07, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return -0.07324622576333707;  // std dev = 3.87e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16545339388637686;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420312;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11885271774089116;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
Inference time using transfer learning 1.948998212814331
Parameter learned model CLL:-0.087724 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 229, 0], 'false,false': [8.33e-09, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 298, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [1.83e-08, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 208, 0], 'false,false,false': [7.15e-08, 93, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 212, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.94e-08, 69, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.04e-08, 336, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 305, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.02e-07, 286, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.404, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 264, 0], 'false,false': [3.87e-08, 85, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 330, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 239, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 82, 0]}]
{'': [0.024375000000006076, 6.526550687892294e-17], 'false': [-2.1331796106334886e-16, 7.401486830834377e-17], 'false,true': [nan, -2.1331796106334886e-16]}
{'': [0.02437499999999968, -9.835532835605414e-17], 'false': [nan, -9.835532835605414e-17]}
{'': [2.7328566760003855e-16, -7.524435117060862e-17], 'false': [nan, -7.524435117060862e-17], 'false,false': [-5.551115123125783e-17, 5.491425713199699e-17]}
{'': [0.024374999999999612, -5.847437994467016e-17], 'false': [nan, -5.847437994467016e-17], 'false,false': [-8.588517737666306e-17, 3.539841527790354e-17], 'false,false,false': [nan, 3.539841527790354e-17]}
{'': [0.03566529492455521, 1.0837891430864623e-16], 'false': [nan, 1.0837891430864623e-16], 'false,false': [nan, 1.0837891430864623e-16]}
{'': [0.012497997115846954, 3.6400754905742835e-17], 'false': [nan, 3.6400754905742835e-17], 'false,false': [nan, 3.6400754905742835e-17]}
{'': [0.006328857154448794, 3.648984766250514e-17], 'false': [nan, 3.648984766250514e-17], 'false,false': [nan, 3.648984766250514e-17], 'false,false,false': [nan, 3.648984766250514e-17]}
{'': [0.03566529492455448, -5.089847677364614e-18], 'true': [0.03566529492455448, nan], 'false': [4.878252683959021e-17, 1.763295392051719e-17]}
{'': [-2.675922161917044e-16, -7.805204294334434e-17], 'false': [nan, -7.805204294334434e-17], 'false,false': [nan, -7.805204294334434e-17]}
{'': [0.02437499999999992, 5.67216747783569e-17], 'false': [0.0, -1.0154478883766675e-17], 'false,false': [nan, -1.0154478883766675e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 66.14561414718628
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(I, J), tweets(A, K) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5248156017661788;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995118;  // std dev = 2.38e-07, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( tweets(A, L) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.6598881596229031;  // std dev = 1.685, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.7229691002578644;  // std dev = 0.060, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7515950142200379;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7213015159569646;  // std dev = 0.061, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7226658968615453;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7401919213324014;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2580193346218545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.6803965591844685;  // std dev = 0.983, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.12544463852839208;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(F, D) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.5228727287856408;  // std dev = 1.697, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | | | else return 0.5665898749728295;  // std dev = 0.138, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.2760525014152872;  // std dev = 0.682, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.6180467474567376;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5549149691865434;  // std dev = 2.98e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5679780335521667;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, I) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(J, A) )
%   | | then return -0.11231637819360635;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.1123163781936063;  // std dev = 4.17e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.43502782297003323;  // std dev = 0.084, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.4656038104739608;  // std dev = 0.246, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(E, A), follows(D, E) )
%   | | | then return 0.3101195613853275;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.42848057205543305;  // std dev = 0.168, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.42376344169856606;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.41661165583631493;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.08350884460066144;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3128900933820925;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.10159632948783656;  // std dev = 0.000, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.3326572776141899;  // std dev = 0.076, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.36971078525785966;  // std dev = 0.175, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3306849506438156;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.03505047149191284;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.18663761211725394;  // std dev = 1.331, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.3262197681770674;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3037744267051931;  // std dev = 0.885, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.337547195862382;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.09269127618926043;  // std dev = 9.31e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.26815371042023184;  // std dev = 0.039, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2886073870969069;  // std dev = 0.168, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2650413014686526;  // std dev = 0.168, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.18508505647221984;  // std dev = 0.978, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.18995123364488828;  // std dev = 0.874, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.39302501452672783;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2590903082785825;  // std dev = 0.044, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.18562349139498127;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.21806171205863742;  // std dev = 0.163, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2628932972649176;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), tweets(H, D) )
%   | | | then return 0.14802904103517192;  // std dev = 1.254, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.217538512283957;  // std dev = 0.079, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(I, A) )
%   | | then if ( recursion_accounttype(I, B), follows(A, I) )
%   | | | then return 0.1459909784950539;  // std dev = 0.829, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.27386370036980623;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -8.828469552220793E-5;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13658070691985455;  // std dev = 1.346, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else return -0.07877675473109143;  // std dev = 2.28e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.13764208142945344;  // std dev = 1.286, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.05838318698532704;  // std dev = 0.942, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.20903221198098218;  // std dev = 0.183, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.11499597817173392;  // std dev = 0.949, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.18018956260652752;  // std dev = 0.044, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.18366876156968448;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.1879840716004297;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.21314398711906624;  // std dev = 0.196, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.07324622576333703;  // std dev = 4.93e-09, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.16651413160288375;  // std dev = 0.154, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.06833222974008374;  // std dev = 1.353, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.05677537923779655;  // std dev = 1.246, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.15847961104935365;  // std dev = 0.065, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.15782105688955303;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16880509863106488;  // std dev = 0.075, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.18097806494127522;  // std dev = 0.167, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.17127895001887747;  // std dev = 0.048, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420314;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.14226638178016987;  // std dev = 0.102, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.1481362285904176;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.16573351261652547;  // std dev = 0.887, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.19073253977634008;  // std dev = 0.096, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15879271798331873;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.1601710313683319;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1395440659770955;  // std dev = 0.063, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( tweets(A, K) )
%   | then return -0.0641918400820262;  // std dev = 2.28e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
Inference time using transfer learning 7.601764440536499
Refined model CLL: -0.085264


******************************************
Best model found
******************************************
Total revision time: 81.10264205932617
Best scored revision CLL: -0.085264


******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 8.123234272003174
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.41990192314731667;  // std dev = 0.496, 502.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.32e-08, 365.000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.381531023204519;  // std dev = 10.010, 412.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=240 */
%   | else return 0.43537038772349823;  // std dev = 3.908, 66.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839208;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.34506908757649213;  // std dev = 0.486, 458.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936065;  // std dev = 0.000, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5880308459825792;  // std dev = 4.092, 258.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=240 */
%   | else return -0.14444991666678694;  // std dev = 5.732, 208.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.10159632948783656;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.13270607878117066;  // std dev = 8.877, 438.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=240 */
%   | else return 0.2532360876964774;  // std dev = 4.223, 73.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926053;  // std dev = 1.03e-08, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(E, B) )
%   | | then return 0.13853847900790225;  // std dev = 9.362, 472.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=275 */
%   | | else return 0.1003535894680538;  // std dev = 1.885, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(G, A) )
%   | | then return -0.08518475138839678;  // std dev = 1.10e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   | | else return -0.08518475138839683;  // std dev = 3.65e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.1120841547193107;  // std dev = 0.428, 482.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(F, A) )
%   | | then return -0.07877675473109143;  // std dev = 3.94e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, C) )
%   | then return 0.0891015668852272;  // std dev = 9.166, 463.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=275 */
%   | else return -0.042453910469692054;  // std dev = 2.037, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333718;  // std dev = 2.46e-09, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.06431721643292884;  // std dev = 9.422, 479.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442032;  // std dev = 0.000, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.05042908486647484;  // std dev = 9.363, 480.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202572;  // std dev = 8.79e-09, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
Inference time using transfer learning 4.831697225570679
Parameter learned model CLL:-0.274508 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.496, 220, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-08, 365, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [10.01, 172, 240], 'true,false': [3.908, 24, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 293, 0], 'false,false,false,false': [0.0, 56, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.486, 176, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 347, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [4.092, 18, 240], 'true,false': [5.732, 166, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 323, 0], 'false,false,false,false': [0.0, 41, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [8.877, 198, 240], 'true,false': [4.223, 31, 42], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-08, 356, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(E, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(G, A)'}, {'true,true,true': [9.362, 197, 275], 'true,true,false': [1.885, 8, 7], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.1e-07, 319, 0], 'false,false,false': [3.65e-08, 60, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(F, A)'}, {'true,true': [0.428, 200, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [3.94e-08, 303, 0], 'false,false,false': [0.0, 51, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.166, 188, 275], 'true,false': [2.037, 12, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 385, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.422, 197, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 348, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.363, 198, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.79e-09, 356, 0]}]
{'': [0.2461865684671701, 1.7276895287317505e-16], 'false': [nan, 1.7276895287317505e-16]}
{'': [0.2419075296300858, -1.1961142041806845e-16], 'true': [0.2431897445565115, 0.23140495867768598], 'false': [nan, -1.1961142041806845e-16], 'false,false': [nan, -1.1961142041806845e-16], 'false,false,false': [-1.0609639825769414e-16, -3.766828119263924e-17]}
{'': [0.2364140795083604, -3.327469583890959e-17], 'false': [nan, -3.327469583890959e-17], 'false,false': [nan, -3.327469583890959e-17]}
{'': [0.23901336394560785, 5.856121448572254e-17], 'true': [0.06489994591671212, 0.157933240558486], 'false': [nan, 5.856121448572254e-17], 'false,false': [nan, 5.856121448572254e-17], 'false,false,false': [-2.887267308622698e-17, -6.769652589177784e-18]}
{'': [0.19088994009130797, 1.0727997766040839e-16], 'true': [0.17990898990952367, 0.2443235128541943], 'false': [nan, 1.0727997766040839e-16]}
{'': [0.18730594983506743, 3.866739821913474e-17], 'true': [0.18730594983506743, nan], 'true,true': [0.18568930031357003, 0.2367633458955943], 'false': [nan, 3.866739821913474e-17], 'false,false': [3.758748798103978e-17, 2.2204460492503132e-17]}
{'': [0.18277549518836037, 1.7562850107064625e-17], 'true': [0.18277549518836037, nan], 'false': [nan, 1.7562850107064625e-17], 'false,false': [5.129743348103033e-18, 0.0]}
{'': [0.18355632134642436, 4.613913868572079e-18], 'true': [0.18144339109372043, 0.21842047175387466], 'false': [nan, 4.613913868572079e-18], 'false,false': [nan, 4.613913868572079e-18]}
{'': [0.18534510811741747, -8.486187487077346e-17], 'true': [0.18534510811741747, nan], 'false': [nan, -8.486187487077346e-17], 'false,false': [nan, -8.486187487077346e-17]}
{'': [0.1826397682344916, 7.734137924355023e-17], 'true': [0.1826397682344916, nan], 'false': [nan, 7.734137924355023e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(G, A).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(G, A).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(F, A).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 20.491631746292114
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( phenotype(A, D), interaction(A, E) )
%   | then if ( interaction(E, F), recursion_proteinclass(F, B) )
%   | | then if ( interaction(E, A), interaction(F, E) )
%   | | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( interaction(G, A), interaction(E, G) )
%   | | | then return 0.030562728202960583;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | | | else return 0.3697768420762556;  // std dev = 4.636, 86.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=44 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4520186669002764;  // std dev = 7.934, 261.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=155 */
%   else return -0.1418510649004874;  // std dev = 2.83e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), location(D, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( interaction(F, D) )
%   | | | then return 0.6969077828584148;  // std dev = 1.360, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.28268877217251076;  // std dev = 1.960, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( interaction(D, A) )
%   | | | then return -0.18106548233770148;  // std dev = 0.170, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.2976461963464378;  // std dev = 6.714, 183.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=91 */
%   | else if ( complex(A, G) )
%   | | then if ( complex(H, G), recursion_proteinclass(H, B) )
%   | | | then return 0.7804588421160742;  // std dev = 0.178, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.20620059509218075;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | | then return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.41034075829128;  // std dev = 5.607, 133.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=82 */
%   else return -0.1254446385283922;  // std dev = 0.000, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), interaction(D, A) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.5652392939988614;  // std dev = 0.093, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.16234668019145831;  // std dev = 0.130, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.22013858255982194;  // std dev = 2.958, 59.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=31 */
%   | else if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then if ( phenotype(A, F), interaction(A, G) )
%   | | | then return 0.7761303109550796;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5794591558396709;  // std dev = 0.169, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( location(A, H) )
%   | | | then return 0.3176571448750823;  // std dev = 8.657, 332.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=195 */
%   | | | else return 0.4638049148832284;  // std dev = 1.715, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else return -0.11231637819360635;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), enzyme(D, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( interaction(F, A), phenotype(F, G) )
%   | | | then return 0.0872702758301122;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5023066659954941;  // std dev = 0.265, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( interaction(H, A), interaction(A, H) )
%   | | | then return 0.009239336437866513;  // std dev = 1.837, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | | else return 0.15285174518440933;  // std dev = 4.275, 77.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=37 */
%   | else if ( interaction(A, I), phenotype(I, J) )
%   | | then if ( interaction(I, K), interaction(K, L) )
%   | | | then return 0.2694940325791015;  // std dev = 3.784, 79.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=49 */
%   | | | else return 0.49737708507162043;  // std dev = 1.602, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( phenotype(A, M), interaction(A, N) )
%   | | | then return 0.1376013398157532;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0.24071059177806614;  // std dev = 7.045, 236.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=144 */
%   else return -0.10159632948783608;  // std dev = 9.22e-09, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), enzyme(E, F) )
%   | | then if ( phenotype(A, G), phenotype(E, G) )
%   | | | then return 0.08342101553820849;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3660023274455471;  // std dev = 0.170, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( interaction(A, A), phenotype(A, H) )
%   | | | then return 0.3069943366697613;  // std dev = 0.483, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4283804397990171;  // std dev = 0.400, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | then if ( interaction(J, A), interaction(A, J) )
%   | | | then return 0.20336978447471735;  // std dev = 0.979, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5479274201331239;  // std dev = 0.288, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( interaction(K, A), interaction(L, K) )
%   | | | then return 0.09995536669574806;  // std dev = 7.987, 305.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=149 */
%   | | | else return 0.21338893580550417;  // std dev = 5.102, 112.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=67 */
%   else return -0.09269127618926047;  // std dev = 2.01e-07, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), enzyme(D, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( complex(F, G), phenotype(A, H) )
%   | | | then return 0.0998735016133376;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.32263213148269043;  // std dev = 0.260, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( interaction(A, D) )
%   | | | then return -0.27986835076107375;  // std dev = 0.523, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.049505201287745965;  // std dev = 4.722, 107.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=52 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( phenotype(A, J), interaction(A, K) )
%   | | | then return 0.36032814963893567;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2822700918928433;  // std dev = 0.088, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(A, L), location(A, M) )
%   | | | then return 0.16904267735528825;  // std dev = 5.541, 153.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=90 */
%   | | | else return 0.08275947468871885;  // std dev = 6.419, 186.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=96 */
%   else return -0.08518475138839678;  // std dev = 6.65e-09, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), complex(E, F) )
%   | | then if ( complex(D, G) )
%   | | | then return 0.27844269364655655;  // std dev = 0.306, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.12566897302829272;  // std dev = 1.177, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( interaction(D, H), interaction(H, D) )
%   | | | then return 0.29046871393859514;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3898623255837189;  // std dev = 0.209, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( interaction(A, I), complex(A, J) )
%   | | then if ( interaction(I, K), recursion_proteinclass(K, B) )
%   | | | then return 0.2323250158134791;  // std dev = 1.438, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return -0.011856788982116269;  // std dev = 3.970, 82.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=31 */
%   | | else if ( location(A, L) )
%   | | | then return 0.11313123221667676;  // std dev = 8.044, 318.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=181 */
%   | | | else return -0.023930353104670295;  // std dev = 2.226, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else return -0.07877675473109143;  // std dev = 1.08e-08, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), complex(A, E) )
%   | then if ( complex(F, E), recursion_proteinclass(F, B) )
%   | | then if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | | then return 0.2367605640170726;  // std dev = 0.230, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.473323914818981;  // std dev = 0.533, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( interaction(A, H), complex(H, I) )
%   | | | then return -0.43811506528843686;  // std dev = 0.158, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.3471578421191621;  // std dev = 0.127, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( enzyme(A, J), location(A, K) )
%   | | then if ( enzyme(L, J), recursion_proteinclass(L, B) )
%   | | | then return 0.4503048338775159;  // std dev = 1.218, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return -0.4272101195474318;  // std dev = 0.838, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( interaction(A, M), recursion_proteinclass(M, B) )
%   | | | then return 0.23579483804811013;  // std dev = 0.588, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.07366160338287601;  // std dev = 7.447, 280.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=153 */
%   else return -0.07324622576333771;  // std dev = 0.000, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, D), enzyme(D, E) )
%   | | then if ( interaction(A, F), interaction(D, F) )
%   | | | then return 0.16319620777632024;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1353717575883815;  // std dev = 0.617, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( interaction(G, D), interaction(G, G) )
%   | | | then return 0.135588471674105;  // std dev = 0.675, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.23722090413377084;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | then if ( complex(A, I) )
%   | | | then return 0.24531766734602517;  // std dev = 0.199, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.09037591963034805;  // std dev = 1.099, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( interaction(A, J), interaction(J, J) )
%   | | | then return -0.01842969676657504;  // std dev = 3.746, 89.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=37 */
%   | | | else return 0.05484497371641326;  // std dev = 7.838, 329.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=179 */
%   else return -0.06842697784420308;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( enzyme(A, E), interaction(F, D) )
%   | | then if ( complex(A, G), phenotype(F, H) )
%   | | | then return -0.048203579204482115;  // std dev = 0.574, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14835774159231463;  // std dev = 0.134, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | | then return 0.15167647022181105;  // std dev = 0.099, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.20685059270681216;  // std dev = 0.290, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( location(A, J), complex(A, K) )
%   | | then if ( location(L, J), recursion_proteinclass(L, B) )
%   | | | then return 0.04324896295742147;  // std dev = 4.603, 148.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=83 */
%   | | | else return -0.3387834685673143;  // std dev = 0.648, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( location(A, M), interaction(A, N) )
%   | | | then return 0.13760863246027386;  // std dev = 4.073, 98.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | | | else return 0.015976594343526874;  // std dev = 6.090, 165.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=88 */
%   else return -0.0641918400820257;  // std dev = 1.73e-07, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
Inference time using transfer learning 4.093741178512573
Refined model CLL: -0.243473


******************************************
Best model found
******************************************
Total revision time: 63.67935514450073
Best scored revision CLL: -0.243473


******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 8.168113470077515
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.44810709409532384;  // std dev = 0.492, 478.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 9.31e-09, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.378380528692993;  // std dev = 9.993, 411.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=240 */
%   | else return 0.3697813886070048;  // std dev = 4.223, 73.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839205;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   | | | else return -0.1254446385283912;  // std dev = 6.32e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.2889626043964622;  // std dev = 0.496, 501.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360644;  // std dev = 0.000, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5913943285185921;  // std dev = 4.196, 259.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=240 */
%   | else return -0.1479080277644003;  // std dev = 5.854, 225.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.10159632948783662;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.15150605912714782;  // std dev = 8.707, 429.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=240 */
%   | else return 0.290237068991878;  // std dev = 4.142, 71.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892607;  // std dev = 9.13e-09, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(E, B) )
%   | | then return 0.12315743657616725;  // std dev = 9.572, 493.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=275 */
%   | | else return 0.11284257186246298;  // std dev = 1.890, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(G, A) )
%   | | then return -0.08518475138839678;  // std dev = 1.05e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | | else return -0.08518475138839683;  // std dev = 4.01e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.13315016954837233;  // std dev = 0.425, 470.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(F, A) )
%   | | then return -0.07877675473109143;  // std dev = 1.49e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, C) )
%   | then return 0.11296239290090473;  // std dev = 8.856, 446.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=275 */
%   | else return 0.12133791166324619;  // std dev = 1.770, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0732462257633372;  // std dev = 1.61e-09, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.06999181344264988;  // std dev = 9.316, 469.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420312;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.03651316955649238;  // std dev = 9.478, 488.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820257;  // std dev = 8.93e-09, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
Inference time using transfer learning 5.337177753448486
Parameter learned model CLL:-0.275599 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.492, 196, 282], 'false,true': [0.0, 0, 0], 'false,false': [9.31e-09, 322, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [9.993, 171, 240], 'true,false': [4.223, 31, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 319, 0], 'false,false,false,false': [6.32e-08, 60, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.496, 219, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 361, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [4.196, 19, 240], 'true,false': [5.854, 183, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 265, 0], 'false,false,false,false': [3.65e-08, 54, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [8.707, 189, 240], 'true,false': [4.142, 29, 42], 'false,true': [0.0, 0, 0], 'false,false': [9.13e-09, 375, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(E, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(G, A)'}, {'true,true,true': [9.572, 218, 275], 'true,true,false': [1.89, 8, 7], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.05e-07, 308, 0], 'false,false,false': [4.01e-08, 66, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(F, A)'}, {'true,true': [0.425, 188, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.49e-08, 322, 0], 'false,false,false': [0.0, 48, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.856, 171, 275], 'true,false': [1.77, 6, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.61e-09, 361, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.316, 187, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 330, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.478, 206, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.93e-09, 363, 0]}]
{'': [0.24190752963008652, 8.550786028168908e-17], 'false': [nan, 8.550786028168908e-17]}
{'': [0.2431698654463557, -1.0780001927758776e-16], 'true': [0.24295380680910622, 0.24432351285419449], 'false': [nan, -1.0780001927758776e-16], 'false,false': [nan, -1.0780001927758776e-16], 'false,false,false': [-8.909626780690911e-17, 6.661338147750939e-17]}
{'': [0.24603039507621083, -3.198426442133415e-17], 'false': [nan, -3.198426442133415e-17], 'false,false': [nan, -3.198426442133415e-17]}
{'': [0.24313850630686876, -3.758748798103978e-17], 'true': [0.06797751971497058, 0.15228664175259465], 'false': [nan, -3.758748798103978e-17], 'false,false': [nan, -3.758748798103978e-17], 'false,false,false': [-6.200490854510308e-17, 2.4671622769447922e-17]}
{'': [0.18826787680081905, 8.171241461241152e-17], 'true': [0.17670527538460454, 0.2416187264431658], 'false': [nan, 8.171241461241152e-17]}
{'': [0.1873916554892682, 4.0371746350005693e-17], 'true': [0.1873916554892682, nan], 'true,true': [0.18584750694574043, 0.23803941614614693], 'false': [nan, 4.0371746350005693e-17], 'false,false': [3.604620209821937e-17, 2.4391263419795106e-17]}
{'': [0.18028380420537848, 3.720747433878903e-17], 'true': [0.18028380420537848, nan], 'false': [nan, 3.720747433878903e-17], 'false,false': [6.895795184007183e-19, 0.0]}
{'': [0.17770395308088568, 1.8452460243077395e-18], 'true': [0.17586039965729144, 0.24088385417557254], 'false': [nan, 1.8452460243077395e-18], 'false,false': [nan, 1.8452460243077395e-18]}
{'': [0.1850535620317467, -7.87249053825111e-17], 'true': [0.1850535620317467, nan], 'false': [nan, -7.87249053825111e-17], 'false,false': [nan, -7.87249053825111e-17]}
{'': [0.18408600678484605, 8.074349270001139e-17], 'true': [0.18408600678484605, nan], 'false': [nan, 8.074349270001139e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(G, A).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(G, A).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(F, A).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 39.684120655059814
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( phenotype(A, E), enzyme(D, F) )
%   | | then if ( complex(A, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( interaction(A, A) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | | then return 0.6581489350995119;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | | else return 0.38756069980539154;  // std dev = 10.082, 408.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=216 */
%   else return -0.1418510649004874;  // std dev = 2.83e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then if ( interaction(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(A, F), interaction(E, F) )
%   | | | then return 0.7168288429793439;  // std dev = 1.701, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.33610298203693273;  // std dev = 2.020, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | else if ( interaction(G, D), interaction(A, H) )
%   | | | then return 0.17619223664419786;  // std dev = 5.104, 119.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=44 */
%   | | | else return 0.35036871735735947;  // std dev = 7.566, 233.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=128 */
%   | else if ( interaction(A, I), interaction(I, I) )
%   | | then if ( complex(A, J), complex(I, J) )
%   | | | then return 0.2887733783714785;  // std dev = 1.188, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.7387672086447632;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( location(A, K) )
%   | | | then return 0.35314005296015105;  // std dev = 3.046, 38.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=21 */
%   | | | else return 0.8041504002462906;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1254446385283922;  // std dev = 0.000, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), phenotype(E, F) )
%   | | then if ( interaction(D, E) )
%   | | | then return 0.5811254622036065;  // std dev = 0.251, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.024181214594601586;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.6309914647273992;  // std dev = 0.198, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( interaction(A, G), interaction(G, H) )
%   | | then if ( recursion_proteinclass(H, B), location(A, I) )
%   | | | then return 0.565053413905341;  // std dev = 2.072, 46.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=41 */
%   | | | else return 0.17076197168275603;  // std dev = 6.186, 165.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=70 */
%   | | else if ( interaction(J, A), complex(J, K) )
%   | | | then return 0.34991021961518287;  // std dev = 5.336, 119.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=72 */
%   | | | else return 0.25000351162692097;  // std dev = 5.110, 104.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=53 */
%   else return -0.1123163781936064;  // std dev = 0.000, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( enzyme(A, E), interaction(F, A) )
%   | | then if ( enzyme(D, E) )
%   | | | then return 0.46921754830034523;  // std dev = 0.247, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07331756100718201;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( interaction(G, A), interaction(A, G) )
%   | | | then return 0.41875684331788837;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5898194446370563;  // std dev = 0.265, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1686960585002692;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( location(A, H), enzyme(A, I) )
%   | | | then return 0.18283886847829367;  // std dev = 6.253, 161.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=82 */
%   | | | else return 0.24547575882398087;  // std dev = 7.764, 267.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=154 */
%   else if ( interaction(J, A) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return -0.10159632948783627;  // std dev = 1.83e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(A, E) )
%   | | then if ( enzyme(E, F), phenotype(A, G) )
%   | | | then return 0.17466375716154398;  // std dev = 0.668, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.325672776532428;  // std dev = 0.146, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | | then return 0.3587054547726768;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48029167967826825;  // std dev = 0.232, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( interaction(I, A), interaction(A, I) )
%   | | then if ( enzyme(A, J), enzyme(I, J) )
%   | | | then return -0.17890326584803082;  // std dev = 0.734, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.09311075326910431;  // std dev = 2.767, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.37267130841018226;  // std dev = 1.277, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.17916180029418033;  // std dev = 9.319, 351.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=190 */
%   else return -0.09269127618926067;  // std dev = 9.31e-09, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then if ( interaction(A, E) )
%   | | | then return 0.2582436793937753;  // std dev = 0.140, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.10642522929201681;  // std dev = 0.787, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( interaction(F, A), interaction(A, F) )
%   | | | then return 0.28967251026346086;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36522351836387734;  // std dev = 0.219, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( phenotype(A, I) )
%   | | | then return 0.19282045992108357;  // std dev = 3.520, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return -0.0019866351352609197;  // std dev = 3.167, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | else if ( phenotype(A, J), complex(A, K) )
%   | | | then return 0.10105438547890193;  // std dev = 4.064, 75.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=38 */
%   | | | else return 0.19640368209997805;  // std dev = 7.178, 231.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=141 */
%   else return -0.08518475138839678;  // std dev = 6.32e-09, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), interaction(E, A) )
%   | then if ( phenotype(E, F), complex(A, G) )
%   | | then if ( interaction(E, H), recursion_proteinclass(H, B) )
%   | | | then return 0.42044055534729474;  // std dev = 1.827, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | | else return -0.40906717142386856;  // std dev = 0.091, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( interaction(I, E), location(A, J) )
%   | | | then return 0.1447852158085594;  // std dev = 3.760, 73.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | | else return -0.0246468650707686;  // std dev = 2.748, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else if ( interaction(A, K), recursion_proteinclass(K, B) )
%   | | then if ( interaction(L, A), interaction(A, L) )
%   | | | then return 0.20838563425935996;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2707074558997744;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.18724132112194428;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06611692712647647;  // std dev = 8.381, 302.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=162 */
%   else return -0.07877675473109141;  // std dev = 3.95e-09, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), interaction(D, D) )
%   | then if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then if ( enzyme(D, F), phenotype(A, G) )
%   | | | then return 0.230751042616815;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.170983756805395;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( complex(D, H), enzyme(D, I) )
%   | | | then return 0.25625257847446137;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.03263387214422441;  // std dev = 4.032, 91.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=39 */
%   | else if ( location(A, J) )
%   | | then if ( location(K, J), recursion_proteinclass(K, B) )
%   | | | then return 0.16856869472289704;  // std dev = 7.710, 308.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=206 */
%   | | | else return -0.4470892609701304;  // std dev = 0.363, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( interaction(A, L), phenotype(L, M) )
%   | | | then return 0.5278636204987258;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13164506651557953;  // std dev = 1.704, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return -0.07324622576333713;  // std dev = 3.61e-09, 357.000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, E) )
%   | | then if ( interaction(D, D) )
%   | | | then return 0.1606620199821654;  // std dev = 0.143, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.03789159559384969;  // std dev = 0.665, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( interaction(A, F), interaction(F, A) )
%   | | | then return 0.19794981849577967;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2706078420240806;  // std dev = 0.249, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( location(A, G) )
%   | | then if ( location(H, G), recursion_proteinclass(H, B) )
%   | | | then return 0.10958623380677453;  // std dev = 8.544, 359.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=225 */
%   | | | else return -0.3626438817661358;  // std dev = 0.790, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( interaction(A, I) )
%   | | | then return 0.4019440731626365;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08607726973973989;  // std dev = 1.481, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else return -0.06842697784420324;  // std dev = 0.000, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D) )
%   | then if ( location(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(F, E), interaction(F, A) )
%   | | | then return 0.3354518935530952;  // std dev = 3.674, 241.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=230 */
%   | | | else return -0.2644710217478735;  // std dev = 5.047, 169.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=39 */
%   | | else if ( interaction(G, A) )
%   | | | then return -0.25675446404581315;  // std dev = 0.618, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.48375427416499756;  // std dev = 0.400, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( interaction(A, H), phenotype(H, I) )
%   | | then if ( interaction(J, A), interaction(J, H) )
%   | | | then return -0.07911879393718158;  // std dev = 0.625, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.4142317281064441;  // std dev = 1.504, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( interaction(K, A), interaction(L, K) )
%   | | | then return -0.11395149309402809;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.07159092055891801;  // std dev = 1.381, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else return -0.0641918400820259;  // std dev = 7.33e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 5.478317499160767
Refined model CLL: -0.228298


******************************************
Best model found
******************************************
Total revision time: 103.21745562553406
Best scored revision CLL: -0.228298


******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 10.778221845626831
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.4419998667765266;  // std dev = 0.493, 483.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004874;  // std dev = 1.42e-08, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.4306803763506321;  // std dev = 7.519, 244.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=155 */
%   | else return 0.3780032820507377;  // std dev = 7.281, 218.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839213;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.28851093015239065;  // std dev = 0.496, 497.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360656;  // std dev = 0.000, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5983060797921693;  // std dev = 3.870, 256.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=240 */
%   | else return -0.16945841819781396;  // std dev = 5.867, 245.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(A, G) )
%   | | | then return -0.10159632948783653;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | | else return -0.10159632948783646;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.1837507626787193;  // std dev = 7.254, 270.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=155 */
%   | else return 0.17775211861229204;  // std dev = 6.088, 216.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926068;  // std dev = 9.22e-09, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.14418220320930353;  // std dev = 8.660, 405.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=237 */
%   | | else return 0.06949872796758935;  // std dev = 3.976, 87.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 7.45e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.08518475138839678;  // std dev = 6.99e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.13957547383161473;  // std dev = 0.420, 456.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, F) )
%   | | then return -0.07877675473109147;  // std dev = 8.16e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.07877675473109148;  // std dev = 8.16e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.07737066911272272;  // std dev = 8.603, 405.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=237 */
%   | else return -0.015600024120162119;  // std dev = 4.065, 97.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=45 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333727;  // std dev = 0.000, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.059191586910300346;  // std dev = 9.383, 486.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420325;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.055130869154095714;  // std dev = 9.272, 475.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202576;  // std dev = 8.54e-09, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
Inference time using transfer learning 6.6839518547058105
Parameter learned model CLL:-0.272218 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.493, 201, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.42e-08, 382, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [7.519, 89, 155], 'true,false': [7.281, 91, 127], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 312, 0], 'false,false,false,false': [0.0, 58, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.496, 215, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 339, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(A, G)'}, {'true,true': [3.87, 16, 240], 'true,false': [5.867, 203, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 190, 0], 'false,false,false,false': [0.0, 152, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.254, 115, 155], 'true,false': [6.088, 89, 127], 'false,true': [0.0, 0, 0], 'false,false': [9.22e-09, 373, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(A, G)'}, {'true,true,true': [8.66, 168, 237], 'true,true,false': [3.976, 42, 45], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-08, 182, 0], 'false,false,false': [6.99e-08, 163, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(A, F)'}, {'true,true': [0.42, 174, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [8.16e-08, 185, 0], 'false,false,false': [8.16e-08, 180, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.603, 168, 237], 'true,false': [4.065, 52, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 384, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.383, 204, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 366, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.272, 193, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.54e-09, 346, 0]}]
{'': [0.24296902125689893, 2.0228147254950495e-16], 'false': [nan, 2.0228147254950495e-16]}
{'': [0.23781413391802517, -1.248250752010987e-16], 'true': [0.23170854608976157, 0.24318239205454115], 'false': [nan, -1.248250752010987e-16], 'false,false': [nan, -1.248250752010987e-16], 'false,false,false': [-1.1102230246251565e-16, -4.0197730201945323e-17]}
{'': [0.24569724712301916, -3.4059939398529876e-17], 'false': [nan, -3.4059939398529876e-17], 'false,false': [nan, -3.4059939398529876e-17]}
{'': [0.24588585202199773, 1.4283571077048797e-17], 'true': [0.0584957973961262, 0.140487032203423], 'false': [nan, 1.4283571077048797e-17], 'false,false': [nan, 1.4283571077048797e-17], 'false,false,false': [-8.998649778540742e-17, -6.281525007747596e-17]}
{'': [0.18453171334394958, 8.453172627172773e-17], 'true': [0.1948844621164464, 0.17157078641685708], 'false': [nan, 8.453172627172773e-17]}
{'': [0.1853809480248814, 3.99036681314549e-17], 'true': [0.1853809480248814, nan], 'true,true': [0.1851893497726151, 0.18168153617327404], 'false': [nan, 3.99036681314549e-17], 'false,false': [3.050063254464716e-17, 2.996921048067907e-17]}
{'': [0.1767327529227722, 2.4333655334250005e-17], 'true': [0.1767327529227722, nan], 'false': [nan, 2.4333655334250005e-17], 'false,false': [3.600723323108616e-17, 3.700743415417188e-17]}
{'': [0.18170269028148406, -5.782411586589357e-18], 'true': [0.18275384356338037, 0.1703404726028551], 'false': [nan, -5.782411586589357e-18], 'false,false': [nan, -5.782411586589357e-18]}
{'': [0.1811361639771514, -1.02528792984509e-16], 'true': [0.1811361639771514, nan], 'false': [nan, -1.02528792984509e-16], 'false,false': [nan, -1.02528792984509e-16]}
{'': [0.18099976193583334, 7.251745767782814e-17], 'true': [0.18099976193583334, nan], 'false': [nan, 7.251745767782814e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 44.216675758361816
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( complex(D, E) )
%   | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( complex(A, F), phenotype(D, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( complex(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.38115135640701414;  // std dev = 10.150, 413.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=216 */
%   else return -0.1418510649004875;  // std dev = 2.51e-07, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( phenotype(A, E), interaction(D, A) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.7238473922615556;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.24134331246396057;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.7310583364267977;  // std dev = 0.136, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( interaction(A, F), location(A, G) )
%   | | then if ( interaction(F, H), recursion_proteinclass(H, B) )
%   | | | then return 0.6618353726052535;  // std dev = 2.038, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | | else return 0.20895637380902363;  // std dev = 6.527, 182.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=73 */
%   | | else if ( enzyme(A, I), phenotype(A, J) )
%   | | | then return 0.303677429368355;  // std dev = 3.391, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.405703775621843;  // std dev = 6.548, 182.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=110 */
%   else if ( interaction(K, A) )
%   | then return -0.1254446385283921;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E), interaction(A, E) )
%   | | then if ( enzyme(D, F), complex(E, G) )
%   | | | then return 0.6301846996234277;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5590941562816896;  // std dev = 0.058, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( interaction(D, H), phenotype(A, I) )
%   | | | then return 0.1113138744658083;  // std dev = 1.096, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5650966442588469;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( interaction(A, J), interaction(J, A) )
%   | | then if ( phenotype(A, K), location(A, L) )
%   | | | then return 0.2952257495822464;  // std dev = 2.708, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.043534377778172144;  // std dev = 1.855, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( interaction(M, A), phenotype(M, N) )
%   | | | then return 0.2964404951444389;  // std dev = 7.497, 231.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=128 */
%   | | | else return 0.35318788278368735;  // std dev = 5.618, 134.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=81 */
%   else return -0.11231637819360639;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), interaction(F, D) )
%   | | then if ( interaction(F, E) )
%   | | | then return 0.4225521274298131;  // std dev = 0.937, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.19851483940306625;  // std dev = 1.191, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( interaction(G, D), complex(A, H) )
%   | | | then return 0.5496208873061655;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6242670677264854;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( interaction(I, A), enzyme(I, J) )
%   | | then if ( interaction(K, I), enzyme(A, L) )
%   | | | then return -0.006002860526019203;  // std dev = 2.609, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0.18609912872240725;  // std dev = 4.259, 79.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=40 */
%   | | else if ( interaction(A, M), recursion_proteinclass(M, B) )
%   | | | then return 0.4435509429194111;  // std dev = 0.307, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.21204787490519791;  // std dev = 8.813, 318.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=168 */
%   else return -0.10159632948783642;  // std dev = 1.86e-09, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E), recursion_proteinclass(E, B) )
%   | | then if ( complex(E, F) )
%   | | | then return 0.3148245179377174;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.367550741523486;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( interaction(G, A), interaction(A, G) )
%   | | | then return -0.08764005776517311;  // std dev = 1.390, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.3468734708511133;  // std dev = 0.134, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( interaction(A, I), complex(I, J) )
%   | | | then return 0.17190392973879642;  // std dev = 1.060, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.46499420320885504;  // std dev = 0.268, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( interaction(K, A), phenotype(K, L) )
%   | | | then return 0.10233446970681609;  // std dev = 8.465, 301.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=138 */
%   | | | else return 0.1659173100316167;  // std dev = 6.025, 148.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=78 */
%   else return -0.09269127618926072;  // std dev = 8.84e-09, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(A, D) )
%   | then if ( interaction(D, D), recursion_proteinclass(D, B) )
%   | | then if ( complex(A, E) )
%   | | | then return 0.25209810248072384;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2606631344010581;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( interaction(D, D), phenotype(D, F) )
%   | | | then return -0.15343771502729375;  // std dev = 1.587, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.06500223192307517;  // std dev = 3.460, 64.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=31 */
%   | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then if ( complex(A, H), enzyme(A, I) )
%   | | | then return 0.13972854008935834;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.36625404448297605;  // std dev = 0.330, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( phenotype(A, J), enzyme(A, K) )
%   | | | then return 0.262866113050853;  // std dev = 3.934, 68.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=44 */
%   | | | else return 0.16398322848479002;  // std dev = 8.136, 281.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=162 */
%   else return -0.08518475138839678;  // std dev = 6.25e-09, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D) )
%   | then if ( location(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(F, E), interaction(F, A) )
%   | | | then return 0.4374003945142005;  // std dev = 3.886, 243.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=230 */
%   | | | else return -0.19224033772076946;  // std dev = 5.140, 168.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=39 */
%   | | else if ( interaction(A, G), location(G, D) )
%   | | | then return -0.3898495070449228;  // std dev = 0.177, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.43987360772926054;  // std dev = 0.110, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( enzyme(A, H) )
%   | | then if ( enzyme(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.3828212499308021;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.4481548376430301;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( interaction(J, A), interaction(K, J) )
%   | | | then return 0.3941759183117664;  // std dev = 0.306, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5566344672661524;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109141;  // std dev = 3.73e-09, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then if ( location(D, E), location(A, F) )
%   | | then if ( phenotype(D, G), interaction(H, D) )
%   | | | then return 0.10676875329703087;  // std dev = 5.810, 239.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=145 */
%   | | | else return 0.028463630828591897;  // std dev = 4.823, 153.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=83 */
%   | | else if ( complex(D, I) )
%   | | | then return 0.09267746659577798;  // std dev = 1.145, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.1440054859998071;  // std dev = 1.938, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else if ( interaction(A, J), enzyme(J, K) )
%   | | then if ( interaction(J, L), complex(L, M) )
%   | | | then return -0.04014499893809392;  // std dev = 1.871, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.14162813216481815;  // std dev = 1.865, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( complex(A, N) )
%   | | | then return 0.09650102907717872;  // std dev = 1.647, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.27985312584521144;  // std dev = 2.341, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   else return -0.07324622576333717;  // std dev = 2.63e-09, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), phenotype(D, E) )
%   | then if ( complex(D, F), complex(A, F) )
%   | | then if ( recursion_proteinclass(D, B) )
%   | | | then return 0.1642684327948328;  // std dev = 0.178, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08441030126120333;  // std dev = 2.441, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else if ( location(A, G), location(D, G) )
%   | | | then return 0.11116722498186885;  // std dev = 5.199, 171.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=110 */
%   | | | else return 0.018922692742506752;  // std dev = 3.547, 81.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=42 */
%   | else if ( phenotype(A, H) )
%   | | then if ( phenotype(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.3549640884609828;  // std dev = 2.169, 54.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=48 */
%   | | | else return -0.40455447614467305;  // std dev = 0.181, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.18770068360324219;  // std dev = 0.130, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.07199261436427554;  // std dev = 3.739, 73.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   else return -0.06842697784420324;  // std dev = 0.000, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(A, E) )
%   | then if ( location(D, E) )
%   | | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | | then return 0.18031867212832667;  // std dev = 2.237, 69.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=61 */
%   | | | else return -0.03018090612645394;  // std dev = 6.471, 274.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=129 */
%   | | else if ( enzyme(A, G), location(D, H) )
%   | | | then return 0.043281438023983036;  // std dev = 1.905, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | | else return 0.16399005186553942;  // std dev = 2.233, 40.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=28 */
%   | else if ( interaction(A, I), complex(I, J) )
%   | | then if ( phenotype(A, K), phenotype(I, L) )
%   | | | then return 0.11463078943531328;  // std dev = 1.689, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | | else return 0.31170976905355696;  // std dev = 1.717, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | else if ( interaction(M, A), interaction(N, M) )
%   | | | then return 0.04828676900492438;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1350096830559899;  // std dev = 2.125, 25.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=15 */
%   else return -0.06419184008202591;  // std dev = 7.15e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
Inference time using transfer learning 4.483569860458374
Refined model CLL: -0.234981


******************************************
Best model found
******************************************
Total revision time: 119.21574211120605
Best scored revision CLL: -0.234981


******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 10.84398603439331
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.43483605166392514;  // std dev = 0.494, 489.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.34e-08, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.3950532913557905;  // std dev = 7.889, 259.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=155 */
%   | else return 0.366104419357591;  // std dev = 7.394, 223.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839213;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.3276173229964564;  // std dev = 0.490, 470.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5678842532872734;  // std dev = 4.670, 264.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=240 */
%   | else return -0.17355116592189856;  // std dev = 5.892, 249.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(A, G) )
%   | | | then return -0.10159632948783655;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | | else return -0.10159632948783649;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.1985090940849695;  // std dev = 7.183, 265.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=155 */
%   | else return 0.18055575115679498;  // std dev = 6.076, 216.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892605;  // std dev = 1.05e-08, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.1886447531706318;  // std dev = 8.088, 376.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=237 */
%   | | else return 0.11211657753724054;  // std dev = 3.751, 80.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 7.88e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.08518475138839678;  // std dev = 6.99e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.09497351706788358;  // std dev = 0.430, 487.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, F) )
%   | | then return -0.07877675473109147;  // std dev = 9.54e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.07877675473109151;  // std dev = 7.67e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.061629418179721174;  // std dev = 8.864, 417.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=237 */
%   | else return 0.07194286102834709;  // std dev = 3.703, 78.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=45 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333728;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.0626544247926809;  // std dev = 9.445, 479.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420322;  // std dev = 0.000, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.04966072295406599;  // std dev = 9.390, 479.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202562;  // std dev = 9.59e-09, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
Inference time using transfer learning 6.919710874557495
Parameter learned model CLL:-0.274224 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.494, 207, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.34e-08, 369, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [7.889, 104, 155], 'true,false': [7.394, 96, 127], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 322, 0], 'false,false,false,false': [0.0, 52, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.49, 188, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 371, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(A, G)'}, {'true,true': [4.67, 24, 240], 'true,false': [5.892, 207, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 199, 0], 'false,false,false,false': [0.0, 169, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.183, 110, 155], 'true,false': [6.076, 89, 127], 'false,true': [0.0, 0, 0], 'false,false': [1.05e-08, 353, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(A, G)'}, {'true,true,true': [8.088, 139, 237], 'true,true,false': [3.751, 35, 45], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.88e-08, 181, 0], 'false,false,false': [6.99e-08, 167, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(A, F)'}, {'true,true': [0.43, 205, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [9.54e-08, 181, 0], 'false,false,false': [7.67e-08, 139, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.864, 180, 237], 'true,false': [3.703, 33, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 389, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.445, 197, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 353, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.39, 197, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.59e-09, 388, 0]}]
{'': [0.24411908615303843, 1.805240690447409e-16], 'false': [nan, 1.805240690447409e-16]}
{'': [0.24276441521323916, -1.2349004765884094e-16], 'true': [0.2403064951327454, 0.24516881497717177], 'false': [nan, -1.2349004765884094e-16], 'false,false': [nan, -1.2349004765884094e-16], 'false,false,false': [-1.130910410177178e-16, -3.416070845000482e-17]}
{'': [0.24013489931783774, -2.6334131042321772e-17], 'false': [nan, -2.6334131042321772e-17], 'false,false': [nan, -2.6334131042321772e-17]}
{'': [0.2474843180100784, 6.637202864606914e-17], 'true': [0.08259689358287182, 0.1394045425288378], 'false': [nan, 6.637202864606914e-17], 'false,false': [nan, 6.637202864606914e-17], 'false,false,false': [-8.926416278393219e-17, -7.62046573115492e-17]}
{'': [0.1840932192502784, 1.1070779169066716e-16], 'true': [0.19467628198313813, 0.17093179020180585], 'false': [nan, 1.1070779169066716e-16]}
{'': [0.1751410121567106, 3.9559670992390636e-17], 'true': [0.1751410121567106, nan], 'true,true': [0.17396124530357504, 0.175856821659579], 'false': [nan, 3.9559670992390636e-17], 'false,false': [3.4349441645861195e-17, 2.9251385079944247e-17]}
{'': [0.18483755381935493, 2.0816681711721685e-17], 'true': [0.18483755381935493, nan], 'false': [nan, 2.0816681711721685e-17], 'false,false': [5.0297396695725325e-17, 4.2332244823836906e-17]}
{'': [0.18644670498815508, -6.849705036247752e-18], 'true': [0.18841946491800923, 0.17581042067513164], 'false': [nan, -6.849705036247752e-18], 'false,false': [nan, -6.849705036247752e-18]}
{'': [0.1862353897074087, -8.806301611757616e-17], 'true': [0.1862353897074087, nan], 'false': [nan, -8.806301611757616e-17], 'false,false': [nan, -8.806301611757616e-17]}
{'': [0.1840665228857907, 9.156478553609538e-17], 'true': [0.1840665228857907, nan], 'false': [nan, 9.156478553609538e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 18.57141947746277
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), complex(A, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( complex(F, E) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( interaction(A, G), complex(G, H) )
%   | | | then return 0.11188027838309446;  // std dev = 3.562, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
%   | | | else return 0.4295775065280827;  // std dev = 4.140, 70.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=40 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( phenotype(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( interaction(K, A), complex(K, L) )
%   | | | then return 0.4779836458433148;  // std dev = 5.340, 121.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=75 */
%   | | | else return 0.4057679827185605;  // std dev = 6.451, 168.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=92 */
%   else return -0.1418510649004875;  // std dev = 2.44e-07, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then return 0.7458259977546157;  // std dev = 0.270, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( interaction(E, A), location(E, F) )
%   | | then if ( interaction(G, E), recursion_proteinclass(G, B) )
%   | | | then return 0.6810663033051564;  // std dev = 1.575, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.24580573675476047;  // std dev = 9.339, 356.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=158 */
%   | | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | | then return 0.8012670012273944;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4030220681935378;  // std dev = 3.876, 63.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   else if ( interaction(I, A) )
%   | then return -0.1254446385283921;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(E, E) )
%   | | then if ( interaction(A, E) )
%   | | | then return 0.5627948824638344;  // std dev = 0.118, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.03769622800493613;  // std dev = 0.991, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( interaction(D, F), phenotype(F, G) )
%   | | | then return 0.550863426471734;  // std dev = 0.922, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.6815939262760736;  // std dev = 0.320, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( interaction(A, H) )
%   | | then if ( location(A, I), location(H, I) )
%   | | | then return 0.22978084151028355;  // std dev = 6.230, 173.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=87 */
%   | | | else return 0.419665206387187;  // std dev = 2.646, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | else if ( interaction(J, A), phenotype(J, K) )
%   | | | then return 0.2988397273785597;  // std dev = 6.392, 167.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=93 */
%   | | | else return 0.47144625914221744;  // std dev = 2.962, 46.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=34 */
%   else return -0.11231637819360643;  // std dev = 0.000, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(A, E) )
%   | | then if ( interaction(D, E) )
%   | | | then return 0.4229031500782471;  // std dev = 0.120, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2693763146465618;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( enzyme(D, F), phenotype(D, G) )
%   | | | then return 0.24707928614263827;  // std dev = 0.606, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5720008748816208;  // std dev = 0.467, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( interaction(H, A), interaction(A, H) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.2634103036241035;  // std dev = 0.156, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.12787636636079475;  // std dev = 3.098, 57.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=27 */
%   | | else if ( enzyme(A, I), interaction(J, A) )
%   | | | then return 0.3150447431393062;  // std dev = 4.847, 105.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=66 */
%   | | | else return 0.18732743465663856;  // std dev = 8.222, 280.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=143 */
%   else return -0.10159632948783609;  // std dev = 9.03e-09, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( enzyme(D, E), phenotype(A, F) )
%   | | then if ( enzyme(A, E) )
%   | | | then return 0.34402189240046194;  // std dev = 0.124, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2165351224236891;  // std dev = 1.099, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( interaction(D, A), phenotype(A, G) )
%   | | | then return 0.2185775884410251;  // std dev = 0.795, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3886132181375161;  // std dev = 0.453, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( complex(A, H), interaction(I, A) )
%   | | then if ( interaction(J, I), recursion_proteinclass(J, B) )
%   | | | then return 0.3555870992174936;  // std dev = 1.423, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.06931893269226219;  // std dev = 5.333, 128.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=52 */
%   | | else if ( complex(A, K), phenotype(A, L) )
%   | | | then return 0.3307452325233179;  // std dev = 1.463, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.17615622192208474;  // std dev = 8.285, 283.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=157 */
%   else return -0.09269127618926072;  // std dev = 8.84e-09, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( enzyme(A, E), phenotype(A, F) )
%   | | then if ( phenotype(D, F) )
%   | | | then return 0.3084051401204517;  // std dev = 0.241, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.31095265190371973;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | | then return 0.22103228246265436;  // std dev = 0.877, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.4231098348570183;  // std dev = 0.373, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(H, A), interaction(H, H) )
%   | | then if ( interaction(A, I), interaction(I, I) )
%   | | | then return -0.10690973094654876;  // std dev = 1.866, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.04787316535532144;  // std dev = 3.571, 53.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=24 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.2512415765349363;  // std dev = 1.320, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.1316445786047914;  // std dev = 9.123, 345.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=184 */
%   else return -0.08518475138839678;  // std dev = 6.38e-09, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(D, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.1850103417429083;  // std dev = 0.385, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.3504347600805788;  // std dev = 1.345, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | else if ( interaction(D, A) )
%   | | | then return -0.32147768466875415;  // std dev = 0.517, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.06404029372909889;  // std dev = 5.065, 122.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=63 */
%   | else if ( interaction(A, G), phenotype(G, H) )
%   | | then if ( interaction(G, I), phenotype(I, H) )
%   | | | then return 0.16570414603668063;  // std dev = 1.862, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.38193248536055535;  // std dev = 1.579, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( interaction(J, A), location(J, K) )
%   | | | then return 0.1465169904126602;  // std dev = 7.230, 228.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=138 */
%   | | | else return 0.39365955493439664;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109143;  // std dev = 5.10e-09, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(A, D) )
%   | then if ( recursion_proteinclass(D, B), interaction(A, A) )
%   | | then if ( complex(A, E) )
%   | | | then return 0.1834824107002305;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21149845061779088;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.23131410420683743;  // std dev = 0.329, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.03583515632175974;  // std dev = 2.774, 63.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=35 */
%   | else if ( location(A, F) )
%   | | then if ( location(G, F), recursion_proteinclass(G, B) )
%   | | | then return 0.18610464641046387;  // std dev = 8.029, 317.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=217 */
%   | | | else return -0.47003702246929097;  // std dev = 0.270, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( interaction(A, H) )
%   | | | then return 0.5370325907531769;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17588363444245414;  // std dev = 1.375, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   else return -0.07324622576333721;  // std dev = 1.32e-09, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), enzyme(A, E) )
%   | then if ( phenotype(A, F), location(D, G) )
%   | | then if ( phenotype(D, H), location(A, I) )
%   | | | then return 0.04640028536104036;  // std dev = 3.599, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.396572342251093;  // std dev = 0.871, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( interaction(J, D), phenotype(J, K) )
%   | | | then return 0.015811988599796534;  // std dev = 3.024, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | | | else return -0.11922856602229852;  // std dev = 2.576, 38.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | else if ( interaction(A, L), interaction(L, M) )
%   | | then if ( recursion_proteinclass(M, B), location(A, N) )
%   | | | then return 0.21111041769128044;  // std dev = 1.634, 51.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=47 */
%   | | | else return -0.012714139719841304;  // std dev = 4.881, 127.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=60 */
%   | | else if ( interaction(P, A) )
%   | | | then return 0.11289863585401307;  // std dev = 5.393, 137.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=86 */
%   | | | else return 0.40450705528332476;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420325;  // std dev = 0.000, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D) )
%   | then if ( enzyme(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(F, E), interaction(E, A) )
%   | | | then return 0.16641507840810102;  // std dev = 0.127, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4310716508276729;  // std dev = 1.430, 89.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=88 */
%   | | else if ( interaction(G, A), interaction(A, G) )
%   | | | then return -0.3269604379617289;  // std dev = 0.307, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.5089210330135419;  // std dev = 0.486, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( interaction(A, I), enzyme(I, J) )
%   | | | then return -0.03254405972214023;  // std dev = 1.162, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.20568575587903604;  // std dev = 0.434, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( interaction(K, A), interaction(L, K) )
%   | | | then return -0.025778819195626006;  // std dev = 6.535, 215.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=103 */
%   | | | else return 0.06225191912208446;  // std dev = 3.955, 78.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=48 */
%   else return -0.06419184008202575;  // std dev = 8.64e-09, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
Inference time using transfer learning 4.012426137924194
Refined model CLL: -0.246172


******************************************
Best model found
******************************************
Total revision time: 72.30565142631531
Best scored revision CLL: -0.246172


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(10 unique tokens: ['follow', 'account', 'type', 'tweet', 'phenotype']...) from 27 documents (total 30 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(10 unique tokens: ['follow', 'account', 'type', 'tweet', 'phenotype']...) from 27 documents (total 30 corpus positions)", 'datetime': '2021-06-11T19:05:12.840906', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
constructing a sparse term similarity matrix using WordEmbeddingSimilarityIndex(keyedvectors=<gensim.models.keyedvectors.KeyedVectors object at 0x7faabf558278>, threshold=0.0, exponent=2.0, kwargs={})
iterating over columns in dictionary order
constructed a sparse term similarity matrix with 10.000000% density
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.143254', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.145801', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.147674', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.148794', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.149549', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.150307', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.151075', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.151807', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.152542', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.153276', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.154007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.154761', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.155516', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.156265', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.157002', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.157759', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.158502', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.159265', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.162283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.163144', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.163956', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.164793', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.165605', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.166409', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.167234', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.168045', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.168845', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.169658', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.170475', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.171324', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.172135', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.172937', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.173739', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.174566', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.175418', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:05:14.176247', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 3.9665040969848633
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.4132670453357284;  // std dev = 0.497, 508.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004874;  // std dev = 1.43e-08, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.38861183240036934;  // std dev = 6.819, 192.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=113 */
%   | else return 0.4058049327587916;  // std dev = 8.163, 279.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839222;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.31008028581481845;  // std dev = 0.493, 485.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360649;  // std dev = 0.000, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, A), complex(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2118991438823969;  // std dev = 11.281, 514.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=282 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(A, G) )
%   | | | then return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | | else return -0.10159632948783656;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.1933669909297354;  // std dev = 6.918, 196.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=113 */
%   | else return 0.16686308402395625;  // std dev = 8.681, 305.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.08e-08, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.19578787176119994;  // std dev = 8.171, 285.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=178 */
%   | | else return 0.04690309354246479;  // std dev = 7.397, 219.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 6.99e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.08518475138839678;  // std dev = 9.42e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.10948932772973884;  // std dev = 0.494, 493.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, F) )
%   | | then return -0.0787767547310915;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.07877675473109146;  // std dev = 7.15e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.10709024541540825;  // std dev = 8.310, 291.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=178 */
%   | else return 0.08958724821278052;  // std dev = 6.801, 187.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=104 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333714;  // std dev = 3.48e-09, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.08545462893073394;  // std dev = 10.601, 470.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420325;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.02017271668003351;  // std dev = 11.161, 508.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202569;  // std dev = 9.08e-09, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
Inference time using transfer learning 2.039900302886963
Parameter learned model CLL:-0.323689 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.497, 226, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-08, 384, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(G, A)'}, {'true,true': [6.819, 79, 113], 'true,false': [8.163, 110, 169], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 371, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.493, 203, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 350, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, A), complex(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [11.281, 232, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 151, 0], 'false,false,false,false': [0.0, 218, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [6.918, 83, 113], 'true,false': [8.681, 136, 169], 'false,true': [0.0, 0, 0], 'false,false': [1.08e-08, 336, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'complex(A, G)'}, {'true,true,true': [8.171, 107, 178], 'true,true,false': [7.397, 115, 104], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [6.99e-08, 163, 0], 'false,false,false': [9.42e-08, 252, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'complex(A, F)'}, {'true,true': [0.494, 211, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [8.23e-08, 151, 0], 'false,false,false': [7.15e-08, 217, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.31, 113, 178], 'true,false': [6.801, 83, 104], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.48e-09, 362, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [10.601, 188, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 362, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [11.161, 226, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.08e-09, 366, 0]}]
{'': [0.2469619939239907, 2.0585385248258112e-16], 'false': [nan, 2.0585385248258112e-16]}
{'': [0.24025315428617966, -1.220946075598555e-16], 'true': [0.24216037326389017, 0.2388201590421529], 'false': [nan, -1.220946075598555e-16], 'false,false': [nan, -1.220946075598555e-16], 'false,false,false': [nan, -1.220946075598555e-16]}
{'': [0.24338883826087837, -3.0451831532575724e-17], 'false': [nan, -3.0451831532575724e-17], 'false,false': [nan, -3.0451831532575724e-17]}
{'': [0.24760482779348147, 6.859914623700155e-17], 'true': [nan, 0.24760482779348147], 'false': [nan, 6.859914623700155e-17], 'false,false': [nan, 6.859914623700155e-17], 'false,false,false': [-6.176075103875043e-17, -7.741004575368064e-17]}
{'': [0.24609428342890008, 1.163090787702545e-16], 'true': [0.2441430653894225, 0.24707336737436206], 'false': [nan, 1.163090787702545e-16]}
{'': [0.24648370486037557, 3.959349581795739e-17], 'true': [0.24648370486037557, nan], 'true,true': [0.23427658897133796, 0.24983494942245618], 'false': [nan, 3.959349581795739e-17], 'false,false': [2.996921048067907e-17, 3.52451753849256e-17]}
{'': [0.24431358560972669, 2.413528314402514e-17], 'true': [0.24431358560972669, nan], 'false': [nan, 2.413528314402514e-17], 'false,false': [4.485006920671162e-17, 2.353468162799871e-17]}
{'': [0.24130044570314413, 1.2267657730664713e-17], 'true': [0.23730558600089438, 0.24733054079261185], 'false': [nan, 1.2267657730664713e-17], 'false,false': [nan, 1.2267657730664713e-17]}
{'': [0.2391200921732861, -9.384758163958505e-17], 'true': [0.2391200921732861, nan], 'false': [nan, -9.384758163958505e-17], 'false,false': [nan, -9.384758163958505e-17]}
{'': [0.24522227979874303, 8.190169853792139e-17], 'true': [0.24522227979874303, nan], 'false': [nan, 8.190169853792139e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;complex(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;complex(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;complex(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 38.42850852012634
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A) )
%   | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( interaction(D, F) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then if ( interaction(H, G) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( interaction(A, I), interaction(J, A) )
%   | | | then return 0.3295775065280849;  // std dev = 5.906, 140.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=66 */
%   | | | else return 0.4654363844922224;  // std dev = 7.675, 247.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=150 */
%   else return -0.14185106490048752;  // std dev = 2.40e-07, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), enzyme(E, F) )
%   | | then if ( interaction(G, E) )
%   | | | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7233581326712257;  // std dev = 0.085, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( interaction(A, I), complex(I, J) )
%   | | | then return 0.3108692123652382;  // std dev = 1.283, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.7422194712825199;  // std dev = 0.097, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.18687840553538346;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.339853824221861;  // std dev = 9.948, 399.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=216 */
%   else return -0.1254446385283922;  // std dev = 0.000, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, A), phenotype(A, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.5545988552348914;  // std dev = 0.001, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22171327778320404;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5651317167915001;  // std dev = 0.137, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( interaction(F, A), phenotype(F, G) )
%   | | then if ( interaction(H, F), recursion_proteinclass(H, B) )
%   | | | then return 0.5366308654829135;  // std dev = 2.375, 36.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=29 */
%   | | | else return 0.2715278205609393;  // std dev = 7.432, 230.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=123 */
%   | | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | | then return 0.5634528205907906;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20255362103934457;  // std dev = 6.440, 167.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=78 */
%   else return -0.11231637819360647;  // std dev = 0.000, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( location(A, E), location(D, E) )
%   | | then if ( interaction(F, D), interaction(F, F) )
%   | | | then return 0.38140681535051385;  // std dev = 0.870, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.4818877976223373;  // std dev = 0.333, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.16259354445897822;  // std dev = 1.034, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | then if ( interaction(G, H), phenotype(H, I) )
%   | | | then return 0.21419774367612612;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.43630610481448473;  // std dev = 0.113, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( interaction(J, A), complex(J, K) )
%   | | | then return 0.2056485162791463;  // std dev = 7.318, 221.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=115 */
%   | | | else return 0.1541634342740849;  // std dev = 7.319, 216.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=101 */
%   else if ( complex(A, L) )
%   | then return -0.10159632948783642;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D) )
%   | then if ( location(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(E, F), interaction(A, F) )
%   | | | then return 0.5291624703663369;  // std dev = 2.206, 150.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=148 */
%   | | | else return 0.11348765840938314;  // std dev = 7.643, 250.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=121 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.23502980036622353;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.35225769398867485;  // std dev = 0.123, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( phenotype(A, G) )
%   | | then return 0.25950578256800433;  // std dev = 0.620, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( interaction(A, H) )
%   | | | then return 0.0903039656565899;  // std dev = 1.848, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.06809568465891117;  // std dev = 1.809, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   else if ( interaction(A, A) )
%   | then return -0.09269127618926094;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return -0.09269127618926044;  // std dev = 1.04e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), enzyme(D, E) )
%   | then if ( enzyme(A, E), interaction(F, A) )
%   | | then if ( interaction(F, D), phenotype(A, G) )
%   | | | then return 0.3542365560930776;  // std dev = 0.329, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.12818076214507199;  // std dev = 0.838, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( phenotype(A, H), complex(A, I) )
%   | | | then return 0.18798874831373666;  // std dev = 1.715, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return 0.01821516465652629;  // std dev = 3.499, 75.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=35 */
%   | else if ( interaction(J, A), enzyme(J, K) )
%   | | then if ( location(A, L), phenotype(J, M) )
%   | | | then return 0.18233635808198445;  // std dev = 3.193, 50.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=31 */
%   | | | else return 0.36436206860392534;  // std dev = 1.212, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( interaction(N, A), interaction(P, N) )
%   | | | then return 0.14453455687331151;  // std dev = 6.579, 214.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=122 */
%   | | | else return 0.1895640631563638;  // std dev = 4.156, 84.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=50 */
%   else return -0.08518475138839678;  // std dev = 6.32e-09, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(D, E) )
%   | then if ( enzyme(D, F), interaction(A, A) )
%   | | then if ( recursion_proteinclass(D, B) )
%   | | | then return 0.1791875382440674;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2745304061418266;  // std dev = 0.957, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( interaction(G, D), interaction(G, A) )
%   | | | then return 0.09713898321743504;  // std dev = 4.833, 130.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=80 */
%   | | | else return 0.17693581962824806;  // std dev = 6.705, 239.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=152 */
%   | else if ( location(A, H) )
%   | | then if ( location(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.12026993725691763;  // std dev = 3.561, 66.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=41 */
%   | | | else return -0.2955558285396495;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.10661025145356677;  // std dev = 0.484, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07808026380314587;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else return -0.07877675473109141;  // std dev = 4.47e-09, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( location(A, E) )
%   | | then if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | | | then return 0.18459018474130195;  // std dev = 0.157, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.259187502631236;  // std dev = 0.209, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.03174313591012393;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( interaction(G, A), interaction(G, G) )
%   | | then if ( phenotype(G, H), complex(A, I) )
%   | | | then return -0.21538209147910514;  // std dev = 1.580, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.08071809758878744;  // std dev = 3.305, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | else if ( interaction(A, J), interaction(K, A) )
%   | | | then return 0.010804701157671723;  // std dev = 4.578, 122.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=64 */
%   | | | else return 0.10980274417070504;  // std dev = 7.142, 243.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=139 */
%   else return -0.07324622576333713;  // std dev = 6.99e-08, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), interaction(D, A) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then if ( enzyme(A, E) )
%   | | | then return 0.1437089301059919;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17939772743242402;  // std dev = 0.170, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( interaction(D, D), complex(D, F) )
%   | | | then return -0.20217061433945038;  // std dev = 1.683, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | | | else return -0.03765986409993134;  // std dev = 2.932, 55.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | else if ( interaction(A, G), enzyme(G, H) )
%   | | then if ( enzyme(A, I), complex(A, J) )
%   | | | then return -0.11512476008635684;  // std dev = 2.179, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | | else return 0.04975863624612321;  // std dev = 2.835, 48.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=28 */
%   | | else if ( complex(A, K) )
%   | | | then return 0.1837091782366814;  // std dev = 3.739, 83.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=61 */
%   | | | else return 0.06900724982324671;  // std dev = 6.930, 223.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=128 */
%   else return -0.06842697784420326;  // std dev = 0.000, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(D, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( enzyme(F, G), phenotype(D, H) )
%   | | | then return 0.01354161036230755;  // std dev = 1.332, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.27179810091980017;  // std dev = 1.135, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( interaction(D, A) )
%   | | | then return -0.35531732774576724;  // std dev = 0.524, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.023767781924962223;  // std dev = 4.638, 129.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=63 */
%   | else if ( interaction(I, A), enzyme(I, J) )
%   | | then if ( phenotype(I, K), phenotype(A, K) )
%   | | | then return -0.11330579692769362;  // std dev = 1.794, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.03958978512166958;  // std dev = 3.276, 57.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=34 */
%   | | else if ( location(A, L) )
%   | | | then return 0.1398886451777359;  // std dev = 6.035, 190.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=128 */
%   | | | else return -0.06122472308888115;  // std dev = 1.311, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.06419184008202576;  // std dev = 8.48e-09, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
Inference time using transfer learning 5.327710151672363
Refined model CLL: -0.270238


******************************************
Best model found
******************************************
Total revision time: 84.77472615242004
Best scored revision CLL: -0.270238


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.538935', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.540160', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.540945', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.541753', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.542496', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.543251', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.544020', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.544760', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.545493', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.546244', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.547005', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.547753', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.548494', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.549226', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.549950', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.550679', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.551428', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.552171', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.555236', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.556055', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.556862', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.557672', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.558476', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.559298', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.560100', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.560912', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.561717', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.562518', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.563333', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.564134', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.564929', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.565732', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.566532', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.567353', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.568160', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:06:46.568958', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 4.021184206008911
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.42555336165886404;  // std dev = 0.495, 497.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 9.13e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.38663929163120464;  // std dev = 6.819, 192.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=113 */
%   | else return 0.3828727114697272;  // std dev = 8.377, 289.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839213;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.30579061123813994;  // std dev = 0.494, 489.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936065;  // std dev = 0.000, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, A), complex(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23670086872039697;  // std dev = 10.986, 493.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=282 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(A, G) )
%   | | | then return -0.10159632948783642;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return -0.10159632948783659;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.16344653249549881;  // std dev = 7.100, 204.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=113 */
%   | else return 0.17375438868128684;  // std dev = 8.590, 300.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926072;  // std dev = 8.84e-09, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.1982825802879805;  // std dev = 8.129, 283.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=178 */
%   | | else return 0.12193322911874914;  // std dev = 6.812, 188.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 6.14e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.08518475138839678;  // std dev = 7.88e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.11771832724756304;  // std dev = 0.491, 478.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, F) )
%   | | then return -0.0787767547310915;  // std dev = 7.74e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else return -0.07877675473109146;  // std dev = 6.50e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.10239339654830981;  // std dev = 8.317, 291.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=178 */
%   | else return 0.03181875450334541;  // std dev = 7.042, 199.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=104 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 5.51e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.06481039521377242;  // std dev = 10.791, 482.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420322;  // std dev = 0.000, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.01458958045665712;  // std dev = 11.226, 512.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202578;  // std dev = 8.28e-09, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
Inference time using transfer learning 1.9793643951416016
Parameter learned model CLL:-0.323438 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.495, 215, 282], 'false,true': [0.0, 0, 0], 'false,false': [9.13e-09, 321, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(G, A)'}, {'true,true': [6.819, 79, 113], 'true,false': [8.377, 120, 169], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 373, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.494, 207, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 345, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, A), complex(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [10.986, 211, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 135, 0], 'false,false,false,false': [0.0, 241, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.1, 91, 113], 'true,false': [8.59, 131, 169], 'false,true': [0.0, 0, 0], 'false,false': [8.84e-09, 381, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'complex(A, G)'}, {'true,true,true': [8.129, 105, 178], 'true,true,false': [6.812, 84, 104], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [6.14e-08, 154, 0], 'false,false,false': [7.88e-08, 209, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'complex(A, F)'}, {'true,true': [0.491, 196, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.74e-08, 149, 0], 'false,false,false': [6.5e-08, 223, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.317, 113, 178], 'true,false': [7.042, 95, 104], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 302, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [10.791, 200, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 359, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [11.226, 230, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.28e-09, 341, 0]}]
{'': [0.2454566432802073, 8.300732894393693e-17], 'false': [nan, 8.300732894393693e-17]}
{'': [0.24255600554977258, -1.0477171706918367e-16], 'true': [0.24216037326388765, 0.24281318470803812], 'false': [nan, -1.0477171706918367e-16], 'false,false': [nan, -1.0477171706918367e-16], 'false,false,false': [nan, -1.0477171706918367e-16]}
{'': [0.24411580200160227, -4.1190883232469576e-17], 'false': [nan, -4.1190883232469576e-17], 'false,false': [nan, -4.1190883232469576e-17]}
{'': [0.24481392983641154, 8.149509436078277e-17], 'true': [nan, 0.24481392983641154], 'false': [nan, 8.149509436078277e-17], 'false,false': [nan, 8.149509436078277e-17], 'false,false,false': [-4.605369583630279e-17, -6.817967122179385e-17]}
{'': [0.2464611734684299, 7.809442797888241e-17], 'true': [0.2470924644367564, 0.24598888888888656], 'false': [nan, 7.809442797888241e-17]}
{'': [0.24020784112704927, 3.792497384394474e-17], 'true': [0.24020784112704927, nan], 'true,true': [0.23350616644793118, 0.24679351578886882], 'false': [nan, 3.792497384394474e-17], 'false,false': [2.451141742678917e-17, 2.9747602573688406e-17]}
{'': [0.24100129035815102, 2.3875763970433474e-17], 'true': [0.24100129035815102, nan], 'false': [nan, 2.3875763970433474e-17], 'false,false': [4.0236270691113053e-17, 1.8918598625899528e-17]}
{'': [0.24358181678175267, 3.088037551937521e-17], 'true': [0.23772487015682325, 0.249188524036918], 'false': [nan, 3.088037551937521e-17], 'false,false': [nan, 3.088037551937521e-17]}
{'': [0.24158364904185128, -9.834287516178266e-17], 'true': [0.24158364904185128, nan], 'false': [nan, -9.834287516178266e-17], 'false,false': [nan, -9.834287516178266e-17]}
{'': [0.24612389427382253, 6.902266311452586e-17], 'true': [0.24612389427382253, nan], 'false': [nan, 6.902266311452586e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;complex(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;complex(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;complex(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 18.24538516998291
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, A), phenotype(A, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( interaction(F, A), interaction(F, F) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.3893989350995111;  // std dev = 3.992, 64.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=34 */
%   | | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | | then return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.3884083010937454;  // std dev = 9.297, 347.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=184 */
%   else return -0.1418510649004875;  // std dev = 2.51e-07, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, A) )
%   | | then return 0.7338474419255524;  // std dev = 0.136, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( enzyme(D, F) )
%   | | | then return 0.7307497551541297;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.34374467777415646;  // std dev = 1.856, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( interaction(G, A), complex(A, H) )
%   | | then if ( location(G, I), complex(G, H) )
%   | | | then return 0.1103444169436571;  // std dev = 3.567, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.3529708037014265;  // std dev = 4.663, 90.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=50 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.5656272583648005;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.33993732964261725;  // std dev = 8.495, 292.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=156 */
%   else return -0.12544463852839222;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(A, D) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.5591846924764252;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.16178322838252435;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.3851830679006359;  // std dev = 3.276, 48.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | else if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then if ( interaction(A, F), enzyme(A, G) )
%   | | | then return 0.32101059366708873;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6227678862873414;  // std dev = 0.201, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( phenotype(A, H), interaction(I, A) )
%   | | | then return 0.2669830542384911;  // std dev = 6.397, 167.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=87 */
%   | | | else return 0.33584780450052915;  // std dev = 6.855, 199.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=119 */
%   else return -0.11231637819360639;  // std dev = 0.000, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( phenotype(A, E), interaction(A, D) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.4130960441352648;  // std dev = 3.33e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.004461815603145736;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( interaction(F, D) )
%   | | | then return 0.4505462996200628;  // std dev = 0.248, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.26349996606676684;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( interaction(A, G), interaction(G, H) )
%   | | then if ( recursion_proteinclass(H, B), interaction(I, A) )
%   | | | then return 0.5077477059064519;  // std dev = 2.250, 42.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | | | else return 0.09999807682219315;  // std dev = 6.446, 179.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=75 */
%   | | else if ( interaction(J, A), interaction(J, J) )
%   | | | then return 0.42423968208102136;  // std dev = 2.092, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return 0.22668748490416546;  // std dev = 7.026, 199.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=108 */
%   else return -0.10159632948783598;  // std dev = 1.05e-08, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( complex(D, E), phenotype(A, F) )
%   | | then if ( complex(A, E) )
%   | | | then return 0.3425232968162799;  // std dev = 0.142, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.22753826948264544;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( phenotype(A, G), location(A, H) )
%   | | | then return 0.41742105217894643;  // std dev = 0.188, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3294144867830347;  // std dev = 0.163, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( complex(A, I), location(A, J) )
%   | | then if ( complex(K, I), recursion_proteinclass(K, B) )
%   | | | then return 0.6071876732766732;  // std dev = 0.673, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | | else return -0.3352137290611462;  // std dev = 0.662, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else if ( interaction(L, A), interaction(A, L) )
%   | | | then return 0.05371482023927364;  // std dev = 2.402, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | | else return 0.24824491369461357;  // std dev = 7.267, 227.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=140 */
%   else return -0.09269127618926064;  // std dev = 1.83e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), enzyme(D, E) )
%   | then if ( enzyme(A, E), recursion_proteinclass(D, B) )
%   | | then if ( interaction(D, A), complex(A, F) )
%   | | | then return 0.24583743944330894;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.328011803395744;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( phenotype(D, G) )
%   | | | then return 0.0029205384547265137;  // std dev = 4.284, 97.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=42 */
%   | | | else return 0.19537116814455785;  // std dev = 1.396, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( interaction(H, A), interaction(I, H) )
%   | | then if ( interaction(J, I), interaction(J, J) )
%   | | | then return 0.11590635512722125;  // std dev = 5.928, 187.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=108 */
%   | | | else return 0.2029883565333367;  // std dev = 3.792, 82.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=53 */
%   | | else if ( interaction(K, A), phenotype(A, L) )
%   | | | then return 0.3773700176900747;  // std dev = 1.677, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.20201880923233168;  // std dev = 3.741, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else return -0.08518475138839678;  // std dev = 6.32e-09, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( enzyme(D, E), complex(A, F) )
%   | | then if ( enzyme(A, E) )
%   | | | then return 0.2415936787107252;  // std dev = 0.107, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.23899175089072444;  // std dev = 0.631, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(G, A), interaction(D, D) )
%   | | | then return 0.2247111239032786;  // std dev = 0.084, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.32123401911575733;  // std dev = 0.238, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( interaction(H, A), interaction(A, H) )
%   | | then if ( enzyme(A, I), phenotype(A, J) )
%   | | | then return -0.15575170108573402;  // std dev = 1.807, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.028320491290383755;  // std dev = 2.549, 50.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=21 */
%   | | else if ( enzyme(A, K), interaction(A, L) )
%   | | | then return 0.1656025150393786;  // std dev = 3.207, 54.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=32 */
%   | | | else return 0.07132398299580145;  // std dev = 8.314, 328.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=177 */
%   else return -0.07877675473109143;  // std dev = 3.73e-09, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E), interaction(E, D) )
%   | | then if ( recursion_proteinclass(E, B) )
%   | | | then return 0.195908501102756;  // std dev = 0.151, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.2112631668534214;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | | | then return 0.18685517534777918;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2700299553399893;  // std dev = 0.181, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then if ( interaction(H, G) )
%   | | | then return 0.25199522797019347;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11776987435963551;  // std dev = 1.139, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( location(A, I), complex(A, J) )
%   | | | then return 0.024198673890190595;  // std dev = 4.647, 156.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=70 */
%   | | | else return 0.06553922451648042;  // std dev = 8.110, 267.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=146 */
%   else return -0.0732462257633377;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), phenotype(D, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( interaction(F, D), interaction(D, A) )
%   | | | then return 0.3046818431107567;  // std dev = 1.114, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.023282248225508628;  // std dev = 1.503, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( interaction(D, G), interaction(G, A) )
%   | | | then return -0.18103450786176056;  // std dev = 1.836, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0.12601364999728665;  // std dev = 4.419, 106.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=66 */
%   | else if ( enzyme(A, H), phenotype(A, I) )
%   | | then if ( enzyme(J, H), recursion_proteinclass(J, B) )
%   | | | then return 0.4134175916372046;  // std dev = 0.991, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.4247322341918718;  // std dev = 0.347, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( enzyme(A, K), interaction(A, L) )
%   | | | then return 0.14822777971957593;  // std dev = 0.969, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return -0.02027287859644598;  // std dev = 7.263, 252.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=126 */
%   else return -0.06842697784420325;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), enzyme(E, F) )
%   | | then if ( phenotype(D, G), phenotype(A, G) )
%   | | | then return -0.10682440515518828;  // std dev = 0.858, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1571872166989698;  // std dev = 0.120, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(A, A) )
%   | | | then return 0.132637571223022;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.23091002569804475;  // std dev = 0.201, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(H, A), enzyme(A, I) )
%   | | then if ( complex(A, J), phenotype(A, K) )
%   | | | then return 0.11223216200725455;  // std dev = 1.650, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | | else return -0.024283752224353465;  // std dev = 4.631, 109.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=51 */
%   | | else if ( interaction(L, A), phenotype(L, M) )
%   | | | then return 0.07411237139409346;  // std dev = 5.579, 170.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=94 */
%   | | | else return 0.024935122717841617;  // std dev = 5.163, 132.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=71 */
%   else return -0.0641918400820257;  // std dev = 1.70e-07, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
Inference time using transfer learning 3.9602911472320557
Refined model CLL: -0.247335


******************************************
Best model found
******************************************
Total revision time: 43.07142090797424
Best scored revision CLL: -0.247335


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.991931', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.993153', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.993943', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.994754', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.995521', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.996252', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.996996', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.997731', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.998456', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.999206', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:35.999966', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.000706', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.001441', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.002164', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.002902', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.003639', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.004353', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.005080', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.008110', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.008938', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.009768', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.010577', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.011397', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.012194', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.013000', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.013788', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.014598', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.015400', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.016216', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.017016', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.017817', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.018613', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.019415', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.020207', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.021007', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:07:36.021801', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 3.9718925952911377
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.4278459047964776;  // std dev = 0.495, 495.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.34e-08, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.48675234736739026;  // std dev = 5.928, 164.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=113 */
%   | else return 0.34288924744606886;  // std dev = 8.767, 310.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839224;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.2997778892829646;  // std dev = 0.494, 491.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, A), complex(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25280562524735434;  // std dev = 10.746, 477.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=282 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(A, G) )
%   | | | then return -0.10159632948783645;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | | else return -0.10159632948783653;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.19325574881016022;  // std dev = 6.632, 185.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=113 */
%   | else return 0.2037694698673119;  // std dev = 8.356, 288.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926046;  // std dev = 1.09e-08, 349.000 (wgt'ed) examples reached here.  /* #neg=349 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.16023236386186748;  // std dev = 8.260, 292.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=178 */
%   | | else return 0.10000468291388259;  // std dev = 7.027, 193.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 5.96e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.08518475138839678;  // std dev = 8.94e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.0943695931551296;  // std dev = 0.495, 491.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, F) )
%   | | then return -0.07877675473109151;  // std dev = 7.74e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.07877675473109147;  // std dev = 7.74e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.10587071728020242;  // std dev = 8.178, 287.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=178 */
%   | else return 0.08464445349788;  // std dev = 6.778, 182.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=104 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333722;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.056145854103316316;  // std dev = 10.830, 484.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420321;  // std dev = 0.000, 351.000 (wgt'ed) examples reached here.  /* #neg=351 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.037050919520346066;  // std dev = 10.886, 489.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202558;  // std dev = 9.86e-09, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
Inference time using transfer learning 1.8668317794799805
Parameter learned model CLL:-0.332044 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.495, 213, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.34e-08, 367, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(G, A)'}, {'true,true': [5.928, 51, 113], 'true,false': [8.767, 141, 169], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 388, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.494, 209, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 369, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, A), complex(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [10.746, 195, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 147, 0], 'false,false,false,false': [0.0, 194, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [6.632, 72, 113], 'true,false': [8.356, 119, 169], 'false,true': [0.0, 0, 0], 'false,false': [1.09e-08, 349, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'complex(A, G)'}, {'true,true,true': [8.26, 114, 178], 'true,true,false': [7.027, 89, 104], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [5.96e-08, 140, 0], 'false,false,false': [8.94e-08, 231, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'complex(A, F)'}, {'true,true': [0.495, 209, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.74e-08, 141, 0], 'false,false,false': [7.74e-08, 197, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.178, 109, 178], 'true,false': [6.778, 78, 104], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 402, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [10.83, 202, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 351, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [10.886, 207, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.86e-09, 402, 0]}]
{'': [0.2451423324150626, 1.7666764206569248e-16], 'false': [nan, 1.7666764206569248e-16]}
{'': [0.24098702131068625, -1.2590158011213115e-16], 'true': [0.21426977989292098, 0.24796045785639786], 'false': [nan, -1.2590158011213115e-16], 'false,false': [nan, -1.2590158011213115e-16], 'false,false,false': [nan, -1.2590158011213115e-16]}
{'': [0.2444193480125815, -2.647686345989533e-17], 'false': [nan, -2.647686345989533e-17], 'false,false': [nan, -2.647686345989533e-17]}
{'': [0.2420845164066398, 1.3023143983872805e-17], 'true': [nan, 0.2420845164066398], 'false': [nan, 1.3023143983872805e-17], 'false,false': [nan, 1.3023143983872805e-17], 'false,false,false': [-5.739928562687884e-17, -9.156478553609538e-17]}
{'': [0.24063570999189107, 1.1579403466004497e-16], 'true': [0.23772096420745123, 0.24246479552469202], 'false': [nan, 1.1579403466004497e-16]}
{'': [0.2433621662454248, 4.069820251995183e-17], 'true': [0.2433621662454248, nan], 'true,true': [0.23366733067413417, 0.255846097121856], 'false': [nan, 4.069820251995183e-17], 'false,false': [2.5376526277146434e-17, 3.460435401429059e-17]}
{'': [0.24521473287882325, 9.197113813462836e-18], 'true': [0.24521473287882325, nan], 'false': [nan, 9.197113813462836e-18], 'false,false': [4.2519179666495357e-17, 3.0432509304445914e-17]}
{'': [0.24066907121566397, 0.0], 'true': [0.23305867833453067, 0.2523943630573552], 'false': [nan, 0.0], 'false,false': [nan, 0.0]}
{'': [0.24231231768334027, -8.603437683704916e-17], 'true': [0.24231231768334027, nan], 'false': [nan, -8.603437683704916e-17], 'false,false': [nan, -8.603437683704916e-17]}
{'': [0.24233575897462756, 9.666120861164299e-17], 'true': [0.24233575897462756, nan], 'false': [nan, 9.666120861164299e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;complex(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;complex(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;complex(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 28.63765549659729
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D) )
%   | | then return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( interaction(F, A) )
%   | | | then return 0.37686551263961515;  // std dev = 9.663, 374.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=194 */
%   | | | else return 0.5143989350995126;  // std dev = 3.800, 64.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=42 */
%   else return -0.1418510649004875;  // std dev = 2.44e-07, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then return 0.75409412097387;  // std dev = 0.272, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( interaction(A, A) )
%   | | then return -0.13513726035718227;  // std dev = 0.150, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | | then return 0.6393821735804468;  // std dev = 1.296, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.3253019820716646;  // std dev = 10.147, 413.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=216 */
%   else return -0.12544463852839222;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E), interaction(E, A) )
%   | | then if ( interaction(D, D) )
%   | | | then return 0.5468018259188454;  // std dev = 5.16e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.16969911031334556;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.6308420673821697;  // std dev = 0.220, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1113536353445037;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( phenotype(A, F), interaction(G, A) )
%   | | | then return 0.3215366753461572;  // std dev = 6.816, 194.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=113 */
%   | | | else return 0.22850194033304178;  // std dev = 7.828, 249.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=123 */
%   else return -0.11231637819360644;  // std dev = 0.000, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(E, E) )
%   | | then if ( interaction(D, A) )
%   | | | then return 0.4161025581461047;  // std dev = 0.091, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11953288700746202;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.478434931856655;  // std dev = 0.229, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( interaction(A, F), enzyme(F, G) )
%   | | then if ( enzyme(A, G), interaction(H, A) )
%   | | | then return -0.07660670733589098;  // std dev = 1.750, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.2083880359746486;  // std dev = 3.992, 66.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=35 */
%   | | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | | then return 0.5185264305272335;  // std dev = 0.085, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2657320558323851;  // std dev = 8.695, 318.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=180 */
%   else if ( complex(A, J) )
%   | then return -0.10159632948783645;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D), interaction(E, A) )
%   | then if ( recursion_proteinclass(E, B), interaction(F, E) )
%   | | then if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | | then return 0.31215767368807895;  // std dev = 0.093, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.3874818196493717;  // std dev = 0.068, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( interaction(H, E), recursion_proteinclass(H, B) )
%   | | | then return 0.5273959669553239;  // std dev = 1.044, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.010173333574438403;  // std dev = 5.516, 140.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=51 */
%   | else if ( complex(A, I) )
%   | | then if ( complex(J, I), recursion_proteinclass(J, B) )
%   | | | then return 0.5566034693900772;  // std dev = 0.456, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.3810504766843983;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( interaction(A, K), enzyme(K, L) )
%   | | | then return 0.11796373890719196;  // std dev = 3.437, 57.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return 0.2074305678490784;  // std dev = 7.439, 237.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=140 */
%   else return -0.09269127618926061;  // std dev = 9.68e-09, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( phenotype(A, E), phenotype(D, E) )
%   | | then if ( complex(A, F), complex(D, F) )
%   | | | then return 0.2781224426758937;  // std dev = 0.175, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.09785732801322401;  // std dev = 1.210, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | | then return 0.2569029455123411;  // std dev = 0.102, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3282218201950972;  // std dev = 0.277, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( interaction(A, H), interaction(I, A) )
%   | | then if ( phenotype(A, J), interaction(H, H) )
%   | | | then return -0.05263609590266157;  // std dev = 3.110, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | | | else return 0.1186411353609433;  // std dev = 4.943, 110.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=56 */
%   | | else if ( interaction(K, A), interaction(L, K) )
%   | | | then return 0.1356776630269718;  // std dev = 6.594, 183.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=102 */
%   | | | else return 0.19199085884447106;  // std dev = 4.656, 101.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=61 */
%   else return -0.08518475138839678;  // std dev = 6.18e-09, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), complex(D, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(A, G), interaction(F, G) )
%   | | | then return 0.3981158722154539;  // std dev = 1.049, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.00707764184381543;  // std dev = 1.450, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( interaction(A, H), complex(H, E) )
%   | | | then return -0.09787849551940309;  // std dev = 2.637, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.18497770792794022;  // std dev = 5.779, 147.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=93 */
%   | else if ( enzyme(A, I) )
%   | | then if ( enzyme(J, I), recursion_proteinclass(J, B) )
%   | | | then return 0.5287531928711594;  // std dev = 0.592, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.4454067290472613;  // std dev = 0.405, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.28845005452604233;  // std dev = 0.194, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.011126184179798795;  // std dev = 5.757, 153.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=72 */
%   else return -0.07877675473109141;  // std dev = 3.73e-09, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D), interaction(A, E) )
%   | then if ( recursion_proteinclass(E, B), complex(E, D) )
%   | | then if ( interaction(E, A) )
%   | | | then return 0.14486830991380253;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22591331546938476;  // std dev = 0.224, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(E, F), complex(F, D) )
%   | | | then return -0.07706067324214369;  // std dev = 3.119, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
%   | | | else return 0.1074675445907784;  // std dev = 2.719, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | else if ( location(A, G), phenotype(A, H) )
%   | | then if ( location(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.1992155203549235;  // std dev = 5.344, 160.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=111 */
%   | | | else return -0.44794082341851255;  // std dev = 0.310, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( interaction(J, A), complex(J, K) )
%   | | | then return 0.03082536731230049;  // std dev = 4.696, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.11819378694422361;  // std dev = 3.842, 78.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=46 */
%   else return -0.07324622576333714;  // std dev = 6.32e-08, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, D) )
%   | then if ( interaction(A, E), interaction(D, E) )
%   | | then if ( location(E, F) )
%   | | | then return 0.10773992594137091;  // std dev = 1.614, 40.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=27 */
%   | | | else return -0.09139452389402539;  // std dev = 0.565, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( complex(A, G), location(D, H) )
%   | | | then return 0.4588116880807842;  // std dev = 0.271, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2746487264447208;  // std dev = 1.914, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( interaction(J, I) )
%   | | | then return 0.21930914496761533;  // std dev = 0.274, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.037929242025608934;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( interaction(A, K), complex(K, L) )
%   | | | then return 6.804396313817403E-4;  // std dev = 4.820, 137.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=68 */
%   | | | else return 0.07378251206277804;  // std dev = 7.193, 234.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=135 */
%   else return -0.06842697784420317;  // std dev = 0.000, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D), phenotype(A, E) )
%   | then if ( location(F, D), recursion_proteinclass(F, B) )
%   | | then if ( phenotype(F, E) )
%   | | | then return 0.2871321677988741;  // std dev = 3.986, 172.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=154 */
%   | | | else return -0.46352812100657365;  // std dev = 1.076, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( interaction(A, G), complex(A, H) )
%   | | | then return -0.4387677817346725;  // std dev = 0.147, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.3471915934971312;  // std dev = 0.249, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( interaction(A, I) )
%   | | then if ( interaction(I, J), recursion_proteinclass(J, B) )
%   | | | then return 0.21140054628575058;  // std dev = 1.096, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -2.1249046899981923E-4;  // std dev = 3.917, 87.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=41 */
%   | | else if ( interaction(K, A), phenotype(K, L) )
%   | | | then return 0.263097852835113;  // std dev = 2.856, 53.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=42 */
%   | | | else return 0.12297029440598226;  // std dev = 2.328, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   else return -0.06419184008202576;  // std dev = 8.54e-09, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
Inference time using transfer learning 4.717088222503662
Refined model CLL: -0.246762


******************************************
Best model found
******************************************
Total revision time: 75.56890344619751
Best scored revision CLL: -0.246762


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.403209', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.404458', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.405260', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.406063', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.406957', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.407765', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.408518', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.409262', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.410002', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.410762', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.411545', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.412283', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.413021', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.413760', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.414522', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.415263', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.416006', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.416761', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.419850', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.420680', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.421486', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.422295', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.423118', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.423920', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.424733', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.425554', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.426355', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.427177', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.427986', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.428794', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.429601', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.430392', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.431210', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.432021', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.432827', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:08:58.433636', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 4.281140327453613
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.4324870206392228;  // std dev = 0.494, 491.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048752;  // std dev = 1.25e-08, 355.000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.40125611564395486;  // std dev = 6.687, 187.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=113 */
%   | else return 0.3621954320819928;  // std dev = 8.572, 299.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1254446385283922;  // std dev = 0.000, 355.000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.32021871797524276;  // std dev = 0.492, 477.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936065;  // std dev = 0.000, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, A), complex(D, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2489270377283891;  // std dev = 10.784, 480.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=282 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( complex(A, G) )
%   | | | then return -0.10159632948783642;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.10159632948783656;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D) )
%   | then return 0.12357477066182707;  // std dev = 7.322, 215.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=113 */
%   | else return 0.19212155472990952;  // std dev = 8.377, 289.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=169 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.09e-08, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.17227770725995564;  // std dev = 8.370, 293.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=178 */
%   | | else return 0.04366972265816182;  // std dev = 7.323, 216.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 6.83e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.08518475138839678;  // std dev = 8.56e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.09816722071005136;  // std dev = 0.494, 500.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( complex(A, F) )
%   | | then return -0.07877675473109153;  // std dev = 7.22e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.07877675473109147;  // std dev = 8.02e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.11105830856139759;  // std dev = 8.309, 290.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=178 */
%   | else return 0.06583761315226086;  // std dev = 6.904, 193.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=104 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333718;  // std dev = 2.46e-09, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.06172328683424965;  // std dev = 10.910, 490.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420332;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.08240927830553008;  // std dev = 10.434, 461.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202572;  // std dev = 8.84e-09, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
Inference time using transfer learning 2.1011781692504883
Parameter learned model CLL:-0.330816 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.494, 209, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.25e-08, 355, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(G, A)'}, {'true,true': [6.687, 74, 113], 'true,false': [8.572, 130, 169], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 355, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.492, 195, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 348, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, A), complex(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'complex(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [10.784, 198, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 138, 0], 'false,false,false,false': [0.0, 210, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.322, 102, 113], 'true,false': [8.377, 120, 169], 'false,true': [0.0, 0, 0], 'false,false': [1.09e-08, 346, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'complex(A, G)'}, {'true,true,true': [8.37, 115, 178], 'true,true,false': [7.323, 112, 104], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [6.83e-08, 161, 0], 'false,false,false': [8.56e-08, 222, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'complex(A, F)'}, {'true,true': [0.494, 218, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.22e-08, 129, 0], 'false,false,false': [8.02e-08, 187, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'complex(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.309, 112, 178], 'true,false': [6.904, 89, 104], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 380, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [10.91, 208, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 386, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [10.434, 179, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.84e-09, 358, 0]}]
{'': [0.24447384903829297, 1.5762039560875463e-16], 'false': [nan, 1.5762039560875463e-16]}
{'': [0.24356043286084542, -1.2009172998762255e-16], 'true': [0.23912608310217345, 0.24574669187145293], 'false': [nan, -1.2009172998762255e-16], 'false,false': [nan, -1.2009172998762255e-16], 'false,false,false': [nan, -1.2009172998762255e-16]}
{'': [0.24167598708882204, -3.317907889684376e-17], 'false': [nan, -3.317907889684376e-17], 'false,false': [nan, -3.317907889684376e-17]}
{'': [0.24229044229515143, 2.6798486801296883e-17], 'true': [nan, 0.24229044229515143], 'false': [nan, 2.6798486801296883e-17], 'false,false': [nan, 2.6798486801296883e-17], 'false,false,false': [-4.9879585164318627e-17, -8.247371040072592e-17]}
{'': [0.24674916911856137, 1.1936501883253128e-16], 'true': [0.2493455922120071, 0.24281318470803973], 'false': [nan, 1.1936501883253128e-16]}
{'': [0.24702998767687645, 3.942306301541026e-17], 'true': [0.24702998767687645, nan], 'true,true': [0.2391163920322039, 0.24824356482890422], 'false': [nan, 3.942306301541026e-17], 'false,false': [2.896233977283017e-17, 3.300663046182898e-17]}
{'': [0.2444493206908423, 2.8106912015826747e-18], 'true': [0.2444493206908423, nan], 'false': [nan, 2.8106912015826747e-18], 'false,false': [4.0449986168513453e-17, 3.4434724827946034e-17]}
{'': [0.24210256396706845, 5.843279076974508e-18], 'true': [0.23806631520364374, 0.24693960018508868], 'false': [nan, 5.843279076974508e-18], 'false,false': [nan, 5.843279076974508e-18]}
{'': [0.2429016154054407, -1.0699558682916016e-16], 'true': [0.2429016154054407, nan], 'false': [nan, -1.0699558682916016e-16], 'false,false': [nan, -1.0699558682916016e-16]}
{'': [0.2361768909377862, 7.877001347899155e-17], 'true': [0.2361768909377862, nan], 'false': [nan, 7.877001347899155e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;complex(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;complex(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;complex(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 39.88404178619385
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( complex(A, F), phenotype(D, G) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( interaction(H, A) )
%   | | | then return 0.38170914452359195;  // std dev = 9.762, 382.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=200 */
%   | | | else return 0.48972788246793225;  // std dev = 3.642, 57.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=36 */
%   else return -0.14185106490048754;  // std dev = 2.23e-07, 349.000 (wgt'ed) examples reached here.  /* #neg=349 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D), interaction(A, E) )
%   | then if ( recursion_proteinclass(E, B) )
%   | | then if ( complex(E, D) )
%   | | | then return 0.7238477229425158;  // std dev = 0.112, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.49790643196610296;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( complex(E, D), location(A, F) )
%   | | | then return 0.10234264106188777;  // std dev = 3.430, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | | | else return 0.33713338788269726;  // std dev = 3.606, 52.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=28 */
%   | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then if ( phenotype(A, H), location(A, I) )
%   | | | then return 0.5602142921954424;  // std dev = 1.539, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.7683859404511342;  // std dev = 0.158, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( interaction(J, A), location(A, K) )
%   | | | then return 0.3808335254757755;  // std dev = 7.959, 262.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=151 */
%   | | | else return 0.5149205656797787;  // std dev = 2.945, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else return -0.12544463852839216;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A) )
%   | | then if ( enzyme(D, F), complex(D, G) )
%   | | | then return 0.4059235240020665;  // std dev = 0.874, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5762601843852421;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( enzyme(A, H) )
%   | | | then return -0.07847768903700152;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5746277899035824;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( complex(A, J) )
%   | | | then return 0.7088845785021581;  // std dev = 0.175, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4841507960920376;  // std dev = 1.274, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( interaction(A, K), enzyme(K, L) )
%   | | | then return 0.15284358708197024;  // std dev = 4.532, 91.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=36 */
%   | | | else return 0.25640379944963626;  // std dev = 9.267, 347.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=180 */
%   else return -0.11231637819360642;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( enzyme(D, E), complex(A, F) )
%   | | then if ( enzyme(A, E) )
%   | | | then return 0.48216538253822205;  // std dev = 0.124, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07339975627413148;  // std dev = 0.890, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | | then return 0.4157460774989493;  // std dev = 0.082, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.5592244242433149;  // std dev = 0.184, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( location(A, H) )
%   | | then if ( location(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.315520946315814;  // std dev = 8.833, 354.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=225 */
%   | | | else return -0.31034097209215705;  // std dev = 0.364, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( interaction(J, A), phenotype(J, K) )
%   | | | then return 0.1651672354734426;  // std dev = 1.872, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return -0.05230186757778458;  // std dev = 1.676, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   else return -0.10159632948783615;  // std dev = 8.33e-09, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, E) )
%   | | then if ( enzyme(A, F), complex(D, G) )
%   | | | then return 0.046754733250096416;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.32214051039428415;  // std dev = 0.077, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | | then return 0.3292441497227651;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4419877872076795;  // std dev = 0.287, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(A, I), location(A, J) )
%   | | then if ( recursion_proteinclass(I, B), location(I, J) )
%   | | | then return 0.2991654350143544;  // std dev = 1.265, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.11226865635717641;  // std dev = 6.871, 208.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=97 */
%   | | else if ( interaction(K, A), phenotype(K, L) )
%   | | | then return 0.2857266221531159;  // std dev = 5.260, 135.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=88 */
%   | | | else return 0.12549305847440842;  // std dev = 3.921, 66.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=32 */
%   else return -0.09269127618926043;  // std dev = 2.00e-07, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(D, E) )
%   | | then if ( interaction(A, F) )
%   | | | then return 0.2701065730718001;  // std dev = 0.173, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.029485877693972762;  // std dev = 0.892, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( enzyme(D, G) )
%   | | | then return 0.3721989574089194;  // std dev = 0.235, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.30797063639959327;  // std dev = 0.172, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( interaction(A, A) )
%   | | then return -0.24633323954558017;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( location(A, H), complex(A, I) )
%   | | | then return 0.07845960431781487;  // std dev = 6.068, 171.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=83 */
%   | | | else return 0.15791624008713925;  // std dev = 7.640, 264.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=153 */
%   else if ( complex(A, J) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.08518475138839678;  // std dev = 7.74e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), complex(D, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(F, A) )
%   | | | then return 0.11191886187467699;  // std dev = 1.280, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.3833974434639051;  // std dev = 1.962, 36.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=31 */
%   | | else if ( interaction(A, G), interaction(H, D) )
%   | | | then return -0.07501230236733272;  // std dev = 4.217, 100.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=34 */
%   | | | else return 0.08328276361565408;  // std dev = 5.495, 130.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=73 */
%   | else if ( interaction(A, I), complex(I, J) )
%   | | then if ( complex(A, K), enzyme(A, L) )
%   | | | then return 0.09013624267433251;  // std dev = 1.947, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.25123035125555115;  // std dev = 2.705, 50.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=38 */
%   | | else if ( complex(A, M), enzyme(A, N) )
%   | | | then return 0.2755283740362165;  // std dev = 1.692, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.08888504175100657;  // std dev = 5.017, 122.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=69 */
%   else return -0.07877675473109143;  // std dev = 5.10e-09, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D) )
%   | then if ( location(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(F, A), interaction(F, E) )
%   | | | then return 0.3875103715741272;  // std dev = 4.036, 244.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=230 */
%   | | | else return -0.2394480177127281;  // std dev = 5.054, 162.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=39 */
%   | | else if ( interaction(A, G), interaction(H, A) )
%   | | | then return -0.2634566264409212;  // std dev = 0.289, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.35781851584946955;  // std dev = 0.173, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( interaction(A, I), phenotype(I, J) )
%   | | then return 0.4899791486654335;  // std dev = 0.372, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( enzyme(A, K) )
%   | | | then return 0.16810118444906988;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2350117890314455;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333767;  // std dev = 0.000, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), enzyme(A, E) )
%   | then if ( interaction(A, A) )
%   | | then return -0.09259542306000086;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( interaction(D, D), interaction(F, A) )
%   | | | then return 0.4378433350975917;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.10646536332797955;  // std dev = 3.279, 63.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=39 */
%   | else if ( interaction(G, A), complex(G, H) )
%   | | then if ( interaction(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.14718241685692446;  // std dev = 2.285, 43.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   | | | else return -0.04354794564301023;  // std dev = 5.758, 206.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=90 */
%   | | else if ( phenotype(A, J), interaction(A, K) )
%   | | | then return 0.17344981727146902;  // std dev = 2.266, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | | else return 0.02905758206778328;  // std dev = 4.843, 142.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=78 */
%   else return -0.06842697784420317;  // std dev = 0.000, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), enzyme(D, E) )
%   | then if ( interaction(A, F), complex(F, G) )
%   | | then if ( interaction(F, A), phenotype(F, H) )
%   | | | then return -0.036568111230423146;  // std dev = 1.828, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.13960108063992802;  // std dev = 1.631, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | else if ( interaction(I, D), phenotype(I, J) )
%   | | | then return -0.013302172754197462;  // std dev = 2.757, 57.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=27 */
%   | | | else return -0.11998526877728959;  // std dev = 2.310, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | else if ( interaction(K, A), enzyme(A, L) )
%   | | then if ( location(A, M), location(K, N) )
%   | | | then return 0.08935905610695084;  // std dev = 3.639, 86.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=54 */
%   | | | else return 0.4102151837660407;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( interaction(A, P), recursion_proteinclass(P, B) )
%   | | | then return 0.1243138442171069;  // std dev = 1.271, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.036524919744776466;  // std dev = 6.370, 237.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=122 */
%   else return -0.06419184008202572;  // std dev = 8.84e-09, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
Inference time using transfer learning 4.719745397567749
Refined model CLL: -0.235837


******************************************
Best model found
******************************************
Total revision time: 87.74532675743103
Best scored revision CLL: -0.235837


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.232222', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.233021', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.233567', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.234124', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.234667', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.235173', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.235661', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.236138', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.236622', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.237113', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.237631', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.238121', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.238624', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.239126', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.239615', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.240082', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.240560', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.241038', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.244084', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.244677', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.245242', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.245809', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.246360', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.246914', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.247480', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.248032', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.248583', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.249125', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.249702', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.250269', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.250826', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.251388', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.251937', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.252487', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.253036', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:10:33.253587', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 10.770620584487915
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.44687544866944534;  // std dev = 0.492, 479.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048743;  // std dev = 1.38e-08, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.3501955402137188;  // std dev = 8.300, 279.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=155 */
%   | else return 0.3305049635611172;  // std dev = 7.678, 237.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839213;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.3247008341812968;  // std dev = 0.491, 477.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360624;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5746587648659869;  // std dev = 4.676, 264.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=240 */
%   | else return -0.13969751969333313;  // std dev = 5.802, 215.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(A, G) )
%   | | | then return -0.10159632948783655;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | | else return -0.10159632948783652;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.22535778703570267;  // std dev = 6.974, 254.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=155 */
%   | else return 0.1785324005855333;  // std dev = 6.157, 218.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926047;  // std dev = 1.09e-08, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.16255033106417371;  // std dev = 8.472, 393.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=237 */
%   | | else return 0.07935599095220451;  // std dev = 3.968, 86.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 7.74e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.08518475138839678;  // std dev = 5.37e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.12209372939008;  // std dev = 0.428, 468.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, F) )
%   | | then return -0.07877675473109147;  // std dev = 9.42e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else return -0.07877675473109151;  // std dev = 8.30e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.0998016256392538;  // std dev = 8.370, 389.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=237 */
%   | else return -0.0027299548495111747;  // std dev = 4.141, 92.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=45 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333766;  // std dev = 0.000, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.061722582372857805;  // std dev = 9.392, 478.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420324;  // std dev = 0.000, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.031804541100605724;  // std dev = 9.555, 495.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202583;  // std dev = 7.85e-09, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
Inference time using transfer learning 7.0195698738098145
Parameter learned model CLL:-0.27571 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.492, 197, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-08, 374, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [8.3, 124, 155], 'true,false': [7.678, 110, 127], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 317, 0], 'false,false,false,false': [0.0, 53, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.491, 195, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 396, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(A, G)'}, {'true,true': [4.676, 24, 240], 'true,false': [5.802, 173, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 205, 0], 'false,false,false,false': [0.0, 181, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [6.974, 99, 155], 'true,false': [6.157, 91, 127], 'false,true': [0.0, 0, 0], 'false,false': [1.09e-08, 350, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(A, G)'}, {'true,true,true': [8.472, 156, 237], 'true,true,false': [3.968, 41, 45], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.74e-08, 182, 0], 'false,false,false': [5.37e-08, 122, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(A, F)'}, {'true,true': [0.428, 186, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [9.42e-08, 218, 0], 'false,false,false': [8.3e-08, 156, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.37, 152, 237], 'true,false': [4.141, 47, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 332, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.392, 196, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 361, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.555, 213, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.85e-09, 328, 0]}]
{'': [0.24212760578972672, 1.8760988009708529e-16], 'false': [nan, 1.8760988009708529e-16]}
{'': [0.24783666846944039, -1.248250752010987e-16], 'true': [0.24691358024691795, 0.24871370328829528], 'false': [nan, -1.248250752010987e-16], 'false,false': [nan, -1.248250752010987e-16], 'false,false,false': [-1.1207298671294955e-16, -3.561092720495785e-17]}
{'': [0.241523278600012, -2.0185873175002847e-17], 'false': [nan, -2.0185873175002847e-17], 'false,false': [nan, -2.0185873175002847e-17]}
{'': [0.24216165395618544, 9.779166538149047e-17], 'true': [0.08282149130367233, 0.1565629105586059], 'false': [nan, 9.779166538149047e-17], 'false,false': [nan, 9.779166538149047e-17], 'false,false,false': [-8.448526431293874e-17, -8.342007256852005e-17]}
{'': [0.183892795139861, 1.167320208748736e-16], 'true': [0.1914746106422901, 0.17387901155932628], 'false': [nan, 1.167320208748736e-16]}
{'': [0.18371427548444347, 3.944213376957793e-17], 'true': [0.18371427548444347, nan], 'true,true': [0.18261587164175716, 0.18305508217254135], 'false': [nan, 3.944213376957793e-17], 'false,false': [3.294068314821893e-17, 2.3660490688732843e-17]}
{'': [0.18301645147902004, 4.393395926324149e-17], 'true': [0.18301645147902004, nan], 'false': [nan, 4.393395926324149e-17], 'false,false': [4.0742129344042444e-17, 4.412424841458955e-17]}
{'': [0.18293510337557903, -6.353685984300595e-17], 'true': [0.18011457943607356, 0.18635903927871578], 'false': [nan, -6.353685984300595e-17], 'false,false': [nan, -6.353685984300595e-17]}
{'': [0.18454526106285535, -9.287738322348955e-17], 'true': [0.18454526106285535, nan], 'false': [nan, -9.287738322348955e-17], 'false,false': [nan, -9.287738322348955e-17]}
{'': [0.18445331220912464, 6.228080382043562e-17], 'true': [0.18445331220912464, nan], 'false': [nan, 6.228080382043562e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 29.306232929229736
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), recursion_proteinclass(E, B) )
%   | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( interaction(F, D), enzyme(F, G) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( interaction(H, A), location(A, I) )
%   | | then if ( interaction(H, H), interaction(A, H) )
%   | | | then return 0.15444523139580865;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.3832226814121933;  // std dev = 9.194, 339.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=178 */
%   | | else if ( complex(A, J), enzyme(A, K) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.43923001618059254;  // std dev = 4.244, 74.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=43 */
%   else return -0.14185106490048746;  // std dev = 2.56e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, E), enzyme(E, F) )
%   | | then if ( phenotype(E, G), phenotype(D, G) )
%   | | | then return 0.37585321413121975;  // std dev = 1.321, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.6857574100807139;  // std dev = 0.924, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7628843323808538;  // std dev = 0.218, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1659510954729717;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | | then return 0.6803560525514;  // std dev = 0.897, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.33612832719075897;  // std dev = 10.029, 405.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=216 */
%   else if ( interaction(I, A) )
%   | then return -0.12544463852839216;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(E, E) )
%   | | then if ( interaction(D, D) )
%   | | | then return 0.561331085001661;  // std dev = 0.121, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.18673418941275272;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( complex(D, F), enzyme(A, G) )
%   | | | then return 0.5748968118817068;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6522678693924621;  // std dev = 0.172, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( interaction(A, A) )
%   | | then if ( interaction(H, A), complex(H, I) )
%   | | | then return -0.14045622691133822;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.16580136740424048;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( interaction(J, A), phenotype(J, K) )
%   | | | then return 0.3260180111704981;  // std dev = 7.828, 258.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=152 */
%   | | | else return 0.22987177677556275;  // std dev = 6.427, 168.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=84 */
%   else return -0.11231637819360635;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( enzyme(D, E), phenotype(D, F) )
%   | | then if ( enzyme(A, E) )
%   | | | then return 0.5121207470345627;  // std dev = 0.165, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2034001506811345;  // std dev = 0.830, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | | then return 0.3705232916571691;  // std dev = 1.014, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.5106424146599593;  // std dev = 0.115, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(H, A), interaction(A, H) )
%   | | then if ( enzyme(A, I), location(H, J) )
%   | | | then return -1.4797063876595529E-4;  // std dev = 2.198, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.20004144653022088;  // std dev = 3.072, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | | else if ( interaction(K, A), phenotype(K, L) )
%   | | | then return 0.21690739720376195;  // std dev = 7.495, 233.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=128 */
%   | | | else return 0.2757837987189434;  // std dev = 5.675, 136.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=81 */
%   else return -0.10159632948783627;  // std dev = 6.18e-09, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), recursion_proteinclass(E, B) )
%   | | then if ( complex(A, F), phenotype(A, G) )
%   | | | then return 0.2383422816475772;  // std dev = 0.753, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.34455706137919634;  // std dev = 0.161, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( enzyme(A, H), phenotype(D, I) )
%   | | | then return 0.4715440538256555;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.433578888933734;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(A, J), complex(A, K) )
%   | | then if ( interaction(J, L), recursion_proteinclass(L, B) )
%   | | | then return 0.3676151723515428;  // std dev = 2.086, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return -0.027734642273782514;  // std dev = 4.188, 89.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=30 */
%   | | else if ( enzyme(A, M) )
%   | | | then return 0.12025873260409489;  // std dev = 5.705, 131.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=63 */
%   | | | else return 0.24210429165962302;  // std dev = 6.690, 195.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=120 */
%   else return -0.09269127618926057;  // std dev = 1.01e-08, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D) )
%   | | then if ( interaction(A, E), enzyme(E, F) )
%   | | | then return 0.15177850169557439;  // std dev = 0.685, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.29812588580102994;  // std dev = 0.273, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.07641307043572595;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( enzyme(A, G), phenotype(A, H) )
%   | | then if ( enzyme(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.5395027369405845;  // std dev = 1.711, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | | else return -0.3925910782157505;  // std dev = 0.333, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( location(A, J) )
%   | | | then return 0.07878920899967617;  // std dev = 9.062, 355.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=175 */
%   | | | else return 0.3443218487827146;  // std dev = 1.521, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( interaction(A, K) )
%   | then return -0.08518475138839678;  // std dev = 6.04e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.08518475138839678;  // std dev = 5.43e-09, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), enzyme(D, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(A, G), enzyme(G, E) )
%   | | | then return 0.38159723239290866;  // std dev = 0.619, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.04117158434222255;  // std dev = 0.820, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( interaction(A, D) )
%   | | | then return -0.2962082141816443;  // std dev = 0.575, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.03513691763062983;  // std dev = 4.745, 101.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=52 */
%   | else if ( interaction(H, A), interaction(A, H) )
%   | | then if ( recursion_proteinclass(H, B) )
%   | | | then return 0.2104944617933543;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.030387699975104265;  // std dev = 2.894, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
%   | | else if ( interaction(I, A), complex(I, J) )
%   | | | then return 0.2348500355523839;  // std dev = 4.500, 106.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=74 */
%   | | | else return 0.16121960653555545;  // std dev = 5.810, 169.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=106 */
%   else return -0.07877675473109143;  // std dev = 5.89e-09, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(A, E) )
%   | then if ( interaction(A, F), interaction(D, F) )
%   | | then if ( location(D, E) )
%   | | | then return 0.016639423099373964;  // std dev = 4.337, 124.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=63 */
%   | | | else return 0.2996955316993326;  // std dev = 0.592, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( interaction(A, G), phenotype(D, H) )
%   | | | then return 0.19086759334968864;  // std dev = 2.611, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.09905170597120828;  // std dev = 6.950, 227.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=136 */
%   | else if ( phenotype(A, I) )
%   | | then if ( phenotype(J, I), recursion_proteinclass(J, B) )
%   | | | then return 0.3225126587769113;  // std dev = 1.590, 28.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | | else return -0.4151517301769197;  // std dev = 0.299, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( interaction(A, K), recursion_proteinclass(K, B) )
%   | | | then return 0.30838748108958935;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07439469412390154;  // std dev = 3.653, 55.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=24 */
%   else return -0.07324622576333718;  // std dev = 2.46e-09, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then if ( interaction(E, D), location(A, F) )
%   | | | then return 0.18580208615627652;  // std dev = 0.099, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15625721246678878;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( interaction(G, A), interaction(G, D) )
%   | | | then return 0.2893406432689395;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2329970370875606;  // std dev = 0.173, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( complex(A, H), location(A, I) )
%   | | then if ( location(J, I), recursion_proteinclass(J, B) )
%   | | | then return 0.03335820524421376;  // std dev = 5.665, 155.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=82 */
%   | | | else return -0.4773706718913554;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( interaction(A, K), enzyme(K, L) )
%   | | | then return 0.011581300941724708;  // std dev = 2.896, 45.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=22 */
%   | | | else return 0.09988281903219078;  // std dev = 6.807, 219.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=132 */
%   else return -0.06842697784420324;  // std dev = 0.000, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D), complex(A, E) )
%   | then if ( location(F, D), recursion_proteinclass(F, B) )
%   | | then if ( complex(F, E) )
%   | | | then return 0.37132890447590755;  // std dev = 1.617, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | | else return -0.3754144145556377;  // std dev = 0.893, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( interaction(A, G), phenotype(A, H) )
%   | | | then return -0.23813972257089752;  // std dev = 0.203, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.3548709401557389;  // std dev = 0.390, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( interaction(A, I), phenotype(I, J) )
%   | | then if ( interaction(I, K), recursion_proteinclass(K, B) )
%   | | | then return 0.23822948771346428;  // std dev = 1.763, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return -0.10447118951781127;  // std dev = 4.399, 97.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=40 */
%   | | else if ( interaction(L, A), enzyme(L, M) )
%   | | | then return -0.05960343935896755;  // std dev = 3.298, 53.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=25 */
%   | | | else return 0.06942990673064073;  // std dev = 5.469, 140.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=86 */
%   else return -0.06419184008202575;  // std dev = 8.69e-09, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
Inference time using transfer learning 4.190026521682739
Refined model CLL: -0.243952


******************************************
Best model found
******************************************
Total revision time: 90.46064639091492
Best scored revision CLL: -0.243952


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.144559', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.145416', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.145966', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.146513', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.147038', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.147533', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.148021', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.148524', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.149022', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.149525', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.150045', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.150568', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.151097', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.151608', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.152098', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.152601', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.153085', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.153581', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.156630', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.157231', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.157810', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.158376', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.158943', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.159576', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.160146', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.160709', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.161262', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.161823', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.162374', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.162936', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.163507', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.164085', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.164647', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.165197', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.165755', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:12:15.166309', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 10.607665300369263
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.43601778755852433;  // std dev = 0.494, 488.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048757;  // std dev = 1.18e-08, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.4139360298237451;  // std dev = 7.700, 251.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=155 */
%   | else return 0.3509913021840855;  // std dev = 7.521, 229.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839208;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.2940535045083191;  // std dev = 0.496, 497.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360633;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5817712416371419;  // std dev = 4.492, 262.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=240 */
%   | else return -0.15480726077153334;  // std dev = 5.824, 232.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(A, G) )
%   | | | then return -0.10159632948783656;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | | else return -0.1015963294878365;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.21700371457575582;  // std dev = 7.015, 255.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=155 */
%   | else return 0.2041062498012181;  // std dev = 5.981, 208.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926053;  // std dev = 1.03e-08, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.15423543936275827;  // std dev = 8.555, 396.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=237 */
%   | | else return 0.05349093967869206;  // std dev = 4.072, 91.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 8.43e-08, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else return -0.08518475138839678;  // std dev = 7.45e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.097229379551493;  // std dev = 0.432, 491.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, F) )
%   | | then return -0.07877675473109147;  // std dev = 7.88e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else return -0.07877675473109148;  // std dev = 8.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.10022773630969527;  // std dev = 8.438, 392.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=237 */
%   | else return 0.02736849422021672;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=45 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333722;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.03661854942202058;  // std dev = 9.763, 508.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420326;  // std dev = 0.000, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.02950100857131182;  // std dev = 9.722, 508.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202572;  // std dev = 8.79e-09, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
Inference time using transfer learning 6.918044567108154
Parameter learned model CLL:-0.265734 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.494, 206, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.18e-08, 346, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [7.7, 96, 155], 'true,false': [7.521, 102, 127], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 285, 0], 'false,false,false,false': [0.0, 51, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.496, 215, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 377, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(A, G)'}, {'true,true': [4.492, 22, 240], 'true,false': [5.824, 190, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 209, 0], 'false,false,false,false': [0.0, 176, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.015, 100, 155], 'true,false': [5.981, 81, 127], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-08, 356, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(A, G)'}, {'true,true,true': [8.555, 159, 237], 'true,true,false': [4.072, 46, 45], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [8.43e-08, 215, 0], 'false,false,false': [7.45e-08, 176, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(A, F)'}, {'true,true': [0.432, 209, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.88e-08, 197, 0], 'false,false,false': [8.3e-08, 171, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.438, 155, 237], 'true,false': [4.006, 44, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 366, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.763, 226, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 366, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.722, 226, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.79e-09, 356, 0]}]
{'': [0.2439364418167189, 1.3861744122487504e-16], 'false': [nan, 1.3861744122487504e-16]}
{'': [0.24234374999999125, -1.163090787702545e-16], 'true': [0.23618672719480854, 0.24702046108960765], 'false': [nan, -1.163090787702545e-16], 'false,false': [nan, -1.163090787702545e-16], 'false,false,false': [-1.0595812726247108e-16, -3.2653618371328135e-17]}
{'': [0.2456041094950649, -2.591502020345193e-17], 'false': [nan, -2.591502020345193e-17], 'false,false': [nan, -2.591502020345193e-17]}
{'': [0.2446559547718784, 9.573871277287064e-17], 'true': [0.07703042465098205, 0.14620912866834218], 'false': [nan, 9.573871277287064e-17], 'false,false': [nan, 9.573871277287064e-17], 'false,false,false': [-8.286832145527484e-17, -8.074349270001139e-17]}
{'': [0.18359651082846515, 1.0727997766040839e-16], 'true': [0.1929734687743257, 0.17200910576393294], 'false': [nan, 1.0727997766040839e-16]}
{'': [0.18585918074183364, 3.8616453030440226e-17], 'true': [0.18585918074183364, nan], 'true,true': [0.1848069280718277, 0.1821852700476725], 'false': [nan, 3.8616453030440226e-17], 'false,false': [3.304849933767908e-17, 3.154042683594195e-17]}
{'': [0.18699015725684673, 2.413528314402514e-17], 'true': [0.18699015725684673, nan], 'false': [nan, 2.413528314402514e-17], 'false,false': [3.1559639278684655e-17, 4.025370030804661e-17]}
{'': [0.18219988692513686, 6.066792484290473e-19], 'true': [0.18164049527567702, 0.18033748748366132], 'false': [nan, 6.066792484290473e-19], 'false,false': [nan, 6.066792484290473e-19]}
{'': [0.18764221854958876, -9.585532125178947e-17], 'true': [0.18764221854958876, nan], 'false': [nan, -9.585532125178947e-17], 'false,false': [nan, -9.585532125178947e-17]}
{'': [0.18607580917067898, 7.734137924355023e-17], 'true': [0.18607580917067898, nan], 'false': [nan, 7.734137924355023e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 33.689046144485474
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( complex(A, E) )
%   | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( location(A, F), location(D, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | then if ( enzyme(G, H), interaction(I, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( interaction(A, J), enzyme(J, K) )
%   | | | then return 0.2537533307039066;  // std dev = 4.665, 91.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=36 */
%   | | | else return 0.37688092357213293;  // std dev = 9.307, 347.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=180 */
%   else return -0.1418510649004875;  // std dev = 2.46e-07, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), interaction(A, E) )
%   | then if ( interaction(E, F), recursion_proteinclass(F, B) )
%   | | then if ( enzyme(F, G) )
%   | | | then return 0.7728573701961641;  // std dev = 0.183, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1818103768050313;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( interaction(H, A), complex(E, I) )
%   | | | then return 0.24450127159167204;  // std dev = 2.688, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | | else return 0.5514076064707171;  // std dev = 2.281, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   | else if ( location(A, J) )
%   | | then if ( location(K, J), recursion_proteinclass(K, B) )
%   | | | then return 0.43951954178480346;  // std dev = 8.699, 341.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=220 */
%   | | | else return -0.1902917637690196;  // std dev = 0.049, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( interaction(L, A), complex(L, M) )
%   | | | then return 0.08698330967237933;  // std dev = 1.473, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.3411790909599008;  // std dev = 1.778, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   else return -0.1254446385283922;  // std dev = 0.000, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( complex(D, E) )
%   | | then return 0.6223124537949971;  // std dev = 0.211, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( interaction(D, F), complex(A, G) )
%   | | | then return 0.005401759571683762;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5460710992787188;  // std dev = 0.962, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( interaction(H, A), interaction(A, H) )
%   | | then if ( phenotype(A, I), location(A, J) )
%   | | | then return 0.24380683832036043;  // std dev = 3.091, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | | | else return -0.03889910519706447;  // std dev = 2.052, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.5770643477175894;  // std dev = 0.984, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2724214443720551;  // std dev = 9.231, 361.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=190 */
%   else return -0.11231637819360647;  // std dev = 0.000, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(E, D) )
%   | then if ( recursion_proteinclass(E, B) )
%   | | then if ( interaction(D, E), interaction(A, D) )
%   | | | then return 0.5501147733892191;  // std dev = 1.381, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.2692413083292067;  // std dev = 1.874, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( interaction(A, D) )
%   | | | then return -0.2995629479183751;  // std dev = 0.532, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.16945226615462278;  // std dev = 8.015, 279.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=138 */
%   | else if ( phenotype(A, F) )
%   | | then if ( phenotype(G, F), recursion_proteinclass(G, B) )
%   | | | then return 0.583870813263082;  // std dev = 1.619, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return -0.2865060907971116;  // std dev = 0.222, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | | then return 0.4738459285510849;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22091999720154487;  // std dev = 3.744, 61.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   else return -0.10159632948783644;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(D, E) )
%   | | then if ( recursion_proteinclass(E, B) )
%   | | | then return 0.3379230177477697;  // std dev = 0.243, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.0954726767876075;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.4347952393295085;  // std dev = 0.112, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( interaction(F, A), enzyme(F, G) )
%   | | then if ( interaction(F, H), recursion_proteinclass(H, B) )
%   | | | then return 0.515711810877555;  // std dev = 2.147, 56.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   | | | else return -0.31371458663210483;  // std dev = 0.573, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( location(A, I), enzyme(A, J) )
%   | | | then return 0.25853900778350886;  // std dev = 4.511, 105.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | | else return 0.17396795221913683;  // std dev = 6.713, 219.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=119 */
%   else return -0.09269127618926044;  // std dev = 1.83e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( complex(A, D), location(A, E) )
%   | then if ( location(F, E), recursion_proteinclass(F, B) )
%   | | then if ( complex(F, D) )
%   | | | then return 0.4552553373192103;  // std dev = 1.286, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | | else return -0.3609584710626579;  // std dev = 0.817, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( interaction(A, G), interaction(H, A) )
%   | | | then return -0.159960925902086;  // std dev = 0.081, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.30528821276799617;  // std dev = 0.208, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( interaction(I, A), location(I, J) )
%   | | then if ( interaction(K, I), phenotype(K, L) )
%   | | | then return 0.25225427013663954;  // std dev = 4.969, 150.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=103 */
%   | | | else return 0.15901173626812515;  // std dev = 3.507, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | else if ( interaction(A, M), interaction(M, M) )
%   | | | then return 0.21182557364601484;  // std dev = 1.613, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.06229022955516124;  // std dev = 2.604, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   else return -0.08518475138839678;  // std dev = 6.18e-09, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D) )
%   | | then if ( interaction(A, D), location(E, F) )
%   | | | then return 0.18953873890625758;  // std dev = 0.130, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2716049959176003;  // std dev = 0.183, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.05364788998347961;  // std dev = 0.748, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( phenotype(A, G), location(A, H) )
%   | | then if ( location(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.09627576997338241;  // std dev = 5.987, 229.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=131 */
%   | | | else return -0.22941544274108575;  // std dev = 0.388, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.19273638355518097;  // std dev = 0.129, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.14559480333973926;  // std dev = 5.647, 175.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=105 */
%   else if ( interaction(A, J) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.07877675473109148;  // std dev = 8.43e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), complex(A, E) )
%   | then if ( complex(F, E), recursion_proteinclass(F, B) )
%   | | then if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | | then return 0.16797487560285487;  // std dev = 0.113, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3920021350422265;  // std dev = 0.466, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( interaction(H, A), enzyme(H, D) )
%   | | | then return -0.20697741629745592;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.33757580320605307;  // std dev = 0.301, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( interaction(I, A), phenotype(I, J) )
%   | | then if ( location(A, K), location(I, K) )
%   | | | then return 0.002367884651430329;  // std dev = 5.994, 233.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=116 */
%   | | | else return 0.09033639950871007;  // std dev = 3.185, 67.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=38 */
%   | | else if ( interaction(L, A), interaction(M, L) )
%   | | | then return 0.14174426662810488;  // std dev = 2.839, 57.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=37 */
%   | | | else return 0.05110955614385876;  // std dev = 3.829, 84.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=46 */
%   else return -0.07324622576333713;  // std dev = 3.61e-09, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(A, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(A, G), interaction(F, G) )
%   | | | then return 0.23882625042567698;  // std dev = 1.162, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return -0.04297155831609318;  // std dev = 1.416, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( interaction(A, H), interaction(H, I) )
%   | | | then return -0.04053210818397226;  // std dev = 3.564, 119.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=42 */
%   | | | else return 0.10199362252658523;  // std dev = 5.669, 202.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=122 */
%   | else if ( enzyme(A, J), phenotype(A, K) )
%   | | then if ( enzyme(L, J), recursion_proteinclass(L, B) )
%   | | | then return 0.25499492561359105;  // std dev = 0.985, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.34834067108867994;  // std dev = 0.520, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( interaction(A, M), interaction(M, M) )
%   | | | then return 0.10902729489735667;  // std dev = 1.680, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   | | | else return -0.03218974777897939;  // std dev = 3.271, 59.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=26 */
%   else return -0.0684269778442032;  // std dev = 0.000, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, D), complex(A, E) )
%   | | then if ( interaction(D, D) )
%   | | | then return 0.1237729415891268;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.17668665423367455;  // std dev = 0.638, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( interaction(A, F), interaction(F, A) )
%   | | | then return 0.14858322277398864;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21299130697129126;  // std dev = 0.199, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( interaction(A, G), complex(A, H) )
%   | | then if ( recursion_proteinclass(G, B) )
%   | | | then return 0.09190742995948717;  // std dev = 1.066, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.023471636519512368;  // std dev = 3.006, 106.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=40 */
%   | | else if ( interaction(A, I) )
%   | | | then return 0.10197527740717931;  // std dev = 4.200, 112.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=69 */
%   | | | else return 0.02768549776684;  // std dev = 6.124, 213.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=114 */
%   else return -0.06419184008202572;  // std dev = 8.84e-09, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
Inference time using transfer learning 5.438161849975586
Refined model CLL: -0.215175


******************************************
Best model found
******************************************
Total revision time: 100.08908820152283
Best scored revision CLL: -0.215175


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.839559', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.840409', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.840999', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.841587', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.842138', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.842685', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.843239', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.843778', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.844312', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.844879', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.845451', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.846008', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.846552', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.847103', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.847652', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.848179', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.848721', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.849266', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.852208', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.852843', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.853452', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.854081', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.854716', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.855334', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.855952', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.856572', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.857183', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.857797', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.858401', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.859027', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.859640', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.860243', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.860856', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.861465', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.862072', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:14:07.862685', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 10.276752948760986
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.43601778755852433;  // std dev = 0.494, 488.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.34e-08, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.368361868902853;  // std dev = 8.145, 271.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=155 */
%   | else return 0.3509913021840855;  // std dev = 7.521, 229.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.12544463852839213;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.31443279305478794;  // std dev = 0.493, 484.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936063;  // std dev = 0.000, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.596243300737382;  // std dev = 4.094, 258.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=240 */
%   | else return -0.14799000901520312;  // std dev = 5.835, 225.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(A, G) )
%   | | | then return -0.10159632948783656;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | | else return -0.10159632948783652;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then return 0.21158514018245658;  // std dev = 7.076, 260.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=155 */
%   | else return 0.16779033054555212;  // std dev = 6.225, 220.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=127 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926082;  // std dev = 7.90e-09, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.179390240377461;  // std dev = 8.280, 380.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=237 */
%   | | else return 0.10648093255991288;  // std dev = 3.774, 82.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, G) )
%   | | then return -0.08518475138839678;  // std dev = 7.45e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.08518475138839678;  // std dev = 6.50e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.08850347412281538;  // std dev = 0.431, 497.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(A, F) )
%   | | then return -0.07877675473109147;  // std dev = 7.60e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.0787767547310915;  // std dev = 8.56e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.09208597899023546;  // std dev = 8.577, 395.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=237 */
%   | else return 0.017090418293507645;  // std dev = 4.068, 87.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=45 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333717;  // std dev = 2.46e-09, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.08374914938460065;  // std dev = 9.094, 465.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420326;  // std dev = 0.000, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.031219474566679926;  // std dev = 9.539, 495.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820257;  // std dev = 8.93e-09, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
Inference time using transfer learning 6.67637300491333
Parameter learned model CLL:-0.27329 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.494, 206, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.34e-08, 370, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [8.145, 116, 155], 'true,false': [7.521, 102, 127], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 310, 0], 'false,false,false,false': [0.0, 49, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.493, 202, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 381, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(A, G)'}, {'true,true': [4.094, 18, 240], 'true,false': [5.835, 183, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 212, 0], 'false,false,false,false': [0.0, 184, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(A, D)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [7.076, 105, 155], 'true,false': [6.225, 93, 127], 'false,true': [0.0, 0, 0], 'false,false': [7.9e-09, 392, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(A, G)'}, {'true,true,true': [8.28, 143, 237], 'true,true,false': [3.774, 37, 45], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.45e-08, 182, 0], 'false,false,false': [6.5e-08, 153, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(A, F)'}, {'true,true': [0.431, 215, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [7.6e-08, 203, 0], 'false,false,false': [8.56e-08, 161, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(C, D)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [8.577, 158, 237], 'true,false': [4.068, 42, 45], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 335, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.094, 183, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 367, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.539, 213, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.93e-09, 362, 0]}]
{'': [0.2439364418167189, 1.848371305862423e-16], 'false': [nan, 1.848371305862423e-16]}
{'': [0.24590399999999113, -1.2122769516798366e-16], 'true': [0.24482237442300836, 0.24702046108960765], 'false': [nan, -1.2122769516798366e-16], 'false,false': [nan, -1.2122769516798366e-16], 'false,false,false': [-1.1173857538162865e-16, -3.172065784643304e-17]}
{'': [0.24310687420939947, -2.3311769545935045e-17], 'false': [nan, -2.3311769545935045e-17], 'false,false': [nan, -2.3311769545935045e-17]}
{'': [0.24302428064248474, 1.1438661465834946e-16], 'true': [0.06497403516237106, 0.15132547601643495], 'false': [nan, 1.1438661465834946e-16], 'false,false': [nan, 1.1438661465834946e-16], 'false,false,false': [-8.169565652902095e-17, -8.568025516128925e-17]}
{'': [0.1855066816262392, 6.230843505549347e-17], 'true': [0.19256158753916594, 0.1761301568154581], 'false': [nan, 6.230843505549347e-17]}
{'': [0.1800074180087377, 3.9769182971647396e-17], 'true': [0.1800074180087377, nan], 'true,true': [0.18042121796832042, 0.1737175324156002], 'false': [nan, 3.9769182971647396e-17], 'false,false': [3.050063254464716e-17, 2.757416662467709e-17]}
{'': [0.18570556795137924, 2.1960455432145953e-17], 'true': [0.18570556795137924, nan], 'false': [nan, 2.1960455432145953e-17], 'false,false': [2.843921048300894e-17, 4.551224821444741e-17]}
{'': [0.18779336787708875, 6.628197161941233e-18], 'true': [0.18623534940159014, 0.19025797643748], 'false': [nan, 6.628197161941233e-18], 'false,false': [nan, 6.628197161941233e-18]}
{'': [0.17783433728723083, -9.680418743325616e-17], 'true': [0.17783433728723083, nan], 'false': [nan, -9.680418743325616e-17], 'false,false': [nan, -9.680418743325616e-17]}
{'': [0.1838119499981317, 7.973977524932064e-17], 'true': [0.1838119499981317, nan], 'false': [nan, 7.973977524932064e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(A, G).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(A, G).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(A, F).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 19.885229349136353
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( interaction(A, E), interaction(E, A) )
%   | | then if ( complex(A, F), complex(E, F) )
%   | | | then return 0.03206197857777315;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.34751063722717196;  // std dev = 3.427, 47.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=23 */
%   | | else if ( interaction(G, A), enzyme(A, H) )
%   | | | then return 0.3581489350995134;  // std dev = 5.745, 132.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=66 */
%   | | | else return 0.4589892712339636;  // std dev = 7.555, 238.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=143 */
%   else return -0.14185106490048746;  // std dev = 2.62e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), interaction(E, A) )
%   | | then if ( interaction(A, D) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.027909174803385804;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.7841247758776184;  // std dev = 0.146, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( interaction(F, A), interaction(A, F) )
%   | | then if ( complex(F, G) )
%   | | | then return 0.15666897606812066;  // std dev = 3.508, 57.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | | | else return 0.5255330187461553;  // std dev = 1.676, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else if ( interaction(A, H), interaction(H, I) )
%   | | | then return 0.3950516508356568;  // std dev = 5.575, 133.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=81 */
%   | | | else return 0.3150640610312956;  // std dev = 7.767, 242.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=125 */
%   else if ( interaction(J, A) )
%   | then return -0.12544463852839216;  // std dev = 0.000, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, A) )
%   | | then if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | | | then return 0.5546037506280306;  // std dev = 0.016, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6621735671756109;  // std dev = 0.201, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( interaction(G, D), enzyme(G, H) )
%   | | | then return 0.21100313847265698;  // std dev = 1.134, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.5528336547346615;  // std dev = 0.941, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | then if ( interaction(I, J), phenotype(J, K) )
%   | | | then return 0.36477677191633406;  // std dev = 1.452, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.6323574622981357;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( complex(A, L), interaction(M, A) )
%   | | | then return 0.1705436143849655;  // std dev = 5.914, 143.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=60 */
%   | | | else return 0.2949861876344379;  // std dev = 8.314, 279.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=156 */
%   else return -0.1123163781936068;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(A, E) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then if ( enzyme(A, F) )
%   | | | then return 0.48531508028889164;  // std dev = 0.214, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.34729002801965647;  // std dev = 1.777, 34.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=30 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.25399904232695225;  // std dev = 0.212, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.24326775918887839;  // std dev = 8.994, 333.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=186 */
%   | else if ( enzyme(A, G) )
%   | | then if ( enzyme(H, G), recursion_proteinclass(H, B) )
%   | | | then return 0.5537436135307786;  // std dev = 1.347, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.3373463252651157;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( interaction(I, A), interaction(J, I) )
%   | | | then return -0.1391615157901579;  // std dev = 1.604, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.13289746668483537;  // std dev = 3.955, 63.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=31 */
%   else return -0.10159632948783617;  // std dev = 7.68e-09, 364.000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), location(A, F) )
%   | | then if ( interaction(D, E) )
%   | | | then return 0.350179698105065;  // std dev = 0.357, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.10124559368939953;  // std dev = 1.216, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( location(A, G), phenotype(D, H) )
%   | | | then return 0.3974984272461969;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43295242612697743;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( interaction(A, I), interaction(I, I) )
%   | | then if ( interaction(I, A), phenotype(I, J) )
%   | | | then return -0.13066213153019898;  // std dev = 1.547, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0.13144159883397777;  // std dev = 4.338, 82.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=41 */
%   | | else if ( interaction(A, K), recursion_proteinclass(K, B) )
%   | | | then return 0.3697777756648164;  // std dev = 0.901, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.175812905331727;  // std dev = 8.991, 332.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=179 */
%   else return -0.09269127618926061;  // std dev = 9.68e-09, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), phenotype(D, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(A, D), interaction(D, F) )
%   | | | then return 0.4917808679669876;  // std dev = 1.167, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.063396173117169;  // std dev = 1.628, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( interaction(A, D) )
%   | | | then return -0.305362110140233;  // std dev = 0.407, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.147919060742206;  // std dev = 7.273, 233.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=133 */
%   | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | then if ( phenotype(G, H), enzyme(G, I) )
%   | | | then return 0.012252380059044018;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3556689549996139;  // std dev = 0.290, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( interaction(A, J), enzyme(J, K) )
%   | | | then return -0.03757455114893659;  // std dev = 3.031, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.11426610232873166;  // std dev = 5.433, 128.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=68 */
%   else return -0.08518475138839678;  // std dev = 6.32e-09, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(D, E) )
%   | then if ( recursion_proteinclass(D, B), interaction(F, A) )
%   | | then if ( recursion_proteinclass(F, B), interaction(F, D) )
%   | | | then return 0.19585453522622545;  // std dev = 0.104, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3013749757736333;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( interaction(D, G), recursion_proteinclass(G, B) )
%   | | | then return 0.32794976809191817;  // std dev = 2.253, 37.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=30 */
%   | | | else return -0.007938003477455578;  // std dev = 5.083, 137.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=55 */
%   | else if ( interaction(H, A), location(H, I) )
%   | | then if ( phenotype(A, J), complex(H, K) )
%   | | | then return 0.25245056143481026;  // std dev = 3.611, 64.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | | | else return 0.11515207368789092;  // std dev = 6.574, 194.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=114 */
%   | | else if ( interaction(A, L), phenotype(L, M) )
%   | | | then return 0.27229195603785705;  // std dev = 1.375, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.5846837571269027;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109141;  // std dev = 4.06e-09, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), phenotype(A, E) )
%   | then if ( interaction(D, F), recursion_proteinclass(F, B) )
%   | | then if ( phenotype(F, E) )
%   | | | then return 0.3295704343165866;  // std dev = 1.301, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.19429857128188557;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( interaction(D, A) )
%   | | | then return -0.3014875755655631;  // std dev = 0.522, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.0420479363187156;  // std dev = 4.501, 94.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=49 */
%   | else if ( enzyme(A, G), interaction(H, A) )
%   | | then if ( complex(H, I), complex(A, J) )
%   | | | then return 0.04576059502729111;  // std dev = 2.441, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return 0.31224895753692167;  // std dev = 2.974, 56.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=44 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.22955304396699008;  // std dev = 0.221, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.09612412159214354;  // std dev = 6.586, 196.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=113 */
%   else return -0.07324622576333721;  // std dev = 1.32e-09, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D) )
%   | then if ( enzyme(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | | | then return 0.1849021531495043;  // std dev = 0.245, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.44569481525707405;  // std dev = 1.233, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else if ( interaction(A, G), complex(G, H) )
%   | | | then return -0.3794436550352217;  // std dev = 0.653, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.49695223099050956;  // std dev = 0.338, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( complex(A, I), interaction(A, J) )
%   | | then if ( interaction(J, K), recursion_proteinclass(K, B) )
%   | | | then return 0.15931601597811496;  // std dev = 1.748, 36.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=30 */
%   | | | else return -0.14362548126602961;  // std dev = 3.093, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | else if ( interaction(A, L), phenotype(L, M) )
%   | | | then return 0.13002700240008638;  // std dev = 3.309, 60.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   | | | else return 0.010681009776606552;  // std dev = 6.379, 176.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=96 */
%   else return -0.0684269778442033;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(D, E) )
%   | then if ( phenotype(A, F), phenotype(D, G) )
%   | | then if ( interaction(D, H), recursion_proteinclass(H, B) )
%   | | | then return 0.12174555182915299;  // std dev = 1.696, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   | | | else return -0.00238345517561881;  // std dev = 3.180, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | | else if ( complex(A, E), location(A, I) )
%   | | | then return 0.06092325581512019;  // std dev = 1.717, 31.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | | | else return 0.20810755646589638;  // std dev = 2.427, 43.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   | else if ( interaction(A, J), interaction(J, J) )
%   | | then if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.19308394156340886;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.19779949683013603;  // std dev = 2.118, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( interaction(L, A), location(A, M) )
%   | | | then return 0.004429961183241252;  // std dev = 7.360, 270.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=147 */
%   | | | else return -0.12647953242609916;  // std dev = 2.595, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   else return -0.06419184008202572;  // std dev = 8.84e-09, 357.000 (wgt'ed) examples reached here.  /* #neg=357 */
Inference time using transfer learning 4.739333391189575
Refined model CLL: -0.250174


******************************************
Best model found
******************************************
Total revision time: 73.1495144367218
Best scored revision CLL: -0.250174


adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.842423', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.843280', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.843841', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.844380', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.844901', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.845385', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.845879', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.846358', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.846853', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.847360', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.847883', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.848379', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.848893', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.849370', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.849868', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.850342', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.850830', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['follow', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.851324', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.854207', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.854816', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.855401', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.855977', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.856537', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.857087', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.857645', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'enzyme']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.858191', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'phenotype']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.858751', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.859318', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.859886', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.860439', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.861000', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.861556', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'complex']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.862106', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'interaction']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.862661', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'location']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.863226', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
adding document #0 to Dictionary(0 unique tokens: [])
built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)
Dictionary lifecycle event {'msg': "built Dictionary(2 unique tokens: ['tweet', 'function']) from 2 documents (total 2 corpus positions)", 'datetime': '2021-06-11T19:15:32.863796', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'created'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


Model training time 8.079243183135986
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.44321117576340835;  // std dev = 0.493, 482.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048752;  // std dev = 1.25e-08, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.38060315548673124;  // std dev = 9.976, 410.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=240 */
%   | else return 0.34786888077556305;  // std dev = 4.335, 76.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.1254446385283921;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then return 0.29822060304057946;  // std dev = 0.495, 494.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=282 */
%   else if ( recursion_proteinclass(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360647;  // std dev = 0.000, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.5655400090284274;  // std dev = 4.843, 266.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=240 */
%   | else return -0.15870162375316108;  // std dev = 5.920, 239.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( interaction(G, A) )
%   | | | then return -0.10159632948783663;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | | | else return -0.10159632948783628;  // std dev = 1.49e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A) )
%   | then return 0.1861941597159194;  // std dev = 8.408, 400.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=240 */
%   | else return 0.25007558127152946;  // std dev = 4.369, 77.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=42 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926074;  // std dev = 8.64e-09, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, E) )
%   | then if ( recursion_proteinclass(E, B) )
%   | | then return 0.12548431684673686;  // std dev = 9.537, 489.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=275 */
%   | | else return 0.19069643616972462;  // std dev = 1.789, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(G, A) )
%   | | then return -0.08518475138839678;  // std dev = 9.66e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | | else return -0.08518475138839679;  // std dev = 2.24e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.14488909245454265;  // std dev = 0.425, 456.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( interaction(F, A) )
%   | | then return -0.07877675473109143;  // std dev = 3.65e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, C) )
%   | then return 0.06630884172122592;  // std dev = 9.418, 484.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=275 */
%   | else return 0.11185317213927194;  // std dev = 1.786, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333711;  // std dev = 3.84e-09, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.071523191167945;  // std dev = 9.308, 478.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_proteinclass(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420322;  // std dev = 0.000, 357.000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.045390257399593445;  // std dev = 9.434, 486.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_proteinclass(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202578;  // std dev = 8.38e-09, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
Inference time using transfer learning 5.00494384765625
Parameter learned model CLL:-0.275128 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)'}, {'true': [0.493, 200, 282], 'false,true': [0.0, 0, 0], 'false,false': [1.25e-08, 356, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [9.976, 170, 240], 'true,false': [4.335, 34, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 297, 0], 'false,false,false,false': [0.0, 64, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'false': 'recursion_proteinclass(D, B)', 'false,false': 'recursion_proteinclass(E, B)'}, {'true': [0.495, 212, 282], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 352, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A), interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)', 'false,false,false': 'interaction(G, A)'}, {'true,true': [4.843, 26, 240], 'true,false': [5.92, 197, 42], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 299, 0], 'false,false,false,false': [1.49e-08, 46, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, A)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [8.408, 160, 240], 'true,false': [4.369, 35, 42], 'false,true': [0.0, 0, 0], 'false,false': [8.64e-09, 381, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, E)', 'true,true': 'recursion_proteinclass(E, B)', 'false': 'recursion_proteinclass(F, B)', 'false,false': 'interaction(G, A)'}, {'true,true,true': [9.537, 214, 275], 'true,true,false': [1.789, 6, 7], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [9.66e-08, 270, 0], 'false,false,false': [2.24e-08, 46, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'interaction(F, A)'}, {'true,true': [0.425, 174, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [3.65e-08, 301, 0], 'false,false,false': [0.0, 48, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'interaction(D, C)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.418, 209, 275], 'true,false': [1.786, 6, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.84e-09, 348, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)', 'false,false': 'recursion_proteinclass(F, B)'}, {'true,true': [9.308, 196, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 357, 0]}]
['proteinclass(A, B)', {'': 'recursion_proteinclass(C, B)', 'true': 'recursion_proteinclass(D, B)', 'false': 'recursion_proteinclass(E, B)'}, {'true,true': [9.434, 204, 282], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.38e-09, 342, 0]}]
{'': [0.2427644152132397, 1.571776416885053e-16], 'false': [nan, 1.571776416885053e-16]}
{'': [0.24356043286084972, -1.2055607358810565e-16], 'true': [0.24271267102915375, 0.24722991689750656], 'false': [nan, -1.2055607358810565e-16], 'false,false': [nan, -1.2055607358810565e-16], 'false,false,false': [-1.0765799026668185e-16, -3.8163916471489756e-17]}
{'': [0.2449197416523849, -3.2802043909379627e-17], 'false': [nan, -3.2802043909379627e-17], 'false,false': [nan, -3.2802043909379627e-17]}
{'': [0.2465976969777164, 2.0595441616234788e-17], 'true': [0.0881904008140613, 0.14661542609135977], 'false': [nan, 2.0595441616234788e-17], 'false,false': [nan, 2.0595441616234788e-17], 'false,false,false': [-5.049843857826799e-17, 4.827056628805028e-18]}
{'': [0.18878754806728215, 7.34320740696954e-17], 'true': [0.17674312703575662, 0.24793388429752022], 'false': [nan, 7.34320740696954e-17]}
{'': [0.18767093597079687, 3.653898562057477e-17], 'true': [0.18767093597079687, nan], 'true,true': [0.18600496452137166, 0.2461945999152606], 'false': [nan, 3.653898562057477e-17], 'false,false': [3.454027187722709e-17, 1.0860877414811314e-17]}
{'': [0.18029014277783473, 1.399708111275269e-17], 'true': [0.18029014277783473, nan], 'false': [nan, 1.399708111275269e-17], 'false,false': [4.426138304153448e-18, 0.0]}
{'': [0.1849560597543915, 1.4675361819757817e-17], 'true': [0.1832788357655916, 0.2453803699752228], 'false': [nan, 1.4675361819757817e-17], 'false,false': [nan, 1.4675361819757817e-17]}
{'': [0.18124138248025243, -9.640592090582592e-17], 'true': [0.18124138248025243, nan], 'false': [nan, -9.640592090582592e-17], 'false,false': [nan, -9.640592090582592e-17]}
{'': [0.1831345443785033, 7.011934892369409e-17], 'true': [0.1831345443785033, nan], 'false': [nan, 7.011934892369409e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
1;false;interaction(G, A).;true;true
2;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
3;false;interaction(G, A).;true;true
4;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
5;false;interaction(G, A).;true;true
6;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
6;false;interaction(F, A).;true;true
7;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
8;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true
9;;proteinclass(A, B) :- recursion_proteinclass(C, B).;true;true


Refining candidate
***************************
Model training time 36.168051958084106
WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, A) )
%   | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( interaction(F, D), enzyme(F, G) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | then if ( interaction(H, I), interaction(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6081489350995123;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( interaction(A, J), interaction(K, A) )
%   | | | then return 0.3071285269362482;  // std dev = 6.031, 147.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=66 */
%   | | | else return 0.43507201202258655;  // std dev = 7.966, 260.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=150 */
%   else return -0.14185106490048757;  // std dev = 2.21e-07, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( enzyme(D, E), phenotype(D, F) )
%   | | then if ( complex(D, G) )
%   | | | then return 0.40200626221954355;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7385128322212615;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7340148180841575;  // std dev = 0.161, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( interaction(A, A) )
%   | | then return -0.18349112614621926;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( interaction(A, H), enzyme(H, I) )
%   | | | then return 0.29992923831965235;  // std dev = 4.418, 79.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=39 */
%   | | | else return 0.40698262472592067;  // std dev = 8.717, 323.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=197 */
%   else if ( interaction(J, A) )
%   | then return -0.1254446385283921;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(E, D) )
%   | | then if ( recursion_proteinclass(E, B) )
%   | | | then return 0.555529534959082;  // std dev = 0.078, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.26966185417808064;  // std dev = 1.405, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( interaction(D, F), interaction(A, F) )
%   | | | then return 0.5632019001999578;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.623608421805992;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( interaction(A, G), complex(G, H) )
%   | | then if ( interaction(G, I), recursion_proteinclass(I, B) )
%   | | | then return 0.6672468223394775;  // std dev = 1.352, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.1363193574113997;  // std dev = 5.461, 128.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=50 */
%   | | else if ( interaction(J, A), location(A, K) )
%   | | | then return 0.2699739291210997;  // std dev = 8.059, 267.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=146 */
%   | | | else return 0.4723621305007594;  // std dev = 2.113, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 0.000, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(A, E), phenotype(E, F) )
%   | | then if ( phenotype(A, F), interaction(D, E) )
%   | | | then return 0.4633221813289282;  // std dev = 0.266, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.10219526723180859;  // std dev = 1.640, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | | then return 0.43625637060586775;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5731238364007748;  // std dev = 0.117, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( interaction(H, A), complex(A, I) )
%   | | then if ( interaction(J, H), recursion_proteinclass(J, B) )
%   | | | then return 0.41076092614861026;  // std dev = 1.776, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return 0.06482419513801245;  // std dev = 5.377, 135.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=50 */
%   | | else if ( interaction(K, A), interaction(A, L) )
%   | | | then return 0.30025440285157917;  // std dev = 3.901, 70.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=43 */
%   | | | else return 0.1859625195680816;  // std dev = 7.580, 237.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=124 */
%   else return -0.1015963294878364;  // std dev = 3.23e-09, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( enzyme(A, E), complex(D, F) )
%   | | then if ( interaction(A, G), enzyme(G, E) )
%   | | | then return 0.41288302553568956;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4789461307496216;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( phenotype(A, H), enzyme(D, I) )
%   | | | then return 0.11786571410627611;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.37700724955516973;  // std dev = 0.355, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( interaction(J, A) )
%   | | then if ( interaction(A, K), complex(K, L) )
%   | | | then return 0.08177242320443874;  // std dev = 4.931, 125.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=54 */
%   | | | else return 0.17411586154611353;  // std dev = 7.918, 256.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=140 */
%   | | else if ( location(A, M) )
%   | | | then return 0.28025342903405603;  // std dev = 3.465, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   | | | else return 0.6272982841238451;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926049;  // std dev = 1.06e-08, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( phenotype(A, E), complex(D, F) )
%   | | then if ( complex(A, F) )
%   | | | then return 0.2919039055494615;  // std dev = 0.237, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.3048058620631825;  // std dev = 0.669, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(D, D) )
%   | | | then return 0.2748241359383075;  // std dev = 0.111, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.34573455105800005;  // std dev = 0.222, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( interaction(A, G), enzyme(A, H) )
%   | | then if ( enzyme(G, I), interaction(G, A) )
%   | | | then return -0.13788249348719367;  // std dev = 1.073, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.22278945589973934;  // std dev = 3.798, 62.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=38 */
%   | | else if ( location(A, J) )
%   | | | then return 0.11291164470732666;  // std dev = 9.030, 352.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=187 */
%   | | | else return -0.052898924197856016;  // std dev = 2.313, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   else return -0.08518475138839678;  // std dev = 6.38e-09, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( phenotype(A, D) )
%   | then if ( phenotype(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(E, F), recursion_proteinclass(F, B) )
%   | | | then return 0.21111554499065913;  // std dev = 1.665, 38.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   | | | else return 0.4526992196674852;  // std dev = 3.400, 136.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=123 */
%   | | else if ( interaction(A, G), complex(A, H) )
%   | | | then return -0.29157030950029084;  // std dev = 0.285, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.43276395426012115;  // std dev = 0.460, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.22719131816962948;  // std dev = 0.120, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3162652770133627;  // std dev = 0.084, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( interaction(K, A), enzyme(K, L) )
%   | | | then return -0.04473085152803258;  // std dev = 2.900, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0.09491431169707913;  // std dev = 6.188, 161.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=89 */
%   else return -0.07877675473109141;  // std dev = 6.52e-09, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(A, D) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then if ( interaction(D, E), interaction(E, A) )
%   | | | then return 0.14812765270073483;  // std dev = 0.790, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.24581777564543014;  // std dev = 0.218, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.22431207920647173;  // std dev = 0.234, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.0508565354292617;  // std dev = 6.421, 210.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=109 */
%   | else if ( interaction(F, A), interaction(F, F) )
%   | | then if ( enzyme(A, G) )
%   | | | then return 0.47904823479376496;  // std dev = 0.117, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.33248985574020834;  // std dev = 1.164, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( interaction(H, A), interaction(I, H) )
%   | | | then return 0.1031909960633487;  // std dev = 5.159, 141.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=83 */
%   | | | else return 0.1996758778936925;  // std dev = 2.626, 37.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   else return -0.07324622576333724;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), location(A, E) )
%   | then if ( interaction(A, D), complex(D, F) )
%   | | then if ( recursion_proteinclass(D, B) )
%   | | | then return 0.159091768536756;  // std dev = 0.091, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.023468481363730753;  // std dev = 2.590, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
%   | | else if ( enzyme(D, G), interaction(D, D) )
%   | | | then return 0.3984307362069443;  // std dev = 0.491, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08036410935554762;  // std dev = 7.538, 311.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=188 */
%   | else if ( interaction(A, H), phenotype(H, I) )
%   | | then if ( interaction(J, A), enzyme(H, K) )
%   | | | then return 0.34290931121390633;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04674707862830934;  // std dev = 2.873, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   | | else if ( enzyme(A, L), interaction(A, M) )
%   | | | then return 0.08358243540261921;  // std dev = 1.266, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.06001778287195978;  // std dev = 2.797, 38.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   else return -0.06842697784420325;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( recursion_proteinclass(C, B) )
%   then if ( location(A, D) )
%   | then if ( location(E, D), recursion_proteinclass(E, B) )
%   | | then if ( interaction(A, F), interaction(E, F) )
%   | | | then return 0.32600165323178276;  // std dev = 2.705, 153.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=148 */
%   | | | else return -0.039347989419060814;  // std dev = 6.929, 260.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=121 */
%   | | else if ( phenotype(A, G), interaction(H, A) )
%   | | | then return -0.3845307696797093;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.45963566092386543;  // std dev = 0.407, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( interaction(A, I), interaction(I, J) )
%   | | then if ( complex(A, K) )
%   | | | then return 0.27616553152171525;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.01078948533941277;  // std dev = 1.152, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( interaction(L, A), interaction(M, L) )
%   | | | then return 0.3879618169279098;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.48695684418028884;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202575;  // std dev = 8.64e-09, 351.000 (wgt'ed) examples reached here.  /* #neg=351 */
Inference time using transfer learning 4.433600425720215
Refined model CLL: -0.242037


******************************************
Best model found
******************************************
Total revision time: 97.88617992401123
Best scored revision CLL: -0.242037


******************************************
Performing Parameter Learning
******************************************
Refine
0;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
0;true;athleteledsportsteam(C, E).;true;true
0;true,true;teamplaysagainstteam(A, F).;false;true
0;true,true,false;athleteplaysforteam(C, E), teamalsoknownas(E, G).;false;false
0;true,false;athleteplaysforteam(H, A), teamplaysinleague(A, I).;false;false
0;false;teamplaysinleague(A, J).;false;true
0;false,false;teamalsoknownas(K, A), teamalsoknownas(A, K).;true;false
0;false,false,true;teamplaysagainstteam(A, L).;false;false
1;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
1;true;athleteplaysforteam(C, D), athleteledsportsteam(E, D).;true;true
1;true,true;teamplaysagainstteam(A, F), teamalsoknownas(G, F).;true;true
1;true,true,true;athleteledsportsteam(C, G).;false;false
1;true,true,false;teamalsoknownas(H, A), teamplaysinleague(A, I).;false;false
1;true,false;teamalsoknownas(A, J).;false;true
1;true,false,false;teamplaysagainstteam(K, A), athleteplaysinleague(C, L).;false;false
1;false;teamalsoknownas(M, A), teamplaysagainstteam(A, N).;false;false
2;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
2;true;teamplaysagainstteam(A, E).;true;true
2;true,true;teamalsoknownas(E, F), teamplaysagainstteam(E, A).;false;true
2;true,true,false;teamalsoknownas(G, E), teamplaysagainstteam(A, G).;false;false
2;true,false;teamplaysagainstteam(H, A), athleteledsportsteam(C, I).;true;true
2;true,false,true;teamalsoknownas(J, H).;false;false
2;true,false,false;teamplaysinleague(A, K), teamalsoknownas(L, A).;false;false
2;false;teamalsoknownas(M, A), athleteplaysforteam(N, M).;false;false
3;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
3;true;athleteledsportsteam(C, D), teamalsoknownas(E, A).;true;true
3;true,true;teamalsoknownas(F, E), teamalsoknownas(F, A).;false;true
3;true,true,false;teamalsoknownas(A, E), teamplaysinleague(E, G).;false;false
3;true,false;athleteplaysforteam(C, H).;true;true
3;true,false,true;athleteledsportsteam(I, A), athleteplaysforteam(I, A).;false;false
3;true,false,false;athleteplaysinleague(C, J), teamplaysagainstteam(K, A).;false;false
3;false;teamplaysagainstteam(A, L), teamalsoknownas(M, A).;false;false
4;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
4;true;athleteledsportsteam(C, D).;true;true
4;true,true;teamalsoknownas(A, E), athleteledsportsteam(F, E).;true;true
4;true,true,true;athleteplaysforteam(F, D).;false;false
4;true,true,false;teamalsoknownas(A, G), teamalsoknownas(G, H).;false;false
4;true,false;teamplaysinleague(A, I), athleteplaysforteam(J, A).;false;true
4;true,false,false;teamalsoknownas(K, A), teamalsoknownas(A, K).;false;false
4;false;teamplaysinleague(A, L).;false;false
5;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
5;true;teamalsoknownas(E, A), teamalsoknownas(F, E).;false;true
5;true,false;athleteledsportsteam(C, G).;true;false
5;true,false,true;athleteplaysforteam(H, A), teamplaysinleague(A, D).;false;false
5;false;teamalsoknownas(I, A), athleteplaysforteam(J, I).;true;true
5;false,true;teamplaysagainstteam(K, A), teamplaysagainstteam(K, I).;false;true
5;false,true,false;athleteledsportsteam(J, L).;false;false
5;false,false;teamplaysinleague(A, M), athleteplayssport(N, B).;false;false
6;;teamplayssport(A, B) :- teamalsoknownas(A, C).;true;true
6;true;athleteplayssport(D, B), athleteplaysinleague(D, E).;true;false
6;true,true;teamplaysagainstteam(F, A), teamalsoknownas(C, F).;true;false
6;true,true,true;teamalsoknownas(C, A), athleteledsportsteam(G, F).;false;false
6;false;athleteplayssport(H, B).;true;false
6;false,true;athleteplaysforteam(H, I), athleteledsportsteam(J, I).;true;true
6;false,true,true;athleteplaysforteam(K, A), teamplaysagainstteam(A, I).;false;false
6;false,true,false;teamplaysagainstteam(L, A), athleteplaysinleague(H, M).;false;false
7;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
7;true;athleteplaysforteam(C, E), teamplaysagainstteam(E, A).;false;true
7;true,false;teamalsoknownas(F, A), athleteplaysforteam(G, F).;false;true
7;true,false,false;teamplaysagainstteam(A, H), teamplaysinleague(H, D).;false;false
7;false;athleteplayssport(I, B).;true;true
7;false,true;teamplaysinleague(A, J).;true;false
7;false,true,true;athleteplaysforteam(I, K), athleteledsportsteam(L, K).;false;false
7;false,false;teamplaysinleague(A, M).;false;false
8;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;false
8;true;teamplaysagainstteam(A, D), teamplaysagainstteam(D, A).;true;true
8;true,true;athleteplaysforteam(C, D), athleteledsportsteam(C, E).;true;true
8;true,true,true;athleteplaysinleague(C, F), teamplaysinleague(D, F).;false;false
8;true,true,false;teamalsoknownas(D, G), athleteledsportsteam(H, D).;false;false
8;true,false;athleteledsportsteam(C, I).;true;true
8;true,false,true;teamplaysinleague(A, J).;false;false
8;true,false,false;athleteplaysinleague(C, K).;false;false
9;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
9;true;athleteplaysforteam(C, A), teamalsoknownas(E, A).;true;true
9;true,true;teamplaysinleague(A, D).;false;false
9;true,false;teamplaysagainstteam(A, F), teamalsoknownas(A, F).;true;true
9;true,false,true;teamalsoknownas(F, G).;false;false
9;true,false,false;teamplaysagainstteam(H, A).;false;false
9;false;teamplaysagainstteam(I, A), athleteplayssport(J, B).;false;true
9;false,false;teamplaysagainstteam(A, K), teamalsoknownas(L, A).;false;false


Model training time 0.4443471431732178
loading projection weights from resources/fasttext/wiki.en.vec
KeyedVectors lifecycle event {'msg': 'loaded (2519370, 300) matrix of type float32 from resources/fasttext/wiki.en.vec', 'binary': False, 'encoding': 'utf8', 'datetime': '2021-06-11T21:17:15.797961', 'gensim': '4.0.1', 'python': '3.7.3 (default, Jan 22 2021, 20:04:44) \n[GCC 8.3.0]', 'platform': 'Linux-4.19.0-16-cloud-amd64-x86_64-with-debian-10.9', 'event': 'load_word2vec_format'}
******************************************
Performing Parameter Learning
******************************************
Refine
0;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
0;true;athleteledsportsteam(C, E).;true;true
0;true,true;teamplaysinleague(A, F), teamplaysinleague(E, F).;false;true
0;true,true,false;teamplaysinleague(A, G), athleteplaysinleague(H, G).;false;false
0;true,false;teamplaysagainstteam(A, I), teamplaysinleague(I, D).;false;true
0;true,false,false;teamplaysagainstteam(A, J).;false;false
0;false;teamplaysinleague(A, K).;false;true
0;false,false;athleteplayssport(L, B).;false;false
1;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
1;true;athleteledsportsteam(C, E), teamplaysinleague(A, D).;false;true
1;true,false;athleteplaysforteam(C, F), athleteplaysforteam(G, A).;true;true
1;true,false,true;teamplaysagainstteam(F, A), teamplaysinleague(F, D).;false;false
1;true,false,false;teamplaysinleague(A, H), athleteplaysinleague(I, H).;false;false
1;false;teamalsoknownas(J, A), athleteplaysforteam(K, J).;true;true
1;false,true;teamplaysagainstteam(L, A), teamplaysagainstteam(L, J).;false;false
1;false,false;teamplaysinleague(A, M).;false;false
2;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
2;true;teamplaysinleague(A, E).;true;true
2;true,true;athleteplaysinleague(F, E), athleteledsportsteam(F, G).;true;false
2;true,true,true;athleteplayssport(F, B), teamplaysinleague(G, E).;false;false
2;true,false;teamalsoknownas(A, H), athleteledsportsteam(C, I).;true;true
2;true,false,true;athleteplaysforteam(C, I), teamalsoknownas(I, J).;false;false
2;true,false,false;teamplaysagainstteam(K, A).;false;false
2;false;teamplaysinleague(A, L).;false;false
3;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
3;true;teamalsoknownas(D, A), teamalsoknownas(E, D).;false;true
3;true,false;athleteledsportsteam(C, F).;true;true
3;true,false,true;teamplaysagainstteam(A, G), teamplaysagainstteam(F, G).;false;false
3;true,false,false;teamplaysinleague(A, H), athleteplaysforteam(I, A).;false;false
3;false;teamplaysagainstteam(J, A), teamalsoknownas(K, J).;false;true
3;false,false;teamplaysagainstteam(L, A), teamalsoknownas(L, M).;true;false
3;false,false,true;teamplaysagainstteam(M, N).;false;false
4;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;false
4;true;athleteledsportsteam(C, D).;true;true
4;true,true;athleteledsportsteam(E, A), athleteplaysinleague(E, F).;true;true
4;true,true,true;athleteplaysinleague(C, F), teamplaysagainstteam(A, D).;false;false
4;true,true,false;teamalsoknownas(G, A), teamplaysagainstteam(H, A).;false;false
4;true,false;teamplaysinleague(A, I), athleteplaysinleague(J, I).;true;true
4;true,false,true;athleteplayssport(J, K).;false;false
4;true,false,false;teamalsoknownas(L, A), athleteplaysforteam(M, L).;false;false
5;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
5;true;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
5;true,true;athleteplaysinleague(C, F), teamplaysinleague(A, G).;true;true
5;true,true,true;athleteplaysinleague(H, G), athleteledsportsteam(H, I).;false;false
5;true,true,false;athleteplaysforteam(C, D).;false;false
5;true,false;athleteplaysinleague(C, J).;false;false
5;false;teamalsoknownas(K, A), teamalsoknownas(L, K).;true;false
5;false,true;teamplaysagainstteam(A, M), athleteledsportsteam(N, L).;false;false
6;;teamplayssport(A, B) :- athleteplayssport(C, B).;true;true
6;true;teamplaysagainstteam(D, A), athleteledsportsteam(E, D).;true;true
6;true,true;athleteplaysinleague(C, F), teamplaysinleague(A, G).;true;true
6;true,true,true;teamalsoknownas(A, H), teamplaysinleague(H, F).;false;false
6;true,true,false;athleteledsportsteam(C, I), athleteplaysforteam(E, I).;false;false
6;true,false;athleteplaysforteam(C, J), athleteledsportsteam(K, J).;false;true
6;true,false,false;teamplaysagainstteam(L, A).;false;false
6;false;teamalsoknownas(M, A), teamplaysagainstteam(A, N).;false;false
7;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
7;true;teamalsoknownas(E, A), teamalsoknownas(A, E).;true;true
7;true,true;teamplaysinleague(A, F), teamplaysagainstteam(G, A).;false;true
7;true,true,false;athleteledsportsteam(C, H), teamplaysinleague(E, I).;false;false
7;true,false;teamplaysinleague(A, J).;true;false
7;true,false,true;athleteledsportsteam(C, K), athleteplaysinleague(L, J).;false;false
7;false;teamplaysinleague(A, M).;false;true
7;false,false;teamalsoknownas(N, A), teamalsoknownas(A, N).;false;false
8;;teamplayssport(A, B) :- teamalsoknownas(C, A).;true;true
8;true;athleteplayssport(D, B).;false;true
8;true,false;teamplaysagainstteam(A, E), teamalsoknownas(E, C).;true;false
8;true,false,true;teamalsoknownas(F, E).;false;false
8;false;athleteplayssport(G, B), athleteplaysinleague(G, H).;true;false
8;false,true;athleteledsportsteam(G, I).;true;true
8;false,true,true;teamplaysagainstteam(I, A), teamplaysinleague(A, J).;false;false
8;false,true,false;teamplaysagainstteam(K, A), teamplaysinleague(K, L).;false;false
9;;teamplayssport(A, B) :- athleteplayssport(C, B), athleteplaysinleague(C, D).;true;true
9;true;teamplaysinleague(A, E).;true;false
9;true,true;athleteplaysforteam(C, F), teamplaysinleague(F, E).;true;true
9;true,true,true;athleteledsportsteam(C, G), teamplaysinleague(G, D).;false;false
9;true,true,false;athleteplaysinleague(H, E), athleteplayssport(H, I).;false;false
9;false;athleteplayssport(J, B).;true;true
9;false,true;athleteplaysforteam(J, K), teamplaysinleague(A, L).;false;false
9;false,false;teamalsoknownas(M, A), teamplaysagainstteam(A, N).;false;false


Model training time 0.4333460330963135
loading projection weights from resources/fasttext/wiki.en.vec
loading projection weights from resources/fasttext/wiki.en.vec
