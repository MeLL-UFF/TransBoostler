Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5661778450012207
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else return -0.14185106490048768;  // std dev = 7.21e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.699360372847024;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283918;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.533403800117888;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360651;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return -0.1123163781936063;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4159843356763898;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783615;  // std dev = 5.37e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3104942576522472;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.33e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.237824977850967;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20125125391213475;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109146;  // std dev = 9.42e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16815903551877942;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.04e-07, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return -0.07324622576333707;  // std dev = 2.89e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1511022232097842;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420276;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09414571203669846;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning 2.313084363937378
Parameter learned model CLL:-0.093027 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 159, 0], 'false,false': [7.21e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 226, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 186, 0], 'false,false,false': [2.98e-08, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 188, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.37e-08, 74, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.33e-09, 242, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 243, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.42e-08, 220, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.04e-07, 180, 0], 'false,false': [2.89e-08, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
{'': [0.015380859375004219, -2.391249591500337e-16], 'false': [-1.424437088198314e-16, 5.437827059388522e-17], 'false,true': [nan, -1.424437088198314e-16]}
{'': [0.022714981070850224, -5.894989511284018e-17], 'false': [nan, -5.894989511284018e-17]}
{'': [0.029822485207100815, -7.989889549603637e-17], 'false': [nan, -7.989889549603637e-17], 'false,false': [-2.3875763970433474e-17, 1.67580833905684e-17]}
{'': [0.015380859374998945, -6.440988539810068e-17], 'false': [nan, -6.440988539810068e-17], 'false,false': [-9.21248892774066e-17, 3.900783600034334e-17], 'false,false,false': [nan, 3.900783600034334e-17]}
{'': [0.022714981070849422, 5.1382222627279974e-17], 'false': [nan, 5.1382222627279974e-17], 'false,false': [nan, 5.1382222627279974e-17]}
{'': [0.029822485207100773, 3.655055225103396e-17], 'false': [nan, 3.655055225103396e-17], 'false,false': [nan, 3.655055225103396e-17]}
{'': [0.022714981070848777, 4.0371746350005693e-17], 'false': [nan, 4.0371746350005693e-17], 'false,false': [nan, 4.0371746350005693e-17], 'false,false,false': [nan, 4.0371746350005693e-17]}
{'': [0.02271498107084927, 3.3670698287812125e-17], 'true': [0.02271498107084927, nan], 'false': [6.044547578514741e-17, 1.3010426069826053e-17]}
{'': [0.015380859375, -8.776466597827324e-19], 'false': [nan, -8.776466597827324e-19], 'false,false': [nan, -8.776466597827324e-19]}
{'': [0.04986149584487528, 2.1461560327326447e-17], 'false': [-5.212314669601674e-19, -4.956352788505163e-18], 'false,false': [nan, -4.956352788505163e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 47.77033233642578
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.14185106490048824;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7240294473800427;  // std dev = 0.052, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.6788952892722306;  // std dev = 0.937, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5617932051143869;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7275462486361821;  // std dev = 0.046, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.12544463852839177;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.539125508532834;  // std dev = 0.989, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.5812054396463516;  // std dev = 0.154, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3120556766340368;  // std dev = 1.224, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5589151393464182;  // std dev = 0.041, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3533720938855918;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.44226098277448095;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5779356686682156;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, K) )
%   | then return -0.11231637819360638;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return -0.11231637819360617;  // std dev = 3.33e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.426263548453638;  // std dev = 0.032, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.26449996370968026;  // std dev = 0.846, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.4831228771357545;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.441266532006326;  // std dev = 0.153, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.430685874124421;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3044327609071487;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.29601676457508097;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.10159632948783616;  // std dev = 5.74e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3283241723370989;  // std dev = 0.057, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.23264645020934369;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.130369478617768;  // std dev = 1.198, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.27440704597845955;  // std dev = 0.929, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.3341115220089679;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3191812102617404;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.37981534809810835;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.34494807959227247;  // std dev = 0.051, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0926912761892605;  // std dev = 7.79e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25312288562411034;  // std dev = 0.815, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return -0.05066243842941779;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.2871667021795377;  // std dev = 0.197, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2684486835351664;  // std dev = 0.022, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2610573893435123;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.29071045472500695;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07364703676403223;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.29123040541103684;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.19413639574375766;  // std dev = 0.990, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.2365720192121728;  // std dev = 0.202, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.24854782792901495;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04892271890806921;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.25630315993376335;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21909906816091357;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2764690599959885;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23494765453014188;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109144;  // std dev = 3.84e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), follows(G, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0.18075419915469815;  // std dev = 0.029, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.2063138649224444;  // std dev = 0.155, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( recursion_accounttype(D, B), follows(D, H) )
%   | | | then return -0.13854706090487454;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19422107708349934;  // std dev = 0.100, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.03729934476404749;  // std dev = 1.588, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.1900762409581829;  // std dev = 0.070, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.22846609460742318;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1953706152126248;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333661;  // std dev = 8.88e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14887747455312594;  // std dev = 1.020, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return -0.17310482811214312;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.17239125835660443;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.02635879429180944;  // std dev = 1.263, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19642348838581003;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.15360367694352675;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17871268380207797;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, K) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return -0.0684269778442027;  // std dev = 3.36e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14068029087273007;  // std dev = 0.108, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.15499945718698005;  // std dev = 0.146, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.1748103414761293;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15743870102607738;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.0828259965076771;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.348296442443918;  // std dev = 1.025, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15665429502152192;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14126084660954363;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202618;  // std dev = 3.95e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
Inference time using transfer learning 9.91445255279541
Refined model CLL: -0.091347


******************************************
Best model found
******************************************
Results 

CLL : -0.085671 

AUC ROC : 0.995754 

AUC PR : 0.444693 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 47.77033233642578 

Total Inference Time : 7.038154125213623 

Total revision time: 58.164809703826904
Best scored revision CLL: -0.091347


Results 

CLL : -0.085671 

AUC ROC : 0.995754 

AUC PR : 0.444693 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.178098917007446 

Total Inference Time : 7.038154125213623 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8488438129425049
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7168963089389996;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839205;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5417875481200709;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360672;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else return -0.11231637819360624;  // std dev = 5.87e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4196856366717714;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783617;  // std dev = 5.16e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3029105675658793;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 9.94e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24605020041627956;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19483789823927689;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.19e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18187635166848026;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.26e-07, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13095716537645585;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442031;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12001054302182457;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202616;  // std dev = 6.50e-08, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
Inference time using transfer learning 1.8328704833984375
Parameter learned model CLL:-0.087641 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 230, 0], 'false,false': [8.33e-09, 77, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 221, 0], 'false,false,false': [5.87e-08, 76, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 212, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.16e-08, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.94e-09, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 320, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.19e-08, 310, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [0.997, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 210, 0], 'false,false': [0.0, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 323, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [6.5e-08, 263, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 81, 0]}]
{'': [0.018511925952302145, 5.207560766971418e-17], 'false': [-2.0852884636437723e-16, 7.209240419643874e-17], 'false,true': [nan, -2.0852884636437723e-16]}
{'': [0.006328857154450192, -1.0060273362299153e-16], 'false': [nan, -1.0060273362299153e-16]}
{'': [0.018511925952294193, -9.121024175371657e-17], 'false': [nan, -9.121024175371657e-17], 'false,false': [-6.832141690000964e-17, 4.5285412846552437e-17]}
{'': [0.006328857154448947, -5.401084984662924e-17], 'false': [nan, -5.401084984662924e-17], 'false,false': [-8.588517737666306e-17, 3.172065784643304e-17], 'false,false,false': [nan, 3.172065784643304e-17]}
{'': [0.024374999999999723, 9.806386337383086e-17], 'false': [nan, 9.806386337383086e-17], 'false,false': [nan, 9.806386337383086e-17]}
{'': [0.018511925952296584, 3.7470027081099036e-17], 'false': [nan, 3.7470027081099036e-17], 'false,false': [nan, 3.7470027081099036e-17]}
{'': [0.02437500000000023, 2.721837092629416e-17], 'false': [nan, 2.721837092629416e-17], 'false,false': [nan, 2.721837092629416e-17], 'false,false,false': [nan, 2.721837092629416e-17]}
{'': [0.0063288571544485115, -7.280150981148567e-19], 'true': [0.0063288571544485115, nan], 'false': [7.507222356989154e-17, -8.18059070776431e-18]}
{'': [0.030091431657729324, -7.42440165074408e-17], 'false': [nan, -7.42440165074408e-17], 'false,false': [nan, -7.42440165074408e-17]}
{'': [0.024374999999999942, 7.164811379848394e-17], 'false': [1.604124522272089e-17, -1.02798428206033e-17], 'false,false': [nan, -1.02798428206033e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 48.99875259399414
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( tweets(A, F) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.7194734122109546;  // std dev = 7.30e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4337591264966691;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.6810118737494163;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7350122940520399;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839208;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.5315569129367603;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5609516798152413;  // std dev = 0.124, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.22203310341295132;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5187251654876297;  // std dev = 1.347, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.5648425723746451;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( tweets(A, H) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(I, A) )
%   | | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.37895187392002194;  // std dev = 1.382, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.4372071957346936;  // std dev = 0.166, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2724622509007197;  // std dev = 0.918, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.39372770650128874;  // std dev = 0.984, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.42172415580562117;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4597923065955811;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.42497993425706804;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4175135841583099;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.1015963294878366;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.33267523595090787;  // std dev = 0.018, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.28447746909097527;  // std dev = 1.392, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.3627966275066063;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.32858868747356845;  // std dev = 0.031, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.3323154667133354;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.32591568412648075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19571184716014972;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.09269127618926042;  // std dev = 9.50e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D), follows(A, D) )
%   | | | then return 0.2663643915894975;  // std dev = 0.034, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2786345059840886;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return 0.26628770736881957;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.26010994133958826;  // std dev = 0.023, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.19209559802767326;  // std dev = 0.974, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.03250752177840218;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26083134286073323;  // std dev = 0.031, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.27005037558896916;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839678;  // std dev = 6.18e-09, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.21683242187105894;  // std dev = 0.041, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.23455470489019464;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.10135995982977737;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2164297457975574;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.24108641162909106;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2890565277933609;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.21421324944065465;  // std dev = 0.060, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.21738302218909147;  // std dev = 0.037, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.07877675473109143;  // std dev = 1.61e-09, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.18292981288031449;  // std dev = 0.026, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.1888029826751026;  // std dev = 0.065, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.12710152537086958;  // std dev = 0.908, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.18215225299498936;  // std dev = 0.065, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B), recursion_accounttype(I, B) )
%   | | | then return 0.18946533246595973;  // std dev = 0.104, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.026424131523232648;  // std dev = 1.627, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.17479564388467508;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1885218187858535;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333688;  // std dev = 6.65e-09, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | then if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.07731892170603111;  // std dev = 2.118, 59.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return -0.11971845249459674;  // std dev = 1.416, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.16046538221822745;  // std dev = 0.071, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.0935074947829275;  // std dev = 0.967, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(I, A), tweets(I, J) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.15456728392171162;  // std dev = 0.044, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.16232473871238315;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18626358590754502;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1583565795105988;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06842697784420299;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.11739394446314295;  // std dev = 1.397, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return -0.1733476507625452;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.0734097132417319;  // std dev = 1.210, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.13947054964794292;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.0862190437721301;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.13933776302767525;  // std dev = 0.047, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15968489525018187;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.13878870540392838;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202596;  // std dev = 6.78e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
Inference time using transfer learning 4.740681886672974
Refined model CLL: -0.08568


******************************************
Best model found
******************************************
Results 

CLL : -0.091293 

AUC ROC : 0.994235 

AUC PR : 0.406372 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.99875259399414 

Total Inference Time : 7.355007648468018 

Total revision time: 60.68432545661926
Best scored revision CLL: -0.08568


Results 

CLL : -0.091293 

AUC ROC : 0.994235 

AUC PR : 0.406372 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 60.697614669799805 

Total Inference Time : 7.355007648468018 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5773792266845703
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7085181213873046;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5405417347553895;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360644;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.11231637819360625;  // std dev = 5.16e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4216109028806498;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878362;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27794822148152404;  // std dev = 0.223, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926051;  // std dev = 7.33e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2414262312751094;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2114435635124998;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 7.60e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15393831906593464;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1385696188567302;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420279;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11996040642016777;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
Inference time using transfer learning 2.2589614391326904
Parameter learned model CLL:-0.09296 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.712, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 192, 0], 'false,false': [8.12e-09, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 177, 0], 'false,false,false': [5.16e-08, 69, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 183, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.94e-08, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.223, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.33e-09, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.6e-08, 239, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 202, 0], 'false,false': [0.0, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 180, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 74, 0]}]
{'': [0.022714981070853308, -9.223391281501301e-17], 'false': [-2.266705341943028e-16, 6.857259857978908e-17], 'false,true': [nan, -2.266705341943028e-16]}
{'': [0.015380859375001332, -7.280150981148567e-17], 'false': [nan, -7.280150981148567e-17]}
{'': [0.022714981070850113, -9.026203452237045e-17], 'false': [nan, -9.026203452237045e-17], 'false,false': [-1.003591434689407e-17, 3.8616453030440226e-17]}
{'': [0.007812015624032241, -6.944604927696453e-17], 'false': [nan, -6.944604927696453e-17], 'false,false': [-8.85751702706409e-17, 2.590520390792032e-17], 'false,false,false': [nan, 2.590520390792032e-17]}
{'': [0.049861495844874454, 5.278109461332711e-17], 'false': [nan, 5.278109461332711e-17], 'false,false': [nan, 5.278109461332711e-17]}
{'': [0.02982248520710059, 3.5202193463724476e-17], 'false': [nan, 3.5202193463724476e-17], 'false,false': [nan, 3.5202193463724476e-17]}
{'': [0.015380859374999785, 2.4155480033685416e-17], 'false': [nan, 2.4155480033685416e-17], 'false,false': [nan, 2.4155480033685416e-17], 'false,false,false': [nan, 2.4155480033685416e-17]}
{'': [0.03671114736903453, 2.2034960794087076e-17], 'true': [0.03671114736903453, nan], 'false': [7.25492273517429e-17, -1.8503717077085942e-18]}
{'': [0.029822485207100423, -7.715835692375605e-18], 'false': [nan, -7.715835692375605e-18], 'false,false': [nan, -7.715835692375605e-18]}
{'': [0.02982248520710047, 7.867722221753078e-18], 'false': [-4.934324553889585e-18, -9.00180830777154e-18], 'false,false': [nan, -9.00180830777154e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 32.089656829833984
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.781225858176435;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914028569957709;  // std dev = 1.353, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.47328849625439684;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.7422862127100821;  // std dev = 0.050, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.12544463852839186;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(A, E) )
%   | | | then return 0.547240198365625;  // std dev = 0.998, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.580912499557911;  // std dev = 0.075, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.19299698591853506;  // std dev = 1.089, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5740721355375601;  // std dev = 0.065, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.23659286403998325;  // std dev = 1.169, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, H) )
%   | then return -0.11231637819360653;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( follows(I, A) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.11231637819360633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return 0.42915449498691255;  // std dev = 0.044, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.4483487774742234;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.1054889769804297;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.43495943293731837;  // std dev = 0.085, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.22515561094004802;  // std dev = 1.479, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.3557944255041535;  // std dev = 1.313, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.44958085229778827;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4198684657362863;  // std dev = 0.013, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783659;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.30266940158767996;  // std dev = 1.385, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.12390819778499779;  // std dev = 1.438, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.404617603075614;  // std dev = 0.141, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.390951222703892;  // std dev = 0.146, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3374660413557228;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.33195971830885185;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.31922346531305806;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, I) )
%   | then return -0.09269127618926057;  // std dev = 3.48e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, E), tweets(D, E) )
%   | | | then return 0.15812047281003566;  // std dev = 2.210, 51.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=45 */
%   | | | else return 0.29346607596634106;  // std dev = 0.167, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26140022383060363;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2931657155350392;  // std dev = 0.135, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.28004771202275736;  // std dev = 0.087, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.36627724473123496;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2648827124551146;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25534530889145446;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.23513657596237336;  // std dev = 0.040, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.21703266912560287;  // std dev = 0.059, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.12235347971910968;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.22890881183582623;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.0039029475213454823;  // std dev = 1.655, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.10822865420866012;  // std dev = 1.560, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.21948650178394769;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21036469082045486;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109144;  // std dev = 3.95e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.1955065026868538;  // std dev = 0.035, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.18243839615646365;  // std dev = 0.052, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3087135209636932;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20963355955604507;  // std dev = 0.120, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.14139612265690812;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1554405451270878;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.17474381802850303;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1789404728920533;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333684;  // std dev = 7.03e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.11552512300948738;  // std dev = 1.323, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.18726028941884726;  // std dev = 0.186, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.03024907280720346;  // std dev = 0.951, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.19136987173626502;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1681537404424297;  // std dev = 0.040, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.14397515804206984;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15981780904163734;  // std dev = 0.031, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( tweets(A, K) )
%   | then return -0.06842697784420261;  // std dev = 4.17e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return -0.06842697784420268;  // std dev = 2.46e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.14615816277550525;  // std dev = 0.037, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.026156862289594324;  // std dev = 1.606, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19535793916543293;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14083362199273539;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.22159608019441832;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15633357761518227;  // std dev = 0.042, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1463768120539105;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.13755148136776738;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202614;  // std dev = 4.37e-09, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
Inference time using transfer learning 7.619304656982422
Refined model CLL: -0.089832


******************************************
Best model found
******************************************
Results 

CLL : -0.084342 

AUC ROC : 0.996766 

AUC PR : 0.523535 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.089656829833984 

Total Inference Time : 6.597071409225464 

Total revision time: 42.053659200668335
Best scored revision CLL: -0.089832


Results 

CLL : -0.084342 

AUC ROC : 0.996766 

AUC PR : 0.523535 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.06571984291077 

Total Inference Time : 6.597071409225464 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.814133882522583
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048843;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6839427504817268;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5482064034685219;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1123163781936068;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.11231637819360624;  // std dev = 5.58e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4243627786454097;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783652;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783616;  // std dev = 4.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32413361729411944;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926043;  // std dev = 9.31e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.262226599723528;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19528882306481019;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 9.88e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16971063840295392;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.26e-07, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14510173333854876;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420297;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10799798743317472;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
Inference time using transfer learning 1.8344855308532715
Parameter learned model CLL:-0.087518 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.404, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 231, 0], 'false,false': [8.93e-09, 90, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 335, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 240, 0], 'false,false,false': [5.58e-08, 74, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 237, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.83e-08, 69, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-09, 299, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 318, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.88e-08, 290, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 212, 0], 'false,false': [0.0, 91, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 293, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 193, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 66, 0]}]
{'': [0.03566529492456011, 8.300732894393693e-17], 'false': [-2.0762612408574356e-16, 7.401486830834377e-17], 'false,true': [nan, -2.0762612408574356e-16]}
{'': [0.0411005306936694, -1.0870243345583622e-16], 'false': [nan, -1.0870243345583622e-16]}
{'': [0.024375000000001014, -5.2328983326281264e-17], 'false': [nan, -5.2328983326281264e-17], 'false,false': [-8.696747026230393e-17, 4.200843876960052e-17]}
{'': [0.012497997115847561, -4.7891973611281265e-17], 'false': [nan, -4.7891973611281265e-17], 'false,false': [-6.933038297237265e-17, 3.37893964016352e-17], 'false,false,false': [nan, 3.37893964016352e-17]}
{'': [0.012497997115845875, 8.614439522175128e-17], 'false': [nan, 8.614439522175128e-17], 'false,false': [nan, 8.614439522175128e-17]}
{'': [0.006328857154448065, 3.77056876287789e-17], 'false': [nan, 3.77056876287789e-17], 'false,false': [nan, 3.77056876287789e-17]}
{'': [0.024374999999999945, 3.368952626448751e-17], 'false': [nan, 3.368952626448751e-17], 'false,false': [nan, 3.368952626448751e-17], 'false,false,false': [nan, 3.368952626448751e-17]}
{'': [0.018511925952296393, -1.4656409566008667e-18], 'true': [0.018511925952296393, nan], 'false': [7.54113752575578e-17, -7.93016446160826e-18]}
{'': [0.018511925952296365, -4.9259042048215136e-17], 'false': [nan, -4.9259042048215136e-17], 'false,false': [nan, -4.9259042048215136e-17]}
{'': [0.035665294924554246, 1.200241107702872e-17], 'false': [-2.300980361917423e-18, -5.046468293750712e-18], 'false,false': [nan, -5.046468293750712e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 47.068700075149536
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I), follows(J, A) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995118;  // std dev = 1.88e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( tweets(A, K) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7236957307748849;  // std dev = 0.016, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.627380491716673;  // std dev = 1.348, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.6003851107266845;  // std dev = 1.614, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.21947341221095448;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.7301360783556904;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.731913189379813;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.7215467084057643;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.125444638528392;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5491870264837303;  // std dev = 1.405, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.26283090944276716;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3087200958621083;  // std dev = 1.079, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, H) )
%   | | | then return 0.5644729786597363;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.48948729260369805;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, K) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.11231637819360622;  // std dev = 6.97e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.4121352558574005;  // std dev = 0.948, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.4483887582021277;  // std dev = 0.272, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.34190904947250983;  // std dev = 0.949, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.41751358415830986;  // std dev = 4.71e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.4304558965037204;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4487150182878297;  // std dev = 0.142, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.4175135841583099;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783646;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.3247882116095932;  // std dev = 1.016, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.4594255265006858;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.25713529341419356;  // std dev = 0.958, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3203036787331282;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3392479250275707;  // std dev = 0.104, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10990930951834291;  // std dev = 1.005, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3290756385101617;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3207118471601496;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.09269127618926043;  // std dev = 8.84e-09, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2589181026295598;  // std dev = 0.904, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.08673327814033802;  // std dev = 0.963, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.28804158999314694;  // std dev = 0.224, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.26046109053753935;  // std dev = 0.049, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.18915034027808755;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2552498265552181;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2551722425694894;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.08518475138839678;  // std dev = 4.06e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20343325213213867;  // std dev = 1.007, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.15048008964111512;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.2666181102878154;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.15002112610987015;  // std dev = 1.225, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.21554624735332334;  // std dev = 0.081, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.28667277673283564;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20913145891552923;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.21189273973845663;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07877675473109143;  // std dev = 1.61e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.18641565316015518;  // std dev = 0.066, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2019154352135933;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2334571862366225;  // std dev = 0.196, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18747014517935384;  // std dev = 0.107, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1812890606658137;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.38718396613352235;  // std dev = 0.729, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1953965731835974;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17665750411640094;  // std dev = 0.000992, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333722;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.15380353123552748;  // std dev = 0.025, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.16132202083308125;  // std dev = 0.056, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1648433634461729;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.20599252015986091;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.0031018185520162557;  // std dev = 1.499, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.1648400685118777;  // std dev = 0.187, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.1769635855942966;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06877644936165643;  // std dev = 0.958, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.06842697784420293;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | | then return 0.13840260291353135;  // std dev = 0.058, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.17379450074119585;  // std dev = 0.228, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.16116062194078273;  // std dev = 0.725, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14799467367878985;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.03787369035033315;  // std dev = 0.898, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1043733061866025;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09334509954474639;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.14026618548533457;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.0641918400820258;  // std dev = 8.07e-09, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
Inference time using transfer learning 5.354774475097656
Refined model CLL: -0.08326


******************************************
Best model found
******************************************
Results 

CLL : -0.089708 

AUC ROC : 0.995245 

AUC PR : 0.477829 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 47.068700075149536 

Total Inference Time : 6.363574743270874 

Total revision time: 57.42608165740967
Best scored revision CLL: -0.08326


Results 

CLL : -0.089708 

AUC ROC : 0.995245 

AUC PR : 0.477829 

Precision : 0.338753 

Recall : 0.992063 

F1 : 0.505051 

Total Learning Time : 57.4381422996521 

Total Inference Time : 6.363574743270874 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.029872179031372
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048838;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7054348861596896;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839188;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5226026889248686;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360682;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | else return -0.1123163781936063;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4229935232448165;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30075349976103644;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926046;  // std dev = 6.59e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23776745763797089;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19369687388939377;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.58e-08, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14709567601040668;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.22e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.07324622576333707;  // std dev = 8.33e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13993852930242917;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0684269778442027;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11363135777446283;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.49e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
Inference time using transfer learning 2.7876031398773193
Parameter learned model CLL:-0.092779 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 220, 0], 'false,false': [2.63e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 242, 0], 'false,false,false': [5.27e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 208, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.59e-09, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.58e-08, 256, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [2.393, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 242, 0], 'false,false': [8.33e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [1.49e-08, 219, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.32e-09, 20, 0]}]
{'': [0.007812015624035403, -1.6584244351247152e-16], 'false': [-2.34156128830033e-16, 5.28677630773884e-18], 'false,true': [nan, -2.220446049250313e-16]}
{'': [0.015380859374998113, -6.643854320591488e-17], 'false': [nan, -6.643854320591488e-17]}
{'': [0.03671114736903509, -9.441266666103694e-17], 'false': [nan, -9.441266666103694e-17], 'false,false': [-8.624873083864852e-17, 2.3129646346357427e-18]}
{'': [0.007812015624030339, -7.859986015045356e-17], 'false': [nan, -7.859986015045356e-17], 'false,false': [-8.967185968126265e-17, -9.25185853854297e-18], 'false,false,false': [nan, -9.25185853854297e-18]}
{'': [0.029822485207100992, 4.4408920985006264e-17], 'false': [nan, 4.4408920985006264e-17], 'false,false': [nan, 4.4408920985006264e-17]}
{'': [0.029822485207100218, 3.429260307722491e-17], 'false': [nan, 3.429260307722491e-17], 'false,false': [nan, 3.429260307722491e-17]}
{'': [0.029822485207100718, 1.214306433183765e-17], 'false': [nan, 1.214306433183765e-17], 'false,false': [nan, 1.214306433183765e-17], 'false,false,false': [nan, 1.214306433183765e-17]}
{'': [0.04338842975206621, 3.8836698960271635e-17], 'true': [0.04338842975206621, nan], 'false': [6.14751592147814e-17, 3.3042351923367752e-18]}
{'': [0.02982248520710054, -9.06304509898087e-19], 'false': [nan, -9.06304509898087e-19], 'false,false': [nan, -9.06304509898087e-19]}
{'': [0.03671114736903441, 2.7871707731175478e-18], 'false': [1.0139023055937502e-18, 2.0816681711721684e-18], 'false,false': [nan, 2.0816681711721684e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 32.51239275932312
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.8146706742299468;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, H) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.711115140102229;  // std dev = 0.991, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(D, G) )
%   | | | then return -0.025858849523493085;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.5214694072175687;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.6343929146549286;  // std dev = 0.904, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.728685696856866;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1254446385283918;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5646933381582195;  // std dev = 0.044, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5332713098081074;  // std dev = 0.981, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.6698392608560391;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5811012131050028;  // std dev = 0.173, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.41099764560587193;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.11231637819360633;  // std dev = 3.48e-09, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.11231637819360618;  // std dev = 4.93e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.11231637819360632;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3840357231280562;  // std dev = 1.672, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.48757783208991057;  // std dev = 0.166, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2249378045397193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.47540626216662657;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4211381918780371;  // std dev = 0.000508, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.42289662230350195;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4174002660376822;  // std dev = 0.009, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, K) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.3167794850275279;  // std dev = 0.983, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.3506326552732684;  // std dev = 0.184, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return 0.19939181929904234;  // std dev = 0.767, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3311381429861478;  // std dev = 0.113, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.24013411278308175;  // std dev = 0.950, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.06444283332456324;  // std dev = 1.192, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.3247095958038897;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.32073653466678215;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926047;  // std dev = 8.93e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.2721973125560276;  // std dev = 0.057, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.02378012490750553;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.33693698176147346;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.26787898879772803;  // std dev = 0.133, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2590296110553516;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2529476113528807;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1283869958611348;  // std dev = 0.359, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.08518475138839679;  // std dev = 2.46e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.21335002146043425;  // std dev = 0.980, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.15018600274788077;  // std dev = 1.510, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2125075271132706;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24934622529329642;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.09693075255107343;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.07877675473109151;  // std dev = 7.67e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.07877675473109173;  // std dev = 2.08e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.1903169871608397;  // std dev = 0.094, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.22052754430900876;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25423792067715567;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.13436182484881293;  // std dev = 0.936, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.01524911324428696;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18803435432075313;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08791401365170443;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333664;  // std dev = 8.64e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14347188085979237;  // std dev = 0.997, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.07840888981616818;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return 0.17708150830649225;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.1586963038157233;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.11782477452276201;  // std dev = 0.978, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08589557617110201;  // std dev = 1.099, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1868412703520491;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420275;  // std dev = 9.31e-10, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.09988872488283906;  // std dev = 1.695, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | | | else return -0.5784877495567515;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.14950166889937597;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16605258596576708;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1449461860121948;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18865095494648162;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14556196266923305;  // std dev = 0.073, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.16143902977117996;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 1.86e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
Inference time using transfer learning 6.336205005645752
Refined model CLL: -0.090876


******************************************
Best model found
******************************************
Results 

CLL : -0.084911 

AUC ROC : 0.996386 

AUC PR : 0.461687 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.51239275932312 

Total Inference Time : 5.28115701675415 

Total revision time: 42.226962089538574
Best scored revision CLL: -0.090876


Results 

CLL : -0.084911 

AUC ROC : 0.996386 

AUC PR : 0.461687 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.2602915763855 

Total Inference Time : 5.28115701675415 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.9926834106445312
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7130403104915405;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5457355878450801;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360668;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else return -0.1123163781936062;  // std dev = 7.74e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3860707348847435;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 3.33e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3070067522790518;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926042;  // std dev = 1.03e-08, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2243203991736283;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19983867677977163;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.03e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19095435180218906;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333664;  // std dev = 1.21e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12003298344069539;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420304;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12763361001520906;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 1.05e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning 2.462825059890747
Parameter learned model CLL:-0.087112 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [2.201, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 213, 0], 'false,false': [8.33e-09, 77, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 282, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 213, 0], 'false,false,false': [7.74e-08, 100, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 215, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.33e-08, 100, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.03e-08, 326, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.759, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 312, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.03e-07, 289, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [0.997, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 203, 0], 'false,false': [0.0, 93, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [1.05e-08, 218, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 86, 0]}]
{'': [0.030091431657735174, 6.1253684117250015e-18], 'false': [-2.376815489338363e-16, 7.209240419643874e-17], 'false,true': [nan, -2.376815489338363e-16]}
{'': [0.012497997115844862, -9.133749706136039e-17], 'false': [nan, -9.133749706136039e-17]}
{'': [0.018511925952296518, -5.817143004425741e-17], 'false': [nan, -5.817143004425741e-17], 'false,false': [-6.046285016737941e-17, 5.995204332975846e-17]}
{'': [0.04110053069366506, -4.65236315081018e-17], 'false': [nan, -4.65236315081018e-17], 'false,false': [-8.468677955280264e-17, 1.1102230246251566e-17], 'false,false,false': [nan, 1.1102230246251566e-17]}
{'': [0.030091431657728717, 1.0489223668237675e-16], 'false': [nan, 1.0489223668237675e-16], 'false,false': [nan, 1.0489223668237675e-16]}
{'': [0.04640095181439629, 3.843079700625542e-17], 'false': [nan, 3.843079700625542e-17], 'false,false': [nan, 3.843079700625542e-17]}
{'': [0.03009143165772948, 3.6879380748794125e-17], 'false': [nan, 3.6879380748794125e-17], 'false,false': [nan, 3.6879380748794125e-17], 'false,false,false': [nan, 3.6879380748794125e-17]}
{'': [0.006328857154448783, 2.250452076942885e-18], 'true': [0.006328857154448783, nan], 'false': [7.219184199533037e-17, -8.356517389651716e-18]}
{'': [0.046400951814396185, -6.17988220826948e-17], 'false': [nan, -6.17988220826948e-17], 'false,false': [nan, -6.17988220826948e-17]}
{'': [0.02437500000000015, 4.674623261579606e-17], 'false': [5.0927661680053055e-19, -1.0973134545713756e-17], 'false,false': [nan, -1.0973134545713756e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 75.97625923156738
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 2.23e-07, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.7204271832218144;  // std dev = 0.033, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.7329654791966606;  // std dev = 0.079, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7200603482176379;  // std dev = 0.015, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.125444638528392;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.5141281057982502;  // std dev = 1.699, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | | else return 0.36272372782272916;  // std dev = 1.269, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.2543202959014978;  // std dev = 1.072, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5026824118354568;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.30530755388565256;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.558610113326156;  // std dev = 0.076, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.5718514828758336;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(K, A) )
%   | then return -0.11231637819360671;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.11231637819360622;  // std dev = 6.97e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), tweets(A, F) )
%   | | then if ( follows(D, A), follows(A, E) )
%   | | | then return 0.4287736530810352;  // std dev = 0.082, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.4433692427937381;  // std dev = 0.172, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(E, A), follows(D, A) )
%   | | | then return 0.310396292568544;  // std dev = 0.875, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4325690379957346;  // std dev = 0.178, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then return 0.0923508824354183;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.4247821246417754;  // std dev = 0.034, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.368717294717622;  // std dev = 0.928, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( follows(J, A) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.10159632948783627;  // std dev = 3.48e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.32811093250569445;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.33751889260635615;  // std dev = 0.077, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(D, H), follows(A, I) )
%   | | | then return 0.342834000182471;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3838734953078971;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then if ( tweets(J, K), follows(J, L) )
%   | | | then return 0.3042264862596801;  // std dev = 1.003, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.25557368215694837;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, M), follows(M, N) )
%   | | | then return 0.3191582009701114;  // std dev = 0.065, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.3382778742930637;  // std dev = 0.094, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.0926912761892604;  // std dev = 1.00e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.26182353236313377;  // std dev = 0.086, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.28255014023922864;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.26215268816094955;  // std dev = 0.055, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.07697953592253357;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.05831865143469994;  // std dev = 1.564, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.2681745888466199;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.23115659334127214;  // std dev = 0.958, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.2010456582294297;  // std dev = 1.400, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else return -0.08518475138839678;  // std dev = 6.32e-09, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2206373315028748;  // std dev = 0.211, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.14835508884723703;  // std dev = 0.954, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(E, D), follows(E, A) )
%   | | | then return -0.005408961210065944;  // std dev = 1.334, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19448588747147902;  // std dev = 0.997, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.22266276677616514;  // std dev = 0.081, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21092167258170313;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.2514199375429683;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23922928355288756;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 6.25e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.1801613404052657;  // std dev = 0.062, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.20426355905819019;  // std dev = 0.264, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.23480317578804233;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0063006079338638445;  // std dev = 0.836, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.05692609651551351;  // std dev = 0.327, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.20725152444075742;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11115870735974477;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15378070222128895;  // std dev = 0.043, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.18637108276754943;  // std dev = 0.153, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.06361213578286576;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.12229595165674223;  // std dev = 0.978, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.17904396417765453;  // std dev = 0.132, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15331814147989695;  // std dev = 0.025, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16776015993793839;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18270833470026063;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420314;  // std dev = 0.000, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.13725998744390072;  // std dev = 0.093, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.04269844581296794;  // std dev = 0.952, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return 0.16990922197792357;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1445021094692218;  // std dev = 0.096, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.030779651048340205;  // std dev = 1.247, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.13699152337997958;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.08860351200785785;  // std dev = 0.968, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.15311390759796875;  // std dev = 0.044, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06419184008202584;  // std dev = 7.68e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
Inference time using transfer learning 7.427694797515869
Refined model CLL: -0.085277


******************************************
Best model found
******************************************
Results 

CLL : -0.091298 

AUC ROC : 0.993872 

AUC PR : 0.366603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 75.97625923156738 

Total Inference Time : 9.955418825149536 

Total revision time: 91.01775217056274
Best scored revision CLL: -0.085277


Results 

CLL : -0.091298 

AUC ROC : 0.993872 

AUC PR : 0.366603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 91.05108165740967 

Total Inference Time : 9.955418825149536 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.8181240558624268
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048824;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6844482478692147;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5522110780926884;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.11231637819360679;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | | else return -0.1123163781936063;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4306540218558151;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return -0.10159632948783653;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30637898176163497;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926047;  // std dev = 6.32e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23499585050924574;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19923457245790294;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 5.77e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15176489094079995;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333666;  // std dev = 1.28e-07, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.07324622576333707;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12950480425098784;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15036816720950555;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.83e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
Inference time using transfer learning 2.682832717895508
Parameter learned model CLL:-0.093372 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.403, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 205, 0], 'false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 237, 0], 'false,false,false': [5.27e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 207, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.32e-09, 243, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 263, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.77e-08, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 225, 0], 'false,false': [3.73e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 266, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 126], 'false,true': [1.83e-08, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 16, 0]}]
{'': [0.015380859375004219, -2.3522533489775005e-16], 'false': [-2.38291771139058e-16, -1.1895246692412391e-17], 'false,true': [nan, -1.863008392541726e-16]}
{'': [0.036711147369035683, -6.805964901916668e-17], 'false': [nan, -6.805964901916668e-17]}
{'': [0.015380859374999833, -9.237055564881302e-17], 'false': [nan, -9.237055564881302e-17], 'false,false': [-8.24469419130918e-17, 2.135044278125301e-18]}
{'': [-7.330996480064525e-16, -8.092292268378919e-17], 'false': [nan, -8.092292268378919e-17], 'false,false': [-9.01050570710272e-17, -9.25185853854297e-18], 'false,false,false': [nan, -9.25185853854297e-18]}
{'': [0.022714981070849807, 4.2033135088689054e-17], 'false': [nan, 4.2033135088689054e-17], 'false,false': [nan, 4.2033135088689054e-17]}
{'': [0.029822485207100534, 3.377104257414925e-17], 'false': [nan, 3.377104257414925e-17], 'false,false': [nan, 3.377104257414925e-17]}
{'': [0.022714981070849374, 1.3322676295501878e-17], 'false': [nan, 1.3322676295501878e-17], 'false,false': [nan, 1.3322676295501878e-17], 'false,false,false': [nan, 1.3322676295501878e-17]}
{'': [0.03671114736903431, 5.643633708511212e-17], 'true': [0.03671114736903431, nan], 'false': [7.302800339756585e-17, 9.251858538542971e-19]}
{'': [0.036711147369034365, -2.4207870461751532e-17], 'false': [nan, -2.4207870461751532e-17], 'false,false': [nan, -2.4207870461751532e-17]}
{'': [0.0, 2.7189135296942608e-18], 'false': [1.4544406436137421e-18, 3.469446951953614e-18], 'false,false': [nan, 3.469446951953614e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 63.00602340698242
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.6835844700644362;  // std dev = 1.389, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.5840757499085235;  // std dev = 1.841, 28.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.7325275031817006;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), recursion_accounttype(G, B) )
%   | | | then return 0.7455815941524465;  // std dev = 2.58e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7439321500399393;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.12544463852839177;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.551626363634864;  // std dev = 0.999, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.47193411541139413;  // std dev = 0.933, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.5974717822619782;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5675276065112678;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.24439939672171662;  // std dev = 1.148, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5734993039723213;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.1123163781936063;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.4319568183897733;  // std dev = 0.098, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.33404581674132094;  // std dev = 0.958, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(G, A), tweets(D, H) )
%   | | | then return 0.2326246875059419;  // std dev = 1.266, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4928400172648968;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.4714912542207733;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4365790718959962;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.4317604475170512;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.423962083947545;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.29476293793384506;  // std dev = 1.345, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.34768859951244996;  // std dev = 0.169, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.15523940851495138;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.33182506574517745;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.37352582711269877;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32943210310045257;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.33620466091447404;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, K) )
%   | then return -0.09269127618926054;  // std dev = 4.37e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.0926912761892608;  // std dev = 1.86e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.26918351275224306;  // std dev = 0.081, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.21298415337742058;  // std dev = 0.931, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3088601213988015;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2615596810242239;  // std dev = 0.067, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.19611601119892533;  // std dev = 0.975, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.029471248423626844;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.26116835693227797;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.270341628363308;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839676;  // std dev = 6.11e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.20152933548357838;  // std dev = 0.998, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.10097338182193923;  // std dev = 0.939, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.24297208522841776;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21875141530807465;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.23008118888614276;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1145689284473827;  // std dev = 0.909, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1125832811974326;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10683889070759021;  // std dev = 0.852, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109143;  // std dev = 3.95e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.18530525777860138;  // std dev = 0.034, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.19498475194515347;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.20584867141415228;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.02564256223941816;  // std dev = 1.241, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.17743654805196796;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.23451793129296275;  // std dev = 0.086, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19019692537058847;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333664;  // std dev = 8.64e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1588948790571667;  // std dev = 0.029, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.17198047420920687;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1729299420440163;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16399003120762382;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.16030653869052564;  // std dev = 1.381, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.21107001774917752;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15387750271735368;  // std dev = 0.041, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.17218845354011048;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.14030039509028502;  // std dev = 0.046, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.16873840004408902;  // std dev = 0.221, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.03960689515675344;  // std dev = 0.952, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.15747907805195574;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.06469815786143217;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.15803936493757653;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1385939806157703;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.06070660816282008;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06419184008202611;  // std dev = 4.75e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
Inference time using transfer learning 10.001076936721802
Refined model CLL: -0.091982


******************************************
Best model found
******************************************
Results 

CLL : -0.086174 

AUC ROC : 0.995705 

AUC PR : 0.45151 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 63.00602340698242 

Total Inference Time : 7.7839674949646 

Total revision time: 74.9230694770813
Best scored revision CLL: -0.091982


Results 

CLL : -0.086174 

AUC ROC : 0.995705 

AUC PR : 0.45151 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 74.94888877868652 

Total Inference Time : 7.7839674949646 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.000398635864258
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862286986535548;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283921;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5431949309490629;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360667;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else return -0.1123163781936062;  // std dev = 7.45e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4205669037311815;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.10159632948783656;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 2.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3153272169921804;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926046;  // std dev = 8.23e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24917028689865545;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20318045604203275;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 3.33e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14598954882174292;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then return -0.07324622576333664;  // std dev = 1.22e-07, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.0732462257633371;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15491301461837217;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420308;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12819163281731868;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
Inference time using transfer learning 2.462064743041992
Parameter learned model CLL:-0.087558 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(B, E)'}, {'true': [1.716, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 228, 0], 'false,false': [8.93e-09, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 335, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 211, 0], 'false,false,false': [7.45e-08, 96, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 226, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.58e-08, 101, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.23e-09, 271, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 307, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.33e-08, 306, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)'}, {'true,true': [2.588, 7, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 204, 0], 'false,false': [0.0, 113, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 319, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 211, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 107, 0]}]
{'': [0.018511925952302145, 8.799290845326319e-17], 'false': [-2.1814908554038162e-16, 7.946859544685331e-17], 'false,true': [nan, -2.1814908554038162e-16]}
{'': [0.03566529492455599, -1.0870243345583622e-16], 'false': [nan, -1.0870243345583622e-16]}
{'': [0.02437500000000208, -6.94341435596189e-17], 'false': [nan, -6.94341435596189e-17], 'false,false': [-5.682658135522128e-17, 5.782411586589357e-17]}
{'': [0.012497997115846728, -1.7654922715751725e-17], 'false': [nan, -1.7654922715751725e-17], 'false,false': [-7.859986015045356e-17, 6.5953843047039e-18], 'false,false,false': [nan, 6.5953843047039e-18]}
{'': [0.018511925952296785, 6.718692842750025e-17], 'false': [nan, 6.718692842750025e-17], 'false,false': [nan, 6.718692842750025e-17]}
{'': [0.018511925952296473, 3.6163616437301514e-17], 'false': [nan, 3.6163616437301514e-17], 'false,false': [nan, 3.6163616437301514e-17]}
{'': [0.01851192595229619, 3.6281798190364595e-18], 'false': [nan, 3.6281798190364595e-18], 'false,false': [nan, 3.6281798190364595e-18], 'false,false,false': [nan, 3.6281798190364595e-18]}
{'': [0.041100530693665746, -7.004561669559347e-18], 'true': [0.041100530693665746, nan], 'false': [7.292641436263283e-17, -4.9124912594033475e-18]}
{'': [0.012497997115847141, -6.960645922414775e-17], 'false': [nan, -6.960645922414775e-17], 'false,false': [nan, -6.960645922414775e-17]}
{'': [0.018511925952296185, 5.586027796856134e-17], 'false': [-5.261720495853823e-19, -1.504507837108857e-17], 'false,false': [nan, -1.504507837108857e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;follows(D, A).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(E, A).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true


Refining candidate
***************************
Model training time 38.04978013038635
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.832507909458486;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.7277141524908167;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(J, A) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.5817621932617604;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.7239317776259239;  // std dev = 0.039, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.7379062602281169;  // std dev = 0.066, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6361400788776209;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.125444638528392;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5581294811747406;  // std dev = 0.086, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.4655931916360287;  // std dev = 0.944, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.3713215971531739;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.567467607622088;  // std dev = 0.121, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5143866495383098;  // std dev = 0.964, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.583585607382863;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5857151692089546;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.11231637819360621;  // std dev = 7.21e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4168417763713549;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.41575841935691565;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.4547983652101214;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4282275800948725;  // std dev = 0.066, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.34903697557551544;  // std dev = 0.973, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.10426776434724878;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.3610430445548693;  // std dev = 1.347, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.4435020754682634;  // std dev = 0.090, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.10159632948783662;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.32009464248042485;  // std dev = 0.002, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.3297719931922275;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.33986848695580407;  // std dev = 0.082, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.398880164531154;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.27879004002803603;  // std dev = 0.913, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3239759465774497;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2827590221794183;  // std dev = 1.338, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.33850257950246637;  // std dev = 0.083, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.09269127618926043;  // std dev = 9.22e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25803297165979094;  // std dev = 0.076, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2047987609810648;  // std dev = 0.970, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2692136311366964;  // std dev = 0.108, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.30840048811783827;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.228631200430314;  // std dev = 1.350, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.03529766920379566;  // std dev = 1.107, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2707777229562346;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25692575031053216;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.2025556193819139;  // std dev = 1.012, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return -0.14067580717748807;  // std dev = 1.126, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.06167669524878324;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.11971436748020363;  // std dev = 0.805, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.23030731425021944;  // std dev = 0.121, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.24243999019011248;  // std dev = 0.113, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.22408727275300933;  // std dev = 0.132, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109146;  // std dev = 4.66e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.07877675473109172;  // std dev = 2.08e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.1774364423211197;  // std dev = 0.001, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.18087768112744515;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.18612577921518303;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.21082613226899252;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.2930799370931869;  // std dev = 0.994, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.12467418697241911;  // std dev = 1.232, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20599421469084078;  // std dev = 0.190, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.08613308003079363;  // std dev = 1.260, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else return -0.0732462257633369;  // std dev = 6.45e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.15368368378399289;  // std dev = 0.014, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.021131426054115356;  // std dev = 1.538, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.19254357662975724;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15908338970834587;  // std dev = 0.065, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2276967476210039;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17777242863002307;  // std dev = 0.104, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1596049479479756;  // std dev = 0.116, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1771024288450798;  // std dev = 0.076, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.0924350051066799;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.13854747710583643;  // std dev = 0.098, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.2689176161308515;  // std dev = 1.019, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.11310089711307612;  // std dev = 0.865, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.19599895325880834;  // std dev = 0.110, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1455087974262606;  // std dev = 0.118, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07491954025329507;  // std dev = 0.970, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1543362542741644;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.0641918400820259;  // std dev = 7.15e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
Inference time using transfer learning 4.847514390945435
Refined model CLL: -0.083898


******************************************
Best model found
******************************************
Results 

CLL : -0.08942 

AUC ROC : 0.994221 

AUC PR : 0.397646 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 38.04978013038635 

Total Inference Time : 6.251230955123901 

Total revision time: 49.09167742729187
Best scored revision CLL: -0.083898


Results 

CLL : -0.08942 

AUC ROC : 0.994221 

AUC PR : 0.397646 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 49.117496728897095 

Total Inference Time : 6.251230955123901 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5751407146453857
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7210598861596895;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5336626887294309;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360644;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.11231637819360625;  // std dev = 5.27e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.41646224530367687;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.1015963294878365;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.303815805407339;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0926912761892605;  // std dev = 5.89e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24074524901335953;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18177124852349744;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 4.71e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1595723746572507;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1436990372497386;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420262;  // std dev = 3.84e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12465730159707925;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
Inference time using transfer learning 2.1439874172210693
Parameter learned model CLL:-0.093293 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [0.996, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 200, 0], 'false,false': [7.9e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 252, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 178, 0], 'false,false,false': [5.27e-08, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 184, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 44, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 236, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 228, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.71e-08, 275, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 194, 0], 'false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.84e-09, 236, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 212, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 82, 0]}]
{'': [0.007812015624035403, -9.259002830850726e-17], 'false': [-2.3980817331903383e-16, 6.39789539614497e-17], 'false,true': [nan, -2.3980817331903383e-16]}
{'': [-1.9173375409399528e-15, -8.106390338532889e-17], 'false': [nan, -8.106390338532889e-17]}
{'': [0.022714981070850387, -8.774343259134301e-17], 'false': [nan, -8.774343259134301e-17], 'false,false': [-1.247441600702423e-17, 3.9650822308041306e-17]}
{'': [0.007812015624031905, -7.596262800066861e-17], 'false': [nan, -7.596262800066861e-17], 'false,false': [-8.930054763289303e-17, 1.261617073437678e-18], 'false,false,false': [nan, 1.261617073437678e-18]}
{'': [0.02271498107084949, 3.763467880085276e-17], 'false': [nan, 3.763467880085276e-17], 'false,false': [nan, 3.763467880085276e-17]}
{'': [0.022714981070848947, 3.1164155077197375e-17], 'false': [nan, 3.1164155077197375e-17], 'false,false': [nan, 3.1164155077197375e-17]}
{'': [0.036711147369034636, 8.074349270001138e-18], 'false': [nan, 8.074349270001138e-18], 'false,false': [nan, 8.074349270001138e-18], 'false,false,false': [nan, 8.074349270001138e-18]}
{'': [0.02982248520710052, 3.4638958368304884e-17], 'true': [0.02982248520710052, nan], 'false': [6.752902933287034e-17, -9.912705577010326e-19]}
{'': [0.022714981070849172, 1.4113004550319786e-17], 'false': [nan, 1.4113004550319786e-17], 'false,false': [nan, 1.4113004550319786e-17]}
{'': [0.02271498107084903, 4.002844918716551e-17], 'false': [-1.047380211910525e-18, -1.1508409401602232e-17], 'false,false': [nan, -1.1508409401602232e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 40.758341789245605
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(D, B) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.8278459047964819;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048818;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.6965317789975047;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7222348822893706;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7314495500610633;  // std dev = 0.084, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.37103010409811404;  // std dev = 1.795, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7316076402062835;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.6255775466804623;  // std dev = 0.955, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F) )
%   | | | then return 0.5522860967145273;  // std dev = 0.933, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.40993117183807515;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.5639212523957563;  // std dev = 0.083, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.5798148202100027;  // std dev = 0.181, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( tweets(A, G) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.11231637819360615;  // std dev = 3.33e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.3695033574876871;  // std dev = 1.638, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | | else return 0.44513224250966954;  // std dev = 0.212, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.43083967373620524;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1612149391936404;  // std dev = 1.214, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5041856795019666;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.43419797742469407;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4121017816185409;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4233311956318782;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3350880374962135;  // std dev = 0.071, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.2577449213060231;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.3472598176963775;  // std dev = 0.182, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.4116034384798226;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.0331403299707943;  // std dev = 1.181, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.20999558931116327;  // std dev = 0.938, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.34133657545264434;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.09269127618926054;  // std dev = 6.59e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), tweets(E, F) )
%   | | | then return 0.2677864038029848;  // std dev = 0.063, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.3012913747306717;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.36533381932520337;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.1344403001270675;  // std dev = 1.343, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.3168548396440511;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.27118871846087156;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.24960696846662023;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, A), tweets(D, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.19847142718034005;  // std dev = 1.400, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.12269386189810233;  // std dev = 1.349, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.22091467023251066;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.4264385353543559;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2857814085259931;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.22807077505455758;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21084726812577806;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109146;  // std dev = 3.95e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16358005371981396;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.1917784577443011;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( recursion_accounttype(E, B), follows(E, G) )
%   | | | then return 0.24670715663403037;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19818728716202919;  // std dev = 0.083, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.19920892946743982;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1770155702480193;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.09795273843689804;  // std dev = 0.967, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.027489289599451787;  // std dev = 1.532, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.07324622576333682;  // std dev = 7.15e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(D, B) )
%   | | | then return 0.11568120871654823;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return -0.027946193959447942;  // std dev = 2.014, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.10332918462582256;  // std dev = 0.944, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.17451801695573058;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.07763809436203678;  // std dev = 0.953, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1662237989261606;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17272127778665003;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18236799889475477;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.1482361314601399;  // std dev = 0.045, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.16936728248281865;  // std dev = 0.038, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10025360997287379;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.15486505715750304;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1689255781369892;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.037052323945591915;  // std dev = 0.951, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.05063004526630729;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.06419184008202616;  // std dev = 9.31e-10, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
Inference time using transfer learning 8.894860982894897
Refined model CLL: -0.091788


******************************************
Best model found
******************************************
Results 

CLL : -0.086055 

AUC ROC : 0.995164 

AUC PR : 0.390356 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.758341789245605 

Total Inference Time : 7.760836362838745 

Total revision time: 51.914973735809326
Best scored revision CLL: -0.091788


Results 

CLL : -0.086055 

AUC ROC : 0.995164 

AUC PR : 0.390356 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.93251132965088 

Total Inference Time : 7.760836362838745 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.850389003753662
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7006985383396418;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839208;  // std dev = 0.000, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5612655633264167;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360674;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else return -0.11231637819360621;  // std dev = 6.99e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4032347114043704;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783615;  // std dev = 5.58e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3271540076725802;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926044;  // std dev = 8.93e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23407945465151325;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20322256288942894;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.01e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17630700576094246;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12637526610991065;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420315;  // std dev = 0.000, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12186172452685662;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
Inference time using transfer learning 1.8515024185180664
Parameter learned model CLL:-0.08751 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [2.201, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 246, 0], 'false,false': [8.33e-09, 81, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 325, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 225, 0], 'false,false,false': [6.99e-08, 90, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 214, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.58e-08, 80, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.93e-09, 290, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 299, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.01e-07, 313, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 227, 0], 'false,false': [0.0, 73, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 338, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 206, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 86, 0]}]
{'': [0.030091431657735174, 9.778111042570187e-17], 'false': [-1.408087738548979e-16, 7.401486830834377e-17], 'false,true': [nan, -1.408087738548979e-16]}
{'': [0.024374999999998082, -9.838284033601387e-17], 'false': [nan, -9.838284033601387e-17]}
{'': [0.006328857154448381, -5.357266658508692e-17], 'false': [nan, -5.357266658508692e-17], 'false,false': [-7.105427357601002e-17, 5.427757009278543e-17]}
{'': [0.02437499999999959, -5.437827059388522e-17], 'false': [nan, -5.437827059388522e-17], 'false,false': [-8.508251216753536e-17, 3.8857805861880476e-17], 'false,false,false': [nan, 3.8857805861880476e-17]}
{'': [0.006328857154447951, 7.962978935242502e-17], 'false': [nan, 7.962978935242502e-17], 'false,false': [nan, 7.962978935242502e-17]}
{'': [0.030091431657729227, 3.713120483696176e-17], 'false': [nan, 3.713120483696176e-17], 'false,false': [nan, 3.713120483696176e-17]}
{'': [0.018511925952296365, 3.263275343946147e-17], 'false': [nan, 3.263275343946147e-17], 'false,false': [nan, 3.263275343946147e-17], 'false,false,false': [nan, 3.263275343946147e-17]}
{'': [0.01249799711584709, 5.921189464667502e-18], 'true': [0.01249799711584709, nan], 'false': [7.140641479967967e-17, -5.3229871043671886e-18]}
{'': [0.03566529492455417, -8.408789772308878e-17], 'false': [nan, -8.408789772308878e-17], 'false,false': [nan, -8.408789772308878e-17]}
{'': [0.024374999999999925, 3.7260909730570323e-17], 'false': [-4.311545726699637e-18, -1.0973134545713756e-17], 'false,false': [nan, -1.0973134545713756e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 51.4033100605011
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.8278459047964816;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return 0.7956489350995123;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( tweets(A, K) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.7255486463834697;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.736474870388548;  // std dev = 0.084, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.723786398761901;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.6604846179512417;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.3985798560464797;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.1254446385283921;  // std dev = 0.000, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5578718193155853;  // std dev = 0.023, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.4889474547507863;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.2458865959880727;  // std dev = 1.169, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.5262376823901265;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.6184306403354634;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(J, A) )
%   | | | then return 0.5753712019958602;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.566343316671026;  // std dev = 0.073, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( tweets(A, K) )
%   | then return -0.11231637819360674;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.11231637819360624;  // std dev = 6.72e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.418957020400275;  // std dev = 0.019, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.4297326493211472;  // std dev = 0.078, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.47471947476421916;  // std dev = 0.142, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4392547676738971;  // std dev = 0.109, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.4205359504225319;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.09935705123351805;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.47089803131788327;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.42321592999507895;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.10159632948783653;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3197273758725532;  // std dev = 0.002, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.324798325466621;  // std dev = 0.071, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.3494117327908123;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3671050192254086;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.11576616818798317;  // std dev = 1.215, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.36281195183330284;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.32572505127465706;  // std dev = 0.109, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.2594353484536002;  // std dev = 0.954, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.09269127618926044;  // std dev = 8.54e-09, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1979720410844524;  // std dev = 1.584, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.2658432143085257;  // std dev = 0.108, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26621706221472397;  // std dev = 0.082, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.3246908632073372;  // std dev = 0.143, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), follows(G, H) )
%   | | | then return 0.28404897862378486;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19564742396509485;  // std dev = 1.283, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2606378845010988;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.06365227421691094;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.21889855903645186;  // std dev = 0.067, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.18371223907052886;  // std dev = 0.977, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(D, A), follows(D, E) )
%   | | | then return -0.0776246574571291;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18343286436228928;  // std dev = 0.965, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2249141893028184;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22107985420620774;  // std dev = 0.049, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2216460013237278;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2620805233427191;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 2.28e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.1833250451657894;  // std dev = 0.037, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.19127065788997746;  // std dev = 0.167, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.24349118825543892;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1846970436565738;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.18681220727562994;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.02118160086335157;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.19248142752843886;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2242204580384271;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333699;  // std dev = 5.43e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(E, A) )
%   | | | then return 0.16507979772426673;  // std dev = 0.120, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.15859397375435358;  // std dev = 0.063, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.18626127113946486;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1581860180096839;  // std dev = 0.032, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.23644633227352516;  // std dev = 1.090, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15768577746627374;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.18556693767983345;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.0684269778442031;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(F, B) )
%   | | | then return 0.13890233538440042;  // std dev = 0.044, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.07799500245230821;  // std dev = 1.347, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else if ( recursion_accounttype(D, B), follows(A, G) )
%   | | | then return 0.1358492535974888;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15519366031658596;  // std dev = 0.141, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.14472089834320676;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.7758388253498673;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14401439750577652;  // std dev = 0.027, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.058328603179950665;  // std dev = 1.366, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else return -0.06419184008202587;  // std dev = 7.33e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
Inference time using transfer learning 7.033430576324463
Refined model CLL: -0.084579


******************************************
Best model found
******************************************
Results 

CLL : -0.090281 

AUC ROC : 0.995428 

AUC PR : 0.489395 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.4033100605011 

Total Inference Time : 9.603877782821655 

Total revision time: 65.2341468334198
Best scored revision CLL: -0.084579


Results 

CLL : -0.090281 

AUC ROC : 0.995428 

AUC PR : 0.489395 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 65.25168442726135 

Total Inference Time : 9.603877782821655 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.5346229076385498
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7100164700982684;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283919;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5652762617331021;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360667;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else return -0.11231637819360633;  // std dev = 2.11e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.36520282175088586;  // std dev = 2.743, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783655;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783623;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.323347769233458;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926049;  // std dev = 8.43e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23250263565291807;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1891135288525704;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109144;  // std dev = 9.31e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15761868856350694;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333663;  // std dev = 1.24e-07, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16427711133755524;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420278;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10452837848499986;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
Inference time using transfer learning 2.236650228500366
Parameter learned model CLL:-0.092842 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.969, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 151, 0], 'false,false': [7.9e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 256, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.0, 0, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 210, 0], 'false,false,false': [2.11e-08, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.743, 8, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 217, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.33e-08, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.43e-09, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 296, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [9.31e-08, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.193, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.24e-07, 207, 0], 'false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 257, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 194, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
{'': [0.02982248520710475, -2.4028015218940584e-16], 'false': [-1.1763952578809607e-16, 5.947623346206196e-17], 'false,true': [nan, -1.1763952578809607e-16]}
{'': [0.015380859375001776, -7.28583859910259e-17], 'false': [nan, -7.28583859910259e-17]}
{'': [-1.2970224541652622e-15, -9.983400841590555e-17], 'false': [nan, -9.983400841590555e-17], 'false,false': [-5.2867763077388404e-17, 9.25185853854297e-18]}
{'': [0.05613722432613135, -6.040919398695704e-17], 'false': [nan, -6.040919398695704e-17], 'false,false': [-8.185976218434334e-17, 2.0185873175002847e-17], 'false,false,false': [nan, 2.0185873175002847e-17]}
{'': [0.015380859375000652, 7.205975857944412e-17], 'false': [nan, 7.205975857944412e-17], 'false,false': [nan, 7.205975857944412e-17]}
{'': [0.03671114736903468, 3.750753461571475e-17], 'false': [nan, 3.750753461571475e-17], 'false,false': [nan, 3.750753461571475e-17]}
{'': [0.036711147369034365, 3.4638958368304884e-17], 'false': [nan, 3.4638958368304884e-17], 'false,false': [nan, 3.4638958368304884e-17], 'false,false,false': [nan, 3.4638958368304884e-17]}
{'': [0.03671114736903455, 1.9884591485823698e-17], 'true': [0.03671114736903455, nan], 'false': [7.401486830834377e-17, -1.820037745287142e-18]}
{'': [0.007812015624031133, -5.183920737549369e-18], 'false': [nan, -5.183920737549369e-18], 'false,false': [nan, -5.183920737549369e-18]}
{'': [0.043388429752066075, 2.67523620391604e-18], 'false': [-3.433679457603577e-18, -4.54182146437564e-18], 'false,false': [nan, -4.54182146437564e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 89.40022611618042
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, H) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.722911876816397;  // std dev = 0.016, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.7373269569258903;  // std dev = 0.138, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839194;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.5592895930750886;  // std dev = 0.016, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5547045014391621;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5560623102786544;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.6691900607957129;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5712085885556867;  // std dev = 0.139, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( tweets(A, J) )
%   | then return -0.11231637819360646;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return -0.11231637819360626;  // std dev = 5.74e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4196797482667753;  // std dev = 0.021, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.487004192683268;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.4178906045388659;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4110504203347361;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3708696483004162;  // std dev = 0.995, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.08418025082497664;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.2953755734377019;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.41752252798038453;  // std dev = 0.000156, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1015963294878366;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.32281812678947214;  // std dev = 0.017, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.2289315628441546;  // std dev = 1.296, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.33408061241305054;  // std dev = 0.107, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3162996841516555;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3439889447813918;  // std dev = 0.100, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3958545299025993;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.38600743860269154;  // std dev = 0.069, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.320717911092727;  // std dev = 0.000140, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.09269127618926049;  // std dev = 6.32e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F), follows(G, D) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.260833116137176;  // std dev = 0.108, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.21292100791970564;  // std dev = 0.967, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26973303289588085;  // std dev = 0.090, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.31468407661684017;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.20623866551237316;  // std dev = 1.028, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.295534262520126;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25516939021558777;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.59e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.08518475138839679;  // std dev = 9.31e-10, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1796370367090493;  // std dev = 1.382, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return -0.12071907875579084;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.22488604573833929;  // std dev = 0.079, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.24710030075102266;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.23679392227178261;  // std dev = 0.183, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.09504090721269703;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.040244299232490066;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.0778654582288655;  // std dev = 0.897, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109146;  // std dev = 4.06e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), tweets(D, G) )
%   | | | then return 0.18286928390757937;  // std dev = 0.036, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.19161971634879083;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, D), follows(H, A) )
%   | | | then return -0.14703050368768064;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19764364294077888;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.21886153317708745;  // std dev = 0.132, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.13792016324320253;  // std dev = 0.943, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(K, A), follows(A, K) )
%   | | | then return 0.20752496536297854;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.02812052352778188;  // std dev = 1.264, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07324622576333675;  // std dev = 7.74e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(D, F) )
%   | | | then return 0.1569956434972863;  // std dev = 0.031, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.16315076432635764;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, D), tweets(D, G) )
%   | | | then return 0.19651828304776292;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15435669872187313;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), follows(I, A) )
%   | | | then return -0.19530548028132946;  // std dev = 1.073, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.11151535215095984;  // std dev = 1.402, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.154319996085166;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19875585113680824;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420267;  // std dev = 3.09e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), follows(G, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(G, B) )
%   | | | then return 0.119346431464664;  // std dev = 1.400, 81.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=79 */
%   | | | else return -0.05562262885564515;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.19570609571745856;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.137921610790847;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.154228291506155;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18863538207534303;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15678011082230045;  // std dev = 0.088, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
Inference time using transfer learning 11.140048503875732
Refined model CLL: -0.091241


******************************************
Best model found
******************************************
Results 

CLL : -0.085542 

AUC ROC : 0.995913 

AUC PR : 0.482072 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 89.40022611618042 

Total Inference Time : 8.111430883407593 

Total revision time: 100.80962443351746
Best scored revision CLL: -0.091241


Results 

CLL : -0.085542 

AUC ROC : 0.995913 

AUC PR : 0.482072 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 100.82800936698914 

Total Inference Time : 8.111430883407593 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.7386233806610107
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(B, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7118331756534013;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5384111866466765;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | | else return -0.11231637819360626;  // std dev = 4.47e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4107541365422872;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then return -0.10159632948783658;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783613;  // std dev = 5.58e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3081110918721746;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926043;  // std dev = 8.54e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24962967551272053;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17942866800971027;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109143;  // std dev = 1.01e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16183768303781088;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.26e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15007261176130815;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420282;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1425340617021015;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202625;  // std dev = 1.49e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
Inference time using transfer learning 1.945500373840332
Parameter learned model CLL:-0.087555 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'tweets(D, E), recursion_accounttype(B, E)'}, {'true': [1.975, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 212, 0], 'false,false': [8.93e-09, 89, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 301, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 234, 0], 'false,false,false': [4.47e-08, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 243, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.58e-08, 79, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.54e-09, 283, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 295, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'recursion_accounttype(F, B)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.01e-07, 322, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)'}, {'true,true': [2.201, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 232, 0], 'false,false': [0.0, 84, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.08, 1, 156], 'false,true': [1.49e-08, 222, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 80, 0]}]
{'': [0.024375000000006076, 3.540910643322758e-17], 'false': [-2.388026883155997e-16, 7.734137924355023e-17], 'false,true': [nan, -2.388026883155997e-16]}
{'': [0.012497997115846392, -9.442428382194023e-17], 'false': [nan, -9.442428382194023e-17]}
{'': [0.0243750000000027, -9.270549161853159e-17], 'false': [nan, -9.270549161853159e-17], 'false,false': [-8.160613685278929e-17, 3.172065784643304e-17]}
{'': [0.01851192595229636, -3.172065784643304e-17], 'false': [nan, -3.172065784643304e-17], 'false,false': [-7.310110450206792e-17, 3.934967682215745e-17], 'false,false,false': [nan, 3.934967682215745e-17]}
{'': [0.024374999999999925, 7.375333167121181e-17], 'false': [nan, 7.375333167121181e-17], 'false,false': [nan, 7.375333167121181e-17]}
{'': [0.018511925952295668, 3.763467880085276e-17], 'false': [nan, 3.763467880085276e-17], 'false,false': [nan, 3.763467880085276e-17]}
{'': [0.04110053069366559, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17], 'false,false,false': [nan, 3.172065784643304e-17]}
{'': [0.03009143165772922, 2.108018401187006e-18], 'true': [0.03009143165772922, nan], 'false': [6.795330581757423e-17, -6.6084703846735505e-18]}
{'': [0.01851192595229608, -2.1785508407738922e-17], 'false': [nan, -2.1785508407738922e-17], 'false,false': [nan, -2.1785508407738922e-17]}
{'': [0.006328857154448387, 4.485006920671162e-17], 'false': [1.0002009230857266e-18, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
0;false;tweets(A, D).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;tweets(A, E).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 54.945677518844604
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995104;  // std dev = 7.44e-07, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else if ( follows(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, G) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.7194734122109541;  // std dev = 1.88e-07, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3861400788776213;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.7334901112694634;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.556679438858541;  // std dev = 0.079, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.4403780778522349;  // std dev = 0.860, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5909633829007741;  // std dev = 0.119, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5601378435347005;  // std dev = 0.086, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462848;  // std dev = 5.96e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2754285226446856;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5126894837630688;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.11231637819360672;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.4172188621049623;  // std dev = 0.000434, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.37096762717939585;  // std dev = 1.329, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3779146201973044;  // std dev = 0.904, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.23873913929343152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.43974718198524204;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5158478925928395;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.388074331134106;  // std dev = 0.977, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.4245055036531468;  // std dev = 0.084, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.1015963294878366;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3053401487916239;  // std dev = 0.988, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.33212645744122454;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.2678262255298061;  // std dev = 0.890, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.01414280282428356;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), follows(J, A) )
%   | | | then return 0.3402325207252333;  // std dev = 0.069, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.32698806851831214;  // std dev = 0.090, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.3779331687031075;  // std dev = 0.134, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34135956976681575;  // std dev = 0.119, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.09269127618926044;  // std dev = 8.01e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.26280481326165295;  // std dev = 0.120, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | | else return 0.2834360250953095;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25278378258072665;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.13001022803010115;  // std dev = 0.330, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2791421641157165;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21523032870750528;  // std dev = 1.237, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.08518475138839678;  // std dev = 5.02e-09, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return -0.08518475138839678;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.08518475138839678;  // std dev = 2.36e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, D) )
%   | | | then return 0.21445013581554215;  // std dev = 0.078, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.18484912043896742;  // std dev = 0.908, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.04803669799173799;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.23099399601056406;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2436314191829576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(J, A), tweets(J, K) )
%   | | | then return 0.23313575786796192;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22643611569658084;  // std dev = 0.092, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.1791570155100583;  // std dev = 0.038, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.08519267436520049;  // std dev = 1.865, 38.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=34 */
%   | | else return 0.04532202119270967;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.18372228013127825;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.19710358938896444;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.21741270933586088;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19134434156936228;  // std dev = 0.085, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333663;  // std dev = 8.69e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.07369680863895153;  // std dev = 1.349, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.15856851994725918;  // std dev = 0.095, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return -0.5769951431467485;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.033200786787475706;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.012656728686251117;  // std dev = 1.302, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.17272566867232497;  // std dev = 0.059, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(J, A), tweets(J, K) )
%   | | | then return 0.19419042585686697;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1647567060759933;  // std dev = 0.057, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.06842697784420289;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), recursion_accounttype(E, B) )
%   | | | then return 0.13822712158401723;  // std dev = 0.043, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.08980288007728894;  // std dev = 1.573, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else return 0.023195290491622944;  // std dev = 0.874, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.1399475431792534;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14998793980462585;  // std dev = 0.092, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.14463902307084184;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.13757554172566183;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202625;  // std dev = 2.58e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
Inference time using transfer learning 6.816178798675537
Refined model CLL: -0.084855


******************************************
Best model found
******************************************
Results 

CLL : -0.091101 

AUC ROC : 0.993347 

AUC PR : 0.357203 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.945677518844604 

Total Inference Time : 8.151190757751465 

Total revision time: 67.11858582496643
Best scored revision CLL: -0.084855


Results 

CLL : -0.091101 

AUC ROC : 0.993347 

AUC PR : 0.357203 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 67.13697075843811 

Total Inference Time : 8.151190757751465 

